{"version":3,"file":"TrashCanList.stories-5dda7229.js","sources":["../../src/synapse-queries/trash/useTrashCan.ts","../../src/components/trash/TrashCanList.tsx"],"sourcesContent":["import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  PaginatedResults,\n  TrashedEntity,\n} from '@sage-bionetworks/synapse-types'\n\nexport function useGetItemsInTrashCanInfinite(\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<TrashedEntity>,\n    SynapseClientError\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useInfiniteQuery<PaginatedResults<TrashedEntity>, SynapseClientError>(\n    keyFactory.getTrashCanItemsQueryKey(),\n    context => {\n      return SynapseClient.getItemsInTrashCan(accessToken, context.pageParam)\n    },\n    {\n      ...options,\n      getNextPageParam: (page, pages) => {\n        const numberOfFetchedResults = pages.flatMap(\n          page => page.results,\n        ).length\n        if (page.totalNumberOfResults! > numberOfFetchedResults) {\n          return numberOfFetchedResults\n        } else {\n          return undefined\n        }\n      },\n    },\n  )\n}\n\nexport function useRestoreEntities(\n  options?: UseMutationOptions<\n    PromiseSettledResult<void>[],\n    SynapseClientError,\n    string | Set<string>\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<\n    PromiseSettledResult<void>[],\n    SynapseClientError,\n    string | Set<string>\n  >(\n    (ids: string | Set<string>) => {\n      if (typeof ids === 'string') {\n        ids = new Set([ids])\n      }\n      const promises = Array.from(ids).map(id => {\n        return SynapseClient.restoreFromTrashCan(id, accessToken)\n      })\n      return Promise.allSettled(promises)\n    },\n    {\n      ...options,\n      onSuccess: async (_, ids, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getTrashCanItemsQueryKey(),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(_, ids, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function usePurgeEntities(\n  options?: UseMutationOptions<\n    PromiseSettledResult<void>[],\n    SynapseClientError,\n    string | Set<string>\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<\n    PromiseSettledResult<void>[],\n    SynapseClientError,\n    string | Set<string>\n  >(\n    (ids: string | Set<string>) => {\n      if (typeof ids === 'string') {\n        ids = new Set([ids])\n      }\n      const promises = Array.from(ids).map(id => {\n        return SynapseClient.purgeFromTrashCan(id, accessToken)\n      })\n      return Promise.allSettled(promises)\n    },\n    {\n      ...options,\n      onSuccess: async (_, ids, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getTrashCanItemsQueryKey(),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(_, ids, ctx)\n        }\n      },\n    },\n  )\n}\n","import dayjs from 'dayjs'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Table } from 'react-bootstrap'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport { useGetEntity } from '../../synapse-queries'\nimport {\n  useGetItemsInTrashCanInfinite,\n  usePurgeEntities,\n  useRestoreEntities,\n} from '../../synapse-queries/trash/useTrashCan'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { TrashedEntity } from '@sage-bionetworks/synapse-types'\nimport { Alert, Button, Typography } from '@mui/material'\nimport { EntityLink } from '../EntityLink'\nimport { BlockingLoader, SynapseSpinner } from '../LoadingScreen'\nimport WarningDialog from '../SynapseForm/WarningDialog'\nimport { Checkbox } from '../widgets/Checkbox'\n\ntype TrashCanListItemProps = {\n  item: TrashedEntity\n  isSelected: boolean\n  setIsSelected: (isSelected: boolean) => void\n  onRestore: () => void\n}\n\nfunction TrashCanListItem(props: TrashCanListItemProps) {\n  const { item, isSelected, setIsSelected, onRestore } = props\n  const { data: parentEntity } = useGetEntity(item.originalParentId)\n  return (\n    <tr>\n      <td>\n        <Checkbox\n          label={`Select ${item.entityId}`}\n          hideLabel={true}\n          checked={isSelected}\n          onChange={setIsSelected}\n        />\n      </td>\n      <td>{item.entityId}</td>\n      <td>{item.entityName}</td>\n      {/* <td>TypePlaceholder</td> */}\n      <td>\n        <>\n          {parentEntity && <EntityLink entity={parentEntity} />} (\n          {item.originalParentId})\n        </>\n      </td>\n      <td>{formatDate(dayjs(item.deletedOn))}</td>\n      <td>\n        <Button size=\"small\" variant=\"outlined\" onClick={onRestore}>\n          Restore\n        </Button>\n      </td>\n    </tr>\n  )\n}\n\n/**\n * Convert an array of Promise results to an array of errors\n */\nfunction toSynapseClientErrorList(\n  results: PromiseSettledResult<void>[],\n): SynapseClientError[] {\n  return results\n    .filter(\n      (result): result is PromiseRejectedResult => result.status === 'rejected',\n    )\n    .map(result => result.reason as SynapseClientError)\n}\n\nexport function TrashCanList() {\n  const isMounted = useRef(true)\n  const [selected, setSelected] = useState<Set<string>>(new Set())\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false)\n  const [errors, setErrors] = useState<SynapseClientError[]>([])\n\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  })\n\n  /**\n   * When a mutation operation settles, update the list of errors and clear the selected set\n   */\n  function onMutateSettled(\n    results?: PromiseSettledResult<void>[],\n    error?: SynapseClientError | null,\n  ) {\n    if (isMounted.current) {\n      if (results) {\n        setErrors(toSynapseClientErrorList(results))\n      } else if (error) {\n        setErrors([error])\n      }\n      setSelected(new Set())\n    }\n  }\n\n  const { mutate: restore, isLoading: isLoadingRestore } = useRestoreEntities({\n    onSettled: onMutateSettled,\n  })\n  const { mutate: purge, isLoading: isLoadingPurge } = usePurgeEntities({\n    onSettled: onMutateSettled,\n  })\n\n  const isMutating = isLoadingRestore || isLoadingPurge\n\n  const { data, isLoading, hasNextPage, fetchNextPage, isFetchingNextPage } =\n    useGetItemsInTrashCanInfinite({\n      useErrorBoundary: true,\n    })\n\n  const items = data?.pages.flatMap(page => page.results) ?? []\n\n  const isAllSelected = selected.size === items.length\n\n  const onSelectAll = () => {\n    if (isAllSelected) {\n      setSelected(new Set())\n    } else {\n      setSelected(new Set(items.map(item => item.entityId)))\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport\">\n      <BlockingLoader\n        show={isMutating}\n        headlineText={isLoadingPurge ? 'Deleting...' : 'Restoring...'}\n      />\n      <Typography variant=\"body1\">\n        The trash can contains items that were recently deleted. You can recover\n        deleted items in the trash can by clicking &quot;Restore&quot;. Items\n        will remain in the trash can for 30 days before being automatically\n        purged.\n      </Typography>\n      <WarningDialog\n        title=\"Delete selected items from your Trash?\"\n        content={\n          <Typography variant=\"body1\">\n            You can&apos;t undo this action.\n          </Typography>\n        }\n        confirmButtonText=\"Delete\"\n        confirmButtonColor=\"error\"\n        onConfirm={() => {\n          purge(selected)\n          setShowDeleteConfirmation(false)\n        }}\n        onCancel={() => {\n          setShowDeleteConfirmation(false)\n        }}\n        open={showDeleteConfirmation}\n      />\n      {isLoading && <SynapseSpinner />}\n      {!isLoading && items.length === 0 && (\n        <Typography variant=\"body1\">Trash Can is currently empty.</Typography>\n      )}\n      {!isLoading && items.length > 0 && (\n        <>\n          <Table striped borderless bordered={false}>\n            <thead>\n              <tr>\n                <th>\n                  <Checkbox\n                    label=\"Select All\"\n                    hideLabel={true}\n                    checked={isAllSelected}\n                    onChange={onSelectAll}\n                  />\n                </th>\n                <th>ID</th>\n                <th>Name</th>\n                {/* <th>TypePlaceholder</th> */}\n                <th>Location</th>\n                <th>Deleted On</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {items.map(item => (\n                <TrashCanListItem\n                  key={item.entityId}\n                  item={item}\n                  isSelected={selected.has(item.entityId)}\n                  setIsSelected={isSelected => {\n                    setSelected(selected => {\n                      if (isSelected) {\n                        selected.add(item.entityId)\n                      } else {\n                        selected.delete(item.entityId)\n                      }\n                      return new Set(selected)\n                    })\n                  }}\n                  onRestore={() => {\n                    restore(item.entityId)\n                    selected.delete(item.entityId)\n                  }}\n                />\n              ))}\n            </tbody>\n          </Table>\n          {errors.length > 0 && (\n            <Alert severity={'error'} sx={{ mb: 1 }}>\n              The following errors were encountered:\n              <ul style={{ marginBottom: 0 }}>\n                {errors.map(error => (\n                  <li key={error.message}>{error.message}</li>\n                ))}\n              </ul>\n            </Alert>\n          )}\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'flex-end',\n              gap: '10px',\n            }}\n          >\n            {hasNextPage && (\n              <Button\n                variant=\"contained\"\n                disabled={isFetchingNextPage}\n                onClick={() => {\n                  fetchNextPage()\n                }}\n              >\n                Load More\n              </Button>\n            )}\n            <div style={{ margin: 'auto' }} />\n            <Button\n              variant=\"contained\"\n              color=\"error\"\n              disabled={selected.size === 0}\n              onClick={() => {\n                setShowDeleteConfirmation(true)\n              }}\n            >\n              Delete Selected\n            </Button>\n            <Button\n              variant=\"outlined\"\n              disabled={selected.size === 0}\n              onClick={() => {\n                restore(selected)\n              }}\n            >\n              Restore Selected\n            </Button>\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n"],"names":["useGetItemsInTrashCanInfinite","options","accessToken","keyFactory","useSynapseContext","useInfiniteQuery","context","SynapseClient","page","pages","numberOfFetchedResults","useRestoreEntities","queryClient","useQueryClient","useMutation","ids","promises","id","_","ctx","usePurgeEntities","TrashCanListItem","props","item","isSelected","setIsSelected","onRestore","parentEntity","useGetEntity","jsx","Checkbox","jsxs","Fragment","EntityLink","formatDate","dayjs","Button","toSynapseClientErrorList","results","result","TrashCanList","isMounted","useRef","selected","setSelected","useState","showDeleteConfirmation","setShowDeleteConfirmation","errors","setErrors","useEffect","onMutateSettled","error","restore","isLoadingRestore","purge","isLoadingPurge","isMutating","data","isLoading","hasNextPage","fetchNextPage","isFetchingNextPage","items","isAllSelected","onSelectAll","BlockingLoader","Typography","WarningDialog","SynapseSpinner","Table","Alert"],"mappings":"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"}