{"version":3,"file":"index-3c7bb87a.js","sources":["../../src/components/ChallengeDataDownload/Renderers.tsx","../../src/components/ChallengeDataDownload/ChallengeDataTable.tsx","../../src/components/ChallengeDataDownload/ChallengeEntityChildrenDetails.tsx","../../src/components/ChallengeDataDownload/ChallengeDataDownload.tsx"],"sourcesContent":["import React from 'react'\nimport { CellRendererProps } from './types'\nimport { calculateFriendlyFileSize } from '../../utils/functions/calculateFriendlyFileSize'\nimport { EntityIdAndVersionNumber } from '../EntityFinder/details/view/DetailsViewTableRenderers'\nimport { Skeleton } from '@mui/material'\nimport { useGetEntityBundle } from '../../synapse-queries'\nimport { FileHandle } from '@sage-bionetworks/synapse-types'\nimport DirectDownload from '../DirectDownload'\n\ntype FileHandleWithPreview = FileHandle & {\n  isPreview?: boolean\n}\n\nexport function SizeRenderer<T extends EntityIdAndVersionNumber>(\n  props: CellRendererProps<T>,\n) {\n  const { data: bundle, isLoading } = useGetEntityBundle(\n    props.rowData.entityId,\n    props.rowData.versionNumber,\n  )\n\n  if (isLoading) {\n    return <Skeleton width={200} />\n  }\n  const file = bundle?.fileHandles.find(\n    (file: FileHandleWithPreview) => file.isPreview !== true,\n  )\n  const friendlySize = file?.contentSize\n    ? calculateFriendlyFileSize(file?.contentSize)\n    : ''\n  return <span>{friendlySize}</span>\n}\n\nexport function DownloadRenderer<T extends EntityIdAndVersionNumber>(\n  props: CellRendererProps<T>,\n) {\n  return (\n    <DirectDownload\n      associatedObjectId={props.rowData.entityId}\n      stopPropagation={true}\n    ></DirectDownload>\n  )\n}\n","import BaseTable, {\n  AutoResizer,\n  Column,\n  SortOrder,\n} from '@sage-bionetworks/react-base-table'\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useQueryClient } from 'react-query'\nimport { EntityFinderHeader } from '../EntityFinder/EntityFinderHeader'\nimport {\n  Direction,\n  EntityHeader,\n  SortBy,\n} from '@sage-bionetworks/synapse-types'\nimport { useSynapseContext } from '../../utils'\nimport {\n  getEntityTypeFromHeader,\n  isContainerType,\n  isVersionableEntityType,\n} from '../../utils/functions/EntityTypeUtils'\nimport { NO_VERSION_NUMBER } from '../EntityFinder/EntityFinder'\nimport { VersionSelectionType } from '../EntityFinder/VersionSelectionType'\nimport { Checkbox } from '../widgets/Checkbox'\nimport {\n  CellRendererProps,\n  CustomSortIndicator,\n  DetailsViewCheckboxRenderer,\n  EmptyRenderer,\n  EntityIdAndVersionNumber,\n  LoadingRenderer,\n  ModifiedOnRenderer,\n  TypeIconRenderer,\n} from '../EntityFinder/details/view/DetailsViewTableRenderers'\nimport { BlockingLoader } from '../LoadingScreen'\nimport { getEntityVersions } from '../../synapse-client'\nimport { DownloadRenderer, SizeRenderer } from './Renderers'\nimport {\n  DetailsViewProps,\n  EntityFinderTableViewRowData,\n} from '../EntityFinder/details/view/DetailsView'\n\nconst MIN_TABLE_WIDTH = 1200\nconst ROW_HEIGHT = 46\n\n/**\n * Displays a list of entities in a table.\n *\n * If the list of entities is paginated, the `hasNextPage` prop can be set to indicate that there is more data to load.\n * When the view is ready to load more data, the `fetchNextPage` callback will be invoked. The view is designed to handle\n * an \"infinite scroll\" pattern, so entities should not be removed from the list when loading the next page.\n *\n * @param param0\n */\nexport const ChallengeDataTable: React.FunctionComponent<DetailsViewProps> = ({\n  entities,\n  isLoading,\n  hasNextPage,\n  fetchNextPage,\n  isFetchingNextPage,\n  versionSelection,\n  selectColumnType,\n  selected,\n  visibleTypes,\n  selectableTypes,\n  toggleSelection,\n  sort,\n  setSort,\n  noResultsPlaceholder,\n  enableSelectAll,\n  selectAllIsChecked = false,\n  getChildrenInfiniteRequestObject,\n  totalEntities,\n  setCurrentContainer,\n}) => {\n  const queryClient = useQueryClient()\n\n  const { accessToken } = useSynapseContext()\n\n  const showSelectColumn = selectColumnType !== 'none'\n\n  const [shouldSelectAll, setShouldSelectAll] = useState(false)\n  const [showLoadingScreen, setShowLoadingScreen] = useState(false)\n\n  const cancelQuery = () => {\n    // It's likely that the user will be throttled by the Synapse backend and may be waiting a\n    // noticeable amount of time for the current request, so cancel it (in addition to cancelling future requests)\n    queryClient.cancelQueries([\n      'entitychildren',\n      getChildrenInfiniteRequestObject,\n    ])\n    setShowLoadingScreen(false)\n    setShouldSelectAll(false)\n  }\n  type DetailsViewRowAppearance = 'hidden' | 'disabled' | 'selected' | 'default'\n\n  const determineRowAppearance = (\n    entity: EntityFinderHeader,\n  ): DetailsViewRowAppearance => {\n    if (!visibleTypes.includes(getEntityTypeFromHeader(entity))) {\n      return 'hidden'\n    } else if (!selectableTypes.includes(getEntityTypeFromHeader(entity))) {\n      return 'disabled'\n    } else if (selected.has(entity.id)) {\n      return 'selected'\n    } else {\n      return 'default'\n    }\n  }\n\n  useEffect(() => {\n    async function handleSelectAll() {\n      if (shouldSelectAll) {\n        if (hasNextPage && fetchNextPage) {\n          // Show the loading screen since we must fetch data (potentially a lot) to finish the task\n          setShowLoadingScreen(true)\n          if (!isFetchingNextPage) {\n            fetchNextPage()\n          }\n        } else {\n          if (selectAllIsChecked) {\n            // All of the items are selected, so we will deselect all\n            toggleSelection(\n              entities\n                .filter(e => {\n                  // Collect just entities that are selected\n                  // An entity may be in the list and unselected because it isn't of a selectable type\n                  return selected.has(e.id)\n                })\n                .map(e => {\n                  const selectedVersion = selected.get(e.id)\n                  return {\n                    targetId: e.id,\n                    targetVersionNumber:\n                      selectedVersion === NO_VERSION_NUMBER\n                        ? undefined\n                        : selectedVersion,\n                  }\n                }),\n            )\n          } else {\n            // Not all of the items are selected, so we will select all\n            toggleSelection(\n              await Promise.all(\n                entities\n                  .filter(e => {\n                    // must filter just selectable types or else any entities of unselectable types will get selected\n                    const type = getEntityTypeFromHeader(e)\n                    // also exclude already-selected entities, since we don't want to toggle those\n                    return (\n                      !selected.has(e.id) &&\n                      selectableTypes.includes(type) &&\n                      visibleTypes.includes(type)\n                    )\n                  })\n                  .map(async e => {\n                    let latestVersion: number | undefined\n                    if (\n                      versionSelection === VersionSelectionType.REQUIRED &&\n                      isVersionableEntityType(getEntityTypeFromHeader(e))\n                    ) {\n                      // If VersionSelectionType.REQUIRED, then we need to supply a version with the entity.\n                      // We may already have the version from the header:\n                      if (\n                        Object.prototype.hasOwnProperty.call(e, 'versionNumber')\n                      ) {\n                        latestVersion = (e as EntityHeader).versionNumber\n                      }\n                      if (!latestVersion) {\n                        // Failsafe if we didn't get the version in the header. This is rare/unlikely, since the only cases we're sure we don't get versions are:\n                        //  - ProjectHeaders (which are versionless)\n                        //  - Search Results (for which we don't support Select All)\n                        // For large lists, there's a good chance for this to trigger throttling.\n\n                        // Show the loading screen since we must fetch data (potentially a lot) to finish the task\n                        setShowLoadingScreen(true)\n\n                        const versions = await queryClient.fetchQuery(\n                          ['entity', e.id, 'versions', { offset: 0, limit: 1 }],\n                          () => getEntityVersions(e.id, accessToken, 0, 1),\n                        )\n                        // we pick the first version in the list because it is the most recent\n                        latestVersion = versions.results[0]?.versionNumber\n                      }\n                    }\n                    return {\n                      targetId: e.id,\n                      targetVersionNumber: latestVersion,\n                    }\n                  }),\n              ),\n            )\n          }\n          setShouldSelectAll(false)\n          setShowLoadingScreen(false)\n        }\n      }\n    }\n    handleSelectAll()\n  }, [\n    accessToken,\n    entities,\n    fetchNextPage,\n    hasNextPage,\n    versionSelection,\n    queryClient,\n    isFetchingNextPage,\n    selectAllIsChecked,\n    selectableTypes,\n    selected,\n    shouldSelectAll,\n    toggleSelection,\n    visibleTypes,\n  ])\n\n  const tableData = entities.reduce(\n    (entities: EntityFinderTableViewRowData[], entity) => {\n      const appearance = determineRowAppearance(entity)\n      if (appearance !== 'hidden') {\n        // only include entities that should not be hidden\n        const entityType = getEntityTypeFromHeader(entity)\n\n        const currentSelectedVersion = selected.get(entity.id)\n        let versionNumber: number | undefined = undefined\n        if ('versionNumber' in entity) {\n          if (\n            currentSelectedVersion != null &&\n            currentSelectedVersion !== NO_VERSION_NUMBER\n          ) {\n            // if a version is selected, the row should show that version's data\n            versionNumber = currentSelectedVersion\n          } else if (versionSelection === VersionSelectionType.REQUIRED) {\n            // if a version is not selected, but version selection is required, the row should show the latest version's data\n            versionNumber = entity.versionNumber\n          }\n          // otherwise, show the current version's data (versionNumber is undefined)\n        }\n\n        entities.push({\n          ...entity,\n          entityId: entity.id,\n          versionNumber: versionNumber,\n          entityType: entityType,\n          isSelected: appearance === 'selected',\n          isDisabled: appearance === 'disabled',\n          isVersionableEntity: isVersionableEntityType(entityType),\n          currentSelectedVersion: currentSelectedVersion,\n        })\n      }\n      return entities\n    },\n    [],\n  )\n\n  const SelectAllCheckboxRenderer = useMemo(() => {\n    // Enabled if there's at least one visible & selectable entity, OR there's a page we haven't fetched\n    const isEnabled =\n      hasNextPage ||\n      entities.filter(\n        e =>\n          selectableTypes.includes(getEntityTypeFromHeader(e)) &&\n          visibleTypes.includes(getEntityTypeFromHeader(e)),\n      ).length > 0\n    return (\n      enableSelectAll && (\n        <div\n          data-testid=\"Select All\"\n          style={isEnabled ? { cursor: 'pointer' } : { cursor: 'not-allowed' }}\n          onClick={() => {\n            if (isEnabled) {\n              setShouldSelectAll(true)\n            }\n          }}\n        >\n          <Checkbox\n            label=\"Select All\"\n            hideLabel={true}\n            className=\"SRC-pointer-events-none\"\n            checked={selectAllIsChecked}\n            disabled={!isEnabled}\n            onChange={() => {\n              // no-op\n            }}\n          />\n        </div>\n      )\n    )\n  }, [\n    enableSelectAll,\n    entities,\n    hasNextPage,\n    selectAllIsChecked,\n    selectableTypes,\n    visibleTypes,\n  ])\n\n  const NameRenderer = useCallback(\n    (props: CellRendererProps<EntityFinderTableViewRowData>) => {\n      if (setCurrentContainer && isContainerType(props.rowData.entityType)) {\n        return (\n          <span\n            role=\"link\"\n            className=\"EntityFinderTableCellContainerLink\"\n            onClick={e => {\n              e.stopPropagation()\n              setCurrentContainer(props.rowData.id)\n            }}\n          >\n            {props.rowData.name}\n          </span>\n        )\n      } else {\n        return props.rowData.name\n      }\n    },\n    [setCurrentContainer],\n  )\n\n  const sortState: Record<string, SortOrder> = {}\n  if (sort) {\n    sortState[sort.sortBy] = sort.sortDirection.toLowerCase() as SortOrder\n  }\n\n  return (\n    <div className=\"EntityFinderDetailsView bootstrap-4-backport\">\n      <BlockingLoader\n        show={showLoadingScreen}\n        currentProgress={entities.length}\n        totalProgress={totalEntities}\n        hintText={\n          totalEntities\n            ? `${entities.length.toLocaleString()} of ${totalEntities?.toLocaleString()}`\n            : `Fetching ${entities.length.toLocaleString()}`\n        }\n        headlineText={'Fetching selected items'}\n        onCancel={cancelQuery}\n      />\n      <AutoResizer className=\"DetailsViewAutosizer\">\n        {({ height, width }: { height: number; width: number }) => (\n          <BaseTable<EntityFinderTableViewRowData>\n            classPrefix=\"DetailsViewTable\"\n            data={tableData}\n            height={height}\n            width={width > MIN_TABLE_WIDTH ? width : MIN_TABLE_WIDTH}\n            rowHeight={ROW_HEIGHT}\n            overscanRowCount={5}\n            // Apply classes to the rows for styling\n            rowClassName={({ rowIndex }: { rowIndex: number }) => {\n              let className = 'EntityFinderDetailsViewRow'\n              if (rowIndex % 2 === 0) {\n                // Apply a class based on index so we can get alternating colors\n                // We don't use CSSs nth-child because the rows are virtualized, so an even child might change to odd on-the-fly\n                className += ' isEven'\n              }\n              return className\n            }}\n            // Apply aria roles to the rows for a11y/styling\n            rowProps={({ rowData }) => {\n              return {\n                'aria-selected': rowData.isSelected,\n                'aria-disabled': rowData.isDisabled,\n              }\n            }}\n            headerCellProps={{\n              role: 'columnheader',\n            }}\n            // Sorting:\n            sortState={sortState}\n            components={{ SortIndicator: CustomSortIndicator }}\n            onColumnSort={({ key, order }) => {\n              if (sort && setSort) {\n                setSort(\n                  key as SortBy,\n                  order === 'asc' ? Direction.ASC : Direction.DESC,\n                )\n              }\n            }}\n            rowEventHandlers={{\n              onClick: ({ rowData }) => {\n                const { id, isDisabled, isVersionableEntity } = rowData\n                let { currentSelectedVersion } = rowData\n                if (!isDisabled) {\n                  if (\n                    isVersionableEntity &&\n                    versionSelection === VersionSelectionType.REQUIRED &&\n                    currentSelectedVersion == null &&\n                    Object.prototype.hasOwnProperty.call(\n                      rowData,\n                      'versionNumber',\n                    )\n                  ) {\n                    currentSelectedVersion = (rowData as EntityHeader)\n                      .versionNumber\n                    // Note that here we aren't handling the case where the header doesn't have a version, e.g. a search result\n                    // That case is actually handled by the VersionRenderer, which has an effect that will toggle the selection after data is fetched.\n                  }\n\n                  toggleSelection({\n                    targetId: id,\n                    targetVersionNumber:\n                      currentSelectedVersion === NO_VERSION_NUMBER\n                        ? undefined\n                        : currentSelectedVersion,\n                  })\n                }\n              },\n            }}\n            onEndReached={() => {\n              if (hasNextPage && fetchNextPage && !isFetchingNextPage) {\n                fetchNextPage()\n              }\n            }}\n            emptyRenderer={\n              isLoading\n                ? LoadingRenderer\n                : () => (\n                    <EmptyRenderer\n                      noResultsPlaceholder={noResultsPlaceholder}\n                    />\n                  )\n            }\n          >\n            {showSelectColumn && (\n              <Column<EntityFinderTableViewRowData>\n                key=\"isSelected\"\n                title=\"\"\n                minWidth={50}\n                maxWidth={50}\n                width={50}\n                dataKey=\"isSelected\"\n                headerRenderer={SelectAllCheckboxRenderer}\n                cellRenderer={DetailsViewCheckboxRenderer}\n              />\n            )}\n            <Column<EntityFinderTableViewRowData>\n              key=\"type\"\n              title=\"\"\n              minWidth={45}\n              maxWidth={45}\n              width={45}\n              dataKey=\"entityType\"\n              align=\"center\"\n              cellRenderer={TypeIconRenderer}\n            />\n            <Column<EntityFinderTableViewRowData>\n              key={SortBy.NAME}\n              title=\"File Name\"\n              width={500}\n              sortable={sort != null}\n              resizable={true}\n              cellRenderer={NameRenderer}\n            />\n            <Column<EntityFinderTableViewRowData>\n              key={'SIZE'}\n              title=\"Size\"\n              width={200}\n              sortable={false}\n              resizable={true}\n              cellRenderer={SizeRenderer}\n            />\n            <Column<EntityIdAndVersionNumber>\n              key={SortBy.MODIFIED_ON}\n              title=\"Modified On\"\n              width={220}\n              minWidth={170}\n              sortable={sort != null}\n              cellRenderer={ModifiedOnRenderer}\n            />\n            <Column<EntityFinderTableViewRowData>\n              key=\"id\"\n              width={130}\n              dataKey=\"id\"\n              title=\"ID\"\n              minWidth={130}\n            />\n            <Column<EntityIdAndVersionNumber>\n              key={'actions'}\n              title={'Actions'}\n              minWidth={100}\n              maxWidth={100}\n              width={100}\n              cellRenderer={DownloadRenderer}\n            />\n          </BaseTable>\n        )}\n      </AutoResizer>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Direction, SortBy } from '@sage-bionetworks/synapse-types'\nimport { EntityDetailsListSharedProps } from '../EntityFinder/details/EntityDetailsList'\nimport { useGetEntityChildrenInfinite } from '../../synapse-queries'\nimport useGetIsAllSelectedFromInfiniteList from '../../utils/hooks/useGetIsAllSelectedInfiniteList'\nimport { ChallengeDataTable } from './ChallengeDataTable'\n\ntype ChallengeEntityChildrenDetailsProps = EntityDetailsListSharedProps & {\n  parentContainerId: string\n}\n\nexport const ChallengeEntityChildrenDetails: React.FunctionComponent<\n  ChallengeEntityChildrenDetailsProps\n> = ({ parentContainerId, ...sharedProps }) => {\n  const [sortBy, setSortBy] = useState<SortBy>(SortBy.NAME)\n  const [sortDirection, setSortDirection] = useState<Direction>(Direction.ASC)\n\n  const getChildrenInfiniteRequestObject = {\n    parentId: parentContainerId,\n    includeTotalChildCount: true,\n    includeTypes: sharedProps.visibleTypes,\n    sortBy: sortBy,\n    sortDirection: sortDirection,\n  }\n  const { data, isLoading, isFetchingNextPage, hasNextPage, fetchNextPage } =\n    useGetEntityChildrenInfinite(getChildrenInfiniteRequestObject, {\n      useErrorBoundary: true,\n    })\n  const entities = data?.pages.flatMap(page => page.page) ?? []\n  const totalEntities = data?.pages[0].totalChildCount\n\n  const selectAllCheckboxState = useGetIsAllSelectedFromInfiniteList(\n    entities,\n    sharedProps.selected.size,\n    sharedProps.isIdSelected,\n    sharedProps.isSelectable,\n    hasNextPage,\n    fetchNextPage,\n    isFetchingNextPage,\n  )\n\n  return (\n    <ChallengeDataTable\n      entities={entities}\n      isLoading={isLoading}\n      hasNextPage={hasNextPage}\n      fetchNextPage={fetchNextPage}\n      isFetchingNextPage={isFetchingNextPage}\n      sort={{ sortBy, sortDirection }}\n      setSort={(newSortBy, newSortDirection) => {\n        setSortBy(newSortBy)\n        setSortDirection(newSortDirection)\n      }}\n      selectAllIsChecked={selectAllCheckboxState}\n      getChildrenInfiniteRequestObject={getChildrenInfiniteRequestObject}\n      totalEntities={totalEntities}\n      {...sharedProps}\n    />\n  )\n}\n","import React, { useCallback } from 'react'\nimport AddCircleTwoToneIcon from '@mui/icons-material/AddCircleTwoTone'\nimport { EntityType } from '@sage-bionetworks/synapse-types'\nimport { EntityDetailsListSharedProps } from '../EntityFinder/details/EntityDetailsList'\nimport { VersionSelectionType } from '../EntityFinder/VersionSelectionType'\nimport { EntityFinderHeader } from '../EntityFinder/EntityFinderHeader'\nimport { useEntitySelection } from '../EntityFinder/useEntitySelection'\nimport { ChallengeEntityChildrenDetails } from './ChallengeEntityChildrenDetails'\nimport { Box, Button } from '@mui/material'\nimport { useAddFileBatchToDownloadList } from '../../synapse-queries'\nimport { displayToast } from '../ToastMessage'\nimport { useSynapseContext } from '../../utils'\n\nexport type ChallengeDataDownloadProps = {\n  parentContainerId: string\n}\n\nexport function ChallengeDataDownload({\n  parentContainerId,\n}: ChallengeDataDownloadProps) {\n  const { downloadCartPageUrl } = useSynapseContext()\n  const selectMultiple = true\n  const [selectedEntities, toggleSelection] = useEntitySelection(selectMultiple)\n\n  const { mutate: addBatchToDownloadList } = useAddFileBatchToDownloadList({\n    onSuccess: () => {\n      displayToast(\n        'File(s) were successfully added to your Download Cart.',\n        'success',\n        {\n          primaryButtonConfig: {\n            text: 'View Download Cart',\n            onClick: () => (window.location.href = downloadCartPageUrl),\n          },\n        },\n      )\n    },\n    onError: e => {\n      displayToast(\n        `Unable to add the file to your Download Cart. ${e.reason}`,\n        'danger',\n      )\n    },\n  })\n\n  const isIdSelected = useCallback(\n    (entity: EntityFinderHeader) => {\n      return selectedEntities.has(entity.id)\n    },\n    [selectedEntities],\n  )\n\n  const onAddClick = useCallback(() => {\n    const entities = selectedEntities.toArray().map(entity => {\n      return {\n        fileEntityId: entity[0],\n        versionNumber: entity[1],\n      }\n    })\n    addBatchToDownloadList(entities)\n  }, [selectedEntities, addBatchToDownloadList])\n\n  const sharedProps: EntityDetailsListSharedProps = {\n    versionSelection: VersionSelectionType.REQUIRED,\n    selectColumnType: 'checkbox',\n    enableSelectAll: true,\n    visibleTypes: [EntityType.FILE],\n    selected: selectedEntities,\n    selectableTypes: [EntityType.FILE],\n    isIdSelected,\n    isSelectable: () => true,\n    toggleSelection,\n  }\n  return (\n    <>\n      <Box>\n        <ChallengeEntityChildrenDetails\n          parentContainerId={parentContainerId}\n          {...sharedProps}\n        />\n      </Box>\n      <Box mt={4}>\n        <Button\n          endIcon={<AddCircleTwoToneIcon />}\n          variant={'outlined'}\n          sx={{ alignSelf: 'flex-end', height: '47px' }}\n          onClick={onAddClick}\n          disabled={!selectedEntities.toArray().length}\n        >\n          Add to Download Cart\n        </Button>\n      </Box>\n    </>\n  )\n}\n"],"names":["SizeRenderer","props","bundle","isLoading","useGetEntityBundle","jsx","Skeleton","file","file2","friendlySize","calculateFriendlyFileSize","DownloadRenderer","DirectDownload","MIN_TABLE_WIDTH","ROW_HEIGHT","ChallengeDataTable","entities","hasNextPage","fetchNextPage","isFetchingNextPage","versionSelection","selectColumnType","selected","visibleTypes","selectableTypes","toggleSelection","sort","setSort","noResultsPlaceholder","enableSelectAll","selectAllIsChecked","getChildrenInfiniteRequestObject","totalEntities","setCurrentContainer","queryClient","useQueryClient","accessToken","useSynapseContext","showSelectColumn","shouldSelectAll","setShouldSelectAll","useState","showLoadingScreen","setShowLoadingScreen","cancelQuery","determineRowAppearance","entity","getEntityTypeFromHeader","useEffect","handleSelectAll","selectedVersion","NO_VERSION_NUMBER","type","latestVersion","VersionSelectionType","isVersionableEntityType","_a","getEntityVersions","tableData","entities2","appearance","entityType","currentSelectedVersion","versionNumber","SelectAllCheckboxRenderer","useMemo","isEnabled","Checkbox","NameRenderer","useCallback","isContainerType","sortState","jsxs","BlockingLoader","AutoResizer","height","width","BaseTable","rowIndex","className","rowData","CustomSortIndicator","key","order","Direction","id","isDisabled","isVersionableEntity","LoadingRenderer","EmptyRenderer","Column","DetailsViewCheckboxRenderer","TypeIconRenderer","SortBy","ModifiedOnRenderer","ChallengeEntityChildrenDetails","parentContainerId","sharedProps","sortBy","setSortBy","sortDirection","setSortDirection","data","useGetEntityChildrenInfinite","page","selectAllCheckboxState","useGetIsAllSelectedFromInfiniteList","newSortBy","newSortDirection","ChallengeDataDownload","downloadCartPageUrl","selectMultiple","selectedEntities","useEntitySelection","addBatchToDownloadList","useAddFileBatchToDownloadList","displayToast","e","isIdSelected","onAddClick","EntityType","Fragment","Box","Button","AddCircleTwoToneIcon"],"mappings":"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"}