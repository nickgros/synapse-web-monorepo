{"version":3,"file":"ChallengeSubmission-0ed82b76.js","sources":["../../src/synapse-queries/team/useTeam.ts","../../src/components/CopyToClipboardIcon.tsx","../../src/components/ChallengeSubmission/SubmissionDirectoryList.tsx","../../src/synapse-queries/docker/useGetDockerTag.ts","../../src/components/ChallengeSubmission/SubmissionCommitList.tsx","../../src/components/ChallengeSubmission/EvaluationQueueList.tsx","../../src/components/ChallengeSubmission/ChallengeSubmissionStepper.tsx","../../src/components/ChallengeSubmission/ChallengeSubmission.tsx"],"sourcesContent":["import { useQuery, UseQueryOptions } from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { Team } from '@sage-bionetworks/synapse-types'\n\nexport function useGetTeam(\n  teamId: string,\n  options?: UseQueryOptions<Team, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<Team, SynapseClientError>(\n    keyFactory.getTeamQueryKey(teamId),\n    () => SynapseClient.getTeam(teamId, accessToken),\n    options,\n  )\n}\n","import React from 'react'\nimport { Box, IconButton } from '@mui/material'\nimport { ToastMessage } from './ToastMessage/ToastMessage'\nimport { BoxProps } from '@mui/material'\nimport IconSvg from './IconSvg'\n\nexport type CopyToClipboardIconProps = BoxProps & {\n  value: string\n  size?: number\n}\n\nexport const CopyToClipboardIcon: React.FunctionComponent<\n  CopyToClipboardIconProps\n> = ({ value, size = 16, ...props }: CopyToClipboardIconProps) => {\n  const [showModal, setShowModal] = React.useState(false)\n  const ref = React.createRef<HTMLDivElement>()\n\n  const copyToClipboard =\n    (ref: React.RefObject<HTMLElement>, value: string) =>\n    (event: React.SyntheticEvent) => {\n      event.preventDefault()\n\n      // use the Clipboard API\n      // https://caniuse.com/mdn-api_clipboard_writetext\n      navigator.clipboard.writeText(value).then(() => {\n        // show modal and hide after 4 seconds, the timing is per Material Design\n        setShowModal(true)\n        // hide after 4 seconds\n        setTimeout(() => {\n          setShowModal(false)\n        }, 4000)\n      })\n    }\n\n  return (\n    <>\n      <ToastMessage\n        text=\"Successfully copied to clipboard\"\n        show={showModal}\n        autohide={true}\n      ></ToastMessage>\n      <Box display=\"flex\" ref={ref} {...props}>\n        <IconButton onClick={copyToClipboard(ref, value)}>\n          <IconSvg\n            icon=\"contentCopy\"\n            wrap={false}\n            sx={{ width: `${size}px`, height: `${size}px` }}\n          />\n        </IconButton>\n      </Box>\n    </>\n  )\n}\n\nexport default CopyToClipboardIcon\n","import React, { useEffect, useState } from 'react'\nimport { Box, Button, Typography } from '@mui/material'\nimport { DataGrid, GridCellParams, GridColDef } from '@mui/x-data-grid'\nimport { RadioOption } from '../widgets/RadioGroup'\nimport {\n  Direction,\n  Entity,\n  EntityChildrenRequest,\n  EntityHeader,\n  EntityLookupRequest,\n  EntityType,\n  FILE_ENTITY_CONCRETE_TYPE_VALUE,\n  FileUploadComplete,\n  SortBy,\n} from '@sage-bionetworks/synapse-types'\nimport { Link } from 'react-router-dom'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../utils/functions/getEndpoint'\nimport {\n  invalidateAllQueriesForEntity,\n  useGetEntities,\n  useGetEntityChildren,\n} from '../../synapse-queries'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport dayjs from 'dayjs'\nimport CopyToClipboardIcon from '../CopyToClipboardIcon'\nimport { InfoTwoTone } from '@mui/icons-material'\nimport SynapseClient from '../../synapse-client'\nimport { useSynapseContext } from '../../utils'\nimport { ErrorBanner } from '../error/ErrorBanner'\nimport FileUpload from '../FileUpload'\nimport IconSvg from '../IconSvg'\nimport { UploadCallbackResp } from '@sage-bionetworks/synapse-types'\nimport { FileEntity } from '@sage-bionetworks/synapse-types'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { EntityItem } from './ChallengeSubmission'\nimport ConfirmationDialog from '../ConfirmationDialog'\nimport { useQueryClient } from 'react-query'\n\ntype SubmissionDirectoryRow = {\n  id: string\n  name: string\n  modifiedOn: string\n}\n\ntype SubmissionDirectoryListProps = {\n  pageSize: number\n  challengeProjectId: string\n  entityType: EntityType.DOCKER_REPO | EntityType.FILE\n  onItemSelected: (selected: EntityItem) => void\n}\n\ntype FileUploadAttempt = FileUploadComplete & {\n  entityId?: string\n}\n\nfunction SubmissionDirectoryList({\n  pageSize,\n  challengeProjectId,\n  entityType,\n  onItemSelected,\n}: SubmissionDirectoryListProps) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n  const [page, setPage] = useState<number>(0)\n  const [selectedItem, setSelectedItem] = useState<EntityItem | undefined>()\n  const [errorMessage, setErrorMessage] = useState<string>()\n  const [canSubmit, setCanSubmit] = useState<boolean>()\n  const [fetchedHeaders, setFetchedHeaders] = useState<EntityHeader[]>([])\n  const [nextPageToken, setNextPageToken] = useState<string | null>(null)\n  const [fetchNextPage, setFetchNextPage] = useState<boolean>(false)\n  const [confirmOpen, setConfirmOpen] = useState<boolean>(false)\n  const [uploadAttempt, setUploadAttempt] = useState<FileUploadAttempt>()\n\n  const PER_PAGE = pageSize\n  const HEADERS_PER_PAGE = 50\n  const PROJECT_URL = `${getEndpoint(\n    BackendDestinationEnum.PORTAL_ENDPOINT,\n  )}#!Synapse:${challengeProjectId}`\n\n  const request: EntityChildrenRequest = {\n    parentId: challengeProjectId,\n    nextPageToken: fetchNextPage ? nextPageToken : null,\n    includeTypes: [entityType],\n    includeTotalChildCount: true,\n    sortBy: SortBy.MODIFIED_ON,\n    sortDirection: Direction.DESC,\n  }\n\n  const { data: headerResults, refetch } = useGetEntityChildren(request, {\n    enabled: !!challengeProjectId,\n    useErrorBoundary: true,\n    onSuccess: data => {\n      const newHeaders = [...fetchedHeaders]\n      const headerPage = Math.floor(((page + 1) * PER_PAGE) / HEADERS_PER_PAGE)\n      const start = headerPage * HEADERS_PER_PAGE\n      newHeaders.splice(start, start + HEADERS_PER_PAGE, ...data.page)\n      setFetchedHeaders(newHeaders)\n      setFetchNextPage(false)\n      setNextPageToken(data.nextPageToken)\n    },\n  })\n\n  function getPageHeaders() {\n    const pageStart = page * PER_PAGE\n    const pageHeaders = fetchedHeaders.slice(pageStart, pageStart + PER_PAGE)\n    return pageHeaders\n  }\n\n  function reset() {\n    setErrorMessage(undefined)\n    setCanSubmit(undefined)\n    setFetchedHeaders([])\n    setNextPageToken(null)\n    setFetchNextPage(false)\n    refetch()\n  }\n\n  useEffect(() => {\n    reset()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [entityType, pageSize])\n\n  const { isLoading: areEntitiesLoading, data: entities } = useGetEntities(\n    getPageHeaders(),\n  )\n\n  const entityChangeHandler = async (value: string) => {\n    setCanSubmit(false)\n    const entity = entities.find(entity => entity?.id === value)\n    if (entity) {\n      setSelectedItem(entity)\n      if (entityType === EntityType.DOCKER_REPO) {\n        let commits\n        try {\n          commits = await SynapseClient.getDockerTag(\n            entity.id!,\n            accessToken,\n            0,\n            1,\n          )\n        } catch (e) {\n          return setErrorMessage(e.message)\n        }\n        if (commits.totalNumberOfResults === 0) {\n          return setErrorMessage(\n            'No commits have been made to this repository. Please select a repository with at least one commit.',\n          )\n        }\n      }\n      setCanSubmit(true)\n      setErrorMessage(undefined)\n    }\n  }\n\n  const columns: GridColDef[] = [\n    {\n      field: 'radiobutton',\n      headerName: '',\n      width: 25,\n      sortable: false,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n      renderCell: params => {\n        return (\n          <RadioOption\n            value={params.id}\n            currentValue={selectedItem?.id}\n            onChange={selectedItemId => {\n              entityChangeHandler(selectedItemId as string)\n            }}\n            label=\"\"\n            style={{ marginBottom: '16px' }}\n          />\n        )\n      },\n    },\n    {\n      field: 'name',\n      headerName:\n        entityType === EntityType.DOCKER_REPO\n          ? 'Docker Repository'\n          : 'File Name',\n      flex: 1,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n      renderCell: (params: GridCellParams<Entity, SubmissionDirectoryRow>) => (\n        <Link\n          to={{\n            pathname: `${getEndpoint(\n              BackendDestinationEnum.PORTAL_ENDPOINT,\n            )}#!Synapse:${params.row.id}`,\n          }}\n          target=\"_blank\"\n        >\n          {params.row.name}\n        </Link>\n      ),\n    },\n    {\n      field: 'modifiedOn',\n      headerName: 'Updated On',\n      width: 100,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n    },\n    {\n      field: 'id',\n      headerName: 'ID',\n      width: 200,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n    },\n  ]\n\n  const getRows = (entities: EntityItem[]) => {\n    const newRows: SubmissionDirectoryRow[] = []\n    entities.forEach(entity => {\n      newRows.push({\n        id: entity.id!,\n        name:\n          entityType === EntityType.DOCKER_REPO\n            ? entity.repositoryName ?? entity.name\n            : entity.name,\n        modifiedOn: formatDate(dayjs(entity.modifiedOn), 'MM/DD/YY'),\n      })\n    })\n    return newRows\n  }\n\n  const handlePageChange = (newPageNum: number) => {\n    const lastIndexNeeded = Math.min(\n      headerResults?.totalChildCount ?? 0,\n      (newPageNum + 1) * PER_PAGE,\n    )\n    if (lastIndexNeeded > fetchedHeaders.length) {\n      setFetchNextPage(true)\n    }\n    setPage(newPageNum)\n  }\n\n  const itemSelectedHandler = () => {\n    onItemSelected(selectedItem!)\n  }\n\n  function createEntity(file: FileUploadAttempt) {\n    // Create Entity\n    if (!file) return\n    const { fileHandleId, fileName } = file\n    const newFileEntity: FileEntity = {\n      parentId: challengeProjectId,\n      name: fileName,\n      concreteType: FILE_ENTITY_CONCRETE_TYPE_VALUE,\n      dataFileHandleId: fileHandleId,\n    }\n    SynapseClient.createEntity(newFileEntity, accessToken)\n      .then(() => {\n        reset()\n      })\n      .catch((err: SynapseClientError) => {\n        setErrorMessage(err.reason)\n      })\n  }\n\n  async function updateEntity() {\n    if (!uploadAttempt) return\n    const { fileHandleId, entityId } = uploadAttempt\n    if (!entityId)\n      return setErrorMessage('Error: missing entityId. Please try again.')\n    // Get the entity\n    let entity: FileEntity\n    try {\n      entity = await SynapseClient.getEntity(accessToken, entityId)\n    } catch (err) {\n      return setErrorMessage(`The entity ${entityId} could not be retrieved.`)\n    }\n\n    const updateRequest: FileEntity = {\n      id: entity.id,\n      name: entity.name,\n      dataFileHandleId: fileHandleId,\n      concreteType: FILE_ENTITY_CONCRETE_TYPE_VALUE,\n      parentId: entity.parentId,\n      etag: entity.etag,\n      modifiedOn: entity.modifiedOn,\n    }\n\n    try {\n      const updatedEntity = await SynapseClient.updateEntity(\n        updateRequest,\n        accessToken,\n        true,\n      )\n      await invalidateAllQueriesForEntity(\n        queryClient,\n        keyFactory,\n        updatedEntity.id!,\n      )\n      queryClient.setQueryData(\n        keyFactory.getEntityQueryKey(updatedEntity.id!),\n        updatedEntity,\n      )\n      reset()\n    } catch (err) {\n      setErrorMessage(err.reason)\n    }\n  }\n\n  const handleUpload = async (response: UploadCallbackResp) => {\n    if (response.success && response.resp) {\n      const { fileName } = response.resp\n\n      // Lookup entity\n      const entityLookupRequest: EntityLookupRequest = {\n        entityName: fileName,\n        parentId: challengeProjectId,\n      }\n      try {\n        const entityId = await SynapseClient.lookupChildEntity(\n          entityLookupRequest,\n          accessToken,\n        )\n        // Entity exists, prompt user to update it\n        if (entityId) {\n          setUploadAttempt({ ...response.resp, entityId: entityId.id })\n          setConfirmOpen(true)\n        }\n      } catch (err) {\n        // An existing entity was not found for this file, create it\n        setUploadAttempt(undefined)\n        createEntity(response.resp)\n      }\n    } else if (!response.success && response.error) {\n      setErrorMessage(response.error.reason as string)\n    } else {\n      setErrorMessage('An unknown error occurred. Please try again.')\n    }\n  }\n\n  return (\n    <Box>\n      <Box\n        sx={{\n          display: 'flex',\n          backgroundColor: '#FBFBFC',\n          padding: '10px',\n          justifyContent: 'space-between',\n        }}\n      >\n        <Typography\n          variant=\"h6\"\n          sx={{ fontSize: '18px', lineHeight: '20px', fontWeight: 700 }}\n        >\n          Your Submission Directory\n        </Typography>\n        <Box sx={{ display: 'flex' }}>\n          <Typography\n            variant=\"body1\"\n            sx={{ fontSize: '14px', color: '#71767F' }}\n          >\n            Project SynID:{'  '}\n            <Link to={{ pathname: PROJECT_URL }} target=\"_blank\">\n              {challengeProjectId}\n            </Link>\n          </Typography>\n          <CopyToClipboardIcon value={PROJECT_URL} sx={{ marginTop: '-4px' }} />\n        </Box>\n      </Box>\n      <Box>\n        <DataGrid\n          initialState={{ pagination: { page: page } }}\n          loading={areEntitiesLoading}\n          columns={columns}\n          rows={getRows(entities)}\n          pageSize={PER_PAGE}\n          rowCount={headerResults?.totalChildCount ?? 0}\n          page={page}\n          pagination\n          paginationMode=\"server\"\n          onPageChange={n => handlePageChange(n)}\n          density=\"compact\"\n          autoHeight\n          rowsPerPageOptions={[PER_PAGE]}\n          sx={{\n            fontSize: '14px',\n            border: 'none',\n            height: '100%',\n            '& .MuiDataGrid-columnHeader': {\n              backgroundColor: '#F1F3F5',\n            },\n            '& .Mui-odd': {\n              backgroundColor: '#FBFBFC',\n            },\n            '.MuiDataGrid-columnHeaderTitleContainer': {\n              justifyContent: 'space-between',\n            },\n          }}\n          getRowClassName={params =>\n            params.indexRelativeToCurrentPage % 2 === 0 ? 'Mui-even' : 'Mui-odd'\n          }\n        />\n      </Box>\n      {errorMessage && <ErrorBanner error={errorMessage}></ErrorBanner>}\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        {entityType === EntityType.FILE && (\n          <FileUpload\n            label=\"Upload File\"\n            buttonProps={{\n              variant: 'outlined',\n              endIcon: <IconSvg icon=\"upload\" />,\n              sx: { lineHeight: 1 },\n            }}\n            onComplete={resp => {\n              handleUpload(resp)\n            }}\n          />\n        )}\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={itemSelectedHandler}\n          disabled={!canSubmit}\n        >\n          Submit Selection\n        </Button>\n      </Box>\n      {entityType === EntityType.DOCKER_REPO && (\n        <Box mt={4} display={'flex'}>\n          <InfoTwoTone\n            sx={{\n              width: '16px',\n              height: '16px',\n              verticalAlign: 'text-bottom',\n            }}\n          />\n\n          <Box ml={2}>\n            To learn more about how to create and submit the Docker containers\n            using command line, see our{' '}\n            <Link\n              to={{\n                pathname:\n                  'https://github.com/Sage-Bionetworks-Challenges/sample-model-templates#build-your-model',\n              }}\n              target=\"_blank\"\n            >\n              Docker model submission guide\n            </Link>\n            .\n          </Box>\n        </Box>\n      )}\n      <ConfirmationDialog\n        open={confirmOpen}\n        title=\"File exists\"\n        content={\n          <Typography variant=\"body1\" sx={{ fontSize: '16px' }}>\n            A file named &quot;{uploadAttempt?.fileName}&quot; (\n            {uploadAttempt?.entityId}) already exists in this location. Do you\n            want to update the existing file and create a new version?\n          </Typography>\n        }\n        onCancel={() => setConfirmOpen(false)}\n        onConfirm={() => {\n          updateEntity()\n          setConfirmOpen(false)\n        }}\n      />\n    </Box>\n  )\n}\n\nexport default SubmissionDirectoryList\n","import { useQuery, UseQueryOptions } from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport {\n  Direction,\n  DockerCommit,\n  PaginatedResults,\n  SortBy,\n} from '@sage-bionetworks/synapse-types'\nimport { useSynapseContext } from '../../utils'\n\nexport function useGetDockerTags(\n  entityId: string,\n  offset: string | number = 0,\n  limit: string | number = 20,\n  sort: SortBy = SortBy.CREATED_ON,\n  sortDirection: Direction = Direction.DESC,\n  options?: UseQueryOptions<PaginatedResults<DockerCommit>, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<PaginatedResults<DockerCommit>, SynapseClientError>(\n    keyFactory.getPaginatedDockerTagQueryKey(\n      entityId,\n      offset.toString(),\n      limit.toString(),\n      sort,\n      sortDirection,\n    ),\n    () =>\n      SynapseClient.getDockerTag(\n        entityId,\n        accessToken,\n        offset,\n        limit,\n        sort,\n        sortDirection,\n      ),\n    options,\n  )\n}\n","import React, { useState } from 'react'\nimport { Box, Typography } from '@mui/material'\nimport { DataGrid, GridColDef } from '@mui/x-data-grid'\nimport { RadioOption } from '../widgets/RadioGroup'\nimport {\n  Direction,\n  DockerCommit,\n  SortBy,\n} from '@sage-bionetworks/synapse-types'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport dayjs from 'dayjs'\nimport { useGetDockerTags } from '../../synapse-queries/docker'\nimport { EntityItem } from './ChallengeSubmission'\n\ntype SubmissionCommitRow = {\n  id: string\n  createdOn: string\n  digest: string\n  tag: string\n}\n\ntype SubmissionCommitListProps = {\n  repository: EntityItem\n  selectedCommit: DockerCommit | undefined\n  onCommitChanged: (value: DockerCommit) => void\n}\n\nfunction SubmissionCommitList({\n  repository,\n  selectedCommit,\n  onCommitChanged,\n}: SubmissionCommitListProps) {\n  const [page, setPage] = useState<number>(0)\n  const PER_PAGE = 10\n\n  const { isLoading, data: commitResults } = useGetDockerTags(\n    repository.id!,\n    page * PER_PAGE,\n    PER_PAGE,\n    SortBy.CREATED_ON,\n    Direction.DESC,\n  )\n\n  const commitChangeHandler = (digest: string) => {\n    const commits = commitResults?.results ?? []\n    const commit = commits.find(commit => commit.digest === digest)\n    if (commit) onCommitChanged(commit)\n  }\n\n  const columns: GridColDef[] = [\n    {\n      field: 'radiobutton',\n      headerName: '',\n      width: 25,\n      sortable: false,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n      renderCell: params => {\n        return (\n          <RadioOption\n            value={params.id as string}\n            currentValue={selectedCommit?.digest}\n            onChange={commitChangeHandler}\n            label=\"\"\n            style={{ marginBottom: '16px' }}\n          />\n        )\n      },\n    },\n    {\n      field: 'tag',\n      headerName: 'Tag',\n      flex: 1,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n    },\n    {\n      field: 'createdOn',\n      headerName: 'Created On',\n      width: 100,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n    },\n    {\n      field: 'digest',\n      headerName: 'Digest',\n      width: 200,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n    },\n  ]\n\n  const getRows = (commits: DockerCommit[]) => {\n    const newRows: SubmissionCommitRow[] = []\n    commits.forEach(commit => {\n      newRows.push({\n        id: commit.digest,\n        tag: commit.tag,\n        digest: commit.digest,\n        createdOn: formatDate(dayjs(commit.createdOn), 'MM/DD/YY'),\n      })\n    })\n    return newRows\n  }\n\n  const getPageData = () => {\n    return getRows(commitResults?.results ?? [])\n  }\n\n  const handlePageChange = (newPageNum: number) => {\n    setPage(newPageNum)\n  }\n\n  return (\n    <Box>\n      <Box\n        sx={{\n          display: 'flex',\n          backgroundColor: '#FBFBFC',\n          padding: '10px',\n          justifyContent: 'space-between',\n        }}\n      >\n        <Typography\n          variant=\"h6\"\n          sx={{ fontSize: '18px', lineHeight: '20px', fontWeight: 700 }}\n        >\n          Available commits for {repository.repositoryName}\n        </Typography>\n      </Box>\n      <Box>\n        <DataGrid\n          initialState={{ pagination: { page: page } }}\n          loading={isLoading}\n          columns={columns}\n          rows={getPageData()}\n          pageSize={PER_PAGE}\n          rowCount={commitResults?.totalNumberOfResults ?? 0}\n          page={page}\n          pagination\n          paginationMode=\"server\"\n          onPageChange={n => handlePageChange(n)}\n          density=\"compact\"\n          autoHeight\n          rowsPerPageOptions={[PER_PAGE]}\n          sx={{\n            fontSize: '14px',\n            border: 'none',\n            height: '100%',\n            '& .MuiDataGrid-columnHeader': {\n              backgroundColor: '#F1F3F5',\n            },\n            '& .Mui-odd': {\n              backgroundColor: '#FBFBFC',\n            },\n            '.MuiDataGrid-columnHeaderTitleContainer': {\n              justifyContent: 'space-between',\n            },\n          }}\n          getRowClassName={params =>\n            params.indexRelativeToCurrentPage % 2 === 0 ? 'Mui-even' : 'Mui-odd'\n          }\n        />\n      </Box>\n    </Box>\n  )\n}\n\nexport default SubmissionCommitList\n","import { Alert, Box, TextField, Typography } from '@mui/material'\nimport React from 'react'\nimport { useGetEntityEvaluations } from '../../synapse-queries'\nimport { ACCESS_TYPE } from '@sage-bionetworks/synapse-types'\nimport { DataGrid, GridColDef } from '@mui/x-data-grid'\nimport { RadioOption } from '../widgets/RadioGroup'\n\ntype EvaluationQueueListProps = {\n  projectId: string\n  submissonName: string\n  selectedEvaluation: string | undefined\n  onSubmissionNameChange: (value: string) => void\n  onEvaluationChange: (value: string) => void\n  submissionError?: string\n}\n\nfunction EvaluationQueueList({\n  projectId,\n  submissonName,\n  selectedEvaluation,\n  onSubmissionNameChange,\n  onEvaluationChange,\n  submissionError,\n}: EvaluationQueueListProps) {\n  const { isLoading, data: evaluations } = useGetEntityEvaluations(projectId, {\n    activeOnly: true,\n    accessType: ACCESS_TYPE.SUBMIT,\n  })\n\n  const columns: GridColDef[] = [\n    {\n      field: 'radiobutton',\n      width: 25,\n      sortable: false,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n      renderCell: params => {\n        return (\n          <RadioOption\n            value={params.id as string}\n            currentValue={selectedEvaluation}\n            onChange={onEvaluationChange}\n            label=\"\"\n            style={{ marginBottom: '16px' }}\n          />\n        )\n      },\n    },\n    {\n      field: 'name',\n      flex: 1,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n    },\n  ]\n\n  const getRows = () => {\n    return (evaluations ?? [])?.map(evaluation => {\n      return {\n        id: evaluation.id,\n        name: evaluation.name,\n      }\n    })\n  }\n\n  return (\n    <Box>\n      <Box\n        sx={{ display: 'flex', backgroundColor: '#FBFBFC', padding: '10px' }}\n      >\n        <Typography\n          variant=\"h6\"\n          sx={{ fontSize: '18px', lineHeight: '20px', fontWeight: 700 }}\n        >\n          Your Submission Directory\n        </Typography>\n      </Box>\n      <DataGrid\n        columns={columns}\n        rows={getRows()}\n        hideFooter\n        density=\"compact\"\n        autoHeight\n        loading={isLoading}\n        components={{\n          Header: () => null,\n          Toolbar: () => null,\n        }}\n        sx={{\n          fontSize: '14px',\n          border: 'none',\n          height: '100%',\n          '& .MuiDataGrid-columnHeaders': {\n            display: 'none',\n          },\n          '& .MuiDataGrid-virtualScroller': {\n            marginTop: '0px !important',\n          },\n          '& .Mui-odd': {\n            backgroundColor: '#FBFBFC',\n          },\n          '.MuiDataGrid-columnHeaderTitleContainer': {\n            justifyContent: 'space-between',\n          },\n        }}\n        getRowClassName={params =>\n          params.indexRelativeToCurrentPage % 2 === 0 ? 'Mui-even' : 'Mui-odd'\n        }\n      />\n      <Box mt={3}>\n        <Typography variant=\"body1\">Submission Name (optional)</Typography>\n        <TextField\n          id=\"submissionName\"\n          name=\"submissionName\"\n          fullWidth\n          onChange={e => onSubmissionNameChange(e.target.value)}\n          value={submissonName}\n        />\n        {submissionError && (\n          <Box mt={1}>\n            <Alert severity=\"error\">{submissionError}</Alert>\n          </Box>\n        )}\n      </Box>\n    </Box>\n  )\n}\n\nexport default EvaluationQueueList\n","import React, { useState } from 'react'\nimport {\n  DockerCommit,\n  TeamSubmissionEligibility,\n} from '@sage-bionetworks/synapse-types'\nimport StepperDialog from '../StepperDialog'\nimport { Step } from '../StepperDialog/StepperDialog'\nimport { useSynapseContext } from '../../utils'\nimport SubmissionCommitList from './SubmissionCommitList'\nimport EvaluationQueueList from './EvaluationQueueList'\nimport { Typography } from '@mui/material'\nimport { EvaluationSubmission } from '@sage-bionetworks/synapse-types'\nimport SynapseClient from '../../synapse-client'\nimport { EntityItem } from './ChallengeSubmission'\nimport { EntityType } from '@sage-bionetworks/synapse-types'\nimport { displayToast } from '../ToastMessage'\n\nenum StepsEnum {\n  SELECT_COMMIT = 'SELECT_COMMIT',\n  SELECT_EVALUATION = 'SELECT_EVALUATION',\n  SUBMISSION_SUCCESS = 'SUBMISSION_SUCCESS',\n}\ntype StepKey = keyof typeof StepsEnum\ntype StepList = {\n  [key in StepKey]: Step\n}\n\nconst stepsDocker: StepList = {\n  SELECT_COMMIT: {\n    id: StepsEnum.SELECT_COMMIT,\n    title: 'Select Commit for Submission',\n    nextStep: StepsEnum.SELECT_EVALUATION,\n    nextEnabled: false,\n  },\n  SELECT_EVALUATION: {\n    id: StepsEnum.SELECT_EVALUATION,\n    title: 'Select Evaluation Queue',\n    previousStep: StepsEnum.SELECT_COMMIT,\n    confirmStep: StepsEnum.SUBMISSION_SUCCESS,\n    confirmButtonText: 'Submit',\n  },\n  SUBMISSION_SUCCESS: {\n    id: StepsEnum.SUBMISSION_SUCCESS,\n    title: 'Submission Successful!',\n    confirmButtonText: 'Close',\n    confirmEnabled: true,\n  },\n}\n\nconst stepsFile: StepList = {\n  SELECT_COMMIT: { id: StepsEnum.SELECT_COMMIT, title: '' },\n  SELECT_EVALUATION: {\n    id: StepsEnum.SELECT_EVALUATION,\n    title: 'Select Evaluation Queue',\n    confirmStep: StepsEnum.SUBMISSION_SUCCESS,\n    confirmButtonText: 'Submit',\n  },\n  SUBMISSION_SUCCESS: {\n    id: StepsEnum.SUBMISSION_SUCCESS,\n    title: 'Submission Successful!',\n    confirmButtonText: 'Close',\n    confirmEnabled: true,\n  },\n}\n\nconst getSteps = (entityType: EntityType.DOCKER_REPO | EntityType.FILE) => {\n  return entityType === EntityType.DOCKER_REPO ? stepsDocker : stepsFile\n}\n\ntype ChallengeSubmissionStepperProps = {\n  projectId: string\n  userId: string\n  teamId: string\n  entity: EntityItem\n  entityType: EntityType.DOCKER_REPO | EntityType.FILE\n  isShowingModal: boolean\n  onClose: () => void\n}\n\nfunction ChallengeSubmissionStepper({\n  projectId,\n  userId,\n  teamId,\n  entity,\n  entityType,\n  isShowingModal,\n  onClose,\n}: ChallengeSubmissionStepperProps) {\n  const { accessToken } = useSynapseContext()\n  const steps = getSteps(entityType)\n  const initialStep =\n    entityType === EntityType.DOCKER_REPO\n      ? steps.SELECT_COMMIT\n      : steps.SELECT_EVALUATION\n  const [step, setStep] = useState<Step>(initialStep)\n  const [errorMessage, setErrorMessage] = useState<string>()\n  const [selectedCommit, setSelectedCommit] = useState<DockerCommit>()\n\n  const [submissionName, setSubmissionName] = useState<string>('')\n  const [selectedEval, setSelectedEval] = useState<string | undefined>()\n  const [confirming, setConfirming] = useState<boolean>(false)\n\n  const hide = () => {\n    setErrorMessage(undefined)\n    setSelectedCommit(undefined)\n    setSubmissionName('')\n    setSelectedEval(undefined)\n    setConfirming(false)\n    onClose()\n    setStep(initialStep)\n  }\n\n  function handleStepChange(value?: StepsEnum) {\n    if (!value || !steps[value]) return\n    setErrorMessage(undefined)\n    setStep(steps[value])\n  }\n\n  async function confirmEligibility() {\n    if (!selectedEval) return setErrorMessage('Please select an evaluation.')\n    try {\n      return await SynapseClient.getSubmissionEligibility(\n        selectedEval,\n        teamId,\n        accessToken,\n      )\n    } catch (err) {\n      return setErrorMessage(err.message)\n    }\n  }\n\n  async function submitForEvaluation(eligibility: TeamSubmissionEligibility) {\n    if (\n      !entity.id ||\n      (entityType === EntityType.DOCKER_REPO && !selectedCommit)\n    )\n      return setErrorMessage('Error: Invalid entity or commit.')\n\n    const contributors = eligibility.membersEligibility\n      .filter(\n        member =>\n          !member.hasConflictingSubmission &&\n          member.isEligible &&\n          !member.isQuotaFilled &&\n          member.isRegistered,\n      )\n      .map(member => {\n        return { principalId: member.principalId.toString() }\n      })\n\n    const submission: EvaluationSubmission = {\n      userId: userId,\n      evaluationId: selectedEval!,\n      entityId: entity.id,\n      versionNumber: entity.versionNumber ?? -1,\n      teamId: teamId,\n      contributors,\n    }\n    if (entityType === EntityType.DOCKER_REPO) {\n      submission.dockerRepositoryName = entity.repositoryName\n      submission.dockerDigest = selectedCommit!.digest\n    }\n\n    if (submissionName !== '') submission['name'] = submissionName\n\n    try {\n      await SynapseClient.submitToEvaluation(\n        accessToken,\n        submission,\n        entity.etag!,\n        eligibility.eligibilityStateHash,\n      )\n      displayToast('Submitted successfully!', 'success')\n      hide()\n    } catch (e) {\n      setErrorMessage(e.message)\n    }\n  }\n\n  const onConfirmHandler = async () => {\n    const eligibility = await confirmEligibility()\n    if (eligibility) {\n      await submitForEvaluation(eligibility)\n    }\n  }\n\n  const onCommitChanged = (value: DockerCommit) => {\n    setSelectedCommit(value)\n    setStep({ ...step, nextEnabled: true })\n  }\n\n  function stepperContent() {\n    switch (step.id) {\n      case StepsEnum.SELECT_COMMIT:\n        return (\n          <SubmissionCommitList\n            repository={entity}\n            selectedCommit={selectedCommit}\n            onCommitChanged={onCommitChanged}\n          />\n        )\n        break\n      case StepsEnum.SELECT_EVALUATION:\n        return (\n          <EvaluationQueueList\n            projectId={projectId}\n            submissonName={submissionName}\n            onSubmissionNameChange={setSubmissionName}\n            selectedEvaluation={selectedEval}\n            onEvaluationChange={value => {\n              setStep({ ...step, confirmEnabled: true })\n              setSelectedEval(value)\n            }}\n          />\n        )\n      case StepsEnum.SUBMISSION_SUCCESS:\n        return (\n          <Typography variant=\"body1\" sx={{ fontSize: '16px' }}>\n            Your submission will be scored and results posted to the Challenge\n            Leaderboard.\n          </Typography>\n        )\n      default:\n        return <></>\n    }\n  }\n\n  return (\n    <StepperDialog\n      errorMessage={errorMessage}\n      onCancel={hide}\n      onStepChange={handleStepChange as (arg: string) => void}\n      open={isShowingModal}\n      onConfirm={onConfirmHandler}\n      confirming={confirming}\n      step={step}\n      content={stepperContent()}\n      loading={false}\n    />\n  )\n}\n\nexport default ChallengeSubmissionStepper\n","import React, { useEffect, useState } from 'react'\nimport {\n  useGetCurrentUserProfile,\n  useGetEntityACL,\n  useGetEntityAlias,\n  useGetEntityChallenge,\n  useGetEntityPermissions,\n  useGetUserSubmissionTeamsInfinite,\n  useUpdateEntityACL,\n} from '../../synapse-queries'\nimport { useSynapseContext } from '../../utils'\nimport {\n  ACCESS_TYPE,\n  Challenge,\n  Project,\n  ResourceAccess,\n  Team,\n} from '@sage-bionetworks/synapse-types'\nimport { ErrorBanner, SynapseErrorBoundary } from '../error/ErrorBanner'\nimport { useGetTeam } from '../../synapse-queries/team/useTeam'\nimport { createEntity } from '../../synapse-client'\nimport { PROJECT_CONCRETE_TYPE_VALUE } from '@sage-bionetworks/synapse-types'\nimport SubmissionDirectoryList from './SubmissionDirectoryList'\nimport ChallengeSubmissionStepper from './ChallengeSubmissionStepper'\nimport { EntityType } from '@sage-bionetworks/synapse-types'\nimport { Entity } from '@sage-bionetworks/synapse-types'\n\nexport type EntityItem = Entity & {\n  repositoryName?: string\n  versionNumber?: number\n}\n\nexport type ChallengeSubmissionProps = {\n  entityType: EntityType.DOCKER_REPO | EntityType.FILE\n  pageSize: number\n  projectId: string\n}\n\nexport function ChallengeSubmission({\n  entityType,\n  projectId,\n  pageSize = 10,\n}: ChallengeSubmissionProps) {\n  const { accessToken } = useSynapseContext()\n  const isLoggedIn = Boolean(accessToken)\n\n  const [loading, setLoading] = useState<boolean>(true)\n  const [errorMessage, setErrorMessage] = useState<string>()\n  const [submissionTeamId, setSubmissionTeamId] = useState<string>()\n  const [challengeProjectId, setChallengeProjectId] = useState<string>()\n  const [newProject, setNewProject] = useState<Project>()\n  const [isProjectNewlyCreated, setIsProjectNewlyCreated] = useState<boolean>()\n  const [projectAliasFound, setProjectAliasFound] = useState<boolean>()\n  const { mutate: updateACL } = useUpdateEntityACL()\n  const [canSubmit, setCanSubmit] = useState<boolean>(false)\n  const [selectedEntity, setSelectedEntity] = useState<EntityItem>()\n  const [isShowingModal, setIsShowingModal] = useState<boolean>(false)\n\n  const EMPTY_ID = ''\n\n  const getProject = (c: Challenge, t: Team): Project => {\n    const name = `Challenge Submission Project-${c.projectId}-${t.id}`\n    const alias = name.replace(/\\s+/g, '_').replace(/-+/g, '_').toLowerCase()\n    return {\n      name,\n      alias,\n      concreteType: PROJECT_CONCRETE_TYPE_VALUE,\n      description: `This Project was automatically created for Team \"${t.name}\" for Challenge \"${c.id}\"`,\n    }\n  }\n\n  // Use the existing accessToken if present to get the current user's profile / userId\n  const { data: userProfile, isLoading: isProfileLoading } =\n    useGetCurrentUserProfile({\n      enabled: isLoggedIn,\n      onError: () => {\n        setLoading(false)\n        setErrorMessage(`Error: Could not retrieve user profile`)\n      },\n    })\n\n  // Retrieve the challenge associated with the projectId passed through props\n  const { data: challenge } = useGetEntityChallenge(projectId, {\n    enabled: isLoggedIn && !!projectId,\n    refetchInterval: Infinity,\n    useErrorBoundary: true,\n  })\n\n  // Determine whether or not the given user belongs to any submission teams\n  const { data: userSubmissionTeams } = useGetUserSubmissionTeamsInfinite(\n    challenge?.id ?? EMPTY_ID,\n    2,\n  )\n\n  useEffect(() => {\n    if (isLoggedIn && !!challenge && userSubmissionTeams) {\n      const isReg = userSubmissionTeams.results.length > 0\n      if (!isReg) {\n        setErrorMessage(\n          'Error: Please join a Submission Team before continuing.',\n        )\n        return setLoading(false)\n      }\n      if (userSubmissionTeams.results.length > 1) {\n        setErrorMessage(\n          'Error: You are a member of more than one Submission Team. You may only belong to one Submission Team per Challenge.',\n        )\n        return setLoading(false)\n      }\n      setSubmissionTeamId(userSubmissionTeams.results[0])\n    }\n  }, [challenge, isLoggedIn, userSubmissionTeams])\n\n  const { data: submissionTeam } = useGetTeam(submissionTeamId!, {\n    enabled: !!submissionTeamId,\n    refetchInterval: Infinity,\n    useErrorBoundary: true,\n  })\n\n  const { data: entityAlias } = useGetEntityAlias(\n    newProject?.alias ?? EMPTY_ID,\n    {\n      enabled: newProject !== undefined && !!challenge && !!submissionTeam,\n      onError: error => {\n        setLoading(false)\n        setProjectAliasFound(false)\n        setErrorMessage(error.reason)\n      },\n    },\n  )\n  useEffect(() => {\n    if (entityAlias) {\n      setProjectAliasFound(true)\n      setChallengeProjectId(entityAlias.id)\n    }\n  }, [entityAlias])\n\n  /**\n   * If the challenge project was just created, retrieve its ACL\n   * and add the submission team to it\n   */\n  const { data: entityACL } = useGetEntityACL(challengeProjectId ?? EMPTY_ID, {\n    enabled: !!challengeProjectId && isProjectNewlyCreated === true,\n    refetchInterval: Infinity,\n    onError: error => {\n      setLoading(false)\n      setErrorMessage(error.reason)\n    },\n  })\n\n  useEffect(() => {\n    if (entityACL && isProjectNewlyCreated === true) {\n      // Give submission team admin access to challenge project\n      const teamResourceAccess: ResourceAccess = {\n        principalId: Number(submissionTeam!.id),\n        accessType: [\n          ACCESS_TYPE.CHANGE_PERMISSIONS,\n          ACCESS_TYPE.CHANGE_SETTINGS,\n          ACCESS_TYPE.CREATE,\n          ACCESS_TYPE.DELETE,\n          ACCESS_TYPE.DOWNLOAD,\n          ACCESS_TYPE.MODERATE,\n          ACCESS_TYPE.READ,\n          ACCESS_TYPE.UPDATE,\n        ],\n      }\n      updateACL({\n        ...entityACL,\n        resourceAccess: [...entityACL.resourceAccess, teamResourceAccess],\n      })\n      setIsProjectNewlyCreated(false)\n    }\n  }, [entityACL])\n\n  const { data: entityPermissions } = useGetEntityPermissions(\n    challengeProjectId!,\n    {\n      enabled: !!challengeProjectId,\n      refetchInterval: Infinity,\n      onError: error => {\n        setLoading(false)\n        setErrorMessage(error.reason)\n      },\n    },\n  )\n\n  useEffect(() => {\n    if (\n      entityPermissions &&\n      entityPermissions.canView &&\n      entityPermissions.canAddChild\n    ) {\n      setCanSubmit(true)\n    }\n    setLoading(false)\n  }, [entityPermissions])\n\n  useEffect(() => {\n    if (!isLoggedIn && (!!userProfile || !isProfileLoading)) {\n      setLoading(false)\n      setErrorMessage('Please login to continue.')\n    }\n  }, [isLoggedIn, userProfile, isProfileLoading])\n\n  useEffect(() => {\n    if (accessToken && submissionTeam && challenge && !newProject) {\n      const project = getProject(challenge, submissionTeam)\n      setNewProject(project)\n    }\n  }, [accessToken, submissionTeam, challenge, newProject])\n\n  useEffect(() => {\n    async function createChallengeProject() {\n      const project: Project = getProject(challenge!, submissionTeam!)\n      const challengeProject = await createEntity(project, accessToken)\n      if (challengeProject && challengeProject.id) {\n        setChallengeProjectId(challengeProject.id)\n        setIsProjectNewlyCreated(true)\n      }\n    }\n    if (\n      accessToken &&\n      submissionTeam &&\n      challenge &&\n      newProject &&\n      projectAliasFound === false\n    ) {\n      createChallengeProject()\n    }\n  }, [accessToken, submissionTeam, challenge, newProject, projectAliasFound])\n\n  const itemSelectedHandler = (entity: EntityItem) => {\n    setSelectedEntity(entity)\n    setIsShowingModal(true)\n  }\n\n  const onModalClose = () => {\n    setIsShowingModal(false)\n  }\n\n  return (\n    <SynapseErrorBoundary>\n      {loading && (\n        <span data-testid=\"SpinnerButton-spinner\" className=\"spinner\" />\n      )}\n      {canSubmit && (\n        <>\n          <SubmissionDirectoryList\n            entityType={entityType}\n            pageSize={pageSize}\n            challengeProjectId={challengeProjectId!}\n            onItemSelected={itemSelectedHandler}\n          />\n          {userProfile && selectedEntity && (\n            <ChallengeSubmissionStepper\n              projectId={projectId}\n              userId={userProfile?.ownerId}\n              teamId={submissionTeamId!}\n              entity={selectedEntity}\n              entityType={entityType}\n              isShowingModal={isShowingModal}\n              onClose={onModalClose}\n            />\n          )}\n        </>\n      )}\n      {errorMessage && <ErrorBanner error={errorMessage}></ErrorBanner>}\n    </SynapseErrorBoundary>\n  )\n}\n\nexport default ChallengeSubmission\n"],"names":["useGetTeam","teamId","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient","CopyToClipboardIcon","value","size","props","showModal","setShowModal","React","ref","jsxs","Fragment","jsx","ToastMessage","Box","IconButton","ref2","value2","event","IconSvg","SubmissionDirectoryList","pageSize","challengeProjectId","entityType","onItemSelected","queryClient","useQueryClient","page","setPage","useState","selectedItem","setSelectedItem","errorMessage","setErrorMessage","canSubmit","setCanSubmit","fetchedHeaders","setFetchedHeaders","nextPageToken","setNextPageToken","fetchNextPage","setFetchNextPage","confirmOpen","setConfirmOpen","uploadAttempt","setUploadAttempt","PER_PAGE","HEADERS_PER_PAGE","PROJECT_URL","getEndpoint","BackendDestinationEnum","request","SortBy","Direction","headerResults","refetch","useGetEntityChildren","data","newHeaders","start","getPageHeaders","pageStart","reset","useEffect","areEntitiesLoading","entities","useGetEntities","entityChangeHandler","entity","entity2","EntityType","commits","e","columns","params","RadioOption","selectedItemId","Link","getRows","entities2","newRows","formatDate","dayjs","handlePageChange","newPageNum","itemSelectedHandler","createEntity","file","fileHandleId","fileName","newFileEntity","FILE_ENTITY_CONCRETE_TYPE_VALUE","err","updateEntity","entityId","updateRequest","updatedEntity","invalidateAllQueriesForEntity","handleUpload","response","entityLookupRequest","Typography","DataGrid","ErrorBanner","FileUpload","resp","Button","InfoTwoTone","ConfirmationDialog","useGetDockerTags","offset","limit","sort","sortDirection","SubmissionCommitList","repository","selectedCommit","onCommitChanged","isLoading","commitResults","commitChangeHandler","digest","commit","commit2","getPageData","n","EvaluationQueueList","projectId","submissonName","selectedEvaluation","onSubmissionNameChange","onEvaluationChange","submissionError","evaluations","useGetEntityEvaluations","ACCESS_TYPE","_a","evaluation","TextField","Alert","stepsDocker","stepsFile","getSteps","ChallengeSubmissionStepper","userId","isShowingModal","onClose","steps","initialStep","step","setStep","setSelectedCommit","submissionName","setSubmissionName","selectedEval","setSelectedEval","confirming","setConfirming","hide","handleStepChange","confirmEligibility","submitForEvaluation","eligibility","contributors","member","submission","displayToast","onConfirmHandler","stepperContent","StepperDialog","ChallengeSubmission","isLoggedIn","loading","setLoading","submissionTeamId","setSubmissionTeamId","setChallengeProjectId","newProject","setNewProject","isProjectNewlyCreated","setIsProjectNewlyCreated","projectAliasFound","setProjectAliasFound","updateACL","useUpdateEntityACL","selectedEntity","setSelectedEntity","setIsShowingModal","EMPTY_ID","getProject","c","t","name","alias","PROJECT_CONCRETE_TYPE_VALUE","userProfile","isProfileLoading","useGetCurrentUserProfile","challenge","useGetEntityChallenge","userSubmissionTeams","useGetUserSubmissionTeamsInfinite","submissionTeam","entityAlias","useGetEntityAlias","error","entityACL","useGetEntityACL","teamResourceAccess","entityPermissions","useGetEntityPermissions","project","createChallengeProject","challengeProject","onModalClose","SynapseErrorBoundary"],"mappings":"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"}