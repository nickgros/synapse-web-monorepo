{"version":3,"file":"handlers-9e46cc93.js","sources":["../../mocks/faker/generateDiscussion.ts","../../mocks/discussion/mock_discussion.ts","../../mocks/msw/handlers/discussionHandlers.ts","../../mocks/faker/generateSubscription.ts","../../mocks/mockSubscription.ts","../../mocks/msw/handlers/subscriptionHandlers.ts","../../mocks/msw/handlers.ts"],"sourcesContent":["import { DiscussionThreadBundle, Forum } from '@sage-bionetworks/synapse-types'\nimport { faker } from '@faker-js/faker'\nimport { mockUserData } from '../user/mock_user_profile'\nimport { pickRandomMockUser } from './fakerUtils'\nimport { SetRequired } from 'type-fest'\n\nexport function generateForum(\n  overrides: SetRequired<Partial<Forum>, 'projectId'>,\n): Forum {\n  return {\n    id: String(faker.number.int()),\n    etag: faker.string.uuid(),\n    ...overrides,\n  }\n}\n\nexport function generateDiscussionThreadBundle(\n  overrides: SetRequired<\n    Partial<DiscussionThreadBundle>,\n    'forumId' | 'projectId'\n  >,\n): DiscussionThreadBundle {\n  return {\n    id: String(faker.number.int()),\n    activeAuthors: mockUserData.map(u => String(u.id)),\n    createdBy: String(pickRandomMockUser().id),\n    createdOn: faker.date.anytime().toISOString(),\n    etag: faker.string.uuid(),\n    isDeleted: false,\n    isEdited: false,\n    isPinned: false,\n    lastActivity: faker.date.anytime().toISOString(),\n    messageKey: `${faker.number.int()}/${faker.number.int()}/${faker.string.uuid()}`,\n    modifiedOn: faker.date.anytime().toISOString(),\n    numberOfReplies: faker.number.int({ max: 500 }),\n    numberOfViews: faker.number.int({ max: 5000 }),\n    title: faker.lorem.words({ min: 2, max: 8 }),\n    ...overrides,\n  }\n}\n","import {\n  DiscussionReplyBundle,\n  DiscussionThreadBundle,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  mockUserProfileData,\n  mockUserProfileData2,\n} from '../user/mock_user_profile'\nimport { times } from 'lodash-es'\nimport {\n  generateDiscussionThreadBundle,\n  generateForum,\n} from '../faker/generateDiscussion'\nimport { mockProjects } from '../entity/mockProject'\n\nexport const MOCK_FORUM_ID = '984321189'\n\nexport const mockForums = mockProjects.map(project =>\n  generateForum({\n    projectId: project.id,\n  }),\n)\nconst generatedDiscussionThreadBundles = mockForums.flatMap(forum => {\n  return times(10).map(i =>\n    generateDiscussionThreadBundle({\n      forumId: forum.id,\n      projectId: forum.projectId,\n    }),\n  )\n})\n\nexport const MOCK_SUBSCRIPTION_ID = '123'\n\nexport const mockDiscussionThreadBundle: DiscussionThreadBundle = {\n  id: '999',\n  forumId: MOCK_FORUM_ID,\n  projectId: '123',\n  title: 'mockTitle1',\n  createdOn: '2022-09-28',\n  createdBy: mockUserProfileData.ownerId,\n  modifiedOn: '2022-09-28',\n  etag: 'xxx',\n  messageKey: 'xxx',\n  numberOfViews: 2,\n  numberOfReplies: 3,\n  lastActivity: '2022-09-28',\n  activeAuthors: [mockUserProfileData.ownerId, mockUserProfileData2.ownerId],\n  isEdited: false,\n  isDeleted: false,\n  isPinned: false,\n}\n\nexport const mockDiscussionThreadBundle2: DiscussionThreadBundle = {\n  ...mockDiscussionThreadBundle,\n  id: '888',\n  projectId: '12',\n  title: 'mockTitle2',\n  createdBy: mockUserProfileData2.ownerId,\n  numberOfViews: 14,\n  numberOfReplies: 3,\n}\n\nexport const mockDiscussionReplyBundle: DiscussionReplyBundle = {\n  ...mockDiscussionThreadBundle,\n  id: '123',\n  createdBy: mockUserProfileData2.ownerId,\n  threadId: mockDiscussionThreadBundle.id,\n}\n\nexport const mockDiscussionThreadBundles = [\n  ...generatedDiscussionThreadBundles,\n  mockDiscussionThreadBundle,\n  mockDiscussionThreadBundle2,\n]\n","import { rest } from 'msw'\nimport { FORUM, THREAD } from '../../../src/utils/APIConstants'\nimport { Forum } from '@sage-bionetworks/synapse-types'\nimport { SynapseApiResponse } from '../handlers'\nimport {\n  mockDiscussionThreadBundles,\n  mockForums,\n} from '../../discussion/mock_discussion'\n\nexport function getDiscussionHandlers(backendOrigin: string) {\n  return [\n    rest.get(`${backendOrigin}${FORUM}/:id`, async (req, res, ctx) => {\n      let status = 404\n      let resp: SynapseApiResponse<Forum> = {\n        reason: `MSW could not find a mock forum object with ID ${req.params.id}`,\n      }\n\n      const match = mockForums.find(f => f.id === req.params.id)\n      if (match) {\n        status = 200\n        resp = match\n      }\n\n      return res(ctx.status(status), ctx.json(resp))\n    }),\n\n    rest.get(`${backendOrigin}${THREAD}/:id`, async (req, res, ctx) => {\n      let status = 404\n      let resp: SynapseApiResponse<Forum> = {\n        reason: `MSW could not find a mock discussion thread bundle object with ID ${req.params.id}`,\n      }\n      if (req.params.id === 'messageUrl') {\n        // This is a different endpoint\n        resp = {\n          reason: 'GET /thread/messageUrl is not yet implemented',\n        }\n      }\n\n      const match = mockDiscussionThreadBundles.find(\n        dtb => dtb.id === req.params.id,\n      )\n      if (match) {\n        status = 200\n        resp = match\n      }\n\n      return res(ctx.status(status), ctx.json(resp))\n    }),\n  ]\n}\n","import { SetRequired } from 'type-fest'\nimport { Subscription } from '@sage-bionetworks/synapse-types'\nimport { faker } from '@faker-js/faker'\nimport { MOCK_USER_ID } from '../user/mock_user_profile'\n\nexport function generateSubscription(\n  overrides: SetRequired<Partial<Subscription>, 'objectId' | 'objectType'>,\n): Subscription {\n  return {\n    subscriptionId: String(faker.number.int({ min: 1000, max: 9999 })),\n    subscriberId: String(MOCK_USER_ID),\n    createdOn: faker.date.anytime().toISOString(),\n    ...overrides,\n  }\n}\n","import {\n  Subscription,\n  SubscriptionObjectType,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  mockDiscussionThreadBundles,\n  mockForums,\n} from './discussion/mock_discussion'\nimport { generateSubscription } from './faker/generateSubscription'\n\nconst forumSubscriptions: Subscription[] = mockForums.map(\n  (forum): Subscription =>\n    generateSubscription({\n      objectId: forum.id,\n      objectType: SubscriptionObjectType.FORUM,\n    }),\n)\n\nconst threadSubscriptions: Subscription[] = mockDiscussionThreadBundles.map(\n  (dtb): Subscription =>\n    generateSubscription({\n      objectType: SubscriptionObjectType.THREAD,\n      objectId: dtb.id,\n    }),\n)\n\nexport { forumSubscriptions, threadSubscriptions }\n","import { rest } from 'msw'\nimport {\n  Subscription,\n  SubscriptionObjectType,\n  SubscriptionPagedResults,\n  SubscriptionRequest,\n} from '@sage-bionetworks/synapse-types'\nimport { SynapseApiResponse } from '../handlers'\nimport { forumSubscriptions, threadSubscriptions } from '../../mockSubscription'\n\nexport function getSubscriptionHandlers(backendOrigin: string) {\n  return [\n    rest.get(\n      `${backendOrigin}/repo/v1/subscription/all`,\n      async (req, res, ctx) => {\n        const objectType = req.url.searchParams.get('objectType')\n        const sortDirection = req.url.searchParams.get('sortDirection')\n        const offset = req.url.searchParams.get('offset')\n        const limit = req.url.searchParams.get('limit')\n        let allResults: Subscription[] = []\n        if (objectType === SubscriptionObjectType.FORUM) {\n          allResults = forumSubscriptions\n        } else if (objectType === SubscriptionObjectType.THREAD) {\n          allResults = threadSubscriptions\n        }\n\n        const totalResults = allResults.length\n\n        if (sortDirection) {\n          allResults = allResults.sort((a, b) => {\n            const val = new Date(b.createdOn) - new Date(a.createdOn)\n            return sortDirection === 'ASC' ? val : -1 * val\n          })\n        }\n\n        let offsetValue = 0\n        let limitValue = undefined\n        if (offset) {\n          offsetValue = parseInt(offset)\n        }\n        if (limit) {\n          limitValue = parseInt(limit)\n        }\n\n        allResults = allResults.slice(offsetValue, offsetValue + limitValue)\n\n        let resp: SynapseApiResponse<SubscriptionPagedResults> = {\n          results: allResults,\n          totalNumberOfResults: totalResults,\n        }\n\n        return res(ctx.status(200), ctx.json(resp))\n      },\n    ),\n    rest.post(\n      `${backendOrigin}/repo/v1/subscription/list`,\n      async (req, res, ctx) => {\n        const request: SubscriptionRequest = await req.json()\n        const objectType = request.objectType\n        let allResults = []\n        if (objectType === SubscriptionObjectType.FORUM) {\n          allResults = forumSubscriptions\n        } else if (objectType === SubscriptionObjectType.THREAD) {\n          allResults = threadSubscriptions\n        }\n\n        allResults.filter(sub => request.idList.includes(sub.subscriptionId))\n\n        const totalResults = allResults.length\n\n        let resp: SynapseApiResponse<SubscriptionPagedResults> = {\n          results: allResults,\n          totalNumberOfResults: totalResults,\n        }\n\n        return res(ctx.status(200), ctx.json(resp))\n      },\n    ),\n  ]\n}\n","import { rest } from 'msw'\nimport { getEntityHandlers } from './handlers/entityHandlers'\nimport {\n  getCurrentUserCertifiedValidatedHandler,\n  getUserProfileHandlers,\n} from './handlers/userProfileHandlers'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../src/utils/functions/getEndpoint'\nimport {\n  getAccessRequirementEntityBindingHandlers,\n  getAccessRequirementHandlers,\n  getAccessRequirementStatusHandlers,\n} from './handlers/accessRequirementHandlers'\nimport { getWikiHandlers } from './handlers/wikiHandlers'\nimport { getDataAccessRequestHandlers } from './handlers/dataAccessRequestHandlers'\nimport { getResearchProjectHandlers } from './handlers/researchProjectHandlers'\nimport { getFileHandlers } from './handlers/fileHandlers'\nimport { SynapseError } from '../../src/utils/SynapseError'\nimport { getDiscussionHandlers } from './handlers/discussionHandlers'\nimport { getSubscriptionHandlers } from './handlers/subscriptionHandlers'\n\n// Simple utility type that just indicates that the response body could be an error like the Synapse backend may send.\nexport type SynapseApiResponse<T> = T | SynapseError\n\nconst getHandlers = (backendOrigin: string) => [\n  rest.options('*', async (req, res, ctx) => {\n    return res(ctx.status(200))\n  }),\n  rest.get(\n    `${backendOrigin}/auth/v1/authenticatedOn`,\n    async (req, res, ctx) => {\n      return res(\n        ctx.status(200),\n        ctx.json({ authenticatedOn: new Date().toISOString() }),\n      )\n    },\n  ),\n  ...getEntityHandlers(backendOrigin),\n  ...getUserProfileHandlers(backendOrigin),\n  getCurrentUserCertifiedValidatedHandler(backendOrigin, true, true),\n  ...getWikiHandlers(backendOrigin),\n  ...getAccessRequirementHandlers(backendOrigin),\n  ...getAccessRequirementEntityBindingHandlers(backendOrigin),\n  ...getAccessRequirementStatusHandlers(backendOrigin),\n  ...getDataAccessRequestHandlers(backendOrigin),\n  ...getResearchProjectHandlers(backendOrigin),\n  ...getFileHandlers(backendOrigin),\n  ...getDiscussionHandlers(backendOrigin),\n  ...getSubscriptionHandlers(backendOrigin),\n]\n\nconst handlers = getHandlers(getEndpoint(BackendDestinationEnum.REPO_ENDPOINT))\n\nexport { handlers, getHandlers }\n"],"names":["generateForum","overrides","faker","generateDiscussionThreadBundle","mockUserData","u","pickRandomMockUser","MOCK_FORUM_ID","mockForums","mockProjects","project","generatedDiscussionThreadBundles","forum","times","mockDiscussionThreadBundle","mockUserProfileData","mockUserProfileData2","mockDiscussionThreadBundle2","mockDiscussionThreadBundles","getDiscussionHandlers","backendOrigin","rest","FORUM","req","res","ctx","status","resp","match","f","THREAD","dtb","generateSubscription","MOCK_USER_ID","forumSubscriptions","SubscriptionObjectType","threadSubscriptions","getSubscriptionHandlers","objectType","sortDirection","offset","limit","allResults","totalResults","a","b","val","offsetValue","limitValue","request","sub","getHandlers","getEntityHandlers","getUserProfileHandlers","getCurrentUserCertifiedValidatedHandler","getWikiHandlers","getAccessRequirementHandlers","getAccessRequirementEntityBindingHandlers","getAccessRequirementStatusHandlers","getDataAccessRequestHandlers","getResearchProjectHandlers","getFileHandlers","getEndpoint","BackendDestinationEnum"],"mappings":"yqBAMO,SAASA,EACdC,EACO,CACA,MAAA,CACL,GAAI,OAAOC,EAAM,OAAO,KAAK,EAC7B,KAAMA,EAAM,OAAO,KAAK,EACxB,GAAGD,CAAA,CAEP,CAEO,SAASE,EACdF,EAIwB,CACjB,MAAA,CACL,GAAI,OAAOC,EAAM,OAAO,KAAK,EAC7B,cAAeE,EAAa,OAAS,OAAOC,EAAE,EAAE,CAAC,EACjD,UAAW,OAAOC,EAAmB,EAAE,EAAE,EACzC,UAAWJ,EAAM,KAAK,QAAA,EAAU,YAAY,EAC5C,KAAMA,EAAM,OAAO,KAAK,EACxB,UAAW,GACX,SAAU,GACV,SAAU,GACV,aAAcA,EAAM,KAAK,QAAA,EAAU,YAAY,EAC/C,WAAY,GAAGA,EAAM,OAAO,IAAI,KAAKA,EAAM,OAAO,IAAI,KAAKA,EAAM,OAAO,KAAK,IAC7E,WAAYA,EAAM,KAAK,QAAA,EAAU,YAAY,EAC7C,gBAAiBA,EAAM,OAAO,IAAI,CAAE,IAAK,IAAK,EAC9C,cAAeA,EAAM,OAAO,IAAI,CAAE,IAAK,IAAM,EAC7C,MAAOA,EAAM,MAAM,MAAM,CAAE,IAAK,EAAG,IAAK,EAAG,EAC3C,GAAGD,CAAA,CAEP,CCxBO,MAAMM,EAAgB,YAEhBC,EAAaC,EAAa,OACrCT,EAAc,CACZ,UAAWU,EAAQ,EAAA,CACpB,CACH,EACMC,EAAmCH,EAAW,QAAiBI,GAC5DC,EAAM,EAAE,EAAE,OACfV,EAA+B,CAC7B,QAASS,EAAM,GACf,UAAWA,EAAM,SAAA,CAClB,CAAA,CAEJ,EAIYE,EAAqD,CAChE,GAAI,MACJ,QAASP,EACT,UAAW,MACX,MAAO,aACP,UAAW,aACX,UAAWQ,EAAoB,QAC/B,WAAY,aACZ,KAAM,MACN,WAAY,MACZ,cAAe,EACf,gBAAiB,EACjB,aAAc,aACd,cAAe,CAACA,EAAoB,QAASC,EAAqB,OAAO,EACzE,SAAU,GACV,UAAW,GACX,SAAU,EACZ,EAEaC,EAAsD,CACjE,GAAGH,EACH,GAAI,MACJ,UAAW,KACX,MAAO,aACP,UAAWE,EAAqB,QAChC,cAAe,GACf,gBAAiB,CACnB,GAEgE,CAC9D,GAAGF,EAEH,UAAWE,EAAqB,QAChC,SAAUF,EAA2B,EACvC,GAEO,MAAMI,EAA8B,CACzC,GAAGP,EACHG,EACAG,CACF,EChEO,SAASE,EAAsBC,EAAuB,CACpD,MAAA,CACLC,EAAAA,KAAK,IAAI,GAAGD,IAAgBE,QAAa,MAAOC,EAAKC,EAAKC,IAAQ,CAChE,IAAIC,EAAS,IACTC,EAAkC,CACpC,OAAQ,kDAAkDJ,EAAI,OAAO,IAAA,EAGjE,MAAAK,EAAQpB,EAAW,KAAKqB,GAAKA,EAAE,KAAON,EAAI,OAAO,EAAE,EACzD,OAAIK,IACOF,EAAA,IACFC,EAAAC,GAGFJ,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAI,CAAC,CAAA,CAC9C,EAEDN,EAAAA,KAAK,IAAI,GAAGD,IAAgBU,QAAc,MAAOP,EAAKC,EAAKC,IAAQ,CACjE,IAAIC,EAAS,IACTC,EAAkC,CACpC,OAAQ,qEAAqEJ,EAAI,OAAO,IAAA,EAEtFA,EAAI,OAAO,KAAO,eAEbI,EAAA,CACL,OAAQ,+CAAA,GAIZ,MAAMC,EAAQV,EAA4B,KACjCa,GAAAA,EAAI,KAAOR,EAAI,OAAO,EAAA,EAE/B,OAAIK,IACOF,EAAA,IACFC,EAAAC,GAGFJ,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAI,CAAC,CAAA,CAC9C,CAAA,CAEL,CC5CO,SAASK,EACd/B,EACc,CACP,MAAA,CACL,eAAgB,OAAOC,EAAM,OAAO,IAAI,CAAE,IAAK,IAAM,IAAK,IAAK,CAAC,CAAC,EACjE,aAAc,OAAO+B,CAAY,EACjC,UAAW/B,EAAM,KAAK,QAAA,EAAU,YAAY,EAC5C,GAAGD,CAAA,CAEP,CCJA,MAAMiC,EAAqC1B,EAAW,IACnDI,GACCoB,EAAqB,CACnB,SAAUpB,EAAM,GAChB,WAAYuB,EAAuB,KAAA,CACpC,CACL,EAEMC,EAAsClB,EAA4B,IACrEa,GACCC,EAAqB,CACnB,WAAYG,EAAuB,OACnC,SAAUJ,EAAI,EAAA,CACf,CACL,ECdO,SAASM,EAAwBjB,EAAuB,CACtD,MAAA,CACLC,EAAAA,KAAK,IACH,GAAGD,6BACH,MAAOG,EAAKC,EAAKC,IAAQ,CACvB,MAAMa,EAAaf,EAAI,IAAI,aAAa,IAAI,YAAY,EAClDgB,EAAgBhB,EAAI,IAAI,aAAa,IAAI,eAAe,EACxDiB,EAASjB,EAAI,IAAI,aAAa,IAAI,QAAQ,EAC1CkB,EAAQlB,EAAI,IAAI,aAAa,IAAI,OAAO,EAC9C,IAAImB,EAA6B,CAAA,EAC7BJ,IAAeH,EAAuB,MAC3BO,EAAAR,EACJI,IAAeH,EAAuB,SAClCO,EAAAN,GAGf,MAAMO,EAAeD,EAAW,OAE5BH,IACFG,EAAaA,EAAW,KAAK,CAACE,EAAGC,IAAM,CAC/B,MAAAC,EAAM,IAAI,KAAKD,EAAE,SAAS,EAAI,IAAI,KAAKD,EAAE,SAAS,EACjD,OAAAL,IAAkB,MAAQO,EAAM,GAAKA,CAAA,CAC7C,GAGH,IAAIC,EAAc,EACdC,EACAR,IACFO,EAAc,SAASP,CAAM,GAE3BC,IACFO,EAAa,SAASP,CAAK,GAG7BC,EAAaA,EAAW,MAAMK,EAAaA,EAAcC,CAAU,EAEnE,IAAIrB,EAAqD,CACvD,QAASe,EACT,qBAAsBC,CAAA,EAGjB,OAAAnB,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKE,CAAI,CAAC,CAC5C,CACF,EACAN,EAAAA,KAAK,KACH,GAAGD,8BACH,MAAOG,EAAKC,EAAKC,IAAQ,CACjB,MAAAwB,EAA+B,MAAM1B,EAAI,OACzCe,EAAaW,EAAQ,WAC3B,IAAIP,EAAa,CAAA,EACbJ,IAAeH,EAAuB,MAC3BO,EAAAR,EACJI,IAAeH,EAAuB,SAClCO,EAAAN,GAGfM,EAAW,OAAcQ,GAAAD,EAAQ,OAAO,SAASC,EAAI,cAAc,CAAC,EAEpE,MAAMP,EAAeD,EAAW,OAEhC,IAAIf,EAAqD,CACvD,QAASe,EACT,qBAAsBC,CAAA,EAGjB,OAAAnB,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKE,CAAI,CAAC,CAC5C,CACF,CAAA,CAEJ,CCrDM,MAAAwB,EAAe/B,GAA0B,CAC7CC,OAAK,QAAQ,IAAK,MAAOE,EAAKC,EAAKC,IAC1BD,EAAIC,EAAI,OAAO,GAAG,CAAC,CAC3B,EACDJ,EAAAA,KAAK,IACH,GAAGD,4BACH,MAAOG,EAAKC,EAAKC,IACRD,EACLC,EAAI,OAAO,GAAG,EACdA,EAAI,KAAK,CAAE,oBAAqB,KAAK,EAAE,YAAY,EAAG,CAAA,CAG5D,EACA,GAAG2B,EAAkBhC,CAAa,EAClC,GAAGiC,EAAuBjC,CAAa,EACvCkC,EAAwClC,EAAe,GAAM,EAAI,EACjE,GAAGmC,EAAgBnC,CAAa,EAChC,GAAGoC,EAA6BpC,CAAa,EAC7C,GAAGqC,EAAuD,EAC1D,GAAGC,EAAmCtC,CAAa,EACnD,GAAGuC,EAA6BvC,CAAa,EAC7C,GAAGwC,EAA2BxC,CAAa,EAC3C,GAAGyC,EAAgBzC,CAAa,EAChC,GAAGD,EAAsBC,CAAa,EACtC,GAAGiB,EAAwBjB,CAAa,CAC1C,EAEiB+B,EAAYW,EAAYC,EAAuB,aAAa,CAAC"}