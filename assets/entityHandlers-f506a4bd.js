import{l}from"./index-782e74fa.js";import{a5 as D,a6 as y,a7 as I,a8 as S,a9 as k,aa as f,ab as _,ac as N,ad as $}from"./SynapseClient-d7905674.js";import{m as p}from"./index-2d7986d6.js";import{b as g}from"./mockEntity-ee49ffb8.js";import{m as v}from"./mockSchema-023a8440.js";import{U as u}from"./index-bd88158d.js";import{a as b}from"./mockProject-bc8fe566.js";import"./getEndpoint-ac94413e.js";import"./OrientationBanner-1bd00e8c.js";import{u as L}from"./uniqueId-4d05949d.js";const O=1111,w=2222,U=3333,j=4444,m={storageLocationId:D,uploadType:u.S3,banner:"",concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"},T={...m,baseKey:"exampleS3BaseKey",stsEnabled:!0,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"},A={...T,storageLocationId:O,endpointUrl:"https://my-endpoint.fake",bucket:"myExternalS3Bucket",concreteType:"org.sagebionetworks.repo.model.file.ExternalS3UploadDestination"},C={...m,baseKey:"exampleGCPBaseKey",storageLocationId:w,uploadType:u.GOOGLECLOUDSTORAGE,bucket:"myExternalGCPBucket",concreteType:"org.sagebionetworks.repo.model.file.ExternalGoogleCloudUploadDestination"},M={...m,storageLocationId:U,uploadType:u.HTTPS,url:"https://myurl.fake",concreteType:"org.sagebionetworks.repo.model.file.ExternalUploadDestination"},h={...m,storageLocationId:j,uploadType:u.HTTPS,endpointUrl:"https://my-endpoint.fake",bucket:"myExternalObjectStoreBucket",keyPrefixUUID:"uuidKeyPrefix",concreteType:"org.sagebionetworks.repo.model.file.ExternalObjectStoreUploadDestination"},G=[T,A,C,M,h],Z=d=>[l.rest.post(`${d}${y}`,async(n,a,t)=>{let s=200;const o=await n.json();let e={reason:"..."};return o?o.name===g?(e.reason="Invalid project name",s=403):e={id:L("syn"),...o}:(s=400,e={reason:`Mock service worker received the following malformed body for PUT ${y} : ${JSON.stringify(o)}`}),a(t.status(s),t.json(e))}),l.rest.get(`${d}${I(":entityId")}`,async(n,a,t)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity with ID ${n.params.entityId}`};const e=p.find(r=>r.id===n.params.entityId);return e&&(o=e.entity,s=200),a(t.status(s),t.json(o))}),l.rest.get(`${d}${S(":entityId")}`,async(n,a,t)=>{let s=404,o={reason:`Mock Service worker could not find mock entity versions for ID ${n.params.entityId}`};const e=p.find(r=>r.id===n.params.entityId);return e&&e.versionInfo&&(o={results:e.versionInfo},s=200),a(t.status(s),t.json(o))}),l.rest.get(`${d}${k(":entityId",":versionNumber")}`,async(n,a,t)=>{let s=404;const o=n.params.entityId,e=n.params.versionNumber.toString(),r=parseInt(e);let i={reason:`Mock Service worker could not find a mock versioned entity with ID ${o}.${e}`};const c=p.find(E=>E.id===n.params.entityId);return c&&c.versions&&c.versions[r]&&(i=c.versions[r],s=200),a(t.status(s),t.json(i))}),l.rest.post(`${d}${f(":entityId")}`,async(n,a,t)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const e=p.find(r=>r.id===n.params.entityId);return e!=null&&e.bundle&&(o=e.bundle,s=200),a(t.status(s),t.json(o))}),l.rest.post(`${d}${f(":entityId",":versionNumber")}`,async(n,a,t)=>{const s=n.params.entityId,o=parseInt(n.params.versionNumber);let e=404,r={reason:`Mock Service worker could not find a mock entity bundle with ID ${s}`};const i=p.find(c=>c.id===s);if(i){const c=i.bundle;i.versions&&i.versions[o]?r={...c,entity:i.versions[o]}:r=c,e=200}return a(t.status(e),t.json(r))}),l.rest.get(`${d}${_(":entityId")}`,async(n,a,t)=>a(t.status(200),t.json(v))),l.rest.get(`${d}${N(":entityId")}`,async(n,a,t)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const e=p.find(r=>r.id===n.params.entityId);return e!=null&&e.json&&(o=e.json,s=200),a(t.status(s),t.json(o))}),l.rest.post(`${d}${$}`,async(n,a,t)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const e=n.body,r=p.filter(i=>e.references.find(c=>c.targetId===i.id)).map(i=>i.entityHeader).filter(i=>!!i);return r&&(o={results:r},s=200),a(t.status(s),t.json(o))}),l.rest.get(`${d}${I(":entityId")}/path`,async(n,a,t)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity path using ID ${n.params.entityId}`};const e=p.find(r=>n.params.entityId===r.id);return e&&e.path&&(o=e.path,s=200),a(t.status(s),t.json(o))}),l.rest.get(`${d}/file/v1/entity/:id/uploadDestination`,async(n,a,t)=>{const s={banner:"",storageLocationId:1,uploadType:u.S3,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"};return a(t.status(200),t.json(s))}),l.rest.get(`${d}/file/v1/entity/:id/uploadDestination/:storageLocationId`,async(n,a,t)=>{let s=404,o={reason:`Mock Service worker could not find an uploadDestination using storageLocationId ${n.params.storageLocationId}`};const e=G.find(r=>Number(n.params.storageLocationId)===r.storageLocationId);return e&&(o=e,s=200),a(t.status(s),t.json(o))}),l.rest.get(`${d}/repo/v1/projects`,async(n,a,t)=>{const s={results:b.map(o=>({name:o.name,id:o.id,lastActivity:"2024-01-04T21:11:59.000Z",modifiedBy:parseInt(o.entity.modifiedBy),modifiedOn:o.entity.modifiedOn}))};return a(t.status(200),t.json(s))})];export{Z as g};
//# sourceMappingURL=entityHandlers-f506a4bd.js.map
