{"version":3,"file":"SubscriptionItem-d031e5e4.js","sources":["../../src/components/SubscriptionPage/ForumTopic.tsx","../../src/components/SubscriptionPage/ThreadTopic.tsx","../../src/components/SubscriptionPage/SubscriptionItem.tsx"],"sourcesContent":["import React from 'react'\nimport {\n  Subscription,\n  SubscriptionObjectType,\n} from '@sage-bionetworks/synapse-types'\nimport Topic from './Topic'\nimport { useGetForumMetadata } from '../../synapse-queries/forum/useForum'\nimport { useGetEntity } from '../../synapse-queries'\nimport { useSubscription } from '../../synapse-queries/subscription/useSubscription'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../utils/functions/getEndpoint'\n\nexport type SubscriptionItemProps = {\n  subscription: Subscription\n}\n\nexport default function ForumTopic(props: SubscriptionItemProps) {\n  const { subscription } = props\n\n  const { data: forum } = useGetForumMetadata(subscription.objectId)\n  const { data: project } = useGetEntity(forum?.projectId!, undefined, {\n    enabled: !!forum,\n  })\n  const { isSubscribed, isLoading, toggleSubscribed } = useSubscription(\n    subscription.objectId,\n    SubscriptionObjectType.FORUM,\n  )\n\n  let href: string | undefined\n  if (forum) {\n    href = `${getEndpoint(BackendDestinationEnum.PORTAL_ENDPOINT)}#!Synapse:${\n      forum.projectId\n    }/discussion`\n  }\n\n  return (\n    <Topic\n      isLoading={isLoading}\n      isSubscribed={isSubscribed}\n      icon={'dashboard'}\n      name={project?.name}\n      nameHref={href}\n      onToggleSubscribe={toggleSubscribed}\n    />\n  )\n}\n","import React from 'react'\nimport {\n  Subscription,\n  SubscriptionObjectType,\n} from '@sage-bionetworks/synapse-types'\nimport { useSubscription } from '../../synapse-queries/subscription/useSubscription'\nimport Topic from './Topic'\nimport { useGetThread } from '../../synapse-queries/forum/useThread'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../utils/functions/getEndpoint'\n\nexport type SubscriptionItemProps = {\n  subscription: Subscription\n}\n\nexport default function SubscriptionItem(props: SubscriptionItemProps) {\n  const { subscription } = props\n\n  const { threadData } = useGetThread(subscription.objectId)\n  const { isSubscribed, isLoading, toggleSubscribed } = useSubscription(\n    subscription.objectId,\n    SubscriptionObjectType.THREAD,\n  )\n\n  let href: string | undefined\n  if (threadData) {\n    href = `${getEndpoint(BackendDestinationEnum.PORTAL_ENDPOINT)}#!Synapse:${\n      threadData.projectId\n    }/discussion/threadId=${subscription.objectId}`\n  }\n\n  return (\n    <Topic\n      isLoading={isLoading}\n      isSubscribed={isSubscribed}\n      icon={'discussion'}\n      name={threadData?.title}\n      nameHref={href}\n      onToggleSubscribe={toggleSubscribed}\n    />\n  )\n}\n","import React from 'react'\nimport {\n  Subscription,\n  SubscriptionObjectType,\n} from '@sage-bionetworks/synapse-types'\nimport ForumTopic from './ForumTopic'\nimport ThreadTopic from './ThreadTopic'\n\nexport type SubscriptionItemProps = {\n  subscription: Subscription\n}\n\n/**\n * Simple discriminator component that maps a {@link Subscription} rendered on the {@link SubscriptionPage} to\n * a {@link Topic} component\n * @param props\n * @constructor\n */\nexport default function SubscriptionItem(props: SubscriptionItemProps) {\n  const { subscription } = props\n\n  switch (subscription.objectType) {\n    case SubscriptionObjectType.FORUM:\n      return <ForumTopic subscription={subscription} />\n    case SubscriptionObjectType.THREAD:\n      return <ThreadTopic subscription={subscription} />\n    default:\n      console.warn(\n        `Subscription type ${props.subscription.objectType} not supported in UI`,\n      )\n      return <></>\n  }\n}\n"],"names":["ForumTopic","props","subscription","forum","useGetForumMetadata","project","useGetEntity","isSubscribed","isLoading","toggleSubscribed","useSubscription","SubscriptionObjectType","href","getEndpoint","BackendDestinationEnum","jsx","Topic","SubscriptionItem","threadData","useGetThread","ThreadTopic","Fragment"],"mappings":"4bAkBA,SAAAA,EAAAC,EAAA,CACE,KAAA,CAAA,aAAAC,CAAA,EAAAD,EAEA,CAAA,KAAAE,CAAA,EAAAC,EAAAF,EAAA,QAAA,EACA,CAAA,KAAAG,CAAA,EAAAC,EAAAH,GAAA,YAAAA,EAAA,UAAA,OAAA,CAAqE,QAAA,CAAA,CAAAA,CACxD,CAAA,EAEb,CAAA,aAAAI,EAAA,UAAAC,EAAA,iBAAAC,CAAA,EAAAC,EAAsDR,EAAA,SACvCS,EAAA,KACU,EAGzB,IAAAC,EACA,OAAAT,IACES,EAAA,GAAAC,EAAAC,EAAA,eAAA,cAAAX,EAAA,wBAKFY,EACEC,EAAC,CAAA,UAAAR,EACC,aAAAD,EACA,KAAA,YACM,KAAAF,GAAA,YAAAA,EAAA,KACS,SAAAO,EACL,kBAAAH,CACS,CAAA,CAGzB,mNC9BA,SAAAQ,EAAAhB,EAAA,CACE,KAAA,CAAA,aAAAC,CAAA,EAAAD,EAEA,CAAA,WAAAiB,CAAA,EAAAC,EAAAjB,EAAA,QAAA,EACA,CAAA,aAAAK,EAAA,UAAAC,EAAA,iBAAAC,CAAA,EAAAC,EAAsDR,EAAA,SACvCS,EAAA,MACU,EAGzB,IAAAC,EACA,OAAAM,IACEN,EAAA,GAAAC,EAAAC,EAAA,eAAA,cAAAI,EAAA,iCAAAhB,EAAA,YAKFa,EACEC,EAAC,CAAA,UAAAR,EACC,aAAAD,EACA,KAAA,aACM,KAAAW,GAAA,YAAAA,EAAA,MACY,SAAAN,EACR,kBAAAH,CACS,CAAA,CAGzB,yOCzBA,SAAAQ,EAAAhB,EAAA,CACE,KAAA,CAAA,aAAAC,CAAA,EAAAD,EAEA,OAAAC,EAAA,WAAA,CAAiC,KAAAS,EAAA,MAE7B,OAAAI,EAAAf,EAAA,CAAA,aAAAE,CAAA,CAAA,EAA+C,KAAAS,EAAA,OAE/C,OAAAI,EAAAK,EAAA,CAAA,aAAAlB,CAAA,CAAA,EAAgD,QAEhD,eAAA,KAAQ,qBAAAD,EAAA,aAAA,gCACkC,EAE1Cc,EAAAM,EAAA,CAAA,CAAA,CAAS,CAEf;"}