{"version":3,"file":"DropdownMenu-2286681f.js","sources":["../../src/components/menu/DropdownMenu.tsx"],"sourcesContent":["import React, { useId } from 'react'\nimport {\n  Button,\n  ButtonProps,\n  ClickAwayListener,\n  Divider,\n  Fade,\n  ListItemIcon,\n  ListItemText,\n  MenuItem,\n  MenuList,\n  Paper,\n  Popper,\n  SxProps,\n  Tooltip,\n  Typography,\n} from '@mui/material'\nimport IconSvg, { IconName } from '../IconSvg/IconSvg'\n\n/**\n * Defines a configuration for a particular dropdown menu item\n */\nexport type DropdownMenuItem = {\n  /* The text to show on the menu item. */\n  text: string\n  /* The icon to show for this item in the menu. */\n  icon?: IconName\n  /* A function invoked upon clicking the item, assuming `disabled` is falsy */\n  onClick?: (e: React.MouseEvent) => void\n  /* A link that the item should point to. */\n  href?: string\n  /* The optional tooltipText to show for this item. Compatible with the `disabled` prop. */\n  tooltipText?: string\n  /* Whether the item should be disabled from selection. */\n  disabled?: boolean\n  /* Additional MUI SxProps to pass to the text component */\n  textSx?: SxProps\n  /* Additional MUI SxProps to pass to the icon component */\n  iconSx?: SxProps\n}\n\nexport type DropdownMenuProps = {\n  /* Groups of menu items. Each group will be split with a divider. See DropdownMenuItem for per-item configuration */\n  items: DropdownMenuItem[][]\n  /* The text to show on the dropdown menu button. */\n  dropdownButtonText: string\n  /* The optional tooltip text for the dropdown menu button. */\n  buttonTooltip?: string\n  /* Any additional props to pass to the dropdown menu button. */\n  buttonProps?: ButtonProps\n  /* If true, will render a single action as a standalone button. Default true. */\n  convertSingleItemToButton?: boolean\n  /* If true, nothing will be rendered if no actions are passed. Default false. */\n  renderMenuIfNoItems?: boolean\n}\n\n/**\n * The DropdownMenu component provides a generic way to compose a MUI dropdown menu.\n */\nexport function DropdownMenu(props: DropdownMenuProps) {\n  const {\n    buttonTooltip,\n    dropdownButtonText,\n    items = [] as DropdownMenuItem[][],\n    convertSingleItemToButton = true,\n    renderMenuIfNoItems = false,\n    buttonProps = {},\n  } = props\n\n  const dropdownMenuId = useId()\n  const [open, setOpen] = React.useState(false)\n  const anchorRef = React.useRef<HTMLButtonElement>(null)\n\n  const numberOfMenuItems = items.flat().length\n\n  if (!renderMenuIfNoItems && numberOfMenuItems === 0) {\n    // Hide menu if no actions will be in the menu\n    return null\n  }\n\n  if (convertSingleItemToButton && numberOfMenuItems === 1) {\n    // If one action is in the menu, show it as a button\n    const menuItem = items.flat()[0]\n    return (\n      <Button\n        component={'href' in menuItem ? 'a' : 'button'}\n        title={menuItem.tooltipText}\n        variant=\"outlined\"\n        href={'href' in menuItem ? menuItem.href : undefined}\n        rel={'href' in menuItem ? 'noopener noreferrer' : undefined}\n        onClick={'onClick' in menuItem ? menuItem.onClick : undefined}\n        disabled={menuItem.disabled}\n      >\n        <Typography variant={'buttonLink'}>{menuItem.text}</Typography>\n      </Button>\n    )\n  }\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen)\n  }\n\n  const handleClose = (event: Event | React.SyntheticEvent) => {\n    if (\n      anchorRef.current &&\n      anchorRef.current.contains(event.target as HTMLElement)\n    ) {\n      return\n    }\n\n    setOpen(false)\n  }\n\n  function handleListKeyDown(event: React.KeyboardEvent) {\n    if (event.key === 'Tab') {\n      event.preventDefault()\n      setOpen(false)\n    } else if (event.key === 'Escape') {\n      setOpen(false)\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Tooltip\n        title={\n          buttonTooltip ? (\n            <div style={{ whiteSpace: 'pre-line' }}>{buttonTooltip}</div>\n          ) : undefined\n        }\n        placement={'top'}\n      >\n        <span>\n          <Button\n            variant=\"outlined\"\n            ref={anchorRef}\n            id={`composition-button-${dropdownMenuId}`}\n            aria-controls={\n              open ? `composition-menu-${dropdownMenuId}` : undefined\n            }\n            aria-expanded={open ? 'true' : undefined}\n            aria-haspopup=\"true\"\n            onClick={handleToggle}\n            {...buttonProps}\n          >\n            <Typography variant={'buttonLink'}>{dropdownButtonText}</Typography>\n          </Button>\n        </span>\n      </Tooltip>\n      <Popper\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        placement=\"bottom-end\"\n        transition\n        style={{\n          // Fixes issue where react-flow (provenance) would appear above the menu\n          zIndex: 10,\n        }}\n      >\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps}>\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList\n                  autoFocusItem={open}\n                  id={`composition-menu-${dropdownMenuId}`}\n                  aria-labelledby={`composition-button-${dropdownMenuId}`}\n                  onKeyDown={handleListKeyDown}\n                >\n                  {items.map((itemGroup, index, array) => {\n                    return [\n                      itemGroup.map(item => {\n                        return (\n                          <Tooltip\n                            key={item.text}\n                            title={item.tooltipText}\n                            placement={'left'}\n                          >\n                            <MenuItem\n                              // Always make the component an anchor in case href is defined.\n                              component=\"a\"\n                              sx={{\n                                // Override the anchor-specific state styles, we don't want it to look like an anchor\n                                '&:hover': {\n                                  color: 'unset',\n                                },\n                                '&:focus': {\n                                  color: 'unset',\n                                  textDecoration: 'unset',\n                                },\n                              }}\n                              disabled={item.disabled}\n                              href={'href' in item ? item.href : undefined}\n                              rel={\n                                'href' in item\n                                  ? 'noopener noreferrer'\n                                  : undefined\n                              }\n                              // Allow pointer events on disabled item so tooltip works.\n                              style={{ pointerEvents: 'auto' }}\n                              onClick={(e: React.MouseEvent) => {\n                                /*\n                                 * Must check if the item is disabled because we set\n                                 * `pointer-events: 'auto'`\n                                 */\n                                if (\n                                  !item.disabled &&\n                                  'onClick' in item &&\n                                  item.onClick\n                                ) {\n                                  setOpen(false)\n                                  item.onClick(e)\n                                }\n                              }}\n                            >\n                              <ListItemIcon\n                                style={{\n                                  // MUI has specified a more specific minWidth for ListItemIcon inside a MenuList than\n                                  // we can create with sx, so apply an inline style for this property only.\n                                  minWidth: '30px',\n                                }}\n                              >\n                                {item.icon && (\n                                  <IconSvg\n                                    icon={item.icon}\n                                    sx={{\n                                      width: '17px',\n                                      height: '17px',\n                                      ...item.iconSx,\n                                    }}\n                                    wrap={false}\n                                  />\n                                )}\n                              </ListItemIcon>\n                              <ListItemText\n                                primaryTypographyProps={{\n                                  variant: 'smallText1',\n                                  sx: item.textSx,\n                                }}\n                                sx={{ marginTop: 0 }}\n                              >\n                                {item.text}\n                              </ListItemText>\n                            </MenuItem>\n                          </Tooltip>\n                        )\n                      }),\n                      index < array.length - 1 && <Divider />,\n                    ]\n                  })}\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Fade>\n        )}\n      </Popper>\n    </React.Fragment>\n  )\n}\n"],"names":["DropdownMenu","props","buttonTooltip","dropdownButtonText","items","convertSingleItemToButton","renderMenuIfNoItems","buttonProps","dropdownMenuId","useId","open","setOpen","React","anchorRef","numberOfMenuItems","menuItem","jsx","Button","Typography","handleToggle","prevOpen","handleClose","event","handleListKeyDown","jsxs","Tooltip","Popper","TransitionProps","Fade","Paper","ClickAwayListener","MenuList","itemGroup","index","array","item","MenuItem","e","ListItemIcon","IconSvg","ListItemText","Divider"],"mappings":"8kBA2DO,SAAAA,EAAAC,EAAA,CACL,KAAA,CAAM,cAAAC,EACJ,mBAAAC,EACA,MAAAC,EAAA,CAAA,EACS,0BAAAC,EAAA,GACmB,oBAAAC,EAAA,GACN,YAAAC,EAAA,CAAA,CACP,EAAAN,EAGjBO,EAAAC,EAAAA,QACA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACAC,EAAAD,EAAA,OAAA,IAAA,EAEAE,EAAAV,EAAA,KAAA,EAAA,OAEA,GAAA,CAAAE,GAAAQ,IAAA,EAEE,OAAA,KAGF,GAAAT,GAAAS,IAAA,EAAA,CAEE,MAAAC,EAAAX,EAAA,KAAA,EAAA,CAAA,EACA,OAAAY,EACEC,EAAC,CAAA,UAAA,SAAAF,EAAA,IAAA,SACuC,MAAAA,EAAA,YACtB,QAAA,WACR,KAAA,SAAAA,EAAAA,EAAA,KAAA,OACmC,IAAA,SAAAA,EAAA,sBAAA,OACO,QAAA,YAAAA,EAAAA,EAAA,QAAA,OACE,SAAAA,EAAA,SACjC,SAAAC,EAAAE,EAAA,CAAA,QAAA,aAAA,SAAAH,EAAA,KAAA,CAE+B,CAAA,EAKxD,MAAAI,EAAA,IAAA,CACER,EAAAS,GAAA,CAAAA,CAAA,CAA6B,EAG/BC,EAAAC,GAAA,CACET,EAAA,SAAAA,EAAA,QAAA,SAAAS,EAAA,MAAA,GAOAX,EAAA,EAAA,CAAa,EAGf,SAAAY,EAAAD,EAAA,CACEA,EAAA,MAAA,OACEA,EAAA,eAAA,EACAX,EAAA,EAAA,GAAaW,EAAA,MAAA,UAEbX,EAAA,EAAA,CACF,CAGF,OAAAa,EAAAZ,EAAA,SAAA,CAAA,SAAA,CAEII,EAAAS,EAAC,CAAA,MAAAvB,EAAAc,EAAA,MAAA,CAAA,MAAA,CAAA,WAAA,UAAA,EAAA,SAAAd,CAAA,CAAA,EAAA,OAIO,UAAA,MAEK,SAAAc,EAAA,OAAA,CAAA,SAAAA,EAGTC,EAAC,CAAA,QAAA,WACS,IAAAJ,EACH,GAAA,sBAAAL,IACqB,gBAAAE,EAAA,oBAAAF,IAAA,OAEsB,gBAAAE,EAAA,OAAA,OAEjB,gBAAA,OACjB,QAAAS,EACL,GAAAZ,EACL,SAAAS,EAAAE,EAAA,CAAA,QAAA,aAAA,SAAAf,EAAA,CAEmD,CAAA,EAAA,CAE3D,CAAA,EACFa,EACAU,EAAC,CAAA,KAAAhB,EACC,SAAAG,EAAA,QACoB,KAAA,OACd,UAAA,aACI,WAAA,GACA,MAAA,CACH,OAAA,EAEG,EACV,SAAA,CAAA,CAAA,gBAAAc,CAAA,IAAAX,EAAAY,EAAA,CAAA,GAAAD,EAAA,SAAAX,EAAAa,EAAA,CAAA,SAAAb,EAAAc,EAAA,CAAA,YAAAT,EAAA,SAAAL,EAMQe,EAAC,CAAA,cAAArB,EACgB,GAAA,oBAAAF,IACS,kBAAA,sBAAAA,IACe,UAAAe,EAC5B,SAAAnB,EAAA,IAAA,CAAA4B,EAAAC,EAAAC,IAGT,CAAOF,EAAA,IAAAG,GAEHnB,EACES,EAAC,CAAA,MAAAU,EAAA,YAEa,UAAA,OACD,SAAAX,EAEXY,EAAC,CAAA,UAAA,IAEW,GAAA,CACN,UAAA,CAES,MAAA,OACF,EACT,UAAA,CACW,MAAA,QACF,eAAA,OACS,CAClB,EACF,SAAAD,EAAA,SACe,KAAA,SAAAA,EAAAA,EAAA,KAAA,OACoB,IAAA,SAAAA,EAAA,sBAAA,OAI7B,MAAA,CAAA,cAAA,MAAA,EAGyB,QAAAE,GAAA,CAM7B,CAAAF,EAAA,UAAA,YAAAA,GAAAA,EAAA,UAKExB,EAAA,EAAA,EACAwB,EAAA,QAAAE,CAAA,EACF,EACF,SAAA,CAEArB,EAAAsB,EAAC,CAAA,MAAA,CACQ,SAAA,MAGK,EACZ,SAAAH,EAAA,MAAAnB,EAGEuB,EAAC,CAAA,KAAAJ,EAAA,KACY,GAAA,CACP,MAAA,OACK,OAAA,OACC,GAAAA,EAAA,MACA,EACV,KAAA,EACM,CAAA,CACR,CAAA,EAEJnB,EACAwB,EAAC,CAAA,uBAAA,CACyB,QAAA,aACb,GAAAL,EAAA,MACA,EACX,GAAA,CAAA,UAAA,CAAA,EACmB,SAAAA,EAAA,IAEb,CAAA,CACR,CAAA,CAAA,CACF,EAAAA,EAAA,IArEU,CAsEZ,EAEHF,EAAAC,EAAA,OAAA,GAAAlB,EAAAyB,EAAA,EAAA,CACoC,CACvC,CACD,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAIT,CAAA,CAEJ,CAAA,CAAA,CAGN"}