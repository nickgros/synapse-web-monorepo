{"version":3,"file":"react-intersection-observer.esm-8bf16175.js","sources":["../../../../node_modules/.pnpm/react-intersection-observer@9.4.1_react@18.2.0/node_modules/react-intersection-observer/react-intersection-observer.esm.js"],"sourcesContent":["import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options, fallbackInView) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (fallbackInView === void 0) {\n    fallbackInView = unsupportedValue;\n  }\n\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap[\"delete\"](id);\n    }\n  };\n}\n\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay,\n        fallbackInView = _this$props.fallbackInView;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        props = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(React.Component);\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _state$entry;\n\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView,\n      fallbackInView = _ref.fallbackInView,\n      onChange = _ref.onChange;\n\n  var _React$useState = React.useState(null),\n      ref = _React$useState[0],\n      setRef = _React$useState[1];\n\n  var callback = React.useRef();\n\n  var _React$useState2 = React.useState({\n    inView: !!initialInView,\n    entry: undefined\n  }),\n      state = _React$useState2[0],\n      setState = _React$useState2[1]; // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n\n\n  callback.current = onChange;\n  React.useEffect(function () {\n    // Ensure we have node ref, and that we shouldn't skip observing\n    if (skip || !ref) return;\n    var unobserve;\n    unobserve = observe(ref, function (inView, entry) {\n      setState({\n        inView: inView,\n        entry: entry\n      });\n      if (callback.current) callback.current(inView, entry);\n\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        // If it should only trigger once, unobserve the element after it's inView\n        unobserve();\n        unobserve = undefined;\n      }\n    }, {\n      root: root,\n      rootMargin: rootMargin,\n      threshold: threshold,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n    return function () {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  var entryTarget = (_state$entry = state.entry) == null ? void 0 : _state$entry.target;\n  React.useEffect(function () {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.esm.js.map\n"],"names":["_extends","target","source","key","_inheritsLoose","subClass","superClass","_setPrototypeOf","o","p","_objectWithoutPropertiesLoose","excluded","sourceKeys","i","observerMap","RootIds","rootId","unsupportedValue","getRootId","root","optionsToId","options","createObserver","id","instance","elements","thresholds","observer","entries","entry","_elements$get","inView","threshold","callback","observe","element","fallbackInView","bounds","_createObserver","callbacks","_excluded","isPlainChildren","props","InView","_React$Component","_this","node","_proto","prevProps","_this$props","rootMargin","trackVisibility","delay","_this$state","_this$props2","children","as","React.createElement","React.Component","useInView","_temp","_state$entry","_ref","triggerOnce","skip","initialInView","onChange","_React$useState","React.useState","ref","setRef","React.useRef","_React$useState2","state","setState","React.useEffect","unobserve","entryTarget","result"],"mappings":"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"}