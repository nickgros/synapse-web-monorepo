{"version":3,"file":"infiniteQueryBehavior-c66ea7b2.js","sources":["../../../../node_modules/.pnpm/react-query@3.39.1_react-dom@18.2.0_react@18.2.0/node_modules/react-query/es/core/infiniteQueryBehavior.js"],"sourcesContent":["import { isCancelable } from './retryer';\nimport { getAbortController } from './utils';\nexport function infiniteQueryBehavior() {\n  return {\n    onFetch: function onFetch(context) {\n      context.fetchFn = function () {\n        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n\n        var refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n        var fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n        var pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        var isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        var isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        var oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        var oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        var abortController = getAbortController();\n        var abortSignal = abortController == null ? void 0 : abortController.signal;\n        var newPageParams = oldPageParams;\n        var cancelled = false; // Get query function\n\n        var queryFn = context.options.queryFn || function () {\n          return Promise.reject('Missing queryFn');\n        };\n\n        var buildNewPages = function buildNewPages(pages, param, page, previous) {\n          newPageParams = previous ? [param].concat(newPageParams) : [].concat(newPageParams, [param]);\n          return previous ? [page].concat(pages) : [].concat(pages, [page]);\n        }; // Create function to fetch a page\n\n\n        var fetchPage = function fetchPage(pages, manual, param, previous) {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n\n          var queryFnContext = {\n            queryKey: context.queryKey,\n            signal: abortSignal,\n            pageParam: param,\n            meta: context.meta\n          };\n          var queryFnResult = queryFn(queryFnContext);\n          var promise = Promise.resolve(queryFnResult).then(function (page) {\n            return buildNewPages(pages, param, page, previous);\n          });\n\n          if (isCancelable(queryFnResult)) {\n            var promiseAsAny = promise;\n            promiseAsAny.cancel = queryFnResult.cancel;\n          }\n\n          return promise;\n        };\n\n        var promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n            var manual = typeof pageParam !== 'undefined';\n            var param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n            promise = fetchPage(oldPages, manual, param);\n          } // Fetch previous page?\n          else if (isFetchingPreviousPage) {\n              var _manual = typeof pageParam !== 'undefined';\n\n              var _param = _manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n\n              promise = fetchPage(oldPages, _manual, _param, true);\n            } // Refetch pages\n            else {\n                (function () {\n                  newPageParams = [];\n                  var manual = typeof context.options.getNextPageParam === 'undefined';\n                  var shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n\n                  promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n\n                  var _loop = function _loop(i) {\n                    promise = promise.then(function (pages) {\n                      var shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n\n                      if (shouldFetchNextPage) {\n                        var _param2 = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n\n                        return fetchPage(pages, manual, _param2);\n                      }\n\n                      return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n                    });\n                  };\n\n                  for (var i = 1; i < oldPages.length; i++) {\n                    _loop(i);\n                  }\n                })();\n              }\n\n        var finalPromise = promise.then(function (pages) {\n          return {\n            pages: pages,\n            pageParams: newPageParams\n          };\n        });\n        var finalPromiseAsAny = finalPromise;\n\n        finalPromiseAsAny.cancel = function () {\n          cancelled = true;\n          abortController == null ? void 0 : abortController.abort();\n\n          if (isCancelable(promise)) {\n            promise.cancel();\n          }\n        };\n\n        return finalPromise;\n      };\n    }\n  };\n}\nexport function getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nexport function getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    var nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    var previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n}"],"names":["infiniteQueryBehavior","context","_context$fetchOptions","_context$fetchOptions2","_context$fetchOptions3","_context$fetchOptions4","_context$state$data","_context$state$data2","refetchPage","fetchMore","pageParam","isFetchingNextPage","isFetchingPreviousPage","oldPages","oldPageParams","abortController","getAbortController","abortSignal","newPageParams","cancelled","queryFn","buildNewPages","pages","param","page","previous","fetchPage","manual","queryFnContext","queryFnResult","promise","isCancelable","promiseAsAny","getNextPageParam","_manual","_param","getPreviousPageParam","shouldFetchFirstPage","_loop","i","shouldFetchNextPage","_param2","finalPromise","finalPromiseAsAny","options","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam"],"mappings":"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","x_google_ignoreList":[0]}