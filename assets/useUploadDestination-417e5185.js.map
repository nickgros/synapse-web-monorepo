{"version":3,"file":"useUploadDestination-417e5185.js","sources":["../../src/utils/functions/FileHandleUtils.ts","../../src/synapse-queries/file/useUploadDestination.ts"],"sourcesContent":["import {\n  CloudProviderFileHandleInterface,\n  EntityBundle,\n  EntityType,\n  EXTERNAL_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  EXTERNAL_OBJECT_STORE_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  ExternalFileHandle,\n  ExternalGoogleCloudUploadDestination,\n  ExternalObjectStoreFileHandle,\n  ExternalObjectStoreUploadDestination,\n  ExternalS3UploadDestination,\n  ExternalUploadDestination,\n  FileEntity,\n  FileHandle,\n  GOOGLE_CLOUD_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  PROXY_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  ProxyFileHandle,\n  S3_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  UploadDestination,\n  UploadType,\n} from '@sage-bionetworks/synapse-types'\n\nconst SYNAPSE_STORAGE = 'Synapse Storage'\n\ntype FileHandleStorageInfo =\n  | {\n      endpoint: string\n      bucket: string\n      fileKey: string\n    }\n  | { url: string }\n  | { location: string }\n\n/**\n * Returns storage location information for a particular file handle, where the format of the information depends on the type of file handle.\n * @param fileHandle\n */\nexport function getFileHandleStorageInfo(\n  fileHandle: FileHandle,\n  storageLocationUploadDestination: UploadDestination | undefined,\n): FileHandleStorageInfo {\n  switch (fileHandle.concreteType) {\n    case EXTERNAL_OBJECT_STORE_FILE_HANDLE_CONCRETE_TYPE_VALUE:\n      return {\n        endpoint: (fileHandle as ExternalObjectStoreFileHandle).endpointUrl,\n        bucket: (fileHandle as ExternalObjectStoreFileHandle).bucket,\n        fileKey: (fileHandle as ExternalObjectStoreFileHandle).fileKey,\n      }\n    case PROXY_FILE_HANDLE_CONCRETE_TYPE_VALUE:\n    case EXTERNAL_FILE_HANDLE_CONCRETE_TYPE_VALUE:\n      return {\n        url: getStorageLocationName(\n          fileHandle,\n          storageLocationUploadDestination,\n        ),\n      }\n    case S3_FILE_HANDLE_CONCRETE_TYPE_VALUE:\n    case GOOGLE_CLOUD_FILE_HANDLE_CONCRETE_TYPE_VALUE:\n      return {\n        location: getStorageLocationName(\n          fileHandle,\n          storageLocationUploadDestination,\n        ),\n      }\n    default:\n      throw new Error(\n        `Couldn't determine location name for file handle: ${JSON.stringify(\n          fileHandle,\n        )}`,\n      )\n  }\n}\n\n/**\n * Gets the friendly name of a bucket/storage location using the file handle.\n *\n * @param fileHandle\n * @returns\n */\nexport function getStorageLocationName(\n  fileHandle: FileHandle,\n  storageLocationUploadDestination: UploadDestination | undefined,\n) {\n  // Uploads to Synapse Storage often do not get their storage location field back-filled,\n  // so null also indicates a Synapse-Stored file\n  if (\n    fileHandle.concreteType === S3_FILE_HANDLE_CONCRETE_TYPE_VALUE &&\n    fileHandle.storageLocationId === null\n  ) {\n    return SYNAPSE_STORAGE\n  }\n\n  switch (fileHandle.concreteType) {\n    case PROXY_FILE_HANDLE_CONCRETE_TYPE_VALUE:\n      return (fileHandle as ProxyFileHandle).filePath\n    case EXTERNAL_OBJECT_STORE_FILE_HANDLE_CONCRETE_TYPE_VALUE:\n    case S3_FILE_HANDLE_CONCRETE_TYPE_VALUE:\n    case GOOGLE_CLOUD_FILE_HANDLE_CONCRETE_TYPE_VALUE:\n      if (storageLocationUploadDestination) {\n        return getUploadDestinationString(storageLocationUploadDestination)\n      }\n      return fileHandle.concreteType ===\n        EXTERNAL_OBJECT_STORE_FILE_HANDLE_CONCRETE_TYPE_VALUE\n        ? (fileHandle as ExternalObjectStoreFileHandle).bucket\n        : (fileHandle as CloudProviderFileHandleInterface).bucketName\n    case EXTERNAL_FILE_HANDLE_CONCRETE_TYPE_VALUE:\n      return (fileHandle as ExternalFileHandle).externalURL\n    default:\n      throw new Error(\n        `Couldn't determine location name for file handle: ${JSON.stringify(\n          fileHandle,\n        )}`,\n      )\n  }\n}\n\n/**\n * Gets the data file handle from an entity bundle.\n * Returns undefined if the entity does not have a data file handle that is visible to the caller.\n * @param entityBundle\n */\nexport function getDataFileHandle(\n  entityBundle: EntityBundle,\n): FileHandle | undefined {\n  let dataFileHandle = undefined\n  if (entityBundle.entityType === EntityType.FILE) {\n    dataFileHandle = entityBundle.fileHandles.filter(\n      fh => fh.id === (entityBundle.entity as FileEntity).dataFileHandleId,\n    )[0]\n  }\n  return dataFileHandle\n}\n\nexport function getUploadDestinationString(\n  uploadDestination: UploadDestination,\n) {\n  let uploadDestinationString = ''\n  if (uploadDestination) {\n    switch (uploadDestination.concreteType) {\n      case 'org.sagebionetworks.repo.model.file.S3UploadDestination':\n        uploadDestinationString = SYNAPSE_STORAGE\n        break\n      case 'org.sagebionetworks.repo.model.file.ExternalUploadDestination':\n        uploadDestinationString = (\n          uploadDestination as ExternalUploadDestination\n        ).url\n        if (uploadDestination.uploadType === UploadType.SFTP) {\n          const indexOfLastSlash = uploadDestinationString.lastIndexOf('/')\n          if (indexOfLastSlash) {\n            uploadDestinationString = uploadDestinationString.substring(\n              0,\n              indexOfLastSlash,\n            )\n          }\n        }\n        break\n      case 'org.sagebionetworks.repo.model.file.ExternalS3UploadDestination':\n        uploadDestinationString =\n          's3://' +\n          (uploadDestination as ExternalS3UploadDestination).bucket +\n          '/'\n        if (\n          (uploadDestination as ExternalS3UploadDestination).baseKey != null\n        ) {\n          uploadDestinationString += (\n            uploadDestination as ExternalS3UploadDestination\n          ).baseKey\n        }\n        break\n      case 'org.sagebionetworks.repo.model.file.ExternalGoogleCloudUploadDestination':\n        uploadDestinationString =\n          'gs://' +\n          (uploadDestination as ExternalGoogleCloudUploadDestination).bucket +\n          '/'\n        if (\n          (uploadDestination as ExternalGoogleCloudUploadDestination).baseKey !=\n          null\n        ) {\n          uploadDestinationString += (\n            uploadDestination as ExternalGoogleCloudUploadDestination\n          ).baseKey\n        }\n        break\n      case 'org.sagebionetworks.repo.model.file.ExternalObjectStoreUploadDestination':\n        uploadDestinationString =\n          (uploadDestination as ExternalObjectStoreUploadDestination)\n            .endpointUrl +\n          '/' +\n          (uploadDestination as ExternalObjectStoreUploadDestination).bucket\n        break\n    }\n  }\n  return uploadDestinationString\n}\n","import { UseQueryOptions, useQuery } from 'react-query'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { UploadDestination } from '@sage-bionetworks/synapse-types'\nimport {\n  getDefaultUploadDestination,\n  getUploadDestinationForStorageLocation,\n} from '../../synapse-client/SynapseClient'\n\nexport function useGetDefaultUploadDestination(\n  containerEntityId: string,\n  options?: UseQueryOptions<UploadDestination, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<UploadDestination, SynapseClientError>(\n    keyFactory.getDefaultUploadDestinationQueryKey(containerEntityId),\n    () => getDefaultUploadDestination(containerEntityId, accessToken),\n    {\n      ...options,\n    },\n  )\n}\n\nexport function useGetUploadDestinationForStorageLocation(\n  parentId: string,\n  storageLocationId: number,\n  options?: UseQueryOptions<UploadDestination, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<UploadDestination, SynapseClientError>(\n    keyFactory.getUploadDestinationForStorageLocationQueryKey(\n      parentId,\n      storageLocationId,\n    ),\n    () =>\n      getUploadDestinationForStorageLocation(\n        parentId,\n        storageLocationId,\n        accessToken,\n      ),\n    {\n      ...options,\n    },\n  )\n}\n"],"names":["SYNAPSE_STORAGE","getFileHandleStorageInfo","fileHandle","storageLocationUploadDestination","EXTERNAL_OBJECT_STORE_FILE_HANDLE_CONCRETE_TYPE_VALUE","PROXY_FILE_HANDLE_CONCRETE_TYPE_VALUE","EXTERNAL_FILE_HANDLE_CONCRETE_TYPE_VALUE","getStorageLocationName","S3_FILE_HANDLE_CONCRETE_TYPE_VALUE","GOOGLE_CLOUD_FILE_HANDLE_CONCRETE_TYPE_VALUE","getUploadDestinationString","getDataFileHandle","entityBundle","dataFileHandle","EntityType","fh","uploadDestination","uploadDestinationString","UploadType","indexOfLastSlash","useGetDefaultUploadDestination","containerEntityId","options","accessToken","keyFactory","useSynapseContext","useQuery","getDefaultUploadDestination","useGetUploadDestinationForStorageLocation","parentId","storageLocationId","getUploadDestinationForStorageLocation"],"mappings":"yJAsBA,MAAMA,EAAkB,kBAeR,SAAAC,EACdC,EACAC,EACuB,CACvB,OAAQD,EAAW,aAAc,CAC/B,KAAKE,EACI,MAAA,CACL,SAAWF,EAA6C,YACxD,OAASA,EAA6C,OACtD,QAAUA,EAA6C,OAAA,EAE3D,KAAKG,EACL,KAAKC,EACI,MAAA,CACL,IAAKC,EACHL,EACAC,CACF,CAAA,EAEJ,KAAKK,EACL,KAAKC,EACI,MAAA,CACL,SAAUF,EACRL,EACAC,CACF,CAAA,EAEJ,QACE,MAAM,IAAI,MACR,qDAAqD,KAAK,UACxDD,CAAA,CACD,EAAA,CAEP,CACF,CAQgB,SAAAK,EACdL,EACAC,EACA,CAGA,GACED,EAAW,eAAiBM,GAC5BN,EAAW,oBAAsB,KAE1B,OAAAF,EAGT,OAAQE,EAAW,aAAc,CAC/B,KAAKG,EACH,OAAQH,EAA+B,SACzC,KAAKE,EACL,KAAKI,EACL,KAAKC,EACH,OAAIN,EACKO,EAA2BP,CAAgC,EAE7DD,EAAW,eAChBE,EACGF,EAA6C,OAC7CA,EAAgD,WACvD,KAAKI,EACH,OAAQJ,EAAkC,YAC5C,QACE,MAAM,IAAI,MACR,qDAAqD,KAAK,UACxDA,CAAA,CACD,EAAA,CAEP,CACF,CAOO,SAASS,EACdC,EACwB,CACxB,IAAIC,EACA,OAAAD,EAAa,aAAeE,EAAW,OACzCD,EAAiBD,EAAa,YAAY,OAClCG,GAAAA,EAAG,KAAQH,EAAa,OAAsB,kBACpD,CAAC,GAEEC,CACT,CAEO,SAASH,EACdM,EACA,CACA,IAAIC,EAA0B,GAC9B,GAAID,EACF,OAAQA,EAAkB,aAAc,CACtC,IAAK,0DACuBC,EAAAjB,EAC1B,MACF,IAAK,gEAIC,GAHJiB,EACED,EACA,IACEA,EAAkB,aAAeE,EAAW,KAAM,CAC9C,MAAAC,EAAmBF,EAAwB,YAAY,GAAG,EAC5DE,IACFF,EAA0BA,EAAwB,UAChD,EACAE,CAAA,EAGN,CACA,MACF,IAAK,kEAEDF,EAAA,QACCD,EAAkD,OACnD,IAECA,EAAkD,SAAW,OAE9DC,GACED,EACA,SAEJ,MACF,IAAK,2EAEDC,EAAA,QACCD,EAA2D,OAC5D,IAECA,EAA2D,SAC5D,OAEAC,GACED,EACA,SAEJ,MACF,IAAK,2EAEAC,EAAAD,EACE,YACH,IACCA,EAA2D,OAC9D,KACJ,CAEK,OAAAC,CACT,CCxLgB,SAAAG,EACdC,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAC/C,OAAAC,EACLF,EAAW,oCAAoCH,CAAiB,EAChE,IAAMM,EAA4BN,EAAmBE,CAAW,EAChE,CACE,GAAGD,CACL,CAAA,CAEJ,CAEgB,SAAAM,EACdC,EACAC,EACAR,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAC/C,OAAAC,EACLF,EAAW,+CACTK,EACAC,CACF,EACA,IACEC,EACEF,EACAC,EACAP,CACF,EACF,CACE,GAAGD,CACL,CAAA,CAEJ"}