{"version":3,"file":"tableQueryHandlers-b4d30a56.js","sources":["../../src/mocks/msw/handlers/asyncJobHandlers.ts","../../src/mocks/query/defaultFileViewColumnModels.ts","../../src/mocks/msw/handlers/tableQueryHandlers.ts"],"sourcesContent":["import { DefaultBodyType, rest } from 'msw'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport { uniqueId } from 'lodash-es'\nimport {\n  AsynchJobState,\n  AsynchronousJobStatus,\n  AsyncJobId,\n} from '@sage-bionetworks/synapse-types'\nimport { ASYNCHRONOUS_JOB_TOKEN } from '../../../utils/APIConstants'\nimport { SynapseError } from '../../../utils/SynapseError'\n\n/**\n * Global mapping between async job token and request/response. This sort of acts as an in-memory database for asynchronous jobs.\n */\nconst mapOfAsyncJobs = new Map<\n  string,\n  {\n    request: unknown\n    response: unknown\n  }\n>()\n\n/**\n * Generates MSW handlers for asynchronous jobs.\n * @param requestPath the path to the service-specific asynchronous job request endpoint.\n *   For example, `'/repo/v1/entity/:id/table/query/async/start'`\n * @param responsePath a function that takes the token parameter ID and returns a path to the service-specific asynchronous job response endpoint.\n *   For example, `param => /repo/v1/entity/:id/table/query/async/get/${param}`\n *   The generic asynchronous job retrieval handler will be generated automatically.\n * @param responseBody the response body, or a function that takes the request body and returns the response body\n * @param backendOrigin the backend origin to use for the handlers.\n * @param serviceSpecificEndpointResponseStatus the status code to use for the service-specific endpoint. The asynchronous job endpoint will always return 200.\n */\nexport function generateAsyncJobHandlers<\n  TRequestBody = unknown,\n  TResponseBody extends DefaultBodyType | SynapseError =\n    | DefaultBodyType\n    | SynapseError,\n>(\n  requestPath: string,\n  responsePath: (tokenParam: string) => string,\n  responseBody: TResponseBody | ((requestBody: TRequestBody) => TResponseBody),\n  backendOrigin = getEndpoint(BackendDestinationEnum.REPO_ENDPOINT),\n  serviceSpecificEndpointResponseStatus = 201,\n) {\n  return [\n    // Handler for the asynchronous job request endpoint.\n    rest.post(`${backendOrigin}${requestPath}`, async (req, res, ctx) => {\n      const asyncJobId = uniqueId()\n      mapOfAsyncJobs.set(asyncJobId, {\n        request: await req.json(),\n        response: responseBody,\n      })\n      return res(\n        ctx.status(201),\n        ctx.json<AsyncJobId>({\n          token: asyncJobId,\n        }),\n      )\n    }),\n\n    // Generic async job response handler. Since this implementation is the same for all services and references the global map, it's fine if this is overridden.\n    rest.get(\n      `${backendOrigin}${ASYNCHRONOUS_JOB_TOKEN(':id')}`,\n      async (req, res, ctx) => {\n        const id = req.params.id as string\n        const asyncJobDetails = mapOfAsyncJobs.get(id)\n        if (!id || !asyncJobDetails) {\n          return res(\n            ctx.status(404),\n            ctx.json({ message: 'The mocked asynchronous job was not found' }),\n          )\n        }\n        const { request, response } = asyncJobDetails as {\n          request: TRequestBody\n          response: TResponseBody\n        }\n        const responseObject: TResponseBody =\n          typeof response === 'function' ? response(request) : response\n\n        const jobState: AsynchJobState =\n          serviceSpecificEndpointResponseStatus < 400 ? 'COMPLETE' : 'FAILED'\n\n        return res(\n          // This endpoint returns a successful status code regardless of the job status\n          ctx.status(200),\n          ctx.json<AsynchronousJobStatus<TRequestBody, TResponseBody>>({\n            jobState,\n            jobCanceling: false,\n            requestBody: request,\n            etag: '00000000-0000-0000-0000-000000000000',\n            jobId: id,\n            responseBody: responseObject,\n            startedByUserId: 0,\n            startedOn: '',\n            changedOn: '',\n            progressMessage: '',\n            progressCurrent: 100,\n            progressTotal: 100,\n            exception: '',\n            errorMessage: '',\n            errorDetails: '',\n            runtimeMS: 100,\n          }),\n        )\n      },\n    ),\n\n    // Service-specific response endpoint\n    rest.get<TResponseBody>(\n      `${backendOrigin}${responsePath(':asyncJobToken')}`,\n      async (req, res, ctx) => {\n        const asyncJobToken = req.params.asyncJobToken as string\n        const asyncJobDetails = mapOfAsyncJobs.get(asyncJobToken)\n        if (!asyncJobToken || !asyncJobDetails) {\n          return res(\n            ctx.status(404),\n            ctx.json({ message: 'The mocked asynchronous job was not found' }),\n          )\n        }\n\n        const { request, response } = asyncJobDetails as {\n          request: TRequestBody\n          response: TResponseBody\n        }\n        const responseObject: TResponseBody =\n          typeof response === 'function' ? response(request) : response\n\n        return res(\n          ctx.status(serviceSpecificEndpointResponseStatus),\n          ctx.json(responseObject),\n        )\n      },\n    ),\n  ]\n}\n","import { ColumnModel } from '@sage-bionetworks/synapse-types'\n\nconst defaultFileViewColumnModels: ColumnModel[] = [\n  {\n    name: 'id',\n    columnType: 'ENTITYID',\n    id: '81721',\n  },\n  {\n    name: 'name',\n    columnType: 'STRING',\n    id: '81722',\n    maximumSize: 256,\n  },\n  {\n    name: 'description',\n    columnType: 'STRING',\n    id: '87941',\n    maximumSize: 1000,\n  },\n  {\n    name: 'createdOn',\n    columnType: 'DATE',\n    facetType: 'range',\n    id: '81723',\n  },\n  {\n    name: 'createdBy',\n    columnType: 'USERID',\n    facetType: 'enumeration',\n    id: '81724',\n  },\n  {\n    name: 'etag',\n    columnType: 'STRING',\n    id: '81725',\n    maximumSize: 36,\n  },\n  {\n    name: 'modifiedOn',\n    columnType: 'DATE',\n    facetType: 'range',\n    id: '81726',\n  },\n  {\n    name: 'modifiedBy',\n    columnType: 'USERID',\n    facetType: 'enumeration',\n    id: '81727',\n  },\n  {\n    name: 'type',\n    columnType: 'STRING',\n    facetType: 'enumeration',\n    id: '196992',\n    maximumSize: 20,\n  },\n  {\n    name: 'currentVersion',\n    columnType: 'INTEGER',\n    id: '81729',\n  },\n  {\n    name: 'parentId',\n    columnType: 'ENTITYID',\n    facetType: 'enumeration',\n    id: '81730',\n  },\n  {\n    name: 'benefactorId',\n    columnType: 'ENTITYID',\n    id: '81731',\n  },\n  {\n    name: 'projectId',\n    columnType: 'ENTITYID',\n    facetType: 'enumeration',\n    id: '81732',\n  },\n  {\n    name: 'dataFileHandleId',\n    columnType: 'FILEHANDLEID',\n    id: '81733',\n  },\n  {\n    name: 'dataFileName',\n    columnType: 'STRING',\n    id: '199088',\n    maximumSize: 256,\n  },\n  {\n    name: 'dataFileSizeBytes',\n    columnType: 'INTEGER',\n    id: '112368',\n  },\n  {\n    name: 'dataFileMD5Hex',\n    columnType: 'STRING',\n    id: '112369',\n    maximumSize: 100,\n  },\n  {\n    name: 'dataFileConcreteType',\n    columnType: 'STRING',\n    facetType: 'enumeration',\n    id: '196995',\n    maximumSize: 65,\n  },\n  {\n    name: 'dataFileBucket',\n    columnType: 'STRING',\n    facetType: 'enumeration',\n    id: '196996',\n    maximumSize: 100,\n  },\n  {\n    name: 'dataFileKey',\n    columnType: 'STRING',\n    id: '184972',\n    maximumSize: 700,\n  },\n]\n\nexport default defaultFileViewColumnModels\n","import { cloneDeep, uniqueId } from 'lodash-es'\nimport { rest } from 'msw'\nimport {\n  TABLE_QUERY_ASYNC_GET,\n  TABLE_QUERY_ASYNC_START,\n} from '../../../utils/APIConstants'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport {\n  BUNDLE_MASK_LAST_UPDATED_ON,\n  BUNDLE_MASK_QUERY_COLUMN_MODELS,\n  BUNDLE_MASK_QUERY_COUNT,\n  BUNDLE_MASK_QUERY_FACETS,\n  BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE,\n  BUNDLE_MASK_QUERY_RESULTS,\n  BUNDLE_MASK_QUERY_SELECT_COLUMNS,\n  BUNDLE_MASK_SUM_FILES_SIZE_BYTES,\n} from '../../../utils/SynapseConstants'\nimport {\n  ColumnModel,\n  QueryBundleRequest,\n  QueryResultBundle,\n  TableUpdateTransactionRequest,\n  TableUpdateTransactionResponse,\n  ViewColumnModelRequest,\n  ViewColumnModelResponse,\n} from '@sage-bionetworks/synapse-types'\nimport { generateAsyncJobHandlers } from './asyncJobHandlers'\nimport defaultFileViewColumnModels from '../../query/defaultFileViewColumnModels'\nimport { SynapseError } from '../../../utils/SynapseError'\n\nconst BIT_TO_FIELD_MAP: Record<number, keyof QueryResultBundle> = {\n  [BUNDLE_MASK_QUERY_RESULTS]: 'queryResult',\n  [BUNDLE_MASK_QUERY_COUNT]: 'queryCount',\n  [BUNDLE_MASK_QUERY_SELECT_COLUMNS]: 'selectColumns',\n  [BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE]: 'maxRowsPerPage',\n  [BUNDLE_MASK_QUERY_COLUMN_MODELS]: 'columnModels',\n  [BUNDLE_MASK_QUERY_FACETS]: 'facets',\n  [BUNDLE_MASK_SUM_FILES_SIZE_BYTES]: 'sumFileSizes',\n  [BUNDLE_MASK_LAST_UPDATED_ON]: 'lastUpdatedOn',\n}\n\nfunction removeBundleFieldsUsingMask(\n  queryResultBundle: QueryResultBundle,\n  partMask: number,\n): QueryResultBundle {\n  const result = cloneDeep(queryResultBundle)\n  Object.entries(BIT_TO_FIELD_MAP).forEach(([bit, field]) => {\n    if ((partMask & parseInt(bit)) === 0) {\n      delete result[field]\n    }\n  })\n  return result\n}\n\nexport function getHandlersForTableQuery(\n  response: QueryResultBundle,\n  backendOrigin = getEndpoint(BackendDestinationEnum.REPO_ENDPOINT),\n) {\n  return generateAsyncJobHandlers<QueryBundleRequest, QueryResultBundle>(\n    TABLE_QUERY_ASYNC_START(':id'),\n    tokenParam => TABLE_QUERY_ASYNC_GET(':entityId', tokenParam),\n    request => removeBundleFieldsUsingMask(response, request.partMask),\n    backendOrigin,\n  )\n}\n\nexport function getAnnotationColumnHandlers(\n  response: ViewColumnModelResponse,\n  backendOrigin = getEndpoint(BackendDestinationEnum.REPO_ENDPOINT),\n) {\n  return generateAsyncJobHandlers<\n    ViewColumnModelRequest,\n    ViewColumnModelResponse\n  >(\n    '/repo/v1/column/view/scope/async/start',\n    tokenParam => `/repo/v1/column/view/scope/async/get/${tokenParam}`,\n    response,\n    backendOrigin,\n  )\n}\n\nexport function getDefaultColumnHandlers(\n  backendOrigin = getEndpoint(BackendDestinationEnum.REPO_ENDPOINT),\n) {\n  return [\n    rest.get(\n      `${backendOrigin}/repo/v1/column/tableview/defaults`,\n      async (req, res, ctx) => {\n        return res(\n          ctx.status(200),\n          ctx.json({\n            concreteType: 'org.sagebionetworks.repo.model.table.ColumnModel',\n            list: defaultFileViewColumnModels,\n          }),\n        )\n      },\n    ),\n  ]\n}\n\nexport function getCreateColumnModelBatchHandler(\n  backendOrigin = getEndpoint(BackendDestinationEnum.REPO_ENDPOINT),\n) {\n  return rest.post(\n    `${backendOrigin}/repo/v1/column/batch`,\n    async (req, res, ctx) => {\n      const { list: columnModels } = await req.json<{ list: ColumnModel[] }>()\n      columnModels.forEach(cm => {\n        if (!cm.id) {\n          cm.id = uniqueId()\n        }\n      })\n      return res(\n        ctx.status(201),\n        ctx.json({\n          concreteType: 'org.sagebionetworks.repo.model.table.ColumnModel',\n          list: columnModels,\n        }),\n      )\n    },\n  )\n}\n\nexport function getTableTransactionHandlers(\n  response: TableUpdateTransactionResponse | SynapseError,\n  backendOrigin = getEndpoint(BackendDestinationEnum.REPO_ENDPOINT),\n  statusCode?: number,\n) {\n  return generateAsyncJobHandlers<\n    TableUpdateTransactionRequest,\n    TableUpdateTransactionResponse | SynapseError\n  >(\n    `/repo/v1/entity/:entityId/table/transaction/async/start`,\n    tokenParam =>\n      `/repo/v1/entity/:entityId/table/transaction/async/get/${tokenParam}`,\n    response,\n    backendOrigin,\n    statusCode,\n  )\n}\n"],"names":["mapOfAsyncJobs","generateAsyncJobHandlers","requestPath","responsePath","responseBody","backendOrigin","getEndpoint","BackendDestinationEnum","serviceSpecificEndpointResponseStatus","rest","req","res","ctx","asyncJobId","uniqueId","ASYNCHRONOUS_JOB_TOKEN","id","asyncJobDetails","request","response","responseObject","jobState","asyncJobToken","defaultFileViewColumnModels","BIT_TO_FIELD_MAP","BUNDLE_MASK_QUERY_RESULTS","BUNDLE_MASK_QUERY_COUNT","BUNDLE_MASK_QUERY_SELECT_COLUMNS","BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE","BUNDLE_MASK_QUERY_COLUMN_MODELS","BUNDLE_MASK_QUERY_FACETS","BUNDLE_MASK_SUM_FILES_SIZE_BYTES","BUNDLE_MASK_LAST_UPDATED_ON","removeBundleFieldsUsingMask","queryResultBundle","partMask","result","cloneDeep","bit","field","getHandlersForTableQuery","TABLE_QUERY_ASYNC_START","tokenParam","TABLE_QUERY_ASYNC_GET","getAnnotationColumnHandlers","getDefaultColumnHandlers","getCreateColumnModelBatchHandler","columnModels","cm"],"mappings":"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"}