{"version":3,"file":"FeaturedToolsList-907de51e.js","sources":["../../src/components/FeaturedToolsList/FeaturedToolCard.tsx","../../src/components/FeaturedToolsList/FeaturedToolsList.tsx"],"sourcesContent":["import dayjs from 'dayjs'\nimport React from 'react'\nimport { formatDate } from '../../utils/functions/DateFormatter'\n\nexport type FeaturedToolCardProps = {\n  id: string\n  name: string\n  description: string\n  type: string\n  toolDetailPageURL: string\n  date: string\n}\n\nexport const FeaturedToolCard: React.FunctionComponent<\n  FeaturedToolCardProps & React.HTMLAttributes<HTMLDivElement>\n> = ({ id, name, description, type, toolDetailPageURL, date, ...domProps }) => {\n  return (\n    <div\n      {...domProps}\n      className={`cardContainer FeaturedToolCard bootstrap-4-backport ${\n        domProps.className ?? ''\n      }`}\n    >\n      <div className=\"FeaturedToolCard__Type\">\n        <span className=\"SRC-tag\">{type}</span>\n      </div>\n      <div className=\"FeaturedToolCard__Date\">\n        {formatDate(dayjs(parseInt(date)), 'MMMM YYYY')}\n      </div>\n      <div className=\"FeaturedToolCard__Name\">{name}</div>\n      <div className=\"FeaturedToolCard__Description\">{description}</div>\n      <div>\n        <a\n          className=\"FeaturedToolCard__Link\"\n          href={`${toolDetailPageURL}${id}`}\n        >\n          View Tool\n        </a>\n      </div>\n    </div>\n  )\n}\n","import { SynapseConstants } from '../../utils'\nimport { getFieldIndex } from '../../utils/functions/queryUtils'\nimport useGetQueryResultBundle from '../../synapse-queries/entity/useGetQueryResultBundle'\nimport { QueryBundleRequest } from '@sage-bionetworks/synapse-types'\nimport React, { useState, useEffect } from 'react'\nimport { FeaturedToolCard } from './FeaturedToolCard'\nimport { ErrorBanner } from '../error/ErrorBanner'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\n\nexport type FeaturedToolsListProps = {\n  entityId: string\n  toolDetailPageURL: string\n  idColumnName?: string\n  nameColumnName?: string\n  descriptionColumnName?: string\n  typeColumnName?: string\n  dateColumnName?: string\n}\n\ntype ToolData = {\n  id: string\n  name: string\n  description: string\n  type: string\n  date: string\n}\n\n/**\n * Display a set of FeaturedToolCards (driven by a Table/View). Driven by the following annotations/column names:\n * 'id', 'name', 'type', and 'description'.\n */\nexport const FeaturedToolsList: React.FunctionComponent<\n  FeaturedToolsListProps\n> = ({\n  entityId,\n  toolDetailPageURL,\n  idColumnName = 'id',\n  nameColumnName = 'name',\n  descriptionColumnName = 'description',\n  typeColumnName = 'type',\n  dateColumnName = 'date',\n}) => {\n  const sql = `SELECT \"${idColumnName}\", \"${nameColumnName}\", \"${descriptionColumnName}\", \"${typeColumnName}\", \"${dateColumnName}\" FROM ${entityId} ORDER BY ROW_ID DESC LIMIT 3`\n  const queryBundleRequest: QueryBundleRequest = {\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    entityId,\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    query: {\n      sql,\n    },\n  }\n\n  const { accessToken } = useSynapseContext()\n  const [tools, setTools] = useState<ToolData[]>([])\n  const [error, setError] = useState<Error>()\n  const { data: queryResultBundle, error: queryError } =\n    useGetQueryResultBundle(queryBundleRequest)\n\n  useEffect(() => {\n    const getData = () => {\n      try {\n        const idIndex = getFieldIndex(idColumnName, queryResultBundle)\n        const nameColumnIndex = getFieldIndex(nameColumnName, queryResultBundle)\n        const typeColumnIndex = getFieldIndex(typeColumnName, queryResultBundle)\n        const descriptionColumnIndex = getFieldIndex(\n          descriptionColumnName,\n          queryResultBundle,\n        )\n        const dateColumnIndex = getFieldIndex(dateColumnName, queryResultBundle)\n\n        const tools: ToolData[] =\n          queryResultBundle?.queryResult!.queryResults.rows.map(row => {\n            if (row.values.some(value => value === null)) {\n              console.warn('Row has null value(s)')\n            }\n            // Cast to string, assuming there are no null values\n            const values = row.values as string[]\n            return {\n              name: values[nameColumnIndex],\n              description: values[descriptionColumnIndex],\n              type: values[typeColumnIndex],\n              id: values[idIndex],\n              date: values[dateColumnIndex],\n            }\n          }) ?? []\n        if (queryError) {\n          throw queryError\n        }\n        if (tools.length === 0) {\n          // wait for data to load\n          return\n        }\n\n        setTools(tools)\n      } catch (error) {\n        console.error(error)\n        setError(error)\n      }\n    }\n    getData()\n  }, [\n    entityId,\n    accessToken,\n    queryResultBundle,\n    queryError,\n    idColumnName,\n    nameColumnName,\n    typeColumnName,\n    descriptionColumnName,\n    dateColumnName,\n  ])\n\n  return error ? (\n    <ErrorBanner error={error}></ErrorBanner>\n  ) : (\n    <div className=\"FeaturedToolList\">\n      {tools.map(tool => {\n        return (\n          <FeaturedToolCard\n            key={tool.id}\n            name={tool.name}\n            type={tool.type}\n            description={tool.description}\n            id={tool.id}\n            date={tool.date}\n            toolDetailPageURL={toolDetailPageURL}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default FeaturedToolsList\n"],"names":["FeaturedToolCard","id","name","description","type","toolDetailPageURL","date","domProps","jsxs","jsx","formatDate","dayjs","FeaturedToolsList","entityId","idColumnName","nameColumnName","descriptionColumnName","typeColumnName","dateColumnName","sql","queryBundleRequest","SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","accessToken","useSynapseContext","tools","setTools","useState","error","setError","queryResultBundle","queryError","useGetQueryResultBundle","useEffect","idIndex","getFieldIndex","nameColumnIndex","typeColumnIndex","descriptionColumnIndex","dateColumnIndex","tools2","row","value","values","error2","ErrorBanner","tool"],"mappings":"mbAaO,MAAAA,EAAA,CAAA,CAAA,GAAAC,EAAA,KAAAC,EAAA,YAAAC,EAAA,KAAAC,EAAA,kBAAAC,EAAA,KAAAC,EAAA,GAAAC,KAGLC,EACE,MAAC,CAAA,GAAAD,EACK,UAAA,uDAAAA,EAAA,WAAA,KAEoB,SAAA,CAGxBE,EAAA,MAAA,CAAA,UAAA,yBAAA,SAAAA,EAAA,OAAA,CAAA,UAAA,UAAA,SAAAL,CAAA,CAAA,CAAA,CAAA,EAEAK,EAAA,MAAA,CAAA,UAAA,yBAAA,SAAAC,EAAAC,EAAA,SAAAL,CAAA,CAAA,EAAA,WAAA,CAAA,CAAA,EAGAG,EAAA,MAAA,CAAA,UAAA,yBAAA,SAAAP,EAAA,EAC8CO,EAAA,MAAA,CAAA,UAAA,gCAAA,SAAAN,EAAA,EACcM,EAAA,MAAA,CAAA,SAAAA,EAE1D,IAAC,CAAA,UAAA,yBACW,KAAA,GAAAJ,IAAAJ,IACmB,SAAA,WAC9B,CAAA,EAAA,CAGH,CAAA,CAAA,upBCPC,MAAAW,EAAA,CAAA,CAEF,SAAAC,EACH,kBAAAR,EACA,aAAAS,EAAA,KACe,eAAAC,EAAA,OACE,sBAAAC,EAAA,cACO,eAAAC,EAAA,OACP,eAAAC,EAAA,MAEnB,IAAA,CACE,MAAAC,EAAA,WAAAL,QAAAC,QAAAC,QAAAC,QAAAC,WAAAL,iCACAO,EAAA,CAA+C,aAAA,0DAC/B,SAAAP,EACd,SAAAQ,EAAAC,EAGmB,MAAA,CACZ,IAAAH,CACL,CACF,EAGF,CAAA,YAAAI,GAAAC,IACA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EACA,CAAA,KAAAG,EAAA,MAAAC,GAAAC,EAAAZ,CAAA,EAGAa,OAAAA,EAAAA,UAAA,IAAA,EACE,IAAA,CACE,GAAA,CACE,MAAAC,EAAAC,EAAArB,EAAAgB,CAAA,EACAM,EAAAD,EAAApB,EAAAe,CAAA,EACAO,EAAAF,EAAAlB,EAAAa,CAAA,EACAQ,EAAAH,EAA+BnB,EAC7Bc,CACA,EAEFS,EAAAJ,EAAAjB,EAAAY,CAAA,EAEAU,GAAAV,GAAA,YAAAA,EAAA,YAAA,aAAA,KAAA,IAAAW,GAAA,CAEIA,EAAA,OAAA,KAAAC,GAAAA,IAAA,IAAA,GACE,QAAA,KAAA,uBAAA,EAGF,MAAAC,EAAAF,EAAA,OACA,MAAA,CAAO,KAAAE,EAAAP,CAAA,EACuB,YAAAO,EAAAL,CAAA,EACc,KAAAK,EAAAN,CAAA,EACd,GAAAM,EAAAT,CAAA,EACV,KAAAS,EAAAJ,CAAA,CACU,CAC9B,KAAA,CAAA,EAEJ,GAAAR,EACE,MAAAA,EAEF,GAAAS,EAAA,SAAA,EAEE,OAGFd,EAAAc,CAAA,CAAc,OAAAI,EAAA,CAEd,QAAA,MAAAA,CAAA,EACAf,EAAAe,CAAA,CAAc,CAChB,IAEM,EAAA,CACP/B,EACDU,EACAO,EACAC,EACAjB,EACAC,EACAE,EACAD,EACAE,CACA,CAAA,EAGFU,EAAAnB,EAAAoC,EAAA,CAAA,MAAAjB,CAAA,CAAA,EAAAnB,EAAA,MAAA,CAAA,UAAA,mBAAA,SAAAgB,EAAA,IAAAqB,GAKMrC,EACET,EAAC,CAAA,KAAA8C,EAAA,KAEY,KAAAA,EAAA,KACA,YAAAA,EAAA,YACO,GAAAA,EAAA,GACT,KAAAA,EAAA,KACE,kBAAAzC,CACX,EAAAyC,EAAA,EANU,CAOZ,CAAA,CAAA,CAKV;"}