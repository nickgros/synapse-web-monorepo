{"version":3,"file":"ForumSearch.stories-4a204ec9.js","sources":["../../src/components/DiscussionSearchResult.tsx","../../src/components/ForumSearch/ForumSearch.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  getReply,\n  getReplyMessageUrl,\n  getThreadMessageUrl,\n  getThread,\n  getUserProfileById,\n} from '../synapse-client/SynapseClient'\nimport { useSynapseContext } from '../utils/context/SynapseContext'\nimport { UserProfile } from '@sage-bionetworks/synapse-types'\nimport {\n  DiscussionReplyBundle,\n  DiscussionThreadBundle,\n} from '@sage-bionetworks/synapse-types'\nimport dayjs from 'dayjs'\nimport { Typography } from '@mui/material'\nimport { Col, Row } from 'react-bootstrap'\nimport UserCard from './UserCard/UserCard'\nimport { SMALL_USER_CARD } from '../utils/SynapseConstants'\nimport IconSvg from './IconSvg/IconSvg'\nimport { Skeleton } from '@mui/material'\nimport { SkeletonTable } from './Skeleton/SkeletonTable'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../utils/functions/getEndpoint'\nimport { formatDate } from '../utils/functions/DateFormatter'\n\nexport const getMessage = async (url: string): Promise<string> => {\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'authorization',\n      'Content-Type': 'text/plain; charset=utf-8',\n    },\n  })\n  return response.text()\n}\n\nexport type DiscussionSearchResultProps = {\n  threadId: string\n  replyId?: string\n}\n\nconst DiscussionSearchResult = (props: DiscussionSearchResultProps) => {\n  const { threadId, replyId } = props\n  const { accessToken } = useSynapseContext()\n  const [threadBundle, setThreadBundle] = useState<DiscussionThreadBundle>()\n  const [messageUrl, setMessageUrl] = useState<string>('')\n  const [replyBundle, setReplyBundle] = useState<DiscussionReplyBundle>()\n  const [replyAuthor, setReplyAuthor] = useState<UserProfile>()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const getThreadOrReply = async () => {\n    let newMessageUrl\n    const thread = await getThread(threadId, accessToken)\n    setIsLoading(true)\n    if (replyId) {\n      const reply = await getReply(replyId, accessToken)\n      newMessageUrl = await getReplyMessageUrl(reply.messageKey, accessToken)\n      setReplyAuthor(await getUserProfileById(accessToken, reply.createdBy))\n      setReplyBundle(reply)\n    } else {\n      setReplyAuthor(await getUserProfileById(accessToken, thread.createdBy))\n      newMessageUrl = await getThreadMessageUrl(thread.messageKey, accessToken)\n    }\n    setMessageUrl(await getMessage(newMessageUrl.messageUrl))\n    setThreadBundle(thread)\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    getThreadOrReply()\n  }, [])\n\n  const getUrl = (threadId: string, projectId: string, replyId?: string) => {\n    let url = `${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${projectId}/discussion/threadId=${threadId}`\n    if (replyId) {\n      url += `&replyId=${replyId}`\n    }\n    return url\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport search-result-container\">\n      <Row>\n        <Col xs={1}>\n          {isLoading ? (\n            <Skeleton variant=\"circular\" width=\"40px\" height=\"40px\" />\n          ) : replyId ? (\n            <IconSvg icon=\"replyTwoTone\" />\n          ) : (\n            <IconSvg icon=\"chatTwoTone\" />\n          )}\n        </Col>\n        <Col xs={11}>\n          {isLoading ? (\n            <SkeletonTable numCols={1} numRows={4} />\n          ) : (\n            <>\n              <Typography variant=\"headline3\">\n                <a\n                  className=\"link\"\n                  href={getUrl(\n                    threadBundle?.id!,\n                    threadBundle?.projectId!,\n                    replyBundle?.id,\n                  )}\n                >\n                  {threadBundle?.title}\n                </a>\n              </Typography>\n              <div className=\"truncated\">\n                <Typography variant=\"body1\">{messageUrl}</Typography>\n              </div>\n              <div className=\"search-result-footer\">\n                {replyId ? 'Reply' : 'Thread'} by{' '}\n                {\n                  <UserCard\n                    size={SMALL_USER_CARD}\n                    ownerId={replyAuthor?.ownerId}\n                  />\n                }{' '}\n                {formatDate(dayjs(replyBundle?.createdOn))}\n              </div>\n            </>\n          )}\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default DiscussionSearchResult\n","import React, { useEffect, useState } from 'react'\nimport { forumSearch, getEntity } from '../../synapse-client/SynapseClient'\nimport {\n  DiscussionSearchResponse,\n  Match,\n} from '@sage-bionetworks/synapse-types'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport DiscussionSearchResult from '../DiscussionSearchResult'\nimport { Entity } from '@sage-bionetworks/synapse-types'\nimport { Button, Typography } from '@mui/material'\nimport NoSearchResults from '../../assets/icons/NoSearchResults'\nimport IconSvg from '../IconSvg/IconSvg'\nimport { displayToast } from '../ToastMessage/ToastMessage'\n\nexport type ForumSearchProps = {\n  forumId: string\n  projectId?: string\n  onSearchResultsVisible?: (visible: boolean) => void\n}\n\nexport const ForumSearch = (props: ForumSearchProps) => {\n  const { onSearchResultsVisible } = props\n  const { accessToken } = useSynapseContext()\n  const [searchInput, setSearchInput] = useState<string>('')\n  const [searchResult, setSearchResult] = useState<DiscussionSearchResponse>()\n  const [matchList, setMatchList] = useState<Match[]>()\n  const [entity, setEntity] = useState<Entity | undefined>()\n  const [noSearchResult, setNoSearchResult] = useState(false)\n\n  const onSearch = async () => {\n    if (onSearchResultsVisible) {\n      onSearchResultsVisible(true)\n    }\n    try {\n      setSearchResult(undefined)\n      setNoSearchResult(false)\n      const searchResponse = await forumSearch(\n        {\n          searchString: searchInput,\n          nextPageToken: undefined,\n        },\n        props.forumId,\n        accessToken,\n      )\n      if (searchResponse.matches.length == 0) {\n        setNoSearchResult(true)\n      }\n      setSearchResult(searchResponse)\n      setMatchList(searchResponse.matches)\n    } catch (err: any) {\n      displayToast(err.reason as string, 'danger')\n    }\n  }\n\n  const onResetSearch = () => {\n    if (onSearchResultsVisible) {\n      onSearchResultsVisible(false)\n    }\n    setSearchInput('')\n    setSearchResult(undefined)\n    setNoSearchResult(false)\n    setMatchList(undefined)\n  }\n\n  useEffect(() => {\n    const fetchEntity = async () => {\n      if (props.projectId) {\n        const entity = await getEntity(accessToken, props.projectId)\n        setEntity(entity)\n      }\n    }\n    fetchEntity()\n  }, [accessToken, props.projectId])\n\n  const NoSearchResultComponent = () => {\n    return (\n      <div className=\"text-center\">\n        {NoSearchResults}\n        <Typography variant=\"body1\">No results with this query</Typography>\n        <Typography variant=\"body1Italic\">\n          Search the full text of posts, replies, and titles\n        </Typography>\n      </div>\n    )\n  }\n\n  const onLoadMore = async () => {\n    const searchResponse = await forumSearch(\n      {\n        searchString: searchInput,\n        nextPageToken: searchResult?.nextPageToken,\n      },\n      props.forumId,\n      accessToken,\n    )\n    setSearchResult(searchResponse)\n    if (matchList) {\n      setMatchList([...matchList, ...searchResponse.matches])\n    }\n  }\n\n  return (\n    <div className=\"ForumSearch\">\n      <div>\n        <span className=\"SearchIcon\">\n          <IconSvg icon=\"search\" />\n        </span>\n        <input\n          role=\"textbox\"\n          type=\"search\"\n          className={`SearchBar  ${searchResult ? 'SearchBarResult' : ''}`}\n          placeholder=\"Search discussions\"\n          value={searchInput}\n          onChange={event => {\n            setSearchInput(event.target.value)\n          }}\n          onKeyDown={(event: any) => {\n            if (event.key === 'Enter') {\n              onSearch()\n            }\n          }}\n        />\n        {searchInput && (\n          <button\n            className=\"ClearSearchIcon\"\n            onClick={() => {\n              onResetSearch()\n            }}\n          >\n            <IconSvg icon=\"clear\" />\n          </button>\n        )}\n      </div>\n      {noSearchResult && (\n        <>\n          {props.projectId && (\n            <Typography variant=\"body1Italic\" className=\"NoResultsText\">\n              No results for &quot;{searchInput}&quot; in {entity?.name}\n            </Typography>\n          )}\n          <NoSearchResultComponent />\n        </>\n      )}\n      {matchList && (\n        <>\n          {props.projectId && !noSearchResult && (\n            <Typography variant=\"body1Italic\" className=\"ResultsText\">\n              Results for &quot;{searchInput}&quot; in {entity?.name}\n            </Typography>\n          )}\n          {matchList.map(match => (\n            <div key={`${match.forumId}-${match.threadId}-${match.replyId}`}>\n              <DiscussionSearchResult\n                threadId={match.threadId}\n                replyId={match.replyId}\n              />\n            </div>\n          ))}\n        </>\n      )}\n      {searchResult?.nextPageToken && (\n        <div className=\"text-center\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              onLoadMore()\n            }}\n          >\n            Load more\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default ForumSearch\n"],"names":["getMessage","url","DiscussionSearchResult","props","threadId","replyId","accessToken","useSynapseContext","threadBundle","setThreadBundle","useState","messageUrl","setMessageUrl","replyBundle","setReplyBundle","replyAuthor","setReplyAuthor","isLoading","setIsLoading","getThreadOrReply","newMessageUrl","thread","getThread","reply","getReply","getReplyMessageUrl","getUserProfileById","getThreadMessageUrl","useEffect","jsx","jsxs","Row","Col","Skeleton","IconSvg","SkeletonTable","Fragment","Typography","threadId2","projectId","replyId2","PRODUCTION_ENDPOINT_CONFIG","UserCard","SMALL_USER_CARD","formatDate","dayjs","ForumSearch","onSearchResultsVisible","searchInput","setSearchInput","searchResult","setSearchResult","matchList","setMatchList","entity","setEntity","noSearchResult","setNoSearchResult","onSearch","searchResponse","forumSearch","err","displayToast","onResetSearch","entity2","getEntity","NoSearchResultComponent","NoSearchResults","onLoadMore","event","match","Button"],"mappings":"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"}