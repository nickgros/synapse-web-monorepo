import{a as d}from"./index-43fd58c7.js";import{E as Z,j as ie,k as F,l as ae,m as de,n as U,p as ce,q as me,r as le,U as ue,t as K,u as ye,v as pe,F as Ee,w as Ie,x as fe,T as V,y as Se,N as ge,A as Te,z as _e,O as Ae,B as Ce,C as be,D as ve,G as De,H as he,R as Ne,I as Re,J as $e}from"./SynapseContext-d313cbec.js";import{g as k,B as w}from"./getEndpoint-ac94413e.js";import{m as Oe,a as ke,A as D,M as c,b as p,c as u,d as $,e as A,f as g,g as q,h as we,i as G,j as Le,k as h,l as Me,n as L,o as W,p as Q,q as J,r as z,s as je}from"./MockSubmission-9abe7451.js";import{R as Be,A as O}from"./RestrictionInformation-32ce14e2.js";import{U as Pe}from"./UploadDestination-5ff3844f.js";import{S as He}from"./ManagedACTAccessRequirementStatus-9671fe8d.js";const T=u.id,Fe=u.name,f="syn123",_="My mock file entity",Ue="45745485",l={id:f,parentId:T,dataFileHandleId:$,name:_,concreteType:"org.sagebionetworks.repo.model.FileEntity",createdBy:c.toString(),modifiedBy:A.toString(),etag:"00000000-0000-0000-0000-000000000000",versionNumber:3,versionLabel:"a label for version 3",isLatestVersion:!0,createdOn:"2021-03-02T15:05:34.973Z",modifiedOn:"2021-03-05T11:31:24.521Z"},Ke=[{id:f,modifiedBy:c.toString(),versionNumber:1,versionLabel:"a label for version 1",versionComment:"a comment",contentSize:"100",contentMd5:"d836adae5632872014783b05cd2f76d7",modifiedByPrincipalId:c.toString(),modifiedOn:"2021-03-02T15:05:34.973Z",isLatestVersion:!1},{id:f,modifiedBy:c.toString(),versionNumber:3,versionLabel:"a label for version 3",versionComment:"a comment about version 3",contentSize:"100",contentMd5:"bc91a4a16ccb21944fcee55275dc4574",modifiedByPrincipalId:c.toString(),modifiedOn:"2021-03-05T11:31:24.521Z",isLatestVersion:!0}],Ve={3:{id:f,parentId:T,dataFileHandleId:$,name:_,concreteType:"org.sagebionetworks.repo.model.FileEntity",createdBy:c.toString(),modifiedBy:c.toString(),etag:"00000000-0000-0000-0000-000000000000",versionNumber:3,versionLabel:"a label for version 3",isLatestVersion:!0},1:{id:f,parentId:T,dataFileHandleId:$,name:_,concreteType:"org.sagebionetworks.repo.model.FileEntity",createdBy:c.toString(),modifiedBy:c.toString(),etag:"00000000-0000-0000-0000-000000000000",versionNumber:1,versionLabel:"a label for version 1",isLatestVersion:!1}},X={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:Fe,id:T,type:"org.sagebionetworks.repo.model.Project"},{name:_,id:f,type:"org.sagebionetworks.repo.model.FileEntity"}]},qe={entity:l,entityType:Z.FILE,fileHandles:[Oe,ke],annotations:{id:f,etag:"00000000-0000-0000-0000-000000000000",annotations:{myStringKey:{type:D.STRING,value:["myValue"]},myIntegerKey:{type:D.LONG,value:[4325435345213,4321]},myFloatKey:{type:D.LONG,value:[1.5,17/13]}}},rootWikiId:Ue,fileName:l.name,benefactorAcl:{id:T,creationDate:"2020-11-18T20:05:06.540Z",etag:"f143bbfd-ba09-4a42-b1e9-f9368777ad9b",resourceAccess:[{principalId:c,accessType:[p.DELETE,p.CHANGE_SETTINGS,p.MODERATE,p.CHANGE_PERMISSIONS,p.UPDATE,p.READ,p.DOWNLOAD,p.CREATE]},{principalId:273948,accessType:[p.READ]},{principalId:273949,accessType:[p.READ]}]},permissions:{canView:!0,canEdit:!0,canMove:!0,canAddChild:!0,canCertifiedUserEdit:!0,canCertifiedUserAddChild:!0,isCertifiedUser:!0,canChangePermissions:!0,canChangeSettings:!0,canDelete:!0,canDownload:!0,canUpload:!0,canEnableInheritance:!0,ownerPrincipalId:3350396,canPublicRead:!0,canModerate:!0,isCertificationRequired:!0,isEntityOpenData:!1},threadCount:5,path:X,restrictionInformation:{restrictionLevel:Be.OPEN,hasUnmetAccessRequirement:!1}},Ge={id:l.id,name:l.name,etag:l.etag,createdOn:l.createdOn,modifiedOn:l.modifiedOn,createdBy:l.createdBy,modifiedBy:l.modifiedBy,parentId:"syn4489",concreteType:"org.sagebionetworks.repo.model.Project",myStringKey:"myValue",myIntegerKey:[4325435345213,4321],myFloatKey:[1.5,17/13]},Ye={id:l.id,name:l.name,type:l.concreteType,versionNumber:3,versionLabel:"a label for version 3",benefactorId:123,createdOn:l.createdOn,modifiedOn:l.modifiedOn,createdBy:c.toString(),modifiedBy:A.toString(),isLatestVersion:!0},b={id:f,name:_,entity:l,bundle:qe,json:Ge,versions:Ve,versionInfo:Ke,entityHeader:Ye,path:X},S="syn234",v="A Mocked Dataset",C={id:S,parentId:u.id,name:v,concreteType:"org.sagebionetworks.repo.model.table.Dataset",createdBy:c.toString(),modifiedBy:A.toString(),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",versionNumber:3,versionLabel:"in progress",versionComment:"in progress",isLatestVersion:!0,etag:"00000000-0000-0000-0000-000000000000",items:[],columnIds:[],isSearchEnabled:!1},Ze={id:S,type:"org.sagebionetworks.repo.model.table.Dataset",name:v,benefactorId:parseInt(u.id),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",createdBy:c.toString(),modifiedBy:c.toString(),versionNumber:3,versionLabel:"in progress",isLatestVersion:!0},x={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:u.name,id:u.id,type:"org.sagebionetworks.repo.model.Project"},{name:v,id:S,type:"org.sagebionetworks.repo.model.FileEntity"}]},We={1:{...C,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1},2:{...C,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1}},Qe=[{id:S,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1,modifiedBy:c.toString(),modifiedByPrincipalId:c.toString(),modifiedOn:"2022-03-22T18:50:22.336Z"},{id:S,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1,modifiedBy:c.toString(),modifiedByPrincipalId:c.toString(),modifiedOn:"2022-03-22T18:47:34.797Z"}],Je={entity:C,entityType:Z.DATASET,path:x,permissions:{canView:!0,canEdit:!0,canMove:!0,canAddChild:!0,canCertifiedUserEdit:!0,canCertifiedUserAddChild:!0,isCertifiedUser:!0,canChangePermissions:!0,canChangeSettings:!0,canDelete:!0,canDownload:!0,canUpload:!0,canEnableInheritance:!0,ownerPrincipalId:3350396,canPublicRead:!0,canModerate:!0,isCertificationRequired:!0,isEntityOpenData:!1}},ee={id:S,name:v,entity:C,entityHeader:Ze,path:x,bundle:Je,versions:We,versionInfo:Qe},M="syn654651",j="A Mocked Dataset Collection",ze={id:M,parentId:u.id,name:j,concreteType:"org.sagebionetworks.repo.model.table.DatasetCollection",createdBy:c.toString(),modifiedBy:c.toString(),etag:"00000000-0000-0000-0000-000000000000",items:[{entityId:ee.id,versionNumber:1}],columnIds:[],isSearchEnabled:!1},Xe={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:u.name,id:u.id,type:"org.sagebionetworks.repo.model.Project"},{name:j,id:M,type:"org.sagebionetworks.repo.model.FileEntity"}]},xe={id:M,name:j,entity:ze,path:Xe},B="syn345",te="my table name",se=u.id,I={id:B,versionNumber:1,versionLabel:"in progress",versionComment:"in progress",parentId:se,name:te,concreteType:"org.sagebionetworks.repo.model.table.TableEntity",createdBy:c.toString(),createdOn:"2022-02-03T12:44:35.457Z",modifiedOn:"2022-05-14T17:10:36.915Z",modifiedBy:A.toString(),etag:"00000000-0000-0000-0000-000000000000",columnIds:[],isSearchEnabled:!0,isLatestVersion:!0},et={name:I.name,id:B,type:"org.sagebionetworks.repo.model.table.TableEntity",versionNumber:I.versionNumber,versionLabel:I.versionLabel,benefactorId:se,createdOn:I.createdOn,modifiedOn:I.modifiedOn,createdBy:I.createdBy,modifiedBy:I.modifiedBy,isLatestVersion:I.isLatestVersion},tt={id:B,name:te,entity:I,entityHeader:et},E=[b,u,ee,xe,tt],st=u.id,N=u.entity;b.name;const nt=b.entityHeader,rt="syn1234",ot="A $@*#$% terribly named Project",R={id:rt,parentId:st,name:"my folder name",concreteType:"org.sagebionetworks.repo.model.Folder"},it={id:R.id,name:R.name,type:R.concreteType,versionNumber:1,versionLabel:"Version label",benefactorId:1234,createdOn:"",modifiedOn:"",createdBy:"",modifiedBy:""},at={totalNumberOfResults:2,results:[nt,it]};N.id,N.name,N.modifiedOn,c;var ne=(i=>(i.entity="entity",i))(ne||{}),re=(i=>(i.entity="entity",i))(re||{});const Y=b.entity,P={jsonSchemaVersionInfo:{organizationId:"1",organizationName:"org.sagebionetworks",schemaId:"1",schemaName:"Mock Schema",versionId:"555",$id:"org.sagebionetworks-MockSchema",jsonSHA256Hex:"5f2cd73c0fe25b30cbee2f213b6d633951f1873ca1911f494d4654f702a69e95",createdOn:"2021-04-01T08:00:00.000Z",createdBy:"1"},objectId:3333,objectType:ne.entity,createdOn:"2021-04-01T08:00:00.000Z",createdBy:"1"};Y.id,re.entity,Y.etag,`${P.jsonSchemaVersionInfo.$id}`;`${P.jsonSchemaVersionInfo.$id}`;const dt=i=>[d.rest.post(`${i}${ie}`,async(s,n,e)=>{let t=404,o={reason:`Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(s.body)}`};if(s.body){const r=s.body,a=E.find(m=>m.name===r.name);a?(o=a.entity,t=200):r.name===ot&&(o.reason="Invalid project name",t=403)}return n(e.status(t),e.json(o))}),d.rest.get(`${i}${F(":entityId")}`,async(s,n,e)=>{let t=404,o={reason:`Mock Service worker could not find a mock entity with ID ${s.params.entityId}`};const r=E.find(a=>a.id===s.params.entityId);return r&&(o=r.entity,t=200),n(e.status(t),e.json(o))}),d.rest.get(`${i}${ae(":entityId")}`,async(s,n,e)=>{let t=404,o={reason:`Mock Service worker could not find mock entity versions for ID ${s.params.entityId}`};const r=E.find(a=>a.id===s.params.entityId);return r&&r.versionInfo&&(o={results:r.versionInfo},t=200),n(e.status(t),e.json(o))}),d.rest.get(`${i}${de(":entityId",":versionNumber")}`,async(s,n,e)=>{let t=404;const o=s.params.entityId,r=s.params.versionNumber.toString(),a=parseInt(r);let m={reason:`Mock Service worker could not find a mock versioned entity with ID ${o}.${r}`};const y=E.find(oe=>oe.id===s.params.entityId);return y&&y.versions&&y.versions[a]&&(m=y.versions[a],t=200),n(e.status(t),e.json(m))}),d.rest.post(`${i}${U(":entityId")}`,async(s,n,e)=>{let t=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${s.params.entityId}`};const r=E.find(a=>a.id===s.params.entityId);return r!=null&&r.bundle&&(o=r.bundle,t=200),n(e.status(t),e.json(o))}),d.rest.post(`${i}${U(":entityId",":versionNumber")}`,async(s,n,e)=>{const t=s.params.entityId,o=parseInt(s.params.versionNumber);let r=404,a={reason:`Mock Service worker could not find a mock entity bundle with ID ${t}`};const m=E.find(y=>y.id===t);if(m){const y=m.bundle;m.versions&&m.versions[o]?a={...y,entity:m.versions[o]}:a=y,r=200}return n(e.status(r),e.json(a))}),d.rest.get(`${i}${ce(":entityId")}`,async(s,n,e)=>n(e.status(200),e.json(P))),d.rest.get(`${i}${me(":entityId")}`,async(s,n,e)=>{let t=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${s.params.entityId}`};const r=E.find(a=>a.id===s.params.entityId);return r!=null&&r.json&&(o=r.json,t=200),n(e.status(t),e.json(o))}),d.rest.post(`${i}${le}`,async(s,n,e)=>{let t=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${s.params.entityId}`};const r=s.body,a=E.filter(m=>r.references.find(y=>y.targetId===m.id)).map(m=>m.entityHeader).filter(m=>!!m);return a&&(o={results:a},t=200),n(e.status(t),e.json(o))}),d.rest.get(`${i}${F(":entityId")}/path`,async(s,n,e)=>{let t=404,o={reason:`Mock Service worker could not find a mock entity path using ID ${s.params.entityId}`};const r=E.find(a=>s.params.entityId===a.id);return r&&r.path&&(o=r.path,t=200),n(e.status(t),e.json(o))}),d.rest.get(`${k(w.REPO_ENDPOINT)}/file/v1/entity/:id/uploadDestination`,async(s,n,e)=>{const t={banner:"",storageLocationId:1,uploadType:Pe.S3,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"};return n(e.status(200),e.json(t))})],ct=i=>[d.rest.get(`${i}${ue(":id")}`,async(s,n,e)=>{let t=404,o={reason:`Mock Service worker could not find a user profile with ID ${s.params.id}`};const r=g.find(a=>a.id.toString()===s.params.id);return r&&r.userProfile&&(o=r.userProfile,t=200),n(e.status(t),e.json(o))}),d.rest.get(`${i}${K}`,async(s,n,e)=>{const t=we,o=200;return n(e.status(o),e.json(t))}),d.rest.get(`${k(w.REPO_ENDPOINT)}${ye}`,async(s,n,e)=>{const t=q;return n(e.status(200),e.json(t))}),d.rest.get(`${i}${pe(":id")}`,async(s,n,e)=>{let t=404,o={reason:`Mock Service worker could not find a user bundle with ID ${s.params.id}`};const r=g.find(a=>a.id.toString()===s.params.id);return r&&r.userBundle&&(o=r.userBundle,t=200),n(e.status(t),e.json(o))}),d.rest.get(`${i}${Ee}`,async(s,n,e)=>n(e.status(200),e.json(at))),d.rest.get(`${i}${Ie}`,async(s,n,e)=>{const t=s.url.searchParams.get("ids").split(","),o={children:g.filter(r=>t.includes(r.id.toString())).map(r=>r.userGroupHeader)};return n(e.status(200),e.json(o))}),d.rest.post(`${i}${K}`,async(s,n,e)=>{const t=(await s.json()).list,o={list:g.filter(r=>t.includes(r.id.toString())).map(r=>r.userProfile).filter(r=>r!=null)};return n(e.status(200),e.json(o))}),d.rest.get(`${i}${fe}`,async(s,n,e)=>{const t=(s.url.searchParams.get("prefix")??"").toLowerCase(),o=s.url.searchParams.get("typeFilter"),r={children:g.filter(a=>!o||o===V.ALL?!0:o===V.USERS_ONLY?a.userGroupHeader.isIndividual:!a.userGroupHeader.isIndividual).filter(a=>a.userGroupHeader.userName.toLowerCase().startsWith(t)||(a.userGroupHeader.firstName||"").toLowerCase().startsWith(t)||a.userGroupHeader.displayName.toLowerCase().startsWith(t)||(a.userGroupHeader.lastName||"").toLowerCase().startsWith(t)).map(a=>a.userGroupHeader)};return n(e.status(200),e.json(r))}),d.rest.get(`${i}${Se(":userId")}`,async(s,n,e)=>n(e.status(404),e.json({reason:"user has no profile image"}))),d.rest.get(`${i}${ge}`,async(s,n,e)=>{var t;return n(e.status(200),e.json({email:(t=q.userProfile)==null?void 0:t.email}))}),d.rest.get(`${i}/auth/v1/2fa`,async(s,n,e)=>{const t={status:"ENABLED"};return n(e.status(200),e.json(t))})],mt=i=>[d.rest.get(`${i}${Te(":id")}`,async(s,n,e)=>{let t=404,o={reason:`Mock Service worker could not find an access requirement with ID ${s.params.id}`};const r=G.find(a=>a.id.toString()===s.params.id);return r&&(o=r,t=200),n(e.status(t),e.json(o))}),d.rest.get(`${i}${_e(":id")}`,async(s,n,e)=>{let t=404,o={reason:`Mock Service worker could not find an access requirement wiki page key with AR ID ${s.params.id}`};const r=Le.find(a=>(a.ownerObjectType===Ae.ACCESS_REQUIREMENT&&a.ownerObjectId.toString())===s.params.id);return r&&(o=r,t=200),n(e.status(t),e.json(o))}),d.rest.get(`${i}${Ce(":id")}`,async(s,n,e)=>{const o=G.find(m=>s.params.id===m.id.toString()).concreteType==="org.sagebionetworks.repo.model.ManagedACTAccessRequirement",r={accessRequirementId:s.params.id,concreteType:o?"org.sagebionetworks.repo.model.dataaccess.ManagedACTAccessRequirementStatus":"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!0,currentSubmissionStatus:o?{submissionId:h.id,submittedBy:h.submittedBy,modifiedOn:h.modifiedOn,state:He.APPROVED}:void 0},a=r?200:404;return n(e.status(a),e.json(r))})],lt=i=>[d.rest.get(`${i}${be(":arId",":wikiId")}`,async(s,n,e)=>{let t=404,o={reason:`Mock Service worker could not find a wiki page with ID ${s.params.wikiId}`};const r=Me.find(a=>a.id===s.params.wikiId);return r&&(o=r,t=200),n(e.status(t),e.json(o))})],H="1981321",ut={id:H,accessRequirementId:String(L.id),institution:"Black Mesa Research Facility",projectLead:"Gordon Freeman",intendedDataUseStatement:"We plan to use this data to investigate the properties of antimatter. Our findings will be published in a peer-reviewed journal, and derivative data will be shared on Synapse."},yt="3541518",pt="49813181",Et={id:yt,accessorChanges:[{userId:String(c),type:O.GAIN_ACCESS}],attachments:[W,Q],createdBy:String(c),createdOn:"2023-04-19T13:06:51+00:00",ducFileHandleId:J,irbFileHandleId:z,modifiedBy:String(c),modifiedOn:"2023-04-19T13:06:51+00:00",researchProjectId:H,etag:"0",accessRequirementId:String(L.id),concreteType:"org.sagebionetworks.repo.model.dataaccess.Request"};String(c),O.GAIN_ACCESS,String(A),O.REVOKE_ACCESS,W,Q,String(c),J,z,String(c),String(L.id);function It(i,s=Et){return[d.rest.get(`${i}${ve(":id")}`,async(n,e,t)=>{const o=s;return e(t.status(200),t.json(o))}),d.rest.post(`${i}${De}`,async(n,e,t)=>{const o=await n.json();return e(t.status(201),t.json(o))}),d.rest.post(`${i}${he(":id")}`,async(n,e,t)=>e(t.status(201),t.json({})))]}function ft(i){return[d.rest.post(`${i}${Ne}`,async(s,n,e)=>{const t=await s.json();return n(e.status(201),e.json(t))}),d.rest.get(`${i}${Re(":id")}`,async(s,n,e)=>{const t={...ut,accessRequirementId:s.params.id.toString()};return n(e.status(200),e.json(t))})]}function St(i){return[d.rest.post(`${i}${$e}`,async(s,n,e)=>{const t=await s.json(),o={requestedFiles:[]};return t.requestedFiles.forEach(r=>{const a=je.find(m=>m.id===r.fileHandleId);a&&o.requestedFiles.push({fileHandleId:a.id,fileHandle:a})}),n(e.status(201),e.json(o))})]}const gt=i=>[d.rest.options("*",async(s,n,e)=>n(e.status(200))),d.rest.get(`${i}/auth/v1/authenticatedOn`,async(s,n,e)=>n(e.status(200),e.json({authenticatedOn:new Date().toISOString()}))),...dt(i),...ct(i),...lt(i),...mt(i),...It(i),...ft(i),...St(i)];gt(k(w.REPO_ENDPOINT));export{gt as g,b as m};
//# sourceMappingURL=handlers-fb59c3d3.js.map
