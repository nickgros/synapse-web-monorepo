{"version":3,"file":"TwoFactorAuthSettingsPanel.stories-5514bb00.js","sources":["../../src/components/Authentication/TwoFactorAuthSettingsPanel.tsx"],"sourcesContent":["import { Box, Button, Typography, Stack, Skeleton } from '@mui/material'\nimport React from 'react'\nimport IconSvg from '../IconSvg/IconSvg'\nimport { TWO_FACTOR_DOCS_LINK } from './TwoFactorEnrollmentForm'\nimport {\n  useDisableTwoFactorAuth,\n  useGetTwoFactorEnrollmentStatus,\n} from '../../synapse-queries/auth/useTwoFactorEnrollment'\nimport ConditionalWrapper from '../utils/ConditionalWrapper'\nimport { displayToast } from '../ToastMessage/ToastMessage'\n\nexport type TwoFactorAuthSettingsPanelProps = {\n  onRegenerateBackupCodes: () => void\n  onBeginTwoFactorEnrollment: () => void\n}\n\nexport default function TwoFactorAuthSettingsPanel(\n  props: TwoFactorAuthSettingsPanelProps,\n) {\n  const { onRegenerateBackupCodes, onBeginTwoFactorEnrollment } = props\n  const { data: status, isLoading: isLoadingStatus } =\n    useGetTwoFactorEnrollmentStatus()\n  const isActivated = status?.status === 'ENABLED'\n\n  const { mutate: disable2FA, isLoading: isLoadingMutation } =\n    useDisableTwoFactorAuth({\n      onSuccess: () => {\n        displayToast('2FA removed from this account', 'info')\n      },\n    })\n\n  const isLoading = isLoadingStatus || isLoadingMutation\n\n  return (\n    <Box>\n      <Typography variant={'headline2'}>\n        Two-factor Authentication (2FA)\n      </Typography>\n      <ConditionalWrapper condition={isLoading} wrapper={Skeleton}>\n        <Typography\n          variant={'body1'}\n          color={isActivated ? 'success.main' : 'error.main'}\n          sx={{ my: 2, display: 'flex', alignItems: 'center' }}\n        >\n          <IconSvg\n            icon={isActivated ? 'check' : 'cross'}\n            sx={{ mr: 1, height: '24px' }}\n          />\n          {isLoading ? 'Loading...' : isActivated ? 'Active' : 'Inactive'}\n        </Typography>\n      </ConditionalWrapper>\n      <Typography variant={'body1Italic'} sx={{ my: 1 }}>\n        Required to satisfy certain data access requirements, and recommended\n        for overall account security.\n      </Typography>\n      <Typography variant={'body1'} sx={{ my: 2 }}>\n        Synapse uses a time-based system, which you can set up using an app like\n        Google Authenticator, Duo Mobile, Microsoft Authenticator, or Authy.\n        Certain data may require 2FA to be turned on for your account in order\n        to request access.\n      </Typography>\n      <Stack direction={'row'} gap={1}>\n        <ConditionalWrapper condition={isLoadingStatus} wrapper={Skeleton}>\n          <Button\n            variant={'outlined'}\n            disabled={isLoading}\n            onClick={() => {\n              if (!isActivated) {\n                onBeginTwoFactorEnrollment()\n              } else {\n                disable2FA()\n              }\n            }}\n          >\n            {isActivated ? 'Deactivate' : 'Activate'} 2FA\n          </Button>\n        </ConditionalWrapper>\n        {status?.status !== 'DISABLED' && (\n          <ConditionalWrapper condition={isLoadingStatus} wrapper={Skeleton}>\n            <Button\n              variant={'text'}\n              disabled={isLoading}\n              onClick={() => {\n                onRegenerateBackupCodes()\n              }}\n            >\n              Regenerate Backup Codes\n            </Button>\n          </ConditionalWrapper>\n        )}\n        <Button\n          variant={'text'}\n          onClick={() => window.open(TWO_FACTOR_DOCS_LINK, '_blank')}\n        >\n          More Information\n        </Button>\n      </Stack>\n    </Box>\n  )\n}\n"],"names":["TwoFactorAuthSettingsPanel","props","onRegenerateBackupCodes","onBeginTwoFactorEnrollment","status","isLoadingStatus","useGetTwoFactorEnrollmentStatus","isActivated","disable2FA","isLoadingMutation","useDisableTwoFactorAuth","displayToast","isLoading","jsxs","Box","jsx","Typography","ConditionalWrapper","Skeleton","IconSvg","Stack","Button","TWO_FACTOR_DOCS_LINK"],"mappings":"ysFAgBA,SAAAA,EAAAC,EAAA,CAGE,KAAA,CAAA,wBAAAC,EAAA,2BAAAC,CAAA,EAAAF,EACA,CAAA,KAAAG,EAAA,UAAAC,CAAA,EAAAC,IAEAC,GAAAH,GAAA,YAAAA,EAAA,UAAA,UAEA,CAAA,OAAAI,EAAA,UAAAC,CAAA,EAAAC,EAAA,CAC0B,UAAA,IAAA,CAEpBC,EAAA,gCAAA,MAAA,CAAoD,CACtD,CAAA,EAGJC,EAAAP,GAAAI,EAEA,OAAAI,EAAAC,EAAA,CAAA,SAAA,CAEIC,EAAAC,EAAA,CAAA,QAAA,YAAA,SAAA,kCAAA,EAEAD,EAAAE,EAAA,CAAA,UAAAL,EAAA,QAAAM,EAAA,SAAAL,EAEEG,EAAC,CAAA,QAAA,QACU,MAAAT,EAAA,eAAA,aAC6B,GAAA,CAAA,GAAA,EAAA,QAAA,OAAA,WAAA,QAAA,EACa,SAAA,CAEnDQ,EAAAI,EAAC,CAAA,KAAAZ,EAAA,QAAA,QAC+B,GAAA,CAAA,GAAA,EAAA,OAAA,MAAA,CACF,CAAA,EAC9BK,EAAA,aAAAL,EAAA,SAAA,UACqD,CAAA,CAAA,EAAA,EAEzDQ,EAAAC,EAAA,CAAA,QAAA,cAAA,GAAA,CAAA,GAAA,CAAA,EAAA,SAAA,qGAAA,CAAA,EAIAD,EAAAC,EAAA,CAAA,QAAA,QAAA,GAAA,CAAA,GAAA,CAAA,EAAA,SAAA,yOAAA,CAAA,EAMAH,EAAAO,EAAA,CAAA,UAAA,MAAA,IAAA,EAAA,SAAA,CAEEL,EAAAE,EAAA,CAAA,UAAAZ,EAAA,QAAAa,EAAA,SAAAL,EACEQ,EAAC,CAAA,QAAA,WACU,SAAAT,EACC,QAAA,IAAA,CAERL,EAGEC,IAFAL,GAGF,EACF,SAAA,CAECI,EAAA,aAAA,WAA6B,MAAW,CAAA,CAAA,EAAA,GAE7CH,GAAA,YAAAA,EAAA,UAAA,YAAAW,EAAAE,EAAA,CAAA,UAAAZ,EAAA,QAAAa,EAAA,SAAAH,EAGIM,EAAC,CAAA,QAAA,OACU,SAAAT,EACC,QAAA,IAAA,CAERV,GAAwB,EAC1B,SAAA,yBACD,CAAA,EAAA,EAGHa,EAEFM,EAAC,CAAA,QAAA,OACU,QAAA,IAAA,OAAA,KAAAC,EAAA,QAAA,EACgD,SAAA,kBAC1D,CAAA,CAED,EAAA,CACF,CAAA,CAAA,CAGN;;;;;;;;;"}