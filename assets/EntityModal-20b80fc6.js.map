{"version":3,"file":"EntityModal-20b80fc6.js","sources":["../../src/utils/functions/DateTimeUtils.ts","../../src/components/entity/metadata/AnnotationsTable.tsx","../../src/components/entity/metadata/MetadataTable.tsx","../../src/components/entity/metadata/EntityModal.tsx"],"sourcesContent":["/**\n * Returns true iff the given string is a valid ISO timestamp.\n *\n * See https://stackoverflow.com/a/52869830\n * @param maybeISOTimestamp\n */\nexport function isISOTimestamp(maybeISOTimestamp: string): boolean {\n  // Must match the ISO Timestamp format\n  if (!/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/.test(maybeISOTimestamp))\n    return false\n  const d = new Date(maybeISOTimestamp)\n  return (\n    d instanceof Date &&\n    // Verify that the date is valid\n    !isNaN(d.getTime()) &&\n    d.toISOString() === maybeISOTimestamp\n  )\n}\n","import React, { useCallback, useState } from 'react'\nimport { isEmpty } from 'lodash-es'\nimport {\n  convertToEntityType,\n  entityTypeToFriendlyName,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport {\n  useGetJson,\n  useGetSchemaBinding,\n  useGetValidationResults,\n} from '../../../synapse-queries'\nimport { useSynapseContext } from '../../../utils'\nimport { SkeletonTable } from '../../Skeleton'\nimport dayjs from 'dayjs'\nimport FullWidthAlert from '../../FullWidthAlert'\nimport { isISOTimestamp } from '../../../utils/functions/DateTimeUtils'\nimport { formatDate } from '../../../utils/functions/DateFormatter'\n\nexport type AnnotationsTableProps = {\n  readonly entityId: string\n  readonly versionNumber?: number\n}\n\nfunction getDisplayedAnnotation(value: string | number | boolean): string {\n  if (typeof value === 'number' || typeof value === 'boolean') {\n    return value.toString()\n  } else if (isISOTimestamp(value)) {\n    return formatDate(dayjs(value))\n  }\n  return value\n}\n\nexport function AnnotationsTable(props: AnnotationsTableProps) {\n  const { entityId } = props\n  const [isManuallyRefetching, setIsManuallyRefetching] = useState(false)\n  /**\n   * Currently, schema/validation features are only shown in experimental mode.\n   */\n  const { isInExperimentalMode } = useSynapseContext()\n\n  // TODO: Support versioned annotations, see PLFM-7290\n  const {\n    entityMetadata,\n    annotations,\n    isLoading,\n    refetch: refetchEntityData,\n  } = useGetJson(entityId, true)\n\n  const { data: boundSchema } = useGetSchemaBinding(entityId, {\n    enabled: isInExperimentalMode,\n  })\n\n  const { data: validationResults, refetch: refetchValidationInformation } =\n    useGetValidationResults(entityId, {\n      enabled: isInExperimentalMode && Boolean(boundSchema),\n    })\n\n  const showSchemaInformation = isInExperimentalMode && Boolean(boundSchema)\n\n  // If the entity has not yet been validated since the last fetch, then derived annotations may not have been calculated.\n  const recentChangesHaveNotBeenValidated =\n    !!entityMetadata &&\n    !!validationResults &&\n    dayjs(entityMetadata.modifiedOn).diff(\n      dayjs(validationResults.validatedOn),\n    ) > 0\n\n  const onRefetch = useCallback(async () => {\n    setIsManuallyRefetching(true)\n    const promises = [\n      // Refetch the annotations, which may have changed if new derived annotations have been calculated\n      refetchEntityData(),\n      // Refetch the validation information, which we use to determine if derived annotations may still be pending\n      refetchValidationInformation(),\n    ]\n    await Promise.allSettled(promises)\n    setIsManuallyRefetching(false)\n  }, [refetchEntityData, refetchValidationInformation])\n\n  return isLoading || isManuallyRefetching ? (\n    <SkeletonTable numRows={3} numCols={2} />\n  ) : (\n    <>\n      {entityMetadata && annotations && isEmpty(annotations) ? (\n        <div className=\"placeholder\">\n          This{' '}\n          {entityTypeToFriendlyName(\n            convertToEntityType(entityMetadata.concreteType),\n          )}{' '}\n          has no annotations.\n        </div>\n      ) : null}\n      <table className=\"AnnotationsTable\">\n        <tbody>\n          {annotations &&\n            Object.keys(annotations).map((key: string) => {\n              return (\n                <tr key={key} className=\"AnnotationsTable__Row\">\n                  <td className=\"AnnotationsTable__Row__Key\">{key}</td>\n                  <td className=\"AnnotationsTable__Row__Value\">\n                    {Array.isArray(annotations[key])\n                      ? (annotations[key] as string[] | number[] | boolean[])\n                          .map(getDisplayedAnnotation)\n                          .join(', ')\n                      : getDisplayedAnnotation(\n                          annotations[key] as string | number | boolean,\n                        )}\n                  </td>\n                </tr>\n              )\n            })}\n          {showSchemaInformation ? (\n            <tr className=\"AnnotationsTable__Row\">\n              <td className=\"AnnotationsTable__Row__Key Schema\">\n                Validation Schema\n              </td>\n              <td className=\"AnnotationsTable__Row__Value\">\n                <a\n                  href={`${getEndpoint(\n                    BackendDestinationEnum.REPO_ENDPOINT,\n                  )}/repo/v1/schema/type/registered/${\n                    boundSchema!.jsonSchemaVersionInfo.$id\n                  }`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {boundSchema!.jsonSchemaVersionInfo.schemaName}\n                </a>\n              </td>\n            </tr>\n          ) : null}\n        </tbody>\n      </table>\n      {entityMetadata &&\n        showSchemaInformation &&\n        recentChangesHaveNotBeenValidated && (\n          <FullWidthAlert\n            variant=\"warning\"\n            description={`This ${entityTypeToFriendlyName(\n              convertToEntityType(entityMetadata.concreteType),\n            )} has changed since it has been last validated. If this ${entityTypeToFriendlyName(\n              convertToEntityType(entityMetadata.concreteType),\n            )} is expected to have annotations derived from the Validation Schema, they may not yet be visible.`}\n            primaryButtonConfig={{\n              text: 'Reload Annotations',\n              onClick: () => {\n                onRefetch()\n              },\n            }}\n            isGlobal={false}\n          />\n        )}\n    </>\n  )\n}\n","import dayjs from 'dayjs'\nimport React from 'react'\nimport { formatDate } from '../../../utils/functions/DateFormatter'\nimport {\n  entityTypeToFriendlyName,\n  getVersionDisplay,\n  isVersionableEntity,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  getDataFileHandle,\n  getStorageLocationName,\n} from '../../../utils/functions/FileHandleUtils'\nimport useGetEntityBundle from '../../../synapse-queries/entity/useEntityBundle'\nimport { UserBadge } from '../../UserCard/UserBadge'\nimport { useGetUploadDestinationForStorageLocation } from '../../../synapse-queries/file/useUploadDestination'\n\nexport type MetadataTableProps = {\n  readonly entityId: string\n  readonly versionNumber?: number\n}\n\nexport const MetadataTable = ({\n  entityId,\n  versionNumber,\n}: MetadataTableProps) => {\n  const { data: entityBundle } = useGetEntityBundle(entityId, versionNumber)\n\n  const isVersionable = entityBundle && isVersionableEntity(entityBundle.entity)\n\n  const dataFileHandle = entityBundle\n    ? getDataFileHandle(entityBundle)\n    : undefined\n  const parentId = entityBundle?.entity?.parentId\n  const storageLocationId = dataFileHandle?.storageLocationId\n  const { data: storageLocationUploadDestination } =\n    useGetUploadDestinationForStorageLocation(parentId!, storageLocationId!, {\n      enabled:\n        parentId !== undefined &&\n        storageLocationId != null,\n    })\n\n  let fileLocationName = undefined\n  if (dataFileHandle) {\n    fileLocationName = getStorageLocationName(\n      dataFileHandle,\n      storageLocationUploadDestination,\n    )\n  }\n\n  return entityBundle ? (\n    <table className=\"MetadataTable\">\n      <tbody>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Name</td>\n          <td className=\"MetadataTable__Row__Value\">\n            {entityBundle.entity?.name}\n          </td>\n        </tr>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Type</td>\n          <td className=\"MetadataTable__Row__Value\">\n            {entityTypeToFriendlyName(entityBundle.entityType)}\n          </td>\n        </tr>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Synapse ID</td>\n          <td className=\"MetadataTable__Row__Value\">\n            {entityBundle.entity?.id}\n          </td>\n        </tr>\n        {isVersionable && (\n          <tr className=\"MetadataTable__Row\">\n            <td className=\"MetadataTable__Row__Key\">Version</td>\n            <td className=\"MetadataTable__Row__Value\">\n              {getVersionDisplay(entityBundle.entity)}\n            </td>\n          </tr>\n        )}\n        {fileLocationName && (\n          <tr className=\"MetadataTable__Row\">\n            <td className=\"MetadataTable__Row__Key\">Storage</td>\n            <td className=\"MetadataTable__Row__Value\">{fileLocationName}</td>\n          </tr>\n        )}\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\"> Last Modified By</td>\n          <td className=\"MetadataTable__Row__Value\">\n            <UserBadge userId={entityBundle.entity?.modifiedBy!} /> at{' '}\n            {formatDate(dayjs(entityBundle.entity?.modifiedOn))}\n          </td>\n        </tr>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Created By</td>\n          <td className=\"MetadataTable__Row__Value\">\n            <UserBadge userId={entityBundle.entity?.createdBy!} /> at{' '}\n            {formatDate(dayjs(entityBundle.entity?.createdOn))}\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  ) : null\n}\n","import Skeleton from '@mui/material/Skeleton'\nimport Form from '@rjsf/core'\nimport React, { useRef, useState } from 'react'\nimport {\n  entityTypeToFriendlyName,\n  isVersionableEntityType,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport useGetEntityBundle from '../../../synapse-queries/entity/useEntityBundle'\nimport { VersionableEntity } from '@sage-bionetworks/synapse-types'\nimport { SynapseErrorBoundary } from '../../error/ErrorBanner'\nimport { displayToast } from '../../ToastMessage/ToastMessage'\nimport { SchemaDrivenAnnotationEditor } from '../../SchemaDrivenAnnotationEditor/SchemaDrivenAnnotationEditor'\nimport { AnnotationsTable } from './AnnotationsTable'\nimport { MetadataTable } from './MetadataTable'\nimport { Button, Tooltip } from '@mui/material'\nimport { DialogBase } from '../../DialogBase'\n\nexport const EntityModalTabs = [\n  // non-annotation metadata about the entity\n  'METADATA',\n  // annotation and schema information\n  'ANNOTATIONS',\n  // TODO: Access -- we haven't yet built a viewer/editor for ACLs in SRC -- consider a redesign before building\n  //'ACCESS', // ACLs (and maybe ARs?)\n  // TODO: Previews - we would need preview renderers that accomplish feature parity with SWC\n  //'PREVIEW' // should only show this tab if a preview exists\n] as const\ntype EntityModalTab = (typeof EntityModalTabs)[number]\n\nexport type EntityModalProps = {\n  readonly show: boolean\n  readonly entityId: string\n  readonly versionNumber?: number\n  readonly onClose: () => void\n  readonly initialTab?: EntityModalTab\n  readonly showTabs?: boolean\n}\n\nexport function EntityModal(props: EntityModalProps) {\n  const {\n    entityId,\n    versionNumber,\n    show,\n    onClose,\n    initialTab = 'METADATA',\n    showTabs = true,\n  } = props\n  const annotationEditorFormRef = useRef<Form>(null)\n\n  const [currentTab, setCurrentTab] = useState<EntityModalTab>(initialTab)\n  const [isInEditMode, setIsInEditMode] = useState(false)\n  const [hasClickedCancel, setHasClickedCancel] = useState(false)\n\n  const { data: entityBundle } = useGetEntityBundle(entityId, versionNumber)\n  const canEdit = entityBundle && entityBundle.permissions.canEdit\n\n  const isVersionable =\n    entityBundle && isVersionableEntityType(entityBundle.entityType)\n\n  const isLatestVersion =\n    isVersionable && (entityBundle.entity as VersionableEntity).isLatestVersion!\n\n  const showOpenEntityPageButton =\n    currentTab === 'METADATA' &&\n    entityBundle &&\n    !window.location.href.includes(entityId)\n  const openEntityPageButton = (\n    <Button\n      variant={'contained'}\n      onClick={() =>\n        window.open(\n          `${getEndpoint(\n            BackendDestinationEnum.PORTAL_ENDPOINT,\n          )}#!Synapse:${entityId}`,\n          '_blank',\n          'noopener',\n        )\n      }\n    >\n      Open{' '}\n      {entityBundle ? entityTypeToFriendlyName(entityBundle?.entityType) : ''}\n    </Button>\n  )\n\n  const showSaveAnnotationsButton = currentTab === 'ANNOTATIONS' && isInEditMode\n  const saveAnnotationsButton = (\n    <Button\n      variant={'contained'}\n      onClick={() => {\n        // Workaround for https://github.com/rjsf-team/react-jsonschema-form/issues/3121\n        annotationEditorFormRef.current!.formElement.current.requestSubmit()\n      }}\n    >\n      Save Annotations\n    </Button>\n  )\n\n  const showCancelAnnotationEditsButton =\n    currentTab === 'ANNOTATIONS' && isInEditMode\n  const cancelAnnotationEditsButton = (\n    <Button\n      variant={'outlined'}\n      onClick={() => {\n        if (hasClickedCancel) {\n          setIsInEditMode(false)\n        }\n        setHasClickedCancel(!hasClickedCancel)\n      }}\n    >\n      {hasClickedCancel\n        ? 'Are you sure? Unsaved changes will be lost'\n        : 'Cancel'}\n    </Button>\n  )\n\n  const showEditAnnotationsButton =\n    canEdit && currentTab === 'ANNOTATIONS' && !isInEditMode\n  const editAnnotationsButton = (\n    <Tooltip\n      title={\n        isVersionable && !isLatestVersion\n          ? 'Annotations can only be edited on the latest version'\n          : undefined\n      }\n    >\n      <Button\n        variant={'contained'}\n        disabled={isVersionable && !isLatestVersion}\n        onClick={() => {\n          setIsInEditMode(true)\n        }}\n      >\n        Edit\n      </Button>\n    </Tooltip>\n  )\n\n  const dialogContent = (\n    <>\n      {showTabs && !isInEditMode ? (\n        <div className=\"Tabs\">\n          {EntityModalTabs.map(tabName => {\n            return (\n              <div\n                className=\"Tab\"\n                role=\"tab\"\n                key={tabName}\n                onClick={e => {\n                  e.stopPropagation()\n                  setCurrentTab(tabName)\n                }}\n                aria-selected={tabName === currentTab}\n              >\n                {tabName}\n              </div>\n            )\n          })}\n        </div>\n      ) : null}\n      <div style={currentTab === 'ANNOTATIONS' ? {} : { display: 'none' }}>\n        {isInEditMode ? (\n          <SynapseErrorBoundary>\n            <SchemaDrivenAnnotationEditor\n              entityId={entityId}\n              formRef={annotationEditorFormRef}\n              onSuccess={() => {\n                displayToast('Annotations successfully updated.', 'success')\n                setIsInEditMode(false)\n              }}\n              onCancel={() => setIsInEditMode(false)}\n            />\n          </SynapseErrorBoundary>\n        ) : (\n          <AnnotationsTable entityId={entityId} versionNumber={versionNumber} />\n        )}\n      </div>\n      <div style={currentTab === 'METADATA' ? {} : { display: 'none' }}>\n        <MetadataTable entityId={entityId} versionNumber={versionNumber} />\n      </div>\n    </>\n  )\n\n  return (\n    <DialogBase\n      className={`EntityMetadata`}\n      open={show}\n      onCancel={onClose}\n      maxWidth={isInEditMode ? 'md' : 'sm'}\n      title={\n        entityBundle ? entityBundle.entity.name : <Skeleton width={'40%'} />\n      }\n      content={dialogContent}\n      actions={\n        <>\n          {showCancelAnnotationEditsButton && cancelAnnotationEditsButton}\n          {showSaveAnnotationsButton && saveAnnotationsButton}\n          {showEditAnnotationsButton && editAnnotationsButton}\n          {showOpenEntityPageButton && openEntityPageButton}\n        </>\n      }\n    />\n  )\n}\n"],"names":["isISOTimestamp","maybeISOTimestamp","d","getDisplayedAnnotation","value","formatDate","dayjs","AnnotationsTable","props","entityId","isManuallyRefetching","setIsManuallyRefetching","useState","isInExperimentalMode","useSynapseContext","entityMetadata","annotations","isLoading","refetchEntityData","useGetJson","boundSchema","useGetSchemaBinding","validationResults","refetchValidationInformation","useGetValidationResults","showSchemaInformation","recentChangesHaveNotBeenValidated","onRefetch","useCallback","promises","jsx","SkeletonTable","jsxs","Fragment","isEmpty","entityTypeToFriendlyName","convertToEntityType","key","getEndpoint","BackendDestinationEnum","FullWidthAlert","MetadataTable","versionNumber","entityBundle","useGetEntityBundle","isVersionable","isVersionableEntity","dataFileHandle","getDataFileHandle","parentId","_a","storageLocationId","storageLocationUploadDestination","useGetUploadDestinationForStorageLocation","fileLocationName","getStorageLocationName","_b","_c","getVersionDisplay","UserBadge","_d","_e","_f","_g","EntityModalTabs","EntityModal","show","onClose","initialTab","showTabs","annotationEditorFormRef","useRef","currentTab","setCurrentTab","isInEditMode","setIsInEditMode","hasClickedCancel","setHasClickedCancel","canEdit","isVersionableEntityType","isLatestVersion","showOpenEntityPageButton","openEntityPageButton","Button","showSaveAnnotationsButton","saveAnnotationsButton","showCancelAnnotationEditsButton","cancelAnnotationEditsButton","showEditAnnotationsButton","editAnnotationsButton","Tooltip","dialogContent","tabName","e","SynapseErrorBoundary","SchemaDrivenAnnotationEditor","displayToast","DialogBase","Skeleton"],"mappings":"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"}