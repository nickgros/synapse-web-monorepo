{"version":3,"file":"SynapseVideo-607d2704.js","sources":["../../src/components/widgets/SynapseVideo.tsx"],"sourcesContent":["import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { getEntity, getFiles } from '../../synapse-client/SynapseClient'\nimport {\n  FileEntity,\n  FileHandleAssociateType,\n  FileHandleAssociation,\n  BatchFileRequest,\n  BatchFileResult,\n} from '@sage-bionetworks/synapse-types'\nimport { SynapseConstants } from '../../utils'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\n\nexport type SynapseVideoProps = {\n  params: {\n    width?: string\n    height?: string\n    videoId?: string\n    vimeoId?: string\n    oggSynapseId?: string\n    mp4SynapseId?: string\n    webmSynapseId?: string\n  }\n}\n\nexport default function SynapseVideo({ params }: SynapseVideoProps) {\n  const { accessToken } = useSynapseContext()\n  const [externalVideoUrl, setExternalVideoUrl] = useState<string>()\n  const [synapseVideoPresignedUrl, setSynapseVideoPresignedUrl] =\n    useState<string>()\n\n  const videoWidth = params.width ?? ''\n  const videoHeight = params.height ?? ''\n  useEffect(() => {\n    const getVideo = () => {\n      if (params.videoId)\n        setExternalVideoUrl(`https://www.youtube.com/embed/${params.videoId}`)\n      else if (params.vimeoId)\n        setExternalVideoUrl(`https://player.vimeo.com/video/${params.vimeoId}`)\n      else {\n        const videoKey =\n          params.oggSynapseId || params.mp4SynapseId || params.webmSynapseId\n\n        getEntity<FileEntity>(accessToken, videoKey!).then(\n          (data: FileEntity) => {\n            const fileHandleAssociationList: FileHandleAssociation[] = [\n              {\n                associateObjectId: videoKey!,\n                associateObjectType: FileHandleAssociateType.FileEntity,\n                fileHandleId: data.dataFileHandleId,\n              },\n            ]\n            getSynapseFiles(fileHandleAssociationList, data.dataFileHandleId)\n          },\n        )\n      }\n    }\n\n    const getSynapseFiles = (\n      fileHandleAssociationList: FileHandleAssociation[],\n      id: string,\n    ) => {\n      const request: BatchFileRequest = {\n        includeFileHandles: false,\n        includePreSignedURLs: true,\n        includePreviewPreSignedURLs: false,\n        requestedFiles: fileHandleAssociationList,\n      }\n\n      getFiles(request, accessToken)\n        .then((data: BatchFileResult) => {\n          const { preSignedURL } = data.requestedFiles.filter(\n            el => el.fileHandleId === id,\n          )[0]\n          setSynapseVideoPresignedUrl(preSignedURL)\n        })\n        .catch(err => {\n          console.error('Error on getting video ', err)\n        })\n    }\n    getVideo()\n  }, [externalVideoUrl, params, accessToken, videoHeight, videoWidth])\n\n  const RenderVideo = () => {\n    if (synapseVideoPresignedUrl) {\n      if (accessToken) {\n        return (\n          <video\n            controls\n            src={synapseVideoPresignedUrl}\n            width={videoWidth}\n            height={videoHeight}\n            data-testid=\"synapse-video-url\"\n          >\n            It does not support the HTML5 Video element.\n          </video>\n        )\n      } else {\n        // if not logged in, show login button\n        return (\n          <p>\n            You will need to\n            <button\n              data-testid=\"video-login\"\n              className={`${SynapseConstants.SRC_SIGN_IN_CLASS} sign-in-btn default\n                `}\n            >\n              Sign in\n            </button>\n            in for access to that resource.\n          </p>\n        )\n      }\n    } else if (externalVideoUrl) {\n      return (\n        <iframe\n          title=\"video frame\"\n          src={externalVideoUrl}\n          width={videoWidth}\n          height={videoHeight}\n        ></iframe>\n      )\n    } else {\n      return <></>\n    }\n  }\n\n  return <RenderVideo />\n}\n"],"names":["SynapseVideo","params","accessToken","useSynapseContext","externalVideoUrl","setExternalVideoUrl","useState","synapseVideoPresignedUrl","setSynapseVideoPresignedUrl","videoWidth","videoHeight","useEffect","getVideo","videoKey","getEntity","data","fileHandleAssociationList","FileHandleAssociateType","getSynapseFiles","id","getFiles","preSignedURL","el","err","jsx","jsxs","SynapseConstants.SRC_SIGN_IN_CLASS","Fragment"],"mappings":"gQAyBA,SAAAA,EAAA,CAAA,OAAAC,GAAA,CACE,KAAA,CAAA,YAAAC,GAAAC,IACA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAGAG,EAAAR,EAAA,OAAA,GACAS,EAAAT,EAAA,QAAA,GACAU,OAAAA,EAAAA,UAAA,IAAA,CACE,MAAAC,EAAA,IAAA,CACE,GAAAX,EAAA,QACEI,EAAA,iCAAAJ,EAAA,SAAA,UAAqEA,EAAA,QAErEI,EAAA,kCAAAJ,EAAA,SAAA,MAAsE,CAEtE,MAAAY,EAAAZ,EAAA,cAAAA,EAAA,cAAAA,EAAA,cAGAa,EAAAZ,EAAAW,CAAA,EAAA,KAA8CE,GAAA,CAE1C,MAAAC,EAAA,CAA2D,CACzD,kBAAAH,EACqB,oBAAAI,EAAA,WAC0B,aAAAF,EAAA,gBAC1B,CACrB,EAEFG,EAAAF,EAAAD,EAAA,gBAAA,CAAgE,CAClE,EAEJ,EAGFG,EAAA,CAAAF,EAAAG,IAAA,CAWEC,EAPA,CAAkC,mBAAA,GACZ,qBAAA,GACE,4BAAA,GACO,eAAAJ,CACb,EAGlBd,CAAA,EAAA,KAAAa,GAAA,CAEI,KAAA,CAAA,aAAAM,CAAA,EAAAN,EAAA,eAAA,OAA6CO,GAAAA,EAAA,eAAAH,CACjB,EAAA,CAAA,EAE5BX,EAAAa,CAAA,CAAwC,CAAA,EAAA,MAAAE,GAAA,CAGxC,QAAA,MAAA,0BAAAA,CAAA,CAA4C,CAAA,CAC7C,EAELX,GAAS,EAAA,CAAAR,EAAAH,EAAAC,EAAAQ,EAAAD,CAAA,CAAA,EA+CXe,EA5CA,IACEjB,EACEL,EACEsB,EACE,QAAC,CAAA,SAAA,GACS,IAAAjB,EACH,MAAAE,EACE,OAAAC,EACC,cAAA,oBACI,SAAA,8CACb,CAAA,EAMHe,EAAA,IAAA,CAAA,SAAA,CACK,mBAAAD,EAED,SAAC,CAAA,cAAA,cACa,UAAA,GAAAE;AAAAA,kBACmB,SAAA,SAEhC,CAAA,EAED,iCAAS,CAAA,CAAA,EAIftB,EAEAoB,EACE,SAAC,CAAA,MAAA,cACO,IAAApB,EACD,MAAAK,EACE,OAAAC,CACC,CAAA,EAIZc,EAAAG,EAAA,CAAA,CAAA,EAIJ,CAAA,CAAA,CACF"}