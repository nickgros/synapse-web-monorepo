{"version":3,"file":"CopyToClipboardInput-62e168ae.js","sources":["../../src/lib/containers/CopyToClipboardInput.tsx"],"sourcesContent":["import * as React from 'react'\nimport IconCopy from '../../lib/assets/icons/IconCopy'\nimport { Button, FormControl } from 'react-bootstrap'\nimport { ToastMessage } from './ToastMessage'\n\nexport type CopyToClipboardInputProps = {\n  value: string\n  inputWidth: string\n}\n\n/**\n * Component that holds a large string in a readonly <input> to be copied to the user's clipboard when clicked.\n * This component should only be used when the full length of the string value to copy does not necessarily need to be\n * seen by the user. This component was adapted from the email address copy to clipboard functionality in UserCardMedium.\n * For smaller/inline strings, look at UserCardMedium functionality for displaying the value in a <p> tag instead of a\n * readonly <input> tag.\n */\nexport const CopyToClipboardInput: React.FunctionComponent<\n  CopyToClipboardInputProps\n> = ({ value, inputWidth }: CopyToClipboardInputProps) => {\n  const [showModal, setShowModal] = React.useState(false)\n  const ref = React.createRef<HTMLDivElement>()\n\n  const copyToClipboard =\n    (ref: React.RefObject<HTMLElement>, value: string) =>\n    (event: React.SyntheticEvent) => {\n      event.preventDefault()\n\n      // use the Clipboard API\n      // https://caniuse.com/mdn-api_clipboard_writetext\n      navigator.clipboard.writeText(value).then(() => {\n        // show modal and hide after 4 seconds, the timing is per Material Design\n        setShowModal(true)\n        // hide after 4 seconds\n        setTimeout(() => {\n          setShowModal(false)\n        }, 4000)\n      })\n    }\n\n  return (\n    <>\n      <ToastMessage\n        text=\"Successfully copied to clipboard\"\n        show={showModal}\n        autohide={true}\n      ></ToastMessage>\n      <div\n        className=\"SRC-copyToClipboardInputContainer SRC-marginBottomTop\"\n        ref={ref}\n      >\n        <FormControl\n          className=\"SRC-copyToClipboardInput\"\n          type=\"text\"\n          style={{\n            width: inputWidth,\n          }}\n          value={value}\n          readOnly={true}\n          onClick={copyToClipboard(ref, value)}\n        ></FormControl>\n        <Button\n          className=\"SRC-copyToClipboardButton\"\n          onClick={copyToClipboard(ref, value)}\n        >\n          <IconCopy />\n        </Button>\n      </div>\n    </>\n  )\n}\n\nexport default CopyToClipboardInput\n"],"names":["CopyToClipboardInput","value","inputWidth","showModal","setShowModal","React.useState","ref","React.createRef","copyToClipboard","ref2","value2","event","jsxs","Fragment","jsx","ToastMessage","FormControl","Button","IconCopy"],"mappings":"mRAiBO,MAAAA,EAAA,CAAA,CAAA,MAAAC,EAAA,WAAAC,KAAA,CAGL,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACAC,EAAAC,EAAAA,YAEAC,EAAA,CAAAC,EAAAC,IAAAC,GAAA,CAGIA,EAAA,eAAA,EAIA,UAAA,UAAA,UAAAD,CAAA,EAAA,KAAA,IAAA,CAEEN,EAAA,EAAA,EAEA,WAAA,IAAA,CACEA,EAAA,EAAA,CAAkB,EAAA,GAAA,CACb,CAAA,CACR,EAGL,OAAAQ,EAAAC,EAAA,CAAA,SAAA,CAEIC,EAAAC,EAAC,CAAA,KAAA,mCACM,KAAAZ,EACC,SAAA,EACI,CAAA,EACXS,EACD,MAAC,CAAA,UAAA,wDACW,IAAAN,EACV,SAAA,CAEAQ,EAAAE,EAAC,CAAA,UAAA,2BACW,KAAA,OACL,MAAA,CACE,MAAAd,CACE,EACT,MAAAD,EACA,SAAA,GACU,QAAAO,EAAAF,EAAAL,CAAA,CACyB,CAAA,EACpCa,EACDG,EAAC,CAAA,UAAA,4BACW,QAAAT,EAAAF,EAAAL,CAAA,EACyB,SAAAa,EAAAI,EAAA,EAAA,CAEzB,CAAA,CACZ,CAAA,CAAA,CACF,CAAA,CAAA,CAGN;;;;"}