{"version":3,"file":"IsType-924faa40.js","sources":["../../src/utils/types/IsType.ts"],"sourcesContent":["import {\n  CloudProviderFileHandleInterface,\n  COLUMN_MULTI_VALUE_FUNCTION_QUERY_FILTER_CONCRETE_TYPE_VALUE,\n  COLUMN_SINGLE_VALUE_QUERY_FILTER_CONCRETE_TYPE_VALUE,\n  ColumnMultiValueFunctionQueryFilter,\n  ColumnSingleValueQueryFilter,\n  DOCKER_REPOSITORY_CONCRETE_TYPE_VALUE,\n  DockerRepository,\n  EXTERNAL_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  EXTERNAL_OBJECT_STORE_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  ExternalFileHandle,\n  ExternalFileHandleInterface,\n  FACET_COLUMN_RANGE_REQUEST_CONCRETE_TYPE_VALUE,\n  FACET_COLUMN_VALUES_REQUEST_CONCRETE_TYPE_VALUE,\n  FacetColumnRangeRequest,\n  FacetColumnValuesRequest,\n  FILE_ENTITY_CONCRETE_TYPE_VALUE,\n  FileEntity,\n  GOOGLE_CLOUD_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  INVITEE_VERIFICATION_CONCRETE_TYPE_VALUE,\n  InviteeVerificationSignedToken,\n  JOIN_TEAM_CONCRETE_TYPE_VALUE,\n  JoinTeamSignedToken,\n  Link,\n  LINK_CONCRETE_TYPE_VALUE,\n  MEMBERSHIP_INVITATION_CONCRETE_TYPE_VALUE,\n  MembershipInvtnSignedToken,\n  PROXY_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  S3_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  S3FileHandle,\n  TermsOfUseAccessRequirement,\n  TEXT_MATCHES_QUERY_FILTER_CONCRETE_TYPE_VALUE,\n  TextMatchesQueryFilter,\n} from '@sage-bionetworks/synapse-types'\n\n/**\n * TypeScript doesn't support nominal typing, but we can utilize the concreteType field in Synapse objects to identify the class of an object. This function\n * will return a function that can be used as a type guard using the concreteType field.\n *\n * Generic `TTypeChecked` is the type that you are trying to verify/assert.\n * Generic `ObjectType` is optional and can be used to require a specific interface or type before calling this method. Defaults to `unknown`.\n *\n * @param expectedConcreteTypes\n * @returns a function that checks if a given object is an instance of `TTypeChecked` using the expected concrete type value.\n */\nexport function isTypeViaConcreteTypeFactory<\n  TTypeChecked extends ObjectType, // The type that you are trying to verify/assert\n  ObjectType extends { concreteType: string } = { concreteType: string },\n>(...expectedConcreteTypes: TTypeChecked['concreteType'][]) {\n  return (object: ObjectType): object is TTypeChecked =>\n    !!(\n      object &&\n      typeof object === 'object' &&\n      'concreteType' in object &&\n      expectedConcreteTypes.includes(object['concreteType'])\n    )\n}\n\nexport const implementsCloudProviderFileHandleInterface =\n  isTypeViaConcreteTypeFactory<CloudProviderFileHandleInterface>(\n    S3_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n    GOOGLE_CLOUD_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  )\nexport const isExternalFileHandle =\n  isTypeViaConcreteTypeFactory<ExternalFileHandle>(\n    EXTERNAL_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  )\nexport const isLink = isTypeViaConcreteTypeFactory<Link>(\n  LINK_CONCRETE_TYPE_VALUE,\n)\nexport const implementsExternalFileHandleInterface =\n  isTypeViaConcreteTypeFactory<ExternalFileHandleInterface>(\n    PROXY_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n    EXTERNAL_OBJECT_STORE_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n    EXTERNAL_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n  )\nexport const isDockerRepository =\n  isTypeViaConcreteTypeFactory<DockerRepository>(\n    DOCKER_REPOSITORY_CONCRETE_TYPE_VALUE,\n  )\nexport const isFacetColumnValuesRequest =\n  isTypeViaConcreteTypeFactory<FacetColumnValuesRequest>(\n    FACET_COLUMN_VALUES_REQUEST_CONCRETE_TYPE_VALUE,\n  )\nexport const isFacetColumnRangeRequest =\n  isTypeViaConcreteTypeFactory<FacetColumnRangeRequest>(\n    FACET_COLUMN_RANGE_REQUEST_CONCRETE_TYPE_VALUE,\n  )\nexport const isTextMatchesQueryFilter =\n  isTypeViaConcreteTypeFactory<TextMatchesQueryFilter>(\n    TEXT_MATCHES_QUERY_FILTER_CONCRETE_TYPE_VALUE,\n  )\nexport const isColumnSingleValueQueryFilter =\n  isTypeViaConcreteTypeFactory<ColumnSingleValueQueryFilter>(\n    COLUMN_SINGLE_VALUE_QUERY_FILTER_CONCRETE_TYPE_VALUE,\n  )\nexport const isColumnMultiValueFunctionQueryFilter =\n  isTypeViaConcreteTypeFactory<ColumnMultiValueFunctionQueryFilter>(\n    COLUMN_MULTI_VALUE_FUNCTION_QUERY_FILTER_CONCRETE_TYPE_VALUE,\n  )\nexport const isS3FileHandle = isTypeViaConcreteTypeFactory<S3FileHandle>(\n  S3_FILE_HANDLE_CONCRETE_TYPE_VALUE,\n)\nexport const isFileEntity = isTypeViaConcreteTypeFactory<FileEntity>(\n  FILE_ENTITY_CONCRETE_TYPE_VALUE,\n)\nexport const isTermsOfUseAccessRequirement =\n  isTypeViaConcreteTypeFactory<TermsOfUseAccessRequirement>(\n    'org.sagebionetworks.repo.model.TermsOfUseAccessRequirement',\n  )\nexport const isInviteeVerificationSignedToken =\n  isTypeViaConcreteTypeFactory<InviteeVerificationSignedToken>(\n    INVITEE_VERIFICATION_CONCRETE_TYPE_VALUE,\n  )\nexport const isJoinTeamSignedToken =\n  isTypeViaConcreteTypeFactory<JoinTeamSignedToken>(\n    JOIN_TEAM_CONCRETE_TYPE_VALUE,\n  )\nexport const isMembershipInvtnSignedToken =\n  isTypeViaConcreteTypeFactory<MembershipInvtnSignedToken>(\n    MEMBERSHIP_INVITATION_CONCRETE_TYPE_VALUE,\n  )\n"],"names":["isTypeViaConcreteTypeFactory","expectedConcreteTypes","object","implementsCloudProviderFileHandleInterface","S3_FILE_HANDLE_CONCRETE_TYPE_VALUE","GOOGLE_CLOUD_FILE_HANDLE_CONCRETE_TYPE_VALUE","isExternalFileHandle","EXTERNAL_FILE_HANDLE_CONCRETE_TYPE_VALUE","isLink","LINK_CONCRETE_TYPE_VALUE","implementsExternalFileHandleInterface","PROXY_FILE_HANDLE_CONCRETE_TYPE_VALUE","EXTERNAL_OBJECT_STORE_FILE_HANDLE_CONCRETE_TYPE_VALUE","isDockerRepository","DOCKER_REPOSITORY_CONCRETE_TYPE_VALUE","isFacetColumnValuesRequest","FACET_COLUMN_VALUES_REQUEST_CONCRETE_TYPE_VALUE","isFacetColumnRangeRequest","FACET_COLUMN_RANGE_REQUEST_CONCRETE_TYPE_VALUE","isTextMatchesQueryFilter","TEXT_MATCHES_QUERY_FILTER_CONCRETE_TYPE_VALUE","isColumnSingleValueQueryFilter","COLUMN_SINGLE_VALUE_QUERY_FILTER_CONCRETE_TYPE_VALUE","isColumnMultiValueFunctionQueryFilter","COLUMN_MULTI_VALUE_FUNCTION_QUERY_FILTER_CONCRETE_TYPE_VALUE","isFileEntity","FILE_ENTITY_CONCRETE_TYPE_VALUE","isTermsOfUseAccessRequirement"],"mappings":"iJA6CO,SAASA,KAGXC,EAAuD,CAC1D,OAAQC,GACN,CAAC,EACCA,GACA,OAAOA,GAAW,UAClB,iBAAkBA,GAClBD,EAAsB,SAASC,EAAO,YAAe,EAE3D,CAEO,MAAMC,EACXH,EACEI,EACAC,CACF,EACWC,EACXN,EACEO,CACF,EACWC,EAASR,EACpBS,CACF,EACaC,EACXV,EACEW,EACAC,EACAL,CACF,EACWM,EACXb,EACEc,CACF,EACWC,EACXf,EACEgB,CACF,EACWC,EACXjB,EACEkB,CACF,EACWC,EACXnB,EACEoB,CACF,EACWC,EACXrB,EACEsB,CACF,EACWC,EACXvB,EACEwB,CACF,EAIWC,EAAezB,EAC1B0B,CACF,EACaC,EACX3B,EACE,4DACF"}