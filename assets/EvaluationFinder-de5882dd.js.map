{"version":3,"file":"EvaluationFinder-de5882dd.js","sources":["../../src/synapse-queries/evaluation/useEvaluation.ts","../../src/components/EvaluationFinder/EvaluationFinder.tsx"],"sourcesContent":["import {\n  Evaluation,\n  GetEvaluationParameters,\n  PaginatedResults,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport { SynapseClientError, useSynapseContext } from '../../utils'\nimport SynapseClient from '../../synapse-client'\nimport { getNextPageParamForPaginatedResults } from '../InfiniteQueryUtils'\n\nexport function useGetEvaluation(\n  evaluationId: string,\n  options?: UseQueryOptions<Evaluation, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<Evaluation, SynapseClientError>(\n    keyFactory.getEvaluationByIdQueryKey(evaluationId),\n    () => SynapseClient.getEvaluation(evaluationId, accessToken),\n    options,\n  )\n}\n\nexport function useGetEvaluationsInfinite(\n  request: GetEvaluationParameters = {},\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<Evaluation>,\n    SynapseClientError\n  >,\n) {\n  const LIMIT = 20\n  const { accessToken, keyFactory } = useSynapseContext()\n  const queryClient = useQueryClient()\n\n  return useInfiniteQuery<PaginatedResults<Evaluation>, SynapseClientError>(\n    keyFactory.getEvaluationsQueryKey(request),\n    async context => {\n      const responsePage = await SynapseClient.getEvaluations(\n        { ...request, limit: LIMIT, offset: context.pageParam },\n        accessToken,\n      )\n\n      // Update the cache with each individual evaluation\n      responsePage.results.forEach(evaluation => {\n        queryClient.setQueryData(\n          keyFactory.getEvaluationByIdQueryKey(evaluation.id!),\n          evaluation,\n        )\n      })\n\n      return responsePage\n    },\n\n    {\n      ...options,\n      getNextPageParam: getNextPageParamForPaginatedResults,\n    },\n  )\n}\n","import React, { useState } from 'react'\nimport { useGetEvaluationsInfinite } from '../../synapse-queries/evaluation/useEvaluation'\nimport { HelpPopover } from '../HelpPopover/HelpPopover'\nimport {\n  Alert,\n  Box,\n  Button,\n  FormControl,\n  FormGroup,\n  LinearProgress,\n  Typography,\n} from '@mui/material'\nimport { GetEvaluationParameters } from '@sage-bionetworks/synapse-types'\nimport { Checkbox } from '../widgets/Checkbox'\n\nexport type EvaluationFinderProps = Pick<\n  GetEvaluationParameters,\n  'accessType' | 'activeOnly'\n> & {\n  selectedIds: string[]\n  onChange: (newSelectedIds: string[]) => void\n}\n\nexport default function EvaluationFinder(props: EvaluationFinderProps) {\n  const { accessType, activeOnly, selectedIds = [], onChange } = props\n  const [currentPage, setCurrentPage] = useState(0)\n  const {\n    data,\n    isLoading,\n    hasNextPage: hasNextPageOnServer,\n    fetchNextPage,\n    isFetchingNextPage,\n  } = useGetEvaluationsInfinite(\n    {\n      accessType,\n      activeOnly,\n    },\n    { keepPreviousData: true, useErrorBoundary: true },\n  )\n\n  if (isLoading) {\n    return <LinearProgress />\n  }\n  if (!data?.pages) {\n    // This should never happen since errors are propagated to the error boundary\n    return (\n      <Alert severity=\"error\">\n        An unexpected error occurred and evaluations could not be loaded\n      </Alert>\n    )\n  }\n\n  const hasNextPageInState = data.pages.length - 1 > currentPage\n  const canGoToNextPage =\n    hasNextPageInState || (hasNextPageOnServer && !isFetchingNextPage)\n\n  return (\n    <>\n      <FormControl>\n        <FormGroup sx={{ gap: 1 }}>\n          {data.pages[currentPage]?.results.map(evaluation => (\n            <Checkbox\n              key={evaluation.id}\n              label={\n                <Typography variant={'smallText1'} component={'span'}>\n                  {evaluation.name}{' '}\n                  {evaluation.submissionInstructionsMessage &&\n                    evaluation.submissionInstructionsMessage.length > 0 && (\n                      <HelpPopover\n                        markdownText={evaluation.submissionInstructionsMessage}\n                        placement={'right'}\n                      />\n                    )}\n                </Typography>\n              }\n              aria-label={evaluation.name!}\n              checked={selectedIds.includes(evaluation.id!)}\n              onChange={() => {\n                if (selectedIds.includes(evaluation.id!)) {\n                  onChange(selectedIds.filter(id => id !== evaluation.id))\n                } else {\n                  onChange([...selectedIds, evaluation.id!])\n                }\n              }}\n            />\n          ))}\n        </FormGroup>\n      </FormControl>\n      <Box display={'flex'} my={2} gap={1}>\n        {currentPage > 0 && (\n          <Button\n            variant={'outlined'}\n            onClick={() => setCurrentPage(page => page - 1)}\n          >\n            Previous Page\n          </Button>\n        )}\n        <Button\n          variant={'outlined'}\n          disabled={!canGoToNextPage}\n          onClick={() => {\n            if (data.pages[currentPage + 1]) {\n              setCurrentPage(page => page + 1)\n            } else {\n              fetchNextPage()\n                .then(() => setCurrentPage(page => page + 1))\n                .catch(() => {\n                  // The error will be thrown by the useGetEvaluationsInfinite hook handled by the error boundary\n                  console.error('Error fetching next page of evaluations')\n                })\n            }\n          }}\n        >\n          Next Page\n        </Button>\n      </Box>\n    </>\n  )\n}\n"],"names":["useGetEvaluation","evaluationId","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient","useGetEvaluationsInfinite","request","queryClient","useQueryClient","useInfiniteQuery","context","responsePage","evaluation","getNextPageParamForPaginatedResults","EvaluationFinder","props","accessType","activeOnly","selectedIds","onChange","currentPage","setCurrentPage","useState","data","isLoading","hasNextPageOnServer","fetchNextPage","isFetchingNextPage","jsx","LinearProgress","Alert","canGoToNextPage","jsxs","Fragment","FormControl","FormGroup","_a","Checkbox","Typography","HelpPopover","id","Box","Button","page"],"mappings":"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"}