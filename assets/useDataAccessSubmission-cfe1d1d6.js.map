{"version":3,"file":"useDataAccessSubmission-cfe1d1d6.js","sources":["../../src/lib/utils/hooks/SynapseAPI/dataaccess/useDataAccessSubmission.ts"],"sourcesContent":["import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { Submission } from '../../../synapseTypes/AccessRequirement/Submission'\nimport { SubmissionStateChangeRequest } from '../../../synapseTypes/AccessRequirement/SubmissionStateChangeRequest'\nimport {\n  SubmissionSearchRequest,\n  SubmissionSearchResponse,\n} from '../../../synapseTypes/AccessSubmission'\nimport {\n  ACTSubmissionStatus,\n  CreateSubmissionRequest,\n} from '../../../synapseTypes'\n\nexport default function useGetDataAccessSubmission(\n  submissionId: string | number,\n  options?: UseQueryOptions<Submission, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<Submission, SynapseClientError>(\n    keyFactory.getDataAccessSubmissionQueryKey(String(submissionId.toString())),\n    () => SynapseClient.getSubmissionById(submissionId, accessToken),\n    options,\n  )\n}\n\nexport function useSearchAccessSubmissionsInfinite(\n  params: SubmissionSearchRequest,\n  options?: UseInfiniteQueryOptions<\n    SubmissionSearchResponse,\n    SynapseClientError\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useInfiniteQuery<SubmissionSearchResponse, SynapseClientError>(\n    keyFactory.searchDataAccessSubmissionQueryKey(params),\n    async context => {\n      return await SynapseClient.searchAccessSubmission(\n        {\n          ...params,\n          nextPageToken: context.pageParam,\n        },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useUpdateDataAccessSubmissionState(\n  options?: UseMutationOptions<\n    Submission,\n    SynapseClientError,\n    SubmissionStateChangeRequest\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<\n    Submission,\n    SynapseClientError,\n    SubmissionStateChangeRequest\n  >(\n    (request: SubmissionStateChangeRequest): Promise<Submission> =>\n      SynapseClient.updateSubmissionStatus(request, accessToken),\n    {\n      ...options,\n      onSuccess: async (updatedSubmission, variables, ctx) => {\n        // Invalidate all searches, since updating the status will affect filtered search results\n        await queryClient.invalidateQueries(\n          keyFactory.searchDataAccessSubmissionQueryKey(),\n        )\n        // Update the query data for the updated submission\n        queryClient.setQueryData(\n          keyFactory.getDataAccessSubmissionQueryKey(variables.submissionId),\n          updatedSubmission,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedSubmission, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useSubmitDataAccessRequest(\n  options?: UseMutationOptions<\n    ACTSubmissionStatus,\n    SynapseClientError,\n    { request: CreateSubmissionRequest; accessRequirementId: string }\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<\n    ACTSubmissionStatus,\n    SynapseClientError,\n    { request: CreateSubmissionRequest; accessRequirementId: string }\n  >(\n    ({ request }): Promise<ACTSubmissionStatus> =>\n      SynapseClient.submitDataAccessRequest(request, accessToken!),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate the status of the relevant AR\n        await queryClient.invalidateQueries(\n          keyFactory.getAccessRequirementStatusQueryKey(\n            variables.accessRequirementId,\n          ),\n        )\n        // Invalidate all searches, in case it was an AR reviewer who created this submission\n        await queryClient.invalidateQueries(\n          keyFactory.searchDataAccessSubmissionQueryKey(),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n"],"names":["useGetDataAccessSubmission","submissionId","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient.getSubmissionById","useSearchAccessSubmissionsInfinite","params","useInfiniteQuery","context","SynapseClient.searchAccessSubmission","page","useUpdateDataAccessSubmissionState","queryClient","useQueryClient","useMutation","request","SynapseClient.updateSubmissionStatus","updatedSubmission","variables","ctx","useSubmitDataAccessRequest","SynapseClient.submitDataAccessRequest","data"],"mappings":"mSAuBwB,SAAAA,EACtBC,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAC,EACLF,EAAW,gCAAgC,OAAOH,EAAa,SAAU,CAAA,CAAC,EAC1E,IAAMM,EAAgCN,EAAcE,CAAW,EAC/DD,CAAA,CAEJ,CAEgB,SAAAM,EACdC,EACAP,EAIA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAK,EACLN,EAAW,mCAAmCK,CAAM,EACpD,MAAME,GACG,MAAMC,EACX,CACE,GAAGH,EACH,cAAeE,EAAQ,SACzB,EACAR,CAAA,EAGJ,CACE,GAAGD,EACH,oBAA0BW,EAAK,aACjC,CAAA,CAEJ,CAEO,SAASC,EACdZ,EAKA,CACA,MAAMa,EAAcC,IACd,CAAE,YAAAb,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAY,EAKJC,GACCC,EAAqCD,EAASf,CAAW,EAC3D,CACE,GAAGD,EACH,UAAW,MAAOkB,EAAmBC,EAAWC,IAAQ,CAEtD,MAAMP,EAAY,kBAChBX,EAAW,mCAAmC,CAAA,EAGpCW,EAAA,aACVX,EAAW,gCAAgCiB,EAAU,YAAY,EACjED,CAAA,EAGElB,GAAA,MAAAA,EAAS,WACX,MAAMA,EAAQ,UAAUkB,EAAmBC,EAAWC,CAAG,CAE7D,CACF,CAAA,CAEJ,CAEO,SAASC,EACdrB,EAKA,CACA,MAAMa,EAAcC,IACd,CAAE,YAAAb,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAY,EAKL,CAAC,CAAE,QAAAC,KACDM,EAAsCN,EAASf,CAAY,EAC7D,CACE,GAAGD,EACH,UAAW,MAAOuB,EAAMJ,EAAWC,IAAQ,CAEzC,MAAMP,EAAY,kBAChBX,EAAW,mCACTiB,EAAU,mBACZ,CAAA,EAGF,MAAMN,EAAY,kBAChBX,EAAW,mCAAmC,CAAA,EAE5CF,GAAA,MAAAA,EAAS,WACX,MAAMA,EAAQ,UAAUuB,EAAMJ,EAAWC,CAAG,CAEhD,CACF,CAAA,CAEJ"}