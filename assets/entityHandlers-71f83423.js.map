{"version":3,"file":"entityHandlers-71f83423.js","sources":["../../src/mocks/entity/mockDataset.ts","../../src/mocks/entity/mockDatasetCollection.ts","../../src/mocks/entity/index.ts","../../src/mocks/msw/handlers/entityHandlers.ts"],"sourcesContent":["import {\n  Dataset,\n  EntityBundle,\n  EntityHeader,\n  EntityPath,\n  EntityType,\n  RestrictionLevel,\n  VersionInfo,\n} from '@sage-bionetworks/synapse-types'\nimport { MOCK_USER_ID, MOCK_USER_ID_2 } from '../user/mock_user_profile'\nimport { MockEntityData } from './MockEntityData'\nimport mockProjectEntityData from './mockProject'\n\nconst MOCK_DATASET_ENTITY_ID = `syn60000`\nconst MOCK_DATASET_NAME = 'A Mocked Dataset'\n\nexport const mockDatasetEntity: Dataset = {\n  id: MOCK_DATASET_ENTITY_ID,\n  parentId: mockProjectEntityData.id,\n  name: MOCK_DATASET_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.table.Dataset',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID_2.toString(),\n  createdOn: '2020-01-01T00:00:00.000Z',\n  modifiedOn: '2020-02-01T00:00:00.000Z',\n  versionNumber: 3,\n  versionLabel: 'in progress',\n  versionComment: 'in progress',\n  isLatestVersion: true,\n  etag: '00000000-0000-0000-0000-000000000000',\n  items: [],\n  columnIds: [],\n  isSearchEnabled: false,\n}\n\nconst mockHeader: EntityHeader = {\n  id: MOCK_DATASET_ENTITY_ID,\n  type: 'org.sagebionetworks.repo.model.table.Dataset',\n  name: MOCK_DATASET_NAME,\n  benefactorId: parseInt(mockProjectEntityData.id),\n  createdOn: '2020-01-01T00:00:00.000Z',\n  modifiedOn: '2020-02-01T00:00:00.000Z',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID.toString(),\n  versionNumber: 3,\n  versionLabel: 'in progress',\n  isLatestVersion: true,\n}\n\nconst path: EntityPath = {\n  path: [\n    {\n      name: 'root',\n      id: 'syn4489',\n      type: 'org.sagebionetworks.repo.model.Folder',\n    },\n    {\n      name: mockProjectEntityData.name,\n      id: mockProjectEntityData.id,\n      type: 'org.sagebionetworks.repo.model.Project',\n    },\n    {\n      name: MOCK_DATASET_NAME,\n      id: MOCK_DATASET_ENTITY_ID,\n      type: 'org.sagebionetworks.repo.model.FileEntity',\n    },\n  ],\n}\n\nconst versions: Record<number, Dataset> = {\n  1: {\n    ...mockDatasetEntity,\n    versionNumber: 1,\n    versionLabel: 'snapshot 1',\n    versionComment: '',\n    isLatestVersion: false,\n  },\n  2: {\n    ...mockDatasetEntity,\n    versionNumber: 2,\n    versionLabel: 'snapshot 2',\n    versionComment: '',\n    isLatestVersion: false,\n  },\n}\n\nconst versionInfo: VersionInfo[] = [\n  {\n    id: MOCK_DATASET_ENTITY_ID,\n    versionNumber: 2,\n    versionLabel: 'snapshot 2',\n    versionComment: '',\n    isLatestVersion: false,\n    modifiedBy: MOCK_USER_ID.toString(),\n    modifiedByPrincipalId: MOCK_USER_ID.toString(),\n    modifiedOn: '2022-03-22T18:50:22.336Z',\n  },\n  {\n    id: MOCK_DATASET_ENTITY_ID,\n    versionNumber: 1,\n    versionLabel: 'snapshot 1',\n    versionComment: '',\n    isLatestVersion: false,\n    modifiedBy: MOCK_USER_ID.toString(),\n    modifiedByPrincipalId: MOCK_USER_ID.toString(),\n    modifiedOn: '2022-03-22T18:47:34.797Z',\n  },\n]\n\nconst bundle: EntityBundle = {\n  accessControlList: { id: '239443242', resourceAccess: [] },\n  annotations: {\n    id: '34243',\n    etag: '00000000-0000-0000-0000-000000000000',\n    annotations: {},\n  },\n  benefactorAcl: { id: '239443242', resourceAccess: [] },\n  fileHandles: [],\n  hasChildren: false,\n  restrictionInformation: {\n    restrictionLevel: RestrictionLevel.OPEN,\n    hasUnmetAccessRequirement: false,\n  },\n  threadCount: 0,\n  entity: mockDatasetEntity,\n  entityType: EntityType.DATASET,\n  path: path,\n  permissions: {\n    canView: true,\n    canEdit: true,\n    canMove: true,\n    canAddChild: true,\n    canCertifiedUserEdit: true,\n    canCertifiedUserAddChild: true,\n    isCertifiedUser: true,\n    canChangePermissions: true,\n    canChangeSettings: true,\n    canDelete: true,\n    canDownload: true,\n    canUpload: true,\n    canEnableInheritance: true,\n    ownerPrincipalId: 3350396,\n    canPublicRead: true,\n    canModerate: true,\n    isCertificationRequired: true,\n    isEntityOpenData: false,\n  },\n}\n\nconst mockDatasetData = {\n  id: MOCK_DATASET_ENTITY_ID,\n  name: MOCK_DATASET_NAME,\n  entity: mockDatasetEntity,\n  entityHeader: mockHeader,\n  path: path,\n  bundle: bundle,\n  versions: versions,\n  versionInfo: versionInfo,\n} satisfies MockEntityData<Dataset>\n\nexport default mockDatasetData\n","import { DatasetCollection, EntityPath } from '@sage-bionetworks/synapse-types'\nimport { MOCK_USER_ID } from '../user/mock_user_profile'\nimport mockDatasetData from './mockDataset'\nimport { MockEntityData } from './MockEntityData'\nimport mockProjectEntityData from './mockProject'\n\nconst MOCK_DATASET_COLLECTION_ENTITY_ID = `syn70000`\nconst MOCK_DATASET_COLLECTION_NAME = 'A Mocked Dataset Collection'\n\nexport const mockDatasetCollectionEntity: DatasetCollection = {\n  id: MOCK_DATASET_COLLECTION_ENTITY_ID,\n  parentId: mockProjectEntityData.id,\n  name: MOCK_DATASET_COLLECTION_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.table.DatasetCollection',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID.toString(),\n  etag: '00000000-0000-0000-0000-000000000000',\n  items: [\n    {\n      entityId: mockDatasetData.id,\n      versionNumber: 1,\n    },\n  ],\n  columnIds: [],\n  isSearchEnabled: false,\n}\n\nconst path: EntityPath = {\n  path: [\n    {\n      name: 'root',\n      id: 'syn4489',\n      type: 'org.sagebionetworks.repo.model.Folder',\n    },\n    {\n      name: mockProjectEntityData.name,\n      id: mockProjectEntityData.id,\n      type: 'org.sagebionetworks.repo.model.Project',\n    },\n    {\n      name: MOCK_DATASET_COLLECTION_NAME,\n      id: MOCK_DATASET_COLLECTION_ENTITY_ID,\n      type: 'org.sagebionetworks.repo.model.FileEntity',\n    },\n  ],\n}\n\nconst mockDatasetCollectionData: MockEntityData<DatasetCollection> = {\n  id: MOCK_DATASET_COLLECTION_ENTITY_ID,\n  name: MOCK_DATASET_COLLECTION_NAME,\n  entity: mockDatasetCollectionEntity,\n  path: path,\n}\n\nexport default mockDatasetCollectionData\n","import mockDatasetData from './mockDataset'\nimport mockDatasetCollectionData from './mockDatasetCollection'\nimport { MockEntityData } from './MockEntityData'\nimport mockFileEntityData from './mockFileEntity'\nimport { mockProjectsEntityData } from './mockProject'\nimport mockTableEntityData from './mockTableEntity'\n\nconst mockEntities: MockEntityData[] = [\n  mockFileEntityData,\n  ...mockProjectsEntityData,\n  mockDatasetData,\n  mockDatasetCollectionData,\n  mockTableEntityData,\n]\n\nexport default mockEntities\n","import { rest } from 'msw'\nimport {\n  ENTITY,\n  ENTITY_BUNDLE_V2,\n  ENTITY_HEADERS,\n  ENTITY_ID,\n  ENTITY_ID_VERSION,\n  ENTITY_ID_VERSIONS,\n  ENTITY_JSON,\n  ENTITY_SCHEMA_BINDING,\n} from '../../../utils/APIConstants'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport {\n  Entity,\n  EntityBundle,\n  EntityHeader,\n  EntityJson,\n  EntityPath,\n  PaginatedResults,\n  Reference,\n  VersionableEntity,\n} from '@sage-bionetworks/synapse-types'\nimport { VersionInfo } from '@sage-bionetworks/synapse-types'\nimport mockEntities from '../../entity'\nimport { MOCK_INVALID_PROJECT_NAME } from '../../entity/mockEntity'\nimport { mockSchemaBinding } from '../../mockSchema'\nimport { SynapseApiResponse } from '../handlers'\nimport { UploadDestination, UploadType } from '@sage-bionetworks/synapse-types'\n\nexport const getEntityHandlers = (backendOrigin: string) => [\n  /**\n   * Create a new entity\n   */\n  rest.post(`${backendOrigin}${ENTITY}`, async (req, res, ctx) => {\n    let status = 404\n    let response: SynapseApiResponse<Entity> = {\n      reason: `Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(\n        req.body,\n      )}`,\n    }\n    if (req.body) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const requestBody = req.body as Entity\n\n      const entityData = mockEntities.find(\n        entity => entity.name === requestBody.name,\n      )\n      if (entityData) {\n        response = entityData.entity\n        status = 200\n      } else if (requestBody.name === MOCK_INVALID_PROJECT_NAME) {\n        response.reason = 'Invalid project name'\n        status = 403\n      }\n    }\n\n    return res(ctx.status(status), ctx.json(response))\n  }),\n\n  /**\n   * Get entity by ID\n   */\n  rest.get(\n    `${backendOrigin}${ENTITY_ID(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<Entity> = {\n        reason: `Mock Service worker could not find a mock entity with ID ${req.params.entityId}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData) {\n        response = entityData.entity\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID_VERSIONS(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<PaginatedResults<VersionInfo>> = {\n        reason: `Mock Service worker could not find mock entity versions for ID ${req.params.entityId}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData && entityData.versionInfo) {\n        response = { results: entityData.versionInfo }\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID_VERSION(':entityId', ':versionNumber')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      const entityId = req.params.entityId\n      const versionNumber = req.params.versionNumber.toString()\n      const requestedVersionNumber = parseInt(versionNumber)\n\n      let response: SynapseApiResponse<VersionableEntity> = {\n        reason: `Mock Service worker could not find a mock versioned entity with ID ${entityId}.${versionNumber}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (\n        entityData &&\n        entityData.versions &&\n        entityData.versions[requestedVersionNumber]\n      ) {\n        response = entityData.versions[\n          requestedVersionNumber\n        ] as VersionableEntity\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_BUNDLE_V2(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityBundle> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData?.bundle) {\n        response = entityData.bundle\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_BUNDLE_V2(':entityId', ':versionNumber')}`,\n    async (req, res, ctx) => {\n      const entityId = req.params.entityId\n      const versionNumber = parseInt(req.params.versionNumber as string)\n      let status = 404\n      let response: SynapseApiResponse<EntityBundle> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${entityId}`,\n      }\n      const entityData = mockEntities.find(entity => entity.id === entityId)\n      if (entityData) {\n        const bundle = entityData.bundle\n        if (entityData.versions && entityData.versions[versionNumber]) {\n          response = {\n            ...bundle,\n            entity: entityData.versions[versionNumber],\n          } as EntityBundle\n        } else {\n          response = bundle as EntityBundle\n        }\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ENTITY_SCHEMA_BINDING(':entityId')}`,\n    async (req, res, ctx) => {\n      return res(ctx.status(200), ctx.json(mockSchemaBinding))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ENTITY_JSON(':entityId')}`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityJson> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData?.json) {\n        response = entityData.json\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_HEADERS}`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<PaginatedResults<EntityHeader>> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n\n      const referenceList = req.body as { references: Reference[] }\n      const entityData = mockEntities\n        .filter(entity =>\n          referenceList.references.find(ref => ref.targetId === entity.id),\n        )\n        .map(entity => entity.entityHeader)\n        .filter((header): header is EntityHeader => !!header)\n\n      if (entityData) {\n        response = { results: entityData }\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID(':entityId')}/path`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityPath> = {\n        reason: `Mock Service worker could not find a mock entity path using ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(e => req.params.entityId === e.id)\n\n      if (entityData && entityData.path) {\n        response = entityData.path\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${getEndpoint(\n      BackendDestinationEnum.REPO_ENDPOINT,\n    )}/file/v1/entity/:id/uploadDestination`,\n    async (req, res, ctx) => {\n      const response: UploadDestination = {\n        banner: '',\n        storageLocationId: 1,\n        uploadType: UploadType.S3,\n        concreteType: 'org.sagebionetworks.repo.model.file.S3UploadDestination',\n      }\n      return res(ctx.status(200), ctx.json(response))\n    },\n  ),\n]\n"],"names":["MOCK_DATASET_ENTITY_ID","MOCK_DATASET_NAME","mockDatasetEntity","mockProjectEntityData","MOCK_USER_ID","MOCK_USER_ID_2","mockHeader","path","versions","versionInfo","bundle","RestrictionLevel","EntityType","mockDatasetData","MOCK_DATASET_COLLECTION_ENTITY_ID","MOCK_DATASET_COLLECTION_NAME","mockDatasetCollectionEntity","mockDatasetCollectionData","mockEntities","mockFileEntityData","mockProjectsEntityData","mockTableEntityData","getEntityHandlers","backendOrigin","rest","ENTITY","req","res","ctx","status","response","requestBody","entityData","entity","MOCK_INVALID_PROJECT_NAME","ENTITY_ID","ENTITY_ID_VERSIONS","ENTITY_ID_VERSION","entityId","versionNumber","requestedVersionNumber","ENTITY_BUNDLE_V2","ENTITY_SCHEMA_BINDING","mockSchemaBinding","ENTITY_JSON","ENTITY_HEADERS","referenceList","ref","header","e","getEndpoint","BackendDestinationEnum","UploadType"],"mappings":"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"}