{"version":3,"file":"useDataAccessSubmission-7363cf70.js","sources":["../../src/synapse-queries/dataaccess/useDataAccessSubmission.ts"],"sourcesContent":["import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { Submission } from '@sage-bionetworks/synapse-types'\nimport { SubmissionStateChangeRequest } from '@sage-bionetworks/synapse-types'\nimport {\n  SubmissionSearchRequest,\n  SubmissionSearchResponse,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  ACTSubmissionStatus,\n  CreateSubmissionRequest,\n} from '@sage-bionetworks/synapse-types'\n\nexport default function useGetDataAccessSubmission(\n  submissionId: string | number,\n  options?: UseQueryOptions<Submission, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<Submission, SynapseClientError>(\n    keyFactory.getDataAccessSubmissionQueryKey(String(submissionId.toString())),\n    () => SynapseClient.getSubmissionById(submissionId, accessToken),\n    options,\n  )\n}\n\nexport function useSearchAccessSubmissionsInfinite(\n  params: SubmissionSearchRequest,\n  options?: UseInfiniteQueryOptions<\n    SubmissionSearchResponse,\n    SynapseClientError\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useInfiniteQuery<SubmissionSearchResponse, SynapseClientError>(\n    keyFactory.searchDataAccessSubmissionQueryKey(params),\n    async context => {\n      return await SynapseClient.searchAccessSubmission(\n        {\n          ...params,\n          nextPageToken: context.pageParam,\n        },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useUpdateDataAccessSubmissionState(\n  options?: UseMutationOptions<\n    Submission,\n    SynapseClientError,\n    SubmissionStateChangeRequest\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<\n    Submission,\n    SynapseClientError,\n    SubmissionStateChangeRequest\n  >(\n    (request: SubmissionStateChangeRequest): Promise<Submission> =>\n      SynapseClient.updateSubmissionStatus(request, accessToken),\n    {\n      ...options,\n      onSuccess: async (updatedSubmission, variables, ctx) => {\n        // Invalidate all searches, since updating the status will affect filtered search results\n        await queryClient.invalidateQueries(\n          keyFactory.searchDataAccessSubmissionQueryKey(),\n        )\n        // Update the query data for the updated submission\n        queryClient.setQueryData(\n          keyFactory.getDataAccessSubmissionQueryKey(variables.submissionId),\n          updatedSubmission,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedSubmission, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useSubmitDataAccessRequest(\n  options?: UseMutationOptions<\n    ACTSubmissionStatus,\n    SynapseClientError,\n    { request: CreateSubmissionRequest; accessRequirementId: string }\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<\n    ACTSubmissionStatus,\n    SynapseClientError,\n    { request: CreateSubmissionRequest; accessRequirementId: string }\n  >(\n    ({ request }): Promise<ACTSubmissionStatus> =>\n      SynapseClient.submitDataAccessRequest(request, accessToken!),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate the status of the relevant AR\n        await queryClient.invalidateQueries(\n          keyFactory.getAccessRequirementStatusQueryKey(\n            variables.accessRequirementId,\n          ),\n        )\n        // Invalidate all searches, in case it was an AR reviewer who created this submission\n        await queryClient.invalidateQueries(\n          keyFactory.searchDataAccessSubmissionQueryKey(),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n"],"names":["useGetDataAccessSubmission","submissionId","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient","useSearchAccessSubmissionsInfinite","params","useInfiniteQuery","context","page","useUpdateDataAccessSubmissionState","queryClient","useQueryClient","useMutation","request","updatedSubmission","variables","ctx","useSubmitDataAccessRequest","data"],"mappings":"wKAuBwB,SAAAA,EACtBC,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAC,EACLF,EAAW,gCAAgC,OAAOH,EAAa,SAAU,CAAA,CAAC,EAC1E,IAAMM,EAAc,kBAAkBN,EAAcE,CAAW,EAC/DD,CAAA,CAEJ,CAEgB,SAAAM,EACdC,EACAP,EAIA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAK,EACLN,EAAW,mCAAmCK,CAAM,EACpD,MAAME,GACG,MAAMJ,EAAc,uBACzB,CACE,GAAGE,EACH,cAAeE,EAAQ,SACzB,EACAR,CAAA,EAGJ,CACE,GAAGD,EACH,oBAA0BU,EAAK,aACjC,CAAA,CAEJ,CAEO,SAASC,EACdX,EAKA,CACA,MAAMY,EAAcC,IACd,CAAE,YAAAZ,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAW,EAKJC,GACCV,EAAc,uBAAuBU,EAASd,CAAW,EAC3D,CACE,GAAGD,EACH,UAAW,MAAOgB,EAAmBC,EAAWC,IAAQ,CAEtD,MAAMN,EAAY,kBAChBV,EAAW,mCAAmC,CAAA,EAGpCU,EAAA,aACVV,EAAW,gCAAgCe,EAAU,YAAY,EACjED,CAAA,EAGEhB,GAAA,MAAAA,EAAS,WACX,MAAMA,EAAQ,UAAUgB,EAAmBC,EAAWC,CAAG,CAE7D,CACF,CAAA,CAEJ,CAEO,SAASC,EACdnB,EAKA,CACA,MAAMY,EAAcC,IACd,CAAE,YAAAZ,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAW,EAKL,CAAC,CAAE,QAAAC,CAAA,IACDV,EAAc,wBAAwBU,EAASd,CAAY,EAC7D,CACE,GAAGD,EACH,UAAW,MAAOoB,EAAMH,EAAWC,IAAQ,CAEzC,MAAMN,EAAY,kBAChBV,EAAW,mCACTe,EAAU,mBACZ,CAAA,EAGF,MAAML,EAAY,kBAChBV,EAAW,mCAAmC,CAAA,EAE5CF,GAAA,MAAAA,EAAS,WACX,MAAMA,EAAQ,UAAUoB,EAAMH,EAAWC,CAAG,CAEhD,CACF,CAAA,CAEJ"}