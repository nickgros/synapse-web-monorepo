{"version":3,"file":"useAccessRequirements-256c72bd.js","sources":["../../src/lib/utils/hooks/SynapseAPI/dataaccess/useAccessRequirements.ts"],"sourcesContent":["import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport {\n  AccessApproval,\n  AccessControlList,\n  AccessRequirement,\n  AccessRequirementStatus,\n  ACTSubmissionStatus,\n  ManagedACTAccessRequirementStatus,\n  Renewal,\n  Request,\n  RestrictionInformationRequest,\n  RestrictionInformationResponse,\n  WikiPageKey,\n} from '../../../synapseTypes'\nimport {\n  AccessRequirementSearchRequest,\n  AccessRequirementSearchResponse,\n} from '../../../synapseTypes/AccessRequirement/AccessRequirementSearch'\nimport { ResearchProject } from '../../../synapseTypes/ResearchProject'\n\nexport function useGetAccessRequirements<T extends AccessRequirement>(\n  accessRequirementId: string | number,\n  options?: UseQueryOptions<T, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<T, SynapseClientError>(\n    keyFactory.getAccessRequirementQueryKey(String(accessRequirementId)),\n    () =>\n      SynapseClient.getAccessRequirementById<T>(\n        accessToken,\n        accessRequirementId,\n      ),\n    options,\n  )\n}\n\nexport function useGetAccessRequirementsForEntity(\n  entityId: string,\n  options?: UseQueryOptions<AccessRequirement[], SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<AccessRequirement[], SynapseClientError>(\n    keyFactory.getEntityAccessRequirementsQueryKey(entityId),\n    () => SynapseClient.getAllAccessRequirements(accessToken, entityId),\n    options,\n  )\n}\n\nexport function useGetAccessRequirementWikiPageKey(\n  accessRequirementId: string,\n  options?: UseQueryOptions<WikiPageKey, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<WikiPageKey, SynapseClientError>(\n    keyFactory.getAccessRequirementWikiPageKey(accessRequirementId),\n    () =>\n      SynapseClient.getWikiPageKeyForAccessRequirement(\n        accessToken,\n        accessRequirementId,\n      ),\n    options,\n  )\n}\n\nexport function useGetAccessRequirementACL(\n  accessRequirementId: string,\n  options?: UseQueryOptions<AccessControlList | null, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<AccessControlList | null, SynapseClientError>(\n    keyFactory.getAccessRequirementAclQueryKey(accessRequirementId),\n    () =>\n      SynapseClient.getAccessRequirementAcl(accessToken, accessRequirementId),\n    options,\n  )\n}\n\nexport function useSearchAccessRequirementsInfinite(\n  params: Omit<AccessRequirementSearchRequest, 'nextPageToken'>,\n  options?: UseInfiniteQueryOptions<\n    AccessRequirementSearchResponse,\n    SynapseClientError\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<AccessRequirementSearchResponse, SynapseClientError>(\n    keyFactory.searchAccessRequirementsQueryKey(params),\n    async context => {\n      return await SynapseClient.searchAccessRequirements(accessToken, {\n        ...params,\n        nextPageToken: context.pageParam,\n      })\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useGetRestrictionInformation(\n  request: RestrictionInformationRequest,\n  options?: UseQueryOptions<RestrictionInformationResponse, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<RestrictionInformationResponse, SynapseClientError>(\n    keyFactory.getAccessRequirementRestrictionInformationQueryKey(request),\n    () => SynapseClient.getRestrictionInformation(request, accessToken),\n    options,\n  )\n}\n\nexport function useCreateLockAccessRequirement(\n  options?: UseMutationOptions<AccessRequirement, SynapseClientError, string>,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<AccessRequirement, SynapseClientError, string>({\n    ...options,\n    mutationFn: (entityId: string) =>\n      SynapseClient.createLockAccessRequirement(entityId, accessToken),\n    mutationKey: ['createLockAccessRequirement'],\n    onSuccess: async (data, variables, ctx) => {\n      // Invalidate all access requirement queries\n      await queryClient.invalidateQueries(\n        keyFactory.getAccessRequirementQueryKey(),\n      )\n      // Invalidate all entity queries (not just the current entity because the new AR may apply to this entity's children)\n      await queryClient.invalidateQueries(keyFactory.getAllEntityDataQueryKey())\n      if (options?.onSuccess) {\n        return options.onSuccess(data, variables, ctx)\n      }\n    },\n  })\n}\n\nexport function useGetAccessRequirementStatus<\n  T extends\n    | AccessRequirementStatus\n    | ManagedACTAccessRequirementStatus = AccessRequirementStatus,\n>(\n  accessRequirementId: string,\n  options?: UseQueryOptions<T, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<T, SynapseClientError>(\n    keyFactory.getAccessRequirementStatusQueryKey(accessRequirementId),\n    () =>\n      SynapseClient.getAccessRequirementStatus<T>(\n        accessToken,\n        accessRequirementId,\n      ),\n    options,\n  )\n}\n\nexport function useGetResearchProject(\n  accessRequirementId: string,\n  options?: UseQueryOptions<ResearchProject, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<ResearchProject, SynapseClientError>(\n    keyFactory.getAccessRequirementResearchProjectQueryKey(accessRequirementId),\n    () => SynapseClient.getResearchProject(accessRequirementId, accessToken!),\n    options,\n  )\n}\n\nexport function useUpdateResearchProject(\n  options?: UseMutationOptions<\n    ResearchProject,\n    SynapseClientError,\n    ResearchProject\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<ResearchProject, SynapseClientError, ResearchProject>(\n    (researchProject: ResearchProject) =>\n      SynapseClient.updateResearchProject(researchProject, accessToken!),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate the research project query\n        await queryClient.invalidateQueries(\n          keyFactory.getAccessRequirementResearchProjectQueryKey(\n            data.accessRequirementId,\n          ),\n        )\n        if (options?.onSuccess) {\n          return options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetDataAccessRequestForUpdate(\n  accessRequirementId: string,\n  options?: UseQueryOptions<Request | Renewal, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<Request | Renewal, SynapseClientError>(\n    keyFactory.getDataAccessRequestForUpdateQueryKey(accessRequirementId),\n    () =>\n      SynapseClient.getDataAccessRequestForUpdate(\n        accessRequirementId,\n        accessToken!,\n      ),\n    options,\n  )\n}\n\nexport function useUpdateDataAccessRequest(\n  options?: UseMutationOptions<\n    Request | Renewal,\n    SynapseClientError,\n    Request | Renewal\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<Request | Renewal, SynapseClientError, Request | Renewal>(\n    (requestInterface: Request | Renewal) =>\n      SynapseClient.updateDataAccessRequest(requestInterface, accessToken!),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate the data access request query\n        await queryClient.invalidateQueries(\n          keyFactory.getDataAccessRequestForUpdateQueryKey(\n            data.accessRequirementId,\n          ),\n        )\n        if (options?.onSuccess) {\n          return options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useCreateAccessApproval(\n  options?: UseMutationOptions<\n    AccessApproval,\n    SynapseClientError,\n    AccessApproval\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<AccessApproval, SynapseClientError, AccessApproval>(\n    request => SynapseClient.createAccessApproval(accessToken, request),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate query for AR status\n        await queryClient.invalidateQueries(\n          keyFactory.getAccessRequirementStatusQueryKey(\n            String(variables.requirementId),\n          ),\n        )\n        if (options?.onSuccess) {\n          return options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useCancelDataAccessRequest(\n  options?: UseMutationOptions<\n    ACTSubmissionStatus,\n    SynapseClientError,\n    { submissionId: string; accessRequirementId: string }\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<\n    ACTSubmissionStatus,\n    SynapseClientError,\n    { submissionId: string; accessRequirementId: string }\n  >(\n    request =>\n      SynapseClient.cancelDataAccessRequest(request.submissionId, accessToken!),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate query for AR status\n        await queryClient.invalidateQueries(\n          keyFactory.getAccessRequirementStatusQueryKey(\n            String(variables.accessRequirementId),\n          ),\n        )\n        if (options?.onSuccess) {\n          return options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n"],"names":["useGetAccessRequirements","accessRequirementId","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient.getAccessRequirementById","useGetAccessRequirementWikiPageKey","SynapseClient.getWikiPageKeyForAccessRequirement","useGetAccessRequirementACL","SynapseClient.getAccessRequirementAcl","useSearchAccessRequirementsInfinite","params","useInfiniteQuery","context","SynapseClient.searchAccessRequirements","page","useGetRestrictionInformation","request","SynapseClient.getRestrictionInformation","useCreateLockAccessRequirement","queryClient","useQueryClient","useMutation","entityId","SynapseClient.createLockAccessRequirement","data","variables","ctx"],"mappings":"mNA+BgB,SAAAA,EACdC,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAC/C,OAAAC,EACLF,EAAW,6BAA6B,OAAOH,CAAmB,CAAC,EACnE,IACEM,EACEJ,EACAF,CACF,EACFC,CAAA,CAEJ,CAcgB,SAAAM,EACdP,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAC/C,OAAAC,EACLF,EAAW,gCAAgCH,CAAmB,EAC9D,IACEQ,EACEN,EACAF,CACF,EACFC,CAAA,CAEJ,CAEgB,SAAAQ,EACdT,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAC,EACLF,EAAW,gCAAgCH,CAAmB,EAC9D,IACEU,EAAsCR,EAAaF,CAAmB,EACxEC,CAAA,CAEJ,CAEgB,SAAAU,EACdC,EACAX,EAIA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAC/C,OAAAS,EACLV,EAAW,iCAAiCS,CAAM,EAClD,MAAME,GACG,MAAMC,EAAuCb,EAAa,CAC/D,GAAGU,EACH,cAAeE,EAAQ,SAAA,CACxB,EAEH,CACE,GAAGb,EACH,oBAA0Be,EAAK,aACjC,CAAA,CAEJ,CAEgB,SAAAC,EACdC,EACAjB,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAC,EACLF,EAAW,mDAAmDe,CAAO,EACrE,IAAMC,EAAwCD,EAAShB,CAAW,EAClED,CAAA,CAEJ,CAEO,SAASmB,EACdnB,EACA,CACM,KAAA,CAAE,YAAAC,GAAgBE,IAClBiB,EAAcC,IACd,CAAE,WAAAnB,GAAeC,IAEvB,OAAOmB,EAA2D,CAChE,GAAGtB,EACH,WAAauB,GACXC,EAA0CD,EAAUtB,CAAW,EACjE,YAAa,CAAC,6BAA6B,EAC3C,UAAW,MAAOwB,EAAMC,EAAWC,IAAQ,CAOzC,GALA,MAAMP,EAAY,kBAChBlB,EAAW,6BAA6B,CAAA,EAG1C,MAAMkB,EAAY,kBAAkBlB,EAAW,yBAA0B,CAAA,EACrEF,GAAA,MAAAA,EAAS,UACX,OAAOA,EAAQ,UAAUyB,EAAMC,EAAWC,CAAG,CAEjD,CAAA,CACD,CACH"}