{"version":3,"file":"DownloadCartPage.stories-3428ff76.js","sources":["../../src/lib/containers/download_list_v2/DirectProgrammaticDownload.tsx","../../src/lib/containers/download_list_v2/DownloadListTable.tsx","../../src/lib/containers/download_list_v2/AvailableForDownloadTable.tsx","../../src/lib/containers/download_list_v2/DownloadDetails.tsx","../../src/lib/containers/download_list_v2/DownloadListStats.tsx","../../src/lib/containers/download_list_v2/DownloadListActionsRequired.tsx","../../src/lib/containers/download_list_v2/CreatePackageV2.tsx","../../src/lib/containers/download_list_v2/DownloadCartPage.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { Tooltip } from '@mui/material'\nimport IconSvg from '../IconSvg'\nimport { ProgrammaticInstructionsModal } from '../ProgrammaticInstructionsModal'\nimport { TOOLTIP_DELAY_SHOW } from '../table/SynapseTableConstants'\n\ntype DirectProgrammaticDownloadProps = {\n  entityId: string\n  version?: number\n}\n\nfunction DirectProgrammaticDownload({\n  entityId,\n  version,\n}: DirectProgrammaticDownloadProps) {\n  const [isShowingModal, setIsShowingModal] = useState<boolean>(false)\n\n  const rCode = `library(synapser)\nsynLogin('username','password')\n\n# Obtain a pointer and download the data\n${entityId} <- synGet(entity='${entityId}'${\n    version ? `, version=${version}` : ''\n  } ) `\n\n  const pythonCode = `import synapseclient\n\nsyn = synapseclient.Synapse()\nsyn.login('synapse_username','password')\n\n# Obtain a pointer and download the data\n${entityId} = syn.get(entity='${entityId}'${\n    version ? `, version=${version}` : ''\n  } )\n\n# Get the path to the local copy of the data file\nfilepath = ${entityId}.path`\n\n  const cliCode = `synapse get ${entityId} ${\n    version ? `--version ${version}` : ''\n  }`\n\n  return (\n    <>\n      <Tooltip\n        title=\"Programmatic download options\"\n        enterNextDelay={TOOLTIP_DELAY_SHOW}\n        placement=\"left\"\n      >\n        <span>\n          <button\n            className={'btn-download-icon'}\n            onClick={() => setIsShowingModal(true)}\n          >\n            <IconSvg icon=\"code\" />\n          </button>\n        </span>\n      </Tooltip>\n      {isShowingModal && (\n        <ProgrammaticInstructionsModal\n          show={true}\n          onClose={() => setIsShowingModal(false)}\n          title=\"Download Programmatically\"\n          cliCode={cliCode}\n          rCode={rCode}\n          pythonCode={pythonCode}\n        />\n      )}\n    </>\n  )\n}\n\nexport default DirectProgrammaticDownload\n","import React, { useState, useEffect } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { DownloadListItemResult } from '../../utils/synapseTypes/DownloadListV2/DownloadListItemResult'\nimport { Dropdown, Table } from 'react-bootstrap'\nimport { calculateFriendlyFileSize } from '../../utils/functions/calculateFriendlyFileSize'\nimport { useGetAvailableFilesToDownloadInfinite } from '../../utils/hooks/SynapseAPI/download/useDownloadList'\nimport { useInView } from 'react-intersection-observer'\nimport {\n  AvailableFilter,\n  Sort,\n  SortField,\n} from '../../utils/synapseTypes/DownloadListV2/QueryRequestDetails'\nimport { DownloadListItem } from '../../utils/synapseTypes/DownloadListV2/DownloadListItem'\nimport { SynapseClient } from '../../utils'\nimport dayjs from 'dayjs'\nimport UserCard from '../UserCard'\nimport SortIcon from '../../assets/icons/Sort'\nimport { Direction, FileHandleAssociateType } from '../../utils/synapseTypes'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport IconSvg from '../IconSvg'\nimport { TOOLTIP_DELAY_SHOW } from '../table/SynapseTableConstants'\nimport { SkeletonTable } from '../../assets/skeletons/SkeletonTable'\nimport DirectDownload from '../DirectDownload'\nimport { displayToast } from '../ToastMessage'\nimport { FilesStatisticsResponse } from '../../utils/synapseTypes/DownloadListV2/QueryResponseDetails'\nimport DirectProgrammaticDownload from './DirectProgrammaticDownload'\nimport { BlockingLoader } from '../LoadingScreen'\nimport { Tooltip } from '@mui/material'\nimport { InteractiveCopyIdsIcon } from '../InteractiveCopyIdsIcon'\nimport localizedFormat from 'dayjs/plugin/localizedFormat'\nexport const TESTING_TRASH_BTN_CLASS = 'TESTING_TRASH_BTN_CLASS'\nexport const TESTING_CLEAR_BTN_CLASS = 'TESTING_CLEAR_BTN_CLASS'\n\ndayjs.extend(localizedFormat)\n\nexport type DownloadListTableProps = {\n  filesStatistics: FilesStatisticsResponse\n  refetchStatistics: () => Promise<any>\n}\n\nexport default function DownloadListTable(props: DownloadListTableProps) {\n  const { filesStatistics, refetchStatistics } = props\n  const { accessToken } = useSynapseContext()\n  const handleError = useErrorHandler()\n  // Load the next page when this ref comes into view.\n  const { ref, inView } = useInView()\n  const [copyingAllSynapseIDs, setCopyingAllSynapseIDs] =\n    useState<boolean>(false)\n  const [sort, setSort] = useState<Sort | undefined>(undefined)\n  const [filter, setFilter] = useState<AvailableFilter | undefined>(undefined)\n  const {\n    data,\n    status,\n    isFetchingNextPage,\n    isLoading,\n    hasNextPage,\n    fetchNextPage,\n    isError,\n    error: newError,\n    refetch,\n  } = useGetAvailableFilesToDownloadInfinite(sort, filter)\n\n  //SWC-5858: Update the Download List files table when the statistics change\n  useEffect(() => {\n    if (refetch) {\n      refetch()\n    }\n  }, [filesStatistics, refetch])\n\n  useEffect(() => {\n    if (isError && newError) {\n      handleError(newError)\n    }\n  }, [isError, newError, handleError])\n\n  const allRows = data?.pages.flatMap(page => page.page) ?? []\n\n  useEffect(() => {\n    const copyAllSynapseIDs = () => {\n      const synIDs = allRows\n        .map((item: DownloadListItemResult) => {\n          return `${item.fileEntityId}.${item.versionNumber}`\n        })\n        .join('\\n')\n      // https://caniuse.com/mdn-api_clipboard_writetext\n      navigator.clipboard.writeText(synIDs).then(() => {\n        displayToast('Successfully copied to clipboard')\n      })\n      setCopyingAllSynapseIDs(false)\n    }\n\n    if (\n      status === 'success' &&\n      !isFetchingNextPage &&\n      hasNextPage &&\n      fetchNextPage &&\n      (inView || copyingAllSynapseIDs)\n    ) {\n      fetchNextPage()\n    } else if (!hasNextPage && copyingAllSynapseIDs) {\n      // We have all the data in allRows. Put it together and copy to the clipboard\n      copyAllSynapseIDs()\n    }\n  }, [\n    status,\n    isFetchingNextPage,\n    hasNextPage,\n    fetchNextPage,\n    inView,\n    copyingAllSynapseIDs,\n    allRows,\n  ])\n\n  const getFilterDisplayText = (f: AvailableFilter) => {\n    if (!f) {\n      return 'All'\n    } else if (f == 'eligibleForPackaging') {\n      return 'Only Eligible'\n    } else {\n      return 'Only Ineligible'\n    }\n  }\n  const removeItem = async (\n    item: DownloadListItem,\n    fileName: string,\n    title: string,\n  ) => {\n    try {\n      await SynapseClient.removeItemFromDownloadListV2(item, accessToken)\n      displayToast(`${fileName} has been removed from your list.`, 'success', {\n        title,\n      })\n      // refetching the statistics will update the download list, but refresh the list immediately since this will take time\n      refetch()\n      refetchStatistics()\n    } catch (err) {\n      console.error(err)\n    }\n  }\n  const InteractiveSortIcon = ({\n    columnSortBy,\n  }: {\n    columnSortBy: SortField\n  }) => {\n    return (\n      <span>\n        {setSort && (\n          <SortIcon\n            role=\"button\"\n            style={{ height: '20px' }}\n            active={sort?.field === columnSortBy}\n            direction={\n              sort?.field === columnSortBy\n                ? sort.direction === 'DESC'\n                  ? Direction.DESC\n                  : Direction.ASC\n                : Direction.DESC\n            }\n            onClick={() => {\n              const direction =\n                columnSortBy === sort?.field\n                  ? sort.direction === 'ASC'\n                    ? 'DESC'\n                    : 'ASC'\n                  : 'DESC'\n              setSort({\n                field: columnSortBy,\n                direction,\n              })\n            }}\n          />\n        )}\n      </span>\n    )\n  }\n\n  const availableFiltersArray: AvailableFilter[] = [\n    undefined,\n    'eligibleForPackaging',\n    'ineligibleForPackaging',\n  ]\n  return (\n    <>\n      <BlockingLoader show={copyingAllSynapseIDs} />\n      <div className=\"filterFilesContainer\">\n        <span className=\"filterFilesByText\">Filter Files By</span>\n        <Dropdown>\n          <Dropdown.Toggle variant=\"gray-primary-500\" id=\"dropdown-basic\">\n            {getFilterDisplayText(filter)}\n          </Dropdown.Toggle>\n          <Dropdown.Menu role=\"menu\">\n            {availableFiltersArray.map(availableFilter => (\n              <Dropdown.Item\n                role=\"menuitem\"\n                key={`${getFilterDisplayText(availableFilter)}-filter-option`}\n                onClick={() => {\n                  setFilter(availableFilter)\n                }}\n              >\n                {getFilterDisplayText(availableFilter)}\n              </Dropdown.Item>\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n      {allRows.length > 0 && (\n        <>\n          <Table\n            striped={true}\n            responsive={true}\n            className=\"DownloadListTableV2\"\n          >\n            <thead>\n              <tr>\n                <th>{/* Eligible/Ineligible icon */}</th>\n                <th>\n                  Name\n                  <InteractiveSortIcon columnSortBy=\"fileName\" />\n                </th>\n                <th>\n                  Size\n                  <InteractiveSortIcon columnSortBy=\"fileSize\" />\n                </th>\n                <th>\n                  SynID\n                  <InteractiveCopyIdsIcon\n                    onCopy={() => {\n                      // trigger loading all pages of the download list table, and then copy all IDs to the clipboard\n                      setCopyingAllSynapseIDs(true)\n                    }}\n                  />\n                  <InteractiveSortIcon columnSortBy=\"synId\" />\n                </th>\n                <th>\n                  Project\n                  <InteractiveSortIcon columnSortBy=\"projectName\" />\n                </th>\n                <th>\n                  Added On\n                  <InteractiveSortIcon columnSortBy=\"addedOn\" />\n                </th>\n                <th>\n                  Created By\n                  <InteractiveSortIcon columnSortBy=\"createdBy\" />\n                </th>\n                <th>\n                  Created On\n                  <InteractiveSortIcon columnSortBy=\"createdOn\" />\n                </th>\n                <th className=\"stickyColumn\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {allRows.map((item: DownloadListItemResult) => {\n                if (item) {\n                  const addedOn = dayjs(item.addedOn).format('L LT')\n                  const createdOn = dayjs(item.createdOn).format('L LT')\n                  return (\n                    <tr key={item.fileEntityId}>\n                      <td\n                        className={\n                          item.isEligibleForPackaging\n                            ? ''\n                            : 'ineligibleForPackagingTd'\n                        }\n                      >\n                        {item.isEligibleForPackaging && (\n                          <Tooltip\n                            title=\"Eligible for packaging\"\n                            enterNextDelay={TOOLTIP_DELAY_SHOW}\n                            placement=\"right\"\n                          >\n                            <span className=\"eligibileIcon\">\n                              <IconSvg icon=\"packagableFile\" />\n                            </span>\n                          </Tooltip>\n                        )}\n                        {!item.isEligibleForPackaging && (\n                          <Tooltip\n                            title=\"This file is ineligible for Web packaging because it is >100MB, or it is an external link, or it is not stored on Synapse native storage\"\n                            enterNextDelay={TOOLTIP_DELAY_SHOW}\n                            placement=\"right\"\n                          >\n                            <span className=\"ineligibileIcon\">\n                              <IconSvg icon=\"warningOutlined\" />\n                            </span>\n                          </Tooltip>\n                        )}\n                      </td>\n                      <td>\n                        <a\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${item.fileEntityId}.${item.versionNumber}`}\n                        >\n                          {item.fileName}\n                        </a>\n                      </td>\n                      <td>\n                        {item.fileSizeBytes &&\n                          calculateFriendlyFileSize(item.fileSizeBytes)}\n                      </td>\n                      <td>{`${item.fileEntityId}.${item.versionNumber}`}</td>\n                      <td>{item.projectName}</td>\n                      <td>{addedOn}</td>\n                      <td>\n                        <UserCard\n                          size={'SMALL USER CARD'}\n                          ownerId={item.createdBy}\n                        />\n                      </td>\n                      <td>{createdOn}</td>\n                      <td className=\"stickyColumn\">\n                        <div className=\"actionsContainer\">\n                          <span className=\"downloadItem\">\n                            <DirectDownload\n                              associatedObjectId={item.fileEntityId}\n                              associatedObjectType={\n                                FileHandleAssociateType.FileEntity\n                              }\n                              entityVersionNumber={item.versionNumber.toString()}\n                              displayFileName={false}\n                              onClickCallback={(isExternalLink: boolean) => {\n                                // SWC-5944: remove the item from the download list, unless it's an external link.\n                                if (!isExternalLink) {\n                                  removeItem(\n                                    {\n                                      fileEntityId: item.fileEntityId,\n                                      versionNumber: item.versionNumber,\n                                    },\n                                    item.fileName,\n                                    'File Downloaded',\n                                  )\n                                }\n                              }}\n                            />\n                          </span>\n                          <span className=\"programmaticAccessItem\">\n                            <DirectProgrammaticDownload\n                              entityId={item.fileEntityId}\n                              version={item.versionNumber}\n                            />\n                          </span>\n                          <Tooltip\n                            title=\"Remove from Download List\"\n                            placement=\"left\"\n                            enterNextDelay={TOOLTIP_DELAY_SHOW}\n                          >\n                            <span className=\"removeItem\">\n                              <button\n                                className={TESTING_TRASH_BTN_CLASS}\n                                onClick={() => {\n                                  removeItem(\n                                    {\n                                      fileEntityId: item.fileEntityId,\n                                      versionNumber: item.versionNumber,\n                                    },\n                                    item.fileName,\n                                    'File Removed',\n                                  )\n                                }}\n                              >\n                                <IconSvg icon=\"removeCircle\" />\n                              </button>\n                            </span>\n                          </Tooltip>\n                        </div>\n                      </td>\n                    </tr>\n                  )\n                } else return false\n              })}\n              {/* To trigger loading the next page */}\n              <tr ref={ref} />\n            </tbody>\n          </Table>\n        </>\n      )}\n      {isLoading && <SkeletonTable numCols={5} numRows={3} />}\n    </>\n  )\n}\n","import React from 'react'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { DownloadListTableProps } from '../download_list_v2/DownloadListTable'\nimport { SynapseErrorBoundary } from '../error/ErrorBanner'\nimport DownloadListTable from './DownloadListTable'\n\n/**\n * Table of the files added to the Download Cart that are currently available for download.\n * Note that this creates it's own QueryClient, so it's cache does not persist if you remount.\n */\nexport default function AvailableForDownloadTable(\n  props: DownloadListTableProps,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: 50 * 1000, // 50s\n        retry: false, // SynapseClient knows which queries to retry\n      },\n    },\n  })\n  if (!accessToken) {\n    return <></>\n  }\n  return (\n    <QueryClientProvider client={queryClient}>\n      <SynapseErrorBoundary>\n        {props.filesStatistics && <DownloadListTable {...props} />}\n      </SynapseErrorBoundary>\n    </QueryClientProvider>\n  )\n}\n","import React from 'react'\nimport { calculateFriendlyFileSize } from '../../utils/functions/calculateFriendlyFileSize'\nimport { TOOLTIP_DELAY_SHOW } from '../table/SynapseTableConstants'\nimport IconSvg from '../IconSvg'\nimport { Tooltip } from '@mui/material'\n\nexport type DownloadDetailsProps = {\n  numFiles: number\n  numPackagableFiles: number\n  numBytes: number\n}\n\nexport default function DownloadDetails(props: DownloadDetailsProps) {\n  const { numFiles, numPackagableFiles, numBytes } = props\n  const numIneligibleFiles = numFiles - numPackagableFiles\n  const isInactive = numFiles === 0\n  const iconClassName = isInactive ? 'SRC-inactive' : 'SRC-primary-text-color'\n  return (\n    <span className=\"DownloadDetailsV2\">\n      <span className=\"item\">{!isInactive && <> {numFiles} Files </>}</span>\n      <span className=\"item\">\n        <span className={iconClassName}>\n          <IconSvg icon=\"packagableFile\" />\n        </span>\n        {!isInactive && (\n          <> {numPackagableFiles} Files eligible for packaging </>\n        )}\n      </span>\n      {numBytes > 0 && (\n        <Tooltip\n          title=\"This is the total size of all files in the Download Cart that are available to download.\"\n          enterNextDelay={TOOLTIP_DELAY_SHOW}\n          placement=\"top\"\n        >\n          <span className=\"item\">{calculateFriendlyFileSize(numBytes)}</span>\n        </Tooltip>\n      )}\n      {numIneligibleFiles > 0 && (\n        <span className=\"item\">\n          <span className={`SRC-warning-color`}>\n            <IconSvg icon=\"warningOutlined\" />\n          </span>\n          {!isInactive && (\n            <> {numIneligibleFiles} Files ineligible for packaging </>\n          )}\n        </span>\n      )}\n    </span>\n  )\n}\n","import React from 'react'\nimport DownloadDetails from './DownloadDetails'\n\nexport type DownloadListStatsProps = {\n  numFiles: number\n  numPackagableFiles: number\n  numBytes: number\n}\n\nexport default function DownloadListStats(props: DownloadListStatsProps) {\n  const { numFiles, numPackagableFiles, numBytes } = props\n\n  return (\n    <div>\n      <DownloadDetails\n        numFiles={numFiles}\n        numPackagableFiles={numPackagableFiles}\n        numBytes={numBytes}\n      ></DownloadDetails>\n      {\n        // also have access to fileStats.numberOfFilesRequiringAction\n        // and fileStats.totalNumberOfFiles\n      }\n    </div>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { useGetDownloadListActionsRequiredInfinite } from '../../utils/hooks/SynapseAPI/download/useDownloadList'\nimport { useInView } from 'react-intersection-observer'\nimport {\n  ActionRequiredCount,\n  MeetAccessRequirement,\n  RequestDownload,\n} from '../../utils/synapseTypes/DownloadListV2/ActionRequiredCount'\nimport {\n  LoadingAccessRequirementCard,\n  MeetAccessRequirementCard,\n} from './MeetAccessRequirementCard'\nimport { RequestDownloadCard } from './RequestDownloadCard'\n\nexport type DownloadListActionsRequiredProps = {\n  /** Invoked when a user clicks \"View Sharing Settings\" for a set of files that require the Download permission*/\n  onViewSharingSettingsClicked: (benefactorId: string) => void\n}\n\nexport const DownloadListActionsRequired: React.FunctionComponent<\n  DownloadListActionsRequiredProps\n> = props => {\n  const handleError = useErrorHandler()\n  // Load the next page when this ref comes into view.\n  const { ref, inView } = useInView()\n  const {\n    data,\n    status,\n    isLoading,\n    hasNextPage,\n    isFetchingNextPage,\n    fetchNextPage,\n    isError,\n    error: newError,\n  } = useGetDownloadListActionsRequiredInfinite()\n\n  useEffect(() => {\n    if (isError && newError) {\n      handleError(newError)\n    }\n  }, [isError, newError, handleError])\n\n  useEffect(() => {\n    if (\n      status === 'success' &&\n      !isFetchingNextPage &&\n      hasNextPage &&\n      fetchNextPage &&\n      inView\n    ) {\n      fetchNextPage()\n    }\n  }, [status, hasNextPage, isFetchingNextPage, fetchNextPage, inView])\n\n  const allRows = data?.pages.flatMap(page => page.page) ?? []\n\n  /**\n   * Returns rendering for the ActionRequiredCount.\n   *\n   * @param {ActionRequiredCount} actionRequiredCount actionRequiredCount being rendered\n   */\n  const renderActionRequired = (actionRequiredCount: ActionRequiredCount) => {\n    switch (actionRequiredCount.action.concreteType) {\n      case 'org.sagebionetworks.repo.model.download.MeetAccessRequirement': {\n        const meetARAction: MeetAccessRequirement =\n          actionRequiredCount.action as MeetAccessRequirement\n        return (\n          <MeetAccessRequirementCard\n            key={meetARAction.accessRequirementId}\n            accessRequirementId={meetARAction.accessRequirementId}\n            count={actionRequiredCount.count}\n          />\n        )\n      }\n      case 'org.sagebionetworks.repo.model.download.RequestDownload': {\n        const requestDownloadAction: RequestDownload =\n          actionRequiredCount.action as RequestDownload\n        return (\n          <RequestDownloadCard\n            key={requestDownloadAction.benefactorId}\n            entityId={`syn${requestDownloadAction.benefactorId}`}\n            count={actionRequiredCount.count}\n            onViewSharingSettingsClicked={props.onViewSharingSettingsClicked}\n          />\n        )\n      }\n      // case not supported yet\n      default:\n        return undefined\n    }\n  }\n  return (\n    <>\n      {allRows.length > 0 && (\n        <div className=\"DownloadListActionsRequired\">\n          {allRows.map((item: ActionRequiredCount) => {\n            if (item) {\n              return renderActionRequired(item)\n            } else return false\n          })}\n          {/* To trigger loading the next page */}\n          <div ref={ref} />\n        </div>\n      )}\n      {isLoading && <LoadingAccessRequirementCard />}\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport {\n  createPackageFromDownloadListV2,\n  getFileHandleByIdURL,\n} from '../../utils/SynapseClient'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { DownloadListPackageResponse } from '../../utils/synapseTypes/DownloadListV2/DownloadListPackageResponse'\nimport FullWidthAlert from '../FullWidthAlert'\n\nexport type CreatePackageV2Props = {\n  onPackageCreation: () => void\n}\n\ntype AlertConfig = {\n  message: string\n  variant?: string\n}\n\nexport const TEMPLATE_ERROR_FILE_NAME =\n  'Please provide a package file name and try again.'\n\nexport const CreatePackageV2 = (props: CreatePackageV2Props) => {\n  const { accessToken } = useSynapseContext()\n  const [isLoading, setIsLoading] = useState(false)\n  const [fileName, setZipFileName] = useState('')\n  const [alert, setAlert] = useState<AlertConfig>()\n  const [bulkFileDownloadResponse, setBulkFileDownloadResponse] = useState<\n    DownloadListPackageResponse | undefined\n  >(undefined)\n  const { onPackageCreation } = props\n  const createPackageHandler = async (event: React.SyntheticEvent) => {\n    event.preventDefault()\n    if (!fileName) {\n      setAlert({\n        message: TEMPLATE_ERROR_FILE_NAME,\n        variant: 'danger',\n      })\n      return\n    }\n    setIsLoading(true)\n    try {\n      const fileNameWithZipExtension = `${fileName}.zip`\n      const currentBulkFileDownloadResponse =\n        await createPackageFromDownloadListV2(\n          fileNameWithZipExtension,\n          accessToken,\n        )\n\n      setBulkFileDownloadResponse(currentBulkFileDownloadResponse)\n      const { resultFileHandleId } = currentBulkFileDownloadResponse\n      try {\n        //reset\n        window.location.href = await getFileHandleByIdURL(\n          resultFileHandleId,\n          accessToken,\n        )\n        setZipFileName('')\n        setBulkFileDownloadResponse(undefined)\n        onPackageCreation()\n      } catch (err) {\n        console.error('Err on getFileHandleByIdURL = ', err)\n      }\n    } catch (err) {\n      setAlert({\n        message: err.reason as string,\n        variant: 'danger',\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const onChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    setZipFileName(event.currentTarget.value)\n  }\n\n  return (\n    <>\n      <div className=\"CreatePackageV2 bootstrap-4-backport\">\n        <div className=\"createPackageStep\">\n          <span className=\"createPackageTitle\">\n            Create your Download Package\n          </span>\n          <span className=\"createPackageDescription\">\n            Name your download package and select Download Package to get\n            started.\n          </span>\n          {!isLoading && !bulkFileDownloadResponse && (\n            <div className=\"inputAndCreateButton\">\n              <input\n                onChange={onChange}\n                type=\"text\"\n                placeholder=\"PackageName\"\n                style={{ width: '233px' }}\n              ></input>\n              <span className=\"zipUI\">.zip</span>\n              <Button\n                variant={fileName ? 'primary' : 'dark'}\n                onClick={e => {\n                  createPackageHandler(e)\n                }}\n                type=\"button\"\n                style={{ marginLeft: 20 }}\n                disabled={fileName ? false : true}\n              >\n                Download Package\n              </Button>\n            </div>\n          )}\n          {isLoading && (\n            <div className=\"creatingPackage\">\n              <span className=\"spinner\" />\n              <span style={{ marginLeft: 5 }}>Creating package...</span>\n            </div>\n          )}\n        </div>\n      </div>\n      <FullWidthAlert\n        show={!!alert}\n        variant={alert?.variant ? alert.variant : 'success'}\n        description={alert?.message}\n        autoCloseAfterDelayInSeconds={10}\n        onClose={() => {\n          setAlert(undefined)\n        }}\n      />\n    </>\n  )\n}\n","import * as React from 'react'\nimport { useState, useEffect } from 'react'\nimport AvailableForDownloadTable from './AvailableForDownloadTable'\nimport DownloadListStats from './DownloadListStats'\nimport { useGetDownloadListStatistics } from '../../utils/hooks/SynapseAPI/download/useDownloadList'\nimport {\n  DownloadListActionsRequired,\n  DownloadListActionsRequiredProps,\n} from './DownloadListActionsRequired'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { SynapseClient } from '../../utils'\nimport IconSvg from '../IconSvg'\nimport { CreatePackageV2 } from './CreatePackageV2'\nimport FullWidthAlert from '../FullWidthAlert'\nimport { ErrorBanner } from '../error/ErrorBanner'\nimport { Typography } from '@mui/material'\nimport { HelpPopover } from '../HelpPopover'\nimport { Tooltip } from '@mui/material'\nimport { Button } from 'react-bootstrap'\nimport { ProgrammaticInstructionsModal } from '../ProgrammaticInstructionsModal'\n\nconst pythonDownloadCode = `import synapseclient\nsyn = synapseclient.login()\ndl_list_file_entities = syn.get_download_list()`\n\nconst cliDownloadCode = `synapse get-download-list`\n\n/**\n * Show the Download Cart page.\n */\nexport const DownloadCartPage: React.FunctionComponent<\n  DownloadListActionsRequiredProps\n> = props => {\n  const { accessToken } = useSynapseContext()\n  const [selectedTabIndex, setSelectedTabIndex] = useState<number>(0)\n  const [isShowingCreatePackageUI, setIsShowingCreatePackageUI] =\n    useState<boolean>(false)\n  const [isShowingModal, setIsShowingModal] = useState<boolean>(false)\n  const [isShowingDownloadSuccessAlert, setIsShowingDownloadSuccessAlert] =\n    useState(false)\n  const [error, setError] = useState<Error>()\n  const {\n    data,\n    isLoading,\n    isError,\n    error: newError,\n    refetch,\n  } = useGetDownloadListStatistics()\n  useEffect(() => {\n    if (isError && newError) {\n      setError(newError)\n    }\n  }, [isError, newError])\n\n  // SWC-5874: When arriving at the download cart when there are no ARs, the user should start in the Download list\n  useEffect(() => {\n    if (data && data.numberOfFilesRequiringAction == 0) {\n      setSelectedTabIndex(1)\n    }\n  }, [data])\n\n  if (error) {\n    return <ErrorBanner error={error} />\n  }\n  const clearDownloadList = async () => {\n    await SynapseClient.clearDownloadListV2(accessToken)\n    refetch()\n  }\n  return (\n    <div className=\"DownloadCartPage bootstrap-4-backport\">\n      <div>\n        <div className=\"pageHeader\">\n          <div className=\"grid\">\n            <h3 className=\"pageHeaderTitle\">Your Download Cart</h3>\n            <Tooltip\n              title=\"Immediately removes all items from your download list\"\n              enterNextDelay={300}\n              placement=\"right\"\n            >\n              <a\n                className=\"clearDownloadListLink\"\n                onClick={() => {\n                  clearDownloadList()\n                }}\n              >\n                <span>\n                  <IconSvg\n                    icon=\"delete\"\n                    sx={{\n                      paddingRight: '0.2rem',\n                    }}\n                  />\n                </span>\n                Clear Your Download Cart\n              </a>\n            </Tooltip>\n          </div>\n          <Typography className=\"description\" variant=\"body1\">\n            You may find your added files in the tabs below. Any files which\n            require actions before download can be found in the Access Actions\n            Required tab, while any that can be downloaded now can be found in\n            the Download List tab.\n          </Typography>\n        </div>\n      </div>\n      <div className=\"tabs-container\">\n        <div className=\"container\">\n          <ul className=\"nav nav-tabs\">\n            <li\n              className={`nav-item ${selectedTabIndex == 0 ? 'active' : ''}`}\n              aria-selected={selectedTabIndex == 0}\n            >\n              <button onClick={() => setSelectedTabIndex(0)}>\n                Access Actions Required\n                {!isError && !isLoading && data && (\n                  <span className=\"fileCount\">\n                    {data.totalNumberOfFiles -\n                      data.numberOfFilesAvailableForDownload}\n                  </span>\n                )}\n              </button>\n            </li>\n            <li\n              className={`nav-item ${selectedTabIndex == 1 ? 'active' : ''}`}\n              aria-selected={selectedTabIndex == 1}\n            >\n              <button onClick={() => setSelectedTabIndex(1)}>\n                Download List\n                {!isError && !isLoading && data && (\n                  <span className=\"fileCount\">\n                    {data.numberOfFilesAvailableForDownload}\n                  </span>\n                )}\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n      {selectedTabIndex == 0 && !isError && !isLoading && data && (\n        <div>\n          {data.numberOfFilesRequiringAction > 0 && (\n            <div>\n              <div className=\"actionsRequiredContainer container\">\n                <DownloadListActionsRequired {...props} />\n              </div>\n            </div>\n          )}\n          {data.numberOfFilesRequiringAction === 0 && (\n            <div className=\"placeholder\">\n              <div>No actions are currently required.</div>\n            </div>\n          )}\n        </div>\n      )}\n      {selectedTabIndex == 1 && !isError && !isLoading && data && (\n        <div>\n          {data.numberOfFilesAvailableForDownload > 0 && (\n            <div className=\"DownloadListTabContent\">\n              <div className=\"subSectionOverviewContainer\">\n                <div className=\"subSectionOverview container\">\n                  <div>\n                    <div className=\"headlineWithHelp\">\n                      <Typography variant={'headline3'}>\n                        <IconSvg icon=\"packagableFile\" /> Web Download (.ZIP\n                        Packages)\n                      </Typography>\n                      <HelpPopover\n                        markdownText=\"This will allow you to create a .zip file that contains eligible files. Files greater that 100 MB, external links, or files which are not stored on Synapse native storage are ineligible. In most cases, ineligible files can be downloaded individually. External links will require navigation to an external site, which may require a separate login process.\"\n                        helpUrl=\"https://help.synapse.org/docs/Downloading-Data-From-the-Synapse-UI.2004254837.html\"\n                      />\n                    </div>\n                    <Typography variant={'body1'}>\n                      <ul>\n                        <li>\n                          Eligible files will be added to .ZIP packages of up to\n                          1GB in size\n                        </li>\n                        <li>\n                          If you have more than 1GB, you can create multiple\n                          packages\n                        </li>\n                        <li>\n                          Will only include files which are hosted on Synapse\n                          native storage\n                        </li>\n                        <li>\n                          Packages include a CSV manifest that contains file\n                          annotations and other information for each file\n                        </li>\n                      </ul>\n                    </Typography>\n                    <span>\n                      {data.numberOfFilesAvailableForDownloadAndEligibleForPackaging >\n                        0 && (\n                        <Button\n                          variant=\"sds-primary\"\n                          onClick={() => {\n                            setIsShowingCreatePackageUI(true)\n                          }}\n                        >\n                          <IconSvg icon=\"download\" />\n                          Download As .Zip Packages\n                        </Button>\n                      )}\n                      {data.numberOfFilesAvailableForDownloadAndEligibleForPackaging ==\n                        0 && (\n                        <Tooltip\n                          title=\"You cannot create a .zip package because there are no eligible files.\"\n                          enterNextDelay={300}\n                          placement=\"top\"\n                        >\n                          <Button variant=\"sds-primary\" disabled>\n                            <IconSvg icon=\"download\" />\n                            &nbsp;Download As .Zip Packages\n                          </Button>\n                        </Tooltip>\n                      )}\n                    </span>\n                  </div>\n                  <div>\n                    <div className=\"headlineWithHelp\">\n                      <Typography variant={'headline3'}>\n                        <IconSvg icon=\"code\" /> Programmatic Download\n                      </Typography>\n                      <HelpPopover\n                        markdownText=\"This will provide syntax which you can enter into your programmatic client. It is suitable for large files (>100 MB), for packages > 1GB, and for files which aren’t stored on Synapse native storage (e.g. in a special AWS S3 or Google Cloud bucket).  External links will require navigation to an external site, which may require a separate login process.\"\n                        helpUrl=\"https://help.synapse.org/docs/Downloading-Data-Programmatically.2003796248.html\"\n                      />\n                    </div>\n                    <Typography variant={'body1'}>\n                      <ul>\n                        <li>\n                          Requires installation of a programmatic client (R,\n                          Python, CLI)\n                        </li>\n                        <li>\n                          No limit to the file size or the size of the package\n                          that can be downloaded\n                        </li>\n                        <li>\n                          Will include files which are hosted on and off Synapse\n                          native storage\n                        </li>\n                        <li>\n                          Packages include a CSV manifest that contains file\n                          annotations and other information for each file\n                        </li>\n                      </ul>\n                    </Typography>\n                    <span>\n                      <Button\n                        variant=\"sds-primary\"\n                        onClick={() => {\n                          setIsShowingModal(true)\n                        }}\n                      >\n                        <IconSvg icon=\"code\" />\n                        &nbsp;Create Programmatic Package\n                      </Button>\n                    </span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"availableForDownloadTableContainer container\">\n                {isShowingCreatePackageUI && (\n                  <CreatePackageV2\n                    onPackageCreation={() => {\n                      setIsShowingDownloadSuccessAlert(true)\n                      // we refetch the data because the backend will instantly remove the downloadable files from the download list after a package has been created\n                      refetch()\n                    }}\n                  />\n                )}\n                <DownloadListStats\n                  numBytes={data.sumOfFileSizesAvailableForDownload}\n                  numPackagableFiles={\n                    data.numberOfFilesAvailableForDownloadAndEligibleForPackaging\n                  }\n                  numFiles={data.numberOfFilesAvailableForDownload}\n                />\n                {refetch && (\n                  <AvailableForDownloadTable\n                    filesStatistics={data}\n                    refetchStatistics={refetch}\n                  />\n                )}\n              </div>\n            </div>\n          )}\n          {data.numberOfFilesAvailableForDownload === 0 && (\n            <div className=\"placeholder\">\n              <div>Your Download List is currently empty.</div>\n            </div>\n          )}\n        </div>\n      )}\n      <FullWidthAlert\n        show={isShowingDownloadSuccessAlert}\n        variant=\"success\"\n        title=\"Package Created\"\n        description=\"A package has been created with eligible files. The items contained in this .zip file have been removed from your list. If your package is over 1GB, you will need to create multiple packages.\"\n        autoCloseAfterDelayInSeconds={10}\n        onClose={() => {\n          setIsShowingDownloadSuccessAlert(false)\n        }}\n      />\n      {isShowingModal && (\n        <ProgrammaticInstructionsModal\n          show={true}\n          onClose={() => setIsShowingModal(false)}\n          title=\"Download Programmatically\"\n          pythonCode={pythonDownloadCode}\n          cliCode={cliDownloadCode}\n          // rCode={rDownloadCode}\n        />\n      )}\n    </div>\n  )\n}\n"],"names":["DirectProgrammaticDownload","entityId","version","isShowingModal","setIsShowingModal","useState","rCode","pythonCode","cliCode","jsxs","Fragment","jsx","Tooltip","TOOLTIP_DELAY_SHOW","IconSvg","ProgrammaticInstructionsModal","TESTING_TRASH_BTN_CLASS","dayjs","localizedFormat","DownloadListTable","props","filesStatistics","refetchStatistics","accessToken","useSynapseContext","handleError","useErrorHandler","ref","inView","useInView","copyingAllSynapseIDs","setCopyingAllSynapseIDs","sort","setSort","filter","setFilter","data","status","isFetchingNextPage","isLoading","hasNextPage","fetchNextPage","isError","newError","refetch","useGetAvailableFilesToDownloadInfinite","useEffect","allRows","page","synIDs","item","displayToast","getFilterDisplayText","f","removeItem","fileName","title","SynapseClient.removeItemFromDownloadListV2","err","InteractiveSortIcon","columnSortBy","SortIcon","Direction","direction","availableFiltersArray","BlockingLoader","Dropdown","availableFilter","Table","InteractiveCopyIdsIcon","addedOn","createdOn","PRODUCTION_ENDPOINT_CONFIG","calculateFriendlyFileSize","UserCard","DirectDownload","FileHandleAssociateType","isExternalLink","SkeletonTable","AvailableForDownloadTable","queryClient","QueryClient","QueryClientProvider","SynapseErrorBoundary","DownloadDetails","numFiles","numPackagableFiles","numBytes","numIneligibleFiles","isInactive","DownloadListStats","DownloadListActionsRequired","useGetDownloadListActionsRequiredInfinite","renderActionRequired","actionRequiredCount","meetARAction","MeetAccessRequirementCard","requestDownloadAction","RequestDownloadCard","LoadingAccessRequirementCard","TEMPLATE_ERROR_FILE_NAME","CreatePackageV2","setIsLoading","setZipFileName","alert","setAlert","bulkFileDownloadResponse","setBulkFileDownloadResponse","onPackageCreation","createPackageHandler","event","fileNameWithZipExtension","currentBulkFileDownloadResponse","createPackageFromDownloadListV2","resultFileHandleId","getFileHandleByIdURL","Button","e","FullWidthAlert","pythonDownloadCode","cliDownloadCode","DownloadCartPage","selectedTabIndex","setSelectedTabIndex","isShowingCreatePackageUI","setIsShowingCreatePackageUI","isShowingDownloadSuccessAlert","setIsShowingDownloadSuccessAlert","error","setError","useGetDownloadListStatistics","ErrorBanner","clearDownloadList","SynapseClient.clearDownloadListV2","Typography","HelpPopover"],"mappings":"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"}