{"version":3,"file":"UserCardListRotate-0267ec67.js","sources":["../../src/components/UserCardList/UserCardListRotate.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  getAdditionalFilters,\n  parseEntityIdFromSqlStatement,\n  SQLOperator,\n} from '../../utils/functions/SqlFunctions'\nimport { SynapseConstants } from '../../utils'\nimport SynapseClient from '../../synapse-client'\nimport {\n  FacetColumnRequest,\n  QueryBundleRequest,\n  QueryResultBundle,\n} from '@sage-bionetworks/synapse-types'\nimport { ColumnTypeEnum } from '@sage-bionetworks/synapse-types'\nimport UserCardList from './UserCardList'\nimport { LARGE_USER_CARD, UserCardSize } from '../../utils/SynapseConstants'\nimport LargeButton from '../../components/styled/LargeButton'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { LoadingUserCardMedium } from '../UserCard/UserCardMedium'\nimport { useDeepCompareEffectNoCheck } from 'use-deep-compare-effect'\n\nconst STORED_UID_KEY = 'sage_rotate_uids'\nconst DEFAULT_DISPLAY_COUNT = 3\n\nexport type UserCardListRotateProps = {\n  sql: string\n  count: number\n  useQueryResultUserData?: boolean\n  size?: UserCardSize\n  summaryLink?: string\n  summaryLinkText?: string\n  selectedFacets?: FacetColumnRequest[]\n  sqlOperator?: SQLOperator\n  searchParams?: Record<string, string>\n}\n\nexport const getDisplayIds = (\n  ids: string[] = [],\n  count: number = DEFAULT_DISPLAY_COUNT,\n  storageUidKey: string,\n) => {\n  let storedIds: string[] = []\n  let newIds: string[] = []\n  const storedIdsStr = localStorage.getItem(storageUidKey)\n  if (storedIdsStr != null) {\n    storedIds = JSON.parse(storedIdsStr)\n  }\n  if (!storedIds.length) {\n    // no stuff in storage\n    newIds = ids.slice(0, count)\n    localStorage.setItem(storageUidKey, JSON.stringify(newIds))\n    return newIds\n  } else {\n    // has stuff in storage\n    const filtered = ids.filter(item => !storedIds.includes(item))\n    if (filtered.length >= count) {\n      newIds = filtered.slice(0, count)\n      localStorage.setItem(\n        storageUidKey,\n        JSON.stringify(storedIds.concat(newIds)),\n      )\n      return newIds\n    } else {\n      localStorage.removeItem(storageUidKey)\n      const part = ids.slice(0, count - filtered.length)\n      localStorage.setItem(storageUidKey, JSON.stringify(part))\n      return filtered.concat(part)\n    }\n  }\n}\n\nexport const UserCardListRotate: React.FunctionComponent<\n  UserCardListRotateProps\n> = ({\n  sql,\n  count,\n  useQueryResultUserData = false,\n  size = LARGE_USER_CARD,\n  summaryLink,\n  summaryLinkText,\n  selectedFacets,\n  searchParams,\n  sqlOperator,\n}) => {\n  const { accessToken } = useSynapseContext()\n  const [userIds, setUserIds] = useState<string[]>([])\n  const [queryData, setQueryData] = useState<QueryResultBundle>()\n  const [isLoading, setIsLoading] = useState<boolean>()\n  let mounted = true\n  const storageUidKey = `${STORED_UID_KEY}-${sql}-${JSON.stringify(\n    selectedFacets,\n  )}`\n  useDeepCompareEffectNoCheck(() => {\n    const fetchData = async function () {\n      setIsLoading(true)\n      const entityId = parseEntityIdFromSqlStatement(sql)\n      const additionalFilters = getAdditionalFilters(\n        entityId,\n        searchParams,\n        sqlOperator,\n      )\n      const partMask = SynapseConstants.BUNDLE_MASK_QUERY_RESULTS\n      const request: QueryBundleRequest = {\n        partMask,\n        concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n        entityId,\n        query: {\n          sql,\n          additionalFilters,\n          selectedFacets,\n        },\n      }\n\n      const queryResultBundle = await SynapseClient.getFullQueryTableResults(\n        request,\n        accessToken,\n      )\n      const { queryResult } = queryResultBundle\n      if (queryResult?.queryResults.rows) {\n        // find the column that has the USER_ID in it.\n        const ownerIdColumnIndex = queryResult.queryResults.headers.findIndex(\n          el => el.columnType === ColumnTypeEnum.USERID,\n        )\n        const ids: string[] = queryResult.queryResults.rows\n          .map(d => d.values[ownerIdColumnIndex])\n          .filter((id): id is string => id !== null)\n        if (mounted) {\n          const newIds = getDisplayIds(ids, count, storageUidKey)\n          setUserIds(newIds)\n          if (useQueryResultUserData) {\n            setQueryData(queryResultBundle)\n          }\n          setIsLoading(false)\n        }\n      } else {\n        console.log('UserCardListRotate: Error getting data')\n      }\n    }\n    fetchData()\n\n    return () => {\n      mounted = false\n    }\n  }, [sql, selectedFacets, count, accessToken, searchParams, sqlOperator])\n\n  return (\n    <div className=\"UserCardListRotate\">\n      {isLoading && <LoadingUserCardMedium />}\n      {!isLoading && userIds.length === 0 && (\n        <p className=\"font-italic\">No one was found.</p>\n      )}\n      {!isLoading && userIds.length > 0 && (\n        <UserCardList list={userIds} size={size} data={queryData} />\n      )}\n      {summaryLink && summaryLinkText && (\n        <div className=\"UserCardListRotate__summary\">\n          <LargeButton color=\"secondary\" variant=\"contained\" href={summaryLink}>\n            {summaryLinkText}\n          </LargeButton>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default UserCardListRotate\n"],"names":["STORED_UID_KEY","DEFAULT_DISPLAY_COUNT","getDisplayIds","ids","count","storageUidKey","storedIds","newIds","storedIdsStr","filtered","item","part","UserCardListRotate","sql","useQueryResultUserData","size","LARGE_USER_CARD","summaryLink","summaryLinkText","selectedFacets","searchParams","sqlOperator","accessToken","useSynapseContext","userIds","setUserIds","useState","queryData","setQueryData","isLoading","setIsLoading","mounted","useDeepCompareEffectNoCheck","entityId","parseEntityIdFromSqlStatement","additionalFilters","getAdditionalFilters","request","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","queryResultBundle","SynapseClient","queryResult","ownerIdColumnIndex","el","ColumnTypeEnum","d","id","jsxs","jsx","LoadingUserCardMedium","UserCardList","LargeButton"],"mappings":"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"}