{"version":3,"file":"InfiniteQueryUtils-54ae7e6b.js","sources":["../../src/synapse-queries/InfiniteQueryUtils.ts"],"sourcesContent":["import { PaginatedResults } from '@sage-bionetworks/synapse-types'\n\n/**\n * Returns a function that can be used for `getNextPageParam` in `useInfiniteQuery` when the results are\n * Synapse PaginatedResults\n * @param limit\n */\nexport function getNextPageParamForPaginatedResults(\n  lastPage: PaginatedResults<unknown>,\n  pages: PaginatedResults<unknown>[],\n) {\n  // totalNumberOfResults is deprecated, it may not be the correct value\n  // For a given service, one of the following is true about totalNumberOfResults\n  //   1. If this is not the last page, it's offset + page.results.length + 1\n  //   2. If this is the last page, it's the correct total number of results\n  //   3. It is always the correct value, regardless of the page\n  //   4. It is not present\n  // We need to handle all of those cases\n  const totalFetchedResults = pages.reduce((acc, page) => {\n    return acc + page.results.length\n  }, 0)\n  if (lastPage.totalNumberOfResults) {\n    if (lastPage.totalNumberOfResults > totalFetchedResults) {\n      // If the total is present and is greater than everything we've fetched so far, make the new limit the total fetched\n      return totalFetchedResults\n    } else {\n      // There are no more pages to fetch\n      return undefined\n    }\n  } else {\n    // If totalNumberOfResults is not present, the limit for the next page will be the total number of fetched results\n    if (lastPage.results.length > 0) {\n      return totalFetchedResults\n    }\n    // If the last page has no items, we've hit the end. No more pages to fetch\n    // We will end up with an empty last page, but that's ok\n    else return undefined\n  }\n}\n"],"names":["getNextPageParamForPaginatedResults","lastPage","pages","totalFetchedResults","acc","page"],"mappings":"AAOgB,SAAAA,EACdC,EACAC,EACA,CAQA,MAAMC,EAAsBD,EAAM,OAAO,CAACE,EAAKC,IACtCD,EAAMC,EAAK,QAAQ,OACzB,CAAC,EACJ,OAAIJ,EAAS,qBACPA,EAAS,qBAAuBE,EAE3BA,EAGA,OAILF,EAAS,QAAQ,OAAS,EACrBE,EAIG,MAEhB"}