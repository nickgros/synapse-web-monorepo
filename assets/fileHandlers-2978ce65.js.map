{"version":3,"file":"fileHandlers-2978ce65.js","sources":["../../mocks/dataaccess/MockDataAccessRequest.ts","../../mocks/msw/handlers/dataAccessRequestHandlers.ts","../../mocks/msw/handlers/fileHandlers.ts"],"sourcesContent":["import { AccessType, Renewal, Request } from '@sage-bionetworks/synapse-types'\nimport { mockManagedACTAccessRequirement } from '../mockAccessRequirements'\nimport { MOCK_USER_ID, MOCK_USER_ID_2 } from '../user/mock_user_profile'\nimport {\n  MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_1_FILE_HANDLE_ID,\n  MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_2_FILE_HANDLE_ID,\n  MOCK_DATA_ACCESS_SUBMISSION_IRB_APPROVAL_FILE_HANDLE_ID,\n  MOCK_DUC_SUBMISSION_FILE_HANDLE_ID,\n} from '../mock_file_handle'\nimport { MOCK_RESEARCH_PROJECT_ID } from './MockResearchProject'\n\nexport const MOCK_DATA_ACCESS_REQUEST_ID = '3541518'\nexport const MOCK_DATA_ACCESS_RENEWAL_ID = '49813181'\n\nexport const MOCK_DATA_ACCESS_REQUEST: Request = {\n  id: MOCK_DATA_ACCESS_REQUEST_ID,\n  accessorChanges: [\n    {\n      userId: String(MOCK_USER_ID),\n      type: AccessType.GAIN_ACCESS,\n    },\n  ],\n  attachments: [\n    MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_1_FILE_HANDLE_ID,\n    MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_2_FILE_HANDLE_ID,\n  ],\n  createdBy: String(MOCK_USER_ID),\n  createdOn: '2023-04-19T13:06:51+00:00',\n  ducFileHandleId: MOCK_DUC_SUBMISSION_FILE_HANDLE_ID,\n  irbFileHandleId: MOCK_DATA_ACCESS_SUBMISSION_IRB_APPROVAL_FILE_HANDLE_ID,\n  modifiedBy: String(MOCK_USER_ID),\n  modifiedOn: '2023-04-19T13:06:51+00:00',\n  researchProjectId: MOCK_RESEARCH_PROJECT_ID,\n  etag: '0',\n  accessRequirementId: String(mockManagedACTAccessRequirement.id),\n  concreteType: 'org.sagebionetworks.repo.model.dataaccess.Request',\n}\n\nexport const MOCK_DATA_ACCESS_RENEWAL: Renewal = {\n  id: MOCK_DATA_ACCESS_RENEWAL_ID,\n  accessorChanges: [\n    {\n      userId: String(MOCK_USER_ID),\n      type: AccessType.GAIN_ACCESS,\n    },\n    {\n      userId: String(MOCK_USER_ID_2),\n      type: AccessType.REVOKE_ACCESS,\n    },\n  ],\n  attachments: [\n    MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_1_FILE_HANDLE_ID,\n    MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_2_FILE_HANDLE_ID,\n  ],\n  createdBy: String(MOCK_USER_ID),\n  createdOn: '2023-04-19T13:06:51+00:00',\n  ducFileHandleId: MOCK_DUC_SUBMISSION_FILE_HANDLE_ID,\n  irbFileHandleId: MOCK_DATA_ACCESS_SUBMISSION_IRB_APPROVAL_FILE_HANDLE_ID,\n  modifiedBy: String(MOCK_USER_ID),\n  modifiedOn: '2023-04-19T13:06:51+00:00',\n  researchProjectId: MOCK_RESEARCH_PROJECT_ID,\n  etag: '0',\n  accessRequirementId: String(mockManagedACTAccessRequirement.id),\n  concreteType: 'org.sagebionetworks.repo.model.dataaccess.Renewal',\n  publication:\n    'My cool paper that used this data: https://doi.org/10.1016/j.cell.2011.02.013',\n  summaryOfUse:\n    'We ran a χ² test of homogeneity to determine if this data was representative of the rest of the population with' +\n    ' consideration for similar large data collections.',\n}\n","import { Renewal, Request } from '@sage-bionetworks/synapse-types'\nimport { rest } from 'msw'\nimport {\n  ACCESS_REQUIREMENT_DATA_ACCESS_REQUEST_FOR_UPDATE,\n  DATA_ACCESS_REQUEST,\n  DATA_ACCESS_REQUEST_SUBMISSION,\n} from '../../../src/utils/APIConstants'\nimport { MOCK_DATA_ACCESS_REQUEST } from '../../dataaccess/MockDataAccessRequest'\n\nexport function getDataAccessRequestHandlers(\n  backendOrigin: string,\n  request: Request | Renewal = MOCK_DATA_ACCESS_REQUEST,\n) {\n  return [\n    rest.get(\n      `${backendOrigin}${ACCESS_REQUIREMENT_DATA_ACCESS_REQUEST_FOR_UPDATE(\n        ':id',\n      )}`,\n      async (req, res, ctx) => {\n        const response: Request | Renewal = request\n        return res(ctx.status(200), ctx.json(response))\n      },\n    ),\n    rest.post(\n      `${backendOrigin}${DATA_ACCESS_REQUEST}`,\n      async (req, res, ctx) => {\n        const resp = await req.json()\n        return res(ctx.status(201), ctx.json(resp))\n      },\n    ),\n    rest.post(\n      `${backendOrigin}${DATA_ACCESS_REQUEST_SUBMISSION(':id')}`,\n      async (req, res, ctx) => {\n        return res(ctx.status(201), ctx.json({}))\n      },\n    ),\n  ]\n}\n","import {\n  BatchFileRequest,\n  BatchFileResult,\n} from '@sage-bionetworks/synapse-types'\nimport { rest } from 'msw'\nimport { FILE_HANDLE_BATCH } from '../../../src/utils/APIConstants'\nimport { mockFileHandles } from '../../mock_file_handle'\n\nexport function getFileHandlers(backendOrigin: string) {\n  return [\n    rest.post(`${backendOrigin}${FILE_HANDLE_BATCH}`, async (req, res, ctx) => {\n      const request: BatchFileRequest = await req.json()\n\n      const response: BatchFileResult = {\n        requestedFiles: [],\n      }\n\n      request.requestedFiles.forEach(fileHandleAssociation => {\n        const fileHandle = mockFileHandles.find(\n          fh => fh.id === fileHandleAssociation.fileHandleId,\n        )\n        if (fileHandle) {\n          response.requestedFiles.push({\n            fileHandleId: fileHandle.id,\n            fileHandle,\n          })\n        }\n      })\n\n      return res(ctx.status(201), ctx.json(response))\n    }),\n  ]\n}\n"],"names":["MOCK_DATA_ACCESS_REQUEST_ID","MOCK_DATA_ACCESS_RENEWAL_ID","MOCK_DATA_ACCESS_REQUEST","MOCK_USER_ID","AccessType","MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_1_FILE_HANDLE_ID","MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_2_FILE_HANDLE_ID","MOCK_DUC_SUBMISSION_FILE_HANDLE_ID","MOCK_DATA_ACCESS_SUBMISSION_IRB_APPROVAL_FILE_HANDLE_ID","MOCK_RESEARCH_PROJECT_ID","mockManagedACTAccessRequirement","MOCK_USER_ID_2","getDataAccessRequestHandlers","backendOrigin","request","rest","ACCESS_REQUIREMENT_DATA_ACCESS_REQUEST_FOR_UPDATE","req","res","ctx","response","DATA_ACCESS_REQUEST","resp","DATA_ACCESS_REQUEST_SUBMISSION","getFileHandlers","FILE_HANDLE_BATCH","fileHandleAssociation","fileHandle","mockFileHandles","fh"],"mappings":"0WAWO,MAAMA,EAA8B,UAC9BC,EAA8B,WAE9BC,EAAoC,CAC/C,GAAIF,EACJ,gBAAiB,CACf,CACE,OAAQ,OAAOG,CAAY,EAC3B,KAAMC,EAAW,WACnB,CACF,EACA,YAAa,CACXC,EACAC,CACF,EACA,UAAW,OAAOH,CAAY,EAC9B,UAAW,4BACX,gBAAiBI,EACjB,gBAAiBC,EACjB,WAAY,OAAOL,CAAY,EAC/B,WAAY,4BACZ,kBAAmBM,EACnB,KAAM,IACN,oBAAqB,OAAOC,EAAgC,EAAE,EAC9D,aAAc,mDAChB,EAMc,OAAOP,CAAY,EACrBC,EAAW,YAGT,OAAOO,CAAc,EACvBP,EAAW,cAInBC,EACAC,EAES,OAAOH,CAAY,EAEbI,EACAC,EACL,OAAOL,CAAY,EAEZM,EAEE,OAAOC,EAAgC,EAAE,ECrDhD,SAAAE,EACdC,EACAC,EAA6BZ,EAC7B,CACO,MAAA,CACLa,EAAAA,KAAK,IACH,GAAGF,IAAgBG,EACjB,KAAA,IAEF,MAAOC,EAAKC,EAAKC,IAAQ,CACvB,MAAMC,EAA8BN,EAC7B,OAAAI,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKC,CAAQ,CAAC,CAChD,CACF,EACAL,EAAAA,KAAK,KACH,GAAGF,IAAgBQ,IACnB,MAAOJ,EAAKC,EAAKC,IAAQ,CACjB,MAAAG,EAAO,MAAML,EAAI,OAChB,OAAAC,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKG,CAAI,CAAC,CAC5C,CACF,EACAP,EAAAA,KAAK,KACH,GAAGF,IAAgBU,EAA+B,KAAK,IACvD,MAAON,EAAKC,EAAKC,IACRD,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAK,CAAE,CAAA,CAAC,CAE5C,CAAA,CAEJ,CC7BO,SAASK,EAAgBX,EAAuB,CAC9C,MAAA,CACLE,OAAK,KAAK,GAAGF,IAAgBY,IAAqB,MAAOR,EAAKC,EAAKC,IAAQ,CACnE,MAAAL,EAA4B,MAAMG,EAAI,OAEtCG,EAA4B,CAChC,eAAgB,CAAC,CAAA,EAGX,OAAAN,EAAA,eAAe,QAAiCY,GAAA,CACtD,MAAMC,EAAaC,EAAgB,KACjCC,GAAMA,EAAG,KAAOH,EAAsB,YAAA,EAEpCC,GACFP,EAAS,eAAe,KAAK,CAC3B,aAAcO,EAAW,GACzB,WAAAA,CAAA,CACD,CACH,CACD,EAEMT,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKC,CAAQ,CAAC,CAAA,CAC/C,CAAA,CAEL"}