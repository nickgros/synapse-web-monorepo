{"version":3,"file":"ElementWithTooltip-d5658e05.js","sources":["../../src/components/widgets/ElementWithTooltip.tsx"],"sourcesContent":["import React from 'react'\nimport { TOOLTIP_DELAY_SHOW } from '../SynapseTable/SynapseTableConstants'\nimport { Dropdown } from 'react-bootstrap'\nimport { Icon } from '../row_renderers/utils'\nimport IconSvg, { IconSvgProps } from '../IconSvg/IconSvg'\nimport { Tooltip } from '@mui/material'\n\ntype CustomImageProps = {\n  svgImg: React.ComponentElement<any, any>\n  altText: string\n}\n\nexport type TooltipVisualProps = {\n  delayShow: number\n  place: 'top' | 'right' | 'bottom' | 'left'\n  type: 'dark' | 'success' | 'warning' | 'error' | 'info' | 'light'\n  effect: 'float' | 'solid'\n  border?: boolean\n}\n\n/*****************************************\n *  The control needs to either have a child element or needs to have an image supplied\n *  If the child element is supplied the control renders the child applying additional properties\n *  If the image is supplied the control renders a clickable image\n *  If there are no children and callback Fn is not supplied it is assumed to be a a dropdown trigger\n */\n\ntype ElementWithTooltipProps = React.PropsWithChildren<{\n  image?: IconSvgProps | CustomImageProps\n  imageColor?: string\n  tooltipText: string\n  callbackFn?: () => void\n  className?: string\n  tooltipVisualProps?: Partial<TooltipVisualProps>\n  darkTheme?: boolean\n  size?: string\n  icon?: React.ReactNode\n}>\n\nfunction getTooltipTriggerContents(\n  image: IconSvgProps | CustomImageProps,\n  imageColor: string | undefined,\n  size: React.CSSProperties['width'] | undefined,\n): JSX.Element {\n  if ('svgImg' in image) {\n    return image.svgImg\n  } else {\n    return <IconSvg {...image} sx={{ color: imageColor, width: size }} />\n  }\n}\n\nexport const ElementWithTooltip = ({\n  image,\n  callbackFn,\n  tooltipText,\n  className = '',\n  imageColor,\n  tooltipVisualProps = { place: 'top' },\n  children,\n  darkTheme,\n  size,\n  icon,\n}: ElementWithTooltipProps) => {\n  const { place } = tooltipVisualProps\n  const iconComponent = icon ? (\n    typeof icon === 'string' ? (\n      <Icon type={icon}></Icon>\n    ) : (\n      icon\n    )\n  ) : undefined\n  const tooltipTriggerContents = iconComponent\n    ? iconComponent\n    : image\n    ? getTooltipTriggerContents(image, imageColor, size)\n    : children || <></>\n\n  //if there is no callbackFn - assume it's a toggle\n\n  let tooltipTrigger: JSX.Element\n  if (!children) {\n    tooltipTrigger = callbackFn ? (\n      <button\n        tabIndex={0}\n        className={`ElementWithTooltip SRC-hand-cursor SRC-grey-background-hover ${className} ${\n          darkTheme ? 'dark-theme' : ''\n        } `}\n        onKeyPress={() => callbackFn()}\n        onClick={() => callbackFn()}\n        aria-label={tooltipText}\n      >\n        {tooltipTriggerContents}\n      </button>\n    ) : (\n      <Dropdown.Toggle\n        className={`ElementWithTooltip SRC-hand-cursor SRC-grey-background-hover ${className} ${\n          darkTheme ? 'dark-theme' : ''\n        } `}\n        variant={'light'}\n        aria-label={tooltipText}\n      >\n        {tooltipTriggerContents}\n      </Dropdown.Toggle>\n    )\n  } else {\n    tooltipTrigger = <div className=\"SRC-hand-cursor\">{children}</div>\n  }\n\n  return (\n    <Tooltip\n      title={tooltipText}\n      enterNextDelay={TOOLTIP_DELAY_SHOW}\n      placement={place}\n      data-testid=\"ElementTooltip\"\n    >\n      {tooltipTrigger}\n    </Tooltip>\n  )\n}\n"],"names":["getTooltipTriggerContents","image","imageColor","size","jsx","IconSvg","ElementWithTooltip","callbackFn","tooltipText","className","tooltipVisualProps","children","darkTheme","icon","place","iconComponent","Icon","tooltipTriggerContents","Fragment","tooltipTrigger","Dropdown","Tooltip","TOOLTIP_DELAY_SHOW"],"mappings":"0SAuCA,SAAAA,EAAAC,EAAAC,EAAAC,EAAA,CAKE,MAAA,WAAAF,EACEA,EAAA,OAEAG,EAAAC,EAAA,CAAA,GAAAJ,EAAA,GAAA,CAAA,MAAAC,EAAA,MAAAC,CAAA,CAAA,CAAA,CAEJ,CAEO,MAAAG,EAAA,CAAA,CAA4B,MAAAL,EACjC,WAAAM,EACA,YAAAC,EACA,UAAAC,EAAA,GACY,WAAAP,EACZ,mBAAAQ,EAAA,CAAA,MAAA,KAAA,EACoC,SAAAC,EACpC,UAAAC,EACA,KAAAT,EACA,KAAAU,CAEF,IAAA,CACE,KAAA,CAAA,MAAAC,CAAA,EAAAJ,EACAK,EAAAF,EAAA,OAAAA,GAAA,SAAAT,EAAAY,EAAA,CAAA,KAAAH,CAAA,CAAA,EAAAA,EAAA,OAOAI,EAAAF,IAAAd,EAAAD,EAAAC,EAAAC,EAAAC,CAAA,EAAAQ,GAAAP,EAAAc,EAAA,CAAA,CAAA,GAQA,IAAAC,EACA,OAAAR,EAyBEQ,EAAAf,EAAA,MAAA,CAAA,UAAA,kBAAA,SAAAO,CAAA,CAAA,EAxBAQ,EAAAZ,EAAAH,EACE,SAAC,CAAA,SAAA,EACW,UAAA,gEAAAK,CAAA,IAAAG,EAAA,aAAA,EAAA,IAGV,WAAA,IAAAL,EAAA,EAC6B,QAAA,IAAAA,EAAA,EACH,aAAAC,EACd,SAAAS,CAEX,CAAA,EAAAb,EAGHgB,EAAA,OAAU,CAAT,UAAA,gEAAAX,CAAA,IAAAG,EAAA,aAAA,EAAA,IAGC,QAAA,QACS,aAAAJ,EACG,SAAAS,CAEX,CAAA,EAOPb,EACEiB,EAAC,CAAA,MAAAb,EACQ,eAAAc,EACS,UAAAR,EACL,cAAA,iBACC,SAAAK,CAEX,CAAA,CAGP"}