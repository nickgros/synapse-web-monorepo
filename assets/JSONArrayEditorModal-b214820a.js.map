{"version":3,"file":"JSONArrayEditorModal-b214820a.js","sources":["../../src/components/JSONArrayEditor/useParseCsv.ts","../../src/components/JSONArrayEditor/JSONArrayEditor.tsx","../../src/components/JSONArrayEditor/JSONArrayEditorModal.tsx"],"sourcesContent":["import { JSONSchema7Definition } from 'json-schema'\nimport { parse as papaparse } from 'papaparse'\nimport { useCallback, useMemo } from 'react'\nimport { isObject } from 'lodash-es'\n\nexport type ParseCsvOptions = {\n  /* If provided, items will be parsed based on the data type prescribed by the schema */\n  jsonSchemaDefinition?: JSONSchema7Definition\n}\n\nexport type UseParseCsvReturn = {\n  parse: (dataToParse: string) => Promise<unknown[]>\n}\n\nconst DEFAULT_OPTIONS: ParseCsvOptions = {\n  jsonSchemaDefinition: { type: 'string' },\n}\n\nexport default function useParseCsv(\n  options: ParseCsvOptions = DEFAULT_OPTIONS,\n): UseParseCsvReturn {\n  const { jsonSchemaDefinition } = options\n  const itemsAreString = useMemo(\n    () =>\n      isObject(jsonSchemaDefinition) &&\n      jsonSchemaDefinition.type &&\n      jsonSchemaDefinition.type === 'string',\n    [jsonSchemaDefinition],\n  )\n\n  const parse = useCallback(\n    (dataToParse: string): Promise<unknown[]> => {\n      return new Promise((resolve, reject) => {\n        papaparse(dataToParse, {\n          // If the items are not strings, let papaparse guess the type. Otherwise, always parse as strings.\n          dynamicTyping: !itemsAreString,\n          complete: result => {\n            if (result.errors.length > 0) {\n              reject(result.errors)\n            } else {\n              resolve(result.data.flat())\n            }\n          },\n        })\n      })\n    },\n    [itemsAreString],\n  )\n\n  return {\n    parse,\n  }\n}\n","import React, { useCallback, useMemo, useState } from 'react'\nimport RJSFForm from '@rjsf/core'\nimport Form from '@rjsf/mui'\nimport validator from '@rjsf/validator-ajv8'\nimport { JSONSchema7, JSONSchema7Definition } from 'json-schema'\nimport ArrayFieldDescriptionTemplate from '../SchemaDrivenAnnotationEditor/template/ArrayFieldDescriptionTemplate'\nimport ArrayFieldItemTemplate from '../SchemaDrivenAnnotationEditor/template/ArrayFieldItemTemplate'\nimport ArrayFieldTemplate from '../SchemaDrivenAnnotationEditor/template/ArrayFieldTemplate'\nimport ArrayFieldTitleTemplate from '../SchemaDrivenAnnotationEditor/template/ArrayFieldTitleTemplate'\nimport ButtonTemplate from '../SchemaDrivenAnnotationEditor/template/ButtonTemplate'\nimport {\n  Alert,\n  AlertTitle,\n  Box,\n  Button,\n  Collapse,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { GenericObjectType, RJSFSchema } from '@rjsf/utils'\nimport TextWidget from '../SchemaDrivenAnnotationEditor/widget/TextWidget'\nimport { DateTimeWidget } from '../SchemaDrivenAnnotationEditor/widget/DateTimeWidget'\nimport { SelectWidget } from '../SchemaDrivenAnnotationEditor/widget/SelectWidget'\nimport { BooleanWidget } from '../SchemaDrivenAnnotationEditor/widget/BooleanWidget'\nimport { getTransformErrors } from '../SchemaDrivenAnnotationEditor/AnnotationEditorUtils'\nimport ErrorListTemplate from '../SchemaDrivenAnnotationEditor/template/ErrorListTemplate'\nimport useParseCsv from './useParseCsv'\nimport { ParseError } from 'papaparse'\n\nconst DEFAULT_ARRAY_ITEM_DEFINITION: JSONSchema7Definition = { type: 'string' }\n\nexport type JSONArrayEditorProps<T = unknown> = {\n  value?: T[]\n  arrayItemDefinition?: JSONSchema7Definition\n  onChange: (newValue: T[]) => void\n  onSubmit: (formData: T[]) => void\n  formRef?: React.Ref<RJSFForm<T, RJSFSchema, GenericObjectType>>\n}\n\nfunction getSchema(\n  definition: JSONSchema7Definition = DEFAULT_ARRAY_ITEM_DEFINITION,\n): JSONSchema7 {\n  return {\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    type: 'array',\n    items: definition,\n  }\n}\n\nfunction JSONArrayEditor<T = unknown>(props: JSONArrayEditorProps<T>) {\n  const {\n    value = [],\n    onChange,\n    onSubmit,\n    arrayItemDefinition = DEFAULT_ARRAY_ITEM_DEFINITION,\n    formRef,\n  } = props\n  const [showPasteNewValuesForm, setShowPasteNewValuesForm] = useState(false)\n  const [pastedValues, setPastedValues] = useState('')\n  const [parseErrors, setParseErrors] = useState<ParseError[]>([])\n  const schema = useMemo(\n    () => getSchema(arrayItemDefinition),\n    [arrayItemDefinition],\n  )\n\n  const { parse } = useParseCsv({\n    jsonSchemaDefinition: arrayItemDefinition,\n  })\n  const addPastedValuesToArray = useCallback(async () => {\n    if (pastedValues) {\n      try {\n        const parsedValues = (await parse(pastedValues)) as T[]\n        onChange([...value, ...parsedValues])\n        setParseErrors([])\n        setPastedValues('')\n        setShowPasteNewValuesForm(false)\n      } catch (e) {\n        setParseErrors(e as ParseError[])\n      }\n    }\n  }, [onChange, pastedValues, value, parse])\n\n  const transformErrors = useMemo(() => {\n    return getTransformErrors()\n  }, [])\n\n  return (\n    <Box\n      className=\"JsonSchemaFormContainer\"\n      sx={{\n        // Hide the label/button to show more info\n        '.JsonSchemaForm .LabelContainer': {\n          display: 'none',\n          visibility: 'hidden',\n        },\n      }}\n    >\n      <Form\n        ref={formRef}\n        schema={schema}\n        className=\"JsonSchemaForm\"\n        noHtml5Validate\n        uiSchema={{\n          'ui:submitButtonOptions': {\n            norender: true,\n          },\n        }}\n        validator={validator}\n        formData={value}\n        formContext={{\n          allowRemovingLastItemInArray: true,\n        }}\n        onChange={({ formData }) => onChange(formData)}\n        onSubmit={({ formData }) => onSubmit(formData)}\n        templates={{\n          ArrayFieldDescriptionTemplate: ArrayFieldDescriptionTemplate,\n          ArrayFieldItemTemplate: ArrayFieldItemTemplate,\n          ArrayFieldTemplate: ArrayFieldTemplate,\n          ArrayFieldTitleTemplate: ArrayFieldTitleTemplate,\n          ButtonTemplates: ButtonTemplate,\n          ErrorListTemplate: ErrorListTemplate,\n        }}\n        transformErrors={transformErrors}\n        widgets={{\n          TextWidget: TextWidget,\n          DateTimeWidget: DateTimeWidget,\n          SelectWidget: SelectWidget,\n          CheckboxWidget: BooleanWidget,\n        }}\n      />\n      <Button onClick={() => setShowPasteNewValuesForm(true)}>\n        Paste new values\n      </Button>\n      <Collapse sx={{ mt: 2 }} in={showPasteNewValuesForm}>\n        <TextField\n          multiline\n          InputProps={{ inputProps: { 'aria-label': 'CSV or TSV to Append' } }}\n          rows={5}\n          placeholder={'Place comma or tab delimited values here'}\n          value={pastedValues}\n          onChange={e => setPastedValues(e.target.value)}\n        />\n        <Box my={1} display={'flex'} justifyContent={'flex-end'}>\n          <Button onClick={() => setShowPasteNewValuesForm(false)}>\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              addPastedValuesToArray()\n            }}\n          >\n            Add\n          </Button>\n        </Box>\n        {parseErrors && parseErrors.length > 0 && (\n          <Alert severity={'error'} sx={{ my: 2 }}>\n            <AlertTitle>Parsing errors encountered:</AlertTitle>\n            <ul>\n              {parseErrors.map((error, index) => {\n                return (\n                  <Typography\n                    component={'li'}\n                    lineHeight={1.5}\n                    key={index}\n                    variant={'smallText1'}\n                  >\n                    {error.row ? `At ${error.row}: ` : ''}\n                    {error.message}\n                  </Typography>\n                )\n              })}\n            </ul>\n          </Alert>\n        )}\n      </Collapse>\n    </Box>\n  )\n}\n\nexport default JSONArrayEditor\n","import React, { useEffect, useRef, useState } from 'react'\nimport {\n  ConfirmationDialog,\n  ConfirmationDialogProps,\n} from '../ConfirmationDialog'\nimport JSONArrayEditor, { JSONArrayEditorProps } from './JSONArrayEditor'\nimport type RJSFForm from '@rjsf/core'\nimport { RJSFSchema } from '@rjsf/utils'\n\nexport type JSONArrayEditorModalProps<T = unknown> = Pick<\n  JSONArrayEditorProps<T>,\n  'arrayItemDefinition' | 'value'\n> & {\n  dialogTitle?: ConfirmationDialogProps['title']\n  isShowingModal: boolean\n  onConfirm: (value: T[]) => void\n  onCancel: () => void\n}\n\nfunction JSONArrayEditorModal<T = unknown>(\n  props: JSONArrayEditorModalProps<T>,\n) {\n  const {\n    isShowingModal,\n    onConfirm,\n    onCancel,\n    dialogTitle = 'Edit Values',\n    value,\n    ...editorProps\n  } = props\n  const formRef = useRef<RJSFForm<any, RJSFSchema, any>>(null)\n  const [tempValue, setTempValue] = useState<T[]>(value ?? [])\n\n  useEffect(() => {\n    /* If the passed prop changes, reset local component state */\n    if (value) {\n      setTempValue(value)\n    }\n  }, [value])\n\n  return (\n    <ConfirmationDialog\n      open={isShowingModal}\n      title={dialogTitle}\n      onCancel={onCancel}\n      maxWidth=\"md\"\n      content={\n        <JSONArrayEditor<T>\n          formRef={formRef}\n          value={tempValue}\n          onChange={newValue => setTempValue(newValue)}\n          onSubmit={onConfirm}\n          {...editorProps}\n        />\n      }\n      onConfirm={() => {\n        // Workaround for https://github.com/rjsf-team/react-jsonschema-form/issues/3121\n        formRef.current!.formElement.current.requestSubmit()\n      }}\n    ></ConfirmationDialog>\n  )\n}\n\nexport default JSONArrayEditorModal\n"],"names":["DEFAULT_OPTIONS","useParseCsv","options","jsonSchemaDefinition","itemsAreString","useMemo","isObject","useCallback","dataToParse","resolve","reject","papaparse","result","DEFAULT_ARRAY_ITEM_DEFINITION","getSchema","definition","JSONArrayEditor","props","value","onChange","onSubmit","arrayItemDefinition","formRef","showPasteNewValuesForm","setShowPasteNewValuesForm","useState","pastedValues","setPastedValues","parseErrors","setParseErrors","schema","parse","addPastedValuesToArray","parsedValues","transformErrors","getTransformErrors","jsxs","Box","jsx","Form","validator","formData","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","ArrayFieldTemplate","ArrayFieldTitleTemplate","ButtonTemplate","ErrorListTemplate","TextWidget","DateTimeWidget","SelectWidget","BooleanWidget","Button","Collapse","TextField","Alert","AlertTitle","error","index","Typography","JSONArrayEditorModal","isShowingModal","onConfirm","onCancel","dialogTitle","editorProps","useRef","tempValue","setTempValue","useEffect","ConfirmationDialog","newValue"],"mappings":"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"}