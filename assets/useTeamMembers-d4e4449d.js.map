{"version":3,"file":"useTeamMembers-d4e4449d.js","sources":["../../src/synapse-queries/team/useTeamMembers.ts"],"sourcesContent":["import {\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport SynapseClient, { deleteMemberFromTeam } from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  PaginatedResults,\n  TeamMembershipStatus,\n} from '@sage-bionetworks/synapse-types'\nimport { TeamMember } from '@sage-bionetworks/synapse-types'\n\nexport function useGetTeamMembers(\n  teamId: string | number,\n  options?: UseQueryOptions<PaginatedResults<TeamMember>, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<PaginatedResults<TeamMember>, SynapseClientError>(\n    keyFactory.getTeamMembersQueryKey(String(teamId)),\n    () => SynapseClient.getTeamMembers(accessToken, teamId, '', 50, 0),\n    options,\n  )\n}\n\nexport function useGetIsUserMemberOfTeam(\n  teamId: string,\n  userId: string,\n  options?: UseQueryOptions<TeamMember | null, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<TeamMember | null, SynapseClientError>(\n    keyFactory.getIsUserMemberOfTeamQueryKey(teamId, userId),\n    () => SynapseClient.getIsUserMemberOfTeam(teamId, userId, accessToken),\n    options,\n  )\n}\n\nexport function useGetMembershipStatus(\n  teamId: string | number,\n  userId: string | number,\n  options?: UseQueryOptions<TeamMembershipStatus, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<TeamMembershipStatus, SynapseClientError>(\n    keyFactory.getMembershipStatusQueryKey(\n      teamId.toString(),\n      userId.toString(),\n    ),\n    () => SynapseClient.getMembershipStatus(teamId, userId, accessToken),\n    options,\n  )\n}\n\nexport type TeamMembershipParam = {\n  teamId: string\n  userId: string\n}\n\nexport function useDeleteTeamMembership(\n  options?: UseMutationOptions<void, SynapseClientError, TeamMembershipParam>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, TeamMembershipParam>(\n    variables =>\n      deleteMemberFromTeam(variables.teamId, variables.userId, accessToken),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getIsUserMemberOfTeamQueryKey(\n            variables.teamId,\n            variables.userId,\n          ),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n"],"names":["useGetIsUserMemberOfTeam","teamId","userId","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient","useGetMembershipStatus","useDeleteTeamMembership","queryClient","useQueryClient","useMutation","deleteMemberFromTeam","variables","data","ctx"],"mappings":"2HA4BgB,SAAAA,EACdC,EACAC,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAC,EACLF,EAAW,8BAA8BJ,EAAQC,CAAM,EACvD,IAAMM,EAAc,sBAAsBP,EAAQC,EAAQE,CAAW,EACrED,CAAA,CAEJ,CAEgB,SAAAM,EACdR,EACAC,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAC,EACLF,EAAW,4BACTJ,EAAO,SAAS,EAChBC,EAAO,SAAS,CAClB,EACA,IAAMM,EAAc,oBAAoBP,EAAQC,EAAQE,CAAW,EACnED,CAAA,CAEJ,CAOO,SAASO,EACdP,EACA,CACA,MAAMQ,EAAcC,IACd,CAAE,YAAAR,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAO,KAEHC,EAAqBC,EAAU,OAAQA,EAAU,OAAQX,CAAW,EACtE,CACE,GAAGD,EACH,UAAW,MAAOa,EAAMD,EAAWE,IAAQ,CACzC,MAAMN,EAAY,kBAChBN,EAAW,8BACTU,EAAU,OACVA,EAAU,MACZ,CAAA,EAEEZ,GAAA,MAAAA,EAAS,WACX,MAAMA,EAAQ,UAAUa,EAAMD,EAAWE,CAAG,CAEhD,CACF,CAAA,CAEJ"}