{"version":3,"file":"ChallengeDetailPage.stories-ff4b3cb2.js","sources":["../../src/components/EntityForm/EntityForm.tsx","../../src/components/ExternalFileHandleLink/ExternalFileHandleLink.tsx","../../src/components/ChallengeDetailPage/ChallengeDetailPage.tsx"],"sourcesContent":["// EntityForm:\n// Will generate a Form (based on your schema files).\n// Gathers user input (including files)\n// Will give you the Synapse ID of the FileEntity that contains the user form data.\nimport React from 'react'\nimport Form from '@rjsf/core'\nimport SynapseClient from '../../synapse-client'\nimport {\n  EntityId,\n  EntityLookupRequest,\n  FileEntity,\n  UserProfile,\n} from '@sage-bionetworks/synapse-types'\nimport { getFileHandleContent } from '../../synapse-client/SynapseClient'\nimport { SynapseContext } from '../../utils/context/SynapseContext'\nimport validator from '@rjsf/validator-ajv8'\n\nexport type EntityFormProps = {\n  // Provide the parent container (folder/project), that should contain a folder (named <user_id>) that this user can write to.\n  parentContainerId: string\n  formSchemaEntityId: string // Synapse file that contains the form schema.\n  formUiSchemaEntityId: string // Synapse file that contains the form ui schema.\n  initFormData: boolean // If true, it indicates that youâ€™d like to download and pre-fill the form with the user's previous response.\n  synIdCallback: (synId: string) => void // callback.  Once the form output has been saved to a FileEntity, will send synID back\n}\ntype EntityFormState = {\n  error?: any\n  isLoading?: boolean\n  successfullyUploaded: boolean\n  containerId?: string\n  userprofile?: UserProfile\n  currentFileEntity?: FileEntity // file holding user form data\n  formData?: any // form data that prepopulates the form\n  formSchema?: any // schema that drives the form\n  formUiSchema?: any // ui schema that directs how to render the form elements\n}\n\nexport class EntityForm extends React.Component<\n  EntityFormProps,\n  EntityFormState\n> {\n  static contextType = SynapseContext\n  declare context: NonNullable<React.ContextType<typeof SynapseContext>>\n\n  formRef: any\n\n  constructor(props: EntityFormProps) {\n    super(props)\n    this.formRef = React.createRef()\n    this.state = {\n      isLoading: true,\n      successfullyUploaded: false,\n    }\n  }\n\n  componentDidMount() {\n    this.refresh()\n  }\n\n  submitForm = () => {\n    this.formRef.current.submit()\n  }\n\n  refresh = () => {\n    if (this.context.accessToken) {\n      const promises = [\n        SynapseClient.getUserProfile(this.context.accessToken),\n        SynapseClient.getEntity(\n          this.context.accessToken,\n          this.props.formSchemaEntityId,\n        ),\n        SynapseClient.getEntity(\n          this.context.accessToken,\n          this.props.formUiSchemaEntityId,\n        ),\n      ] as Promise<any>[]\n      Promise.all(promises)\n        .then(values => {\n          const userprofile: UserProfile = values[0]\n          this.getTargetContainer(userprofile, this.context.accessToken!).then(\n            // @ts-ignore\n            (targetContainerId: string) => {\n              const formSchemaFileEntity: FileEntity = values[1]\n              const formUiSchemaFileEntity: FileEntity = values[2]\n              this.getSchemaFileContent(\n                targetContainerId,\n                formSchemaFileEntity,\n                formUiSchemaFileEntity,\n              )\n            },\n          )\n        })\n        .catch(error => {\n          this.onError(error)\n        })\n    }\n  }\n\n  getSchemaFileContent = (\n    targetFolderId: string,\n    formSchemaFileEntity: FileEntity,\n    formUiSchemaFileEntity: FileEntity,\n  ) => {\n    const promises = [\n      SynapseClient.getFileResult(\n        formSchemaFileEntity,\n        this.context.accessToken,\n        true,\n        true,\n      ),\n      SynapseClient.getFileResult(\n        formUiSchemaFileEntity,\n        this.context.accessToken,\n        true,\n        true,\n      ),\n    ]\n\n    Promise.all(promises)\n      .then(values => {\n        try {\n          const fileContent = values.map(el => {\n            return getFileHandleContent(el.fileHandle!, el.preSignedURL!)\n          })\n          Promise.all(fileContent)\n            .then(el => {\n              const formSchemaContent = JSON.parse(el[0])\n              const formUiSchemaContent = JSON.parse(el[1])\n              this.getExistingFileData(\n                targetFolderId,\n                formSchemaContent,\n                formUiSchemaContent,\n              )\n            })\n            .catch(e => {\n              console.log('getSchemaFileContent: Error getting form content', e)\n            })\n        } catch (e) {\n          console.log('getSchemaFileContent: Error getting schema content', e)\n        }\n      })\n      .catch(error => {\n        this.onError(error)\n      })\n  }\n\n  getExistingFileData = (\n    targetFolderId: string,\n    formSchemaContent: any,\n    formUiSchemaContent: any,\n  ) => {\n    // if data already exists, save a reference to the existing entity and prefill the form\n    const fileName = `${formSchemaContent.title}.json`\n    const entityLookupRequest = {\n      entityName: fileName,\n      parentId: targetFolderId,\n    }\n    let formData: any\n    let currentFileEntity: FileEntity\n    SynapseClient.lookupChildEntity(\n      entityLookupRequest,\n      this.context.accessToken,\n    )\n      .then((entityId: EntityId) => {\n        // ok, found the existing file\n        return SynapseClient.getEntity<FileEntity>(\n          this.context.accessToken,\n          entityId.id,\n        ).then(entity => {\n          currentFileEntity = entity\n          if (this.props.initFormData) {\n            return SynapseClient.getFileResult(\n              currentFileEntity,\n              this.context.accessToken,\n              true,\n              true,\n            ).then(async existingFileData => {\n              try {\n                const fileContent = await getFileHandleContent(\n                  existingFileData.fileHandle!,\n                  existingFileData.preSignedURL!,\n                )\n                formData = JSON.parse(fileContent)\n              } catch (e) {\n                console.log('getExistingFileData: Error setting form data', e)\n              }\n            })\n          }\n          // else we're done\n          return Promise.resolve()\n        })\n      })\n      .finally(() => {\n        this.setState({\n          formData,\n          currentFileEntity,\n          formSchema: formSchemaContent,\n          formUiSchema: formUiSchemaContent,\n        })\n      })\n  }\n\n  getTargetContainer = async (userprofile: UserProfile, token: string) => {\n    const entityLookupRequest: EntityLookupRequest = {\n      entityName: userprofile.ownerId,\n      parentId: this.props.parentContainerId,\n    }\n    try {\n      const entityId = await SynapseClient.lookupChildEntity(\n        entityLookupRequest,\n        token,\n      )\n      // ok, found an entity of the same name.\n      console.log(\n        `EntityForm uploading to https://www.synapse.org/#!Synapse:${entityId.id}`,\n      )\n      this.setState({\n        userprofile,\n        containerId: entityId.id,\n        isLoading: false,\n      })\n      return entityId.id\n    } catch (error) {\n      if (error.status === 404) {\n        return this.onError(\n          new Error(\n            'Your folder has not yet been set up, please retry in a few minutes.',\n          ),\n        )\n      }\n      // else\n      return this.onError(error)\n    }\n  }\n\n  finishedProcessing = () => {\n    this.setState({\n      isLoading: false,\n      successfullyUploaded: true,\n    })\n  }\n\n  onError = (error: any) => {\n    this.setState({\n      error,\n      isLoading: false,\n      successfullyUploaded: false,\n    })\n  }\n\n  onSubmit = ({ formData }: any) => {\n    this.setState({\n      isLoading: true,\n      successfullyUploaded: false,\n    })\n\n    const submissionFileAndForm: Blob = new Blob([JSON.stringify(formData)], {\n      type: 'text/json',\n    })\n    this.createEntityFile(submissionFileAndForm)\n  }\n\n  createEntityFile = (fileContentsBlob: Blob) => {\n    const fileName = `${this.state.formSchema.title}.json`\n    SynapseClient.uploadFile(\n      this.context.accessToken,\n      fileName,\n      fileContentsBlob,\n    )\n      .then(fileUploadComplete => {\n        // do we need to create a new file entity, or update an existing file entity?\n        const newFileHandleId = fileUploadComplete.fileHandleId\n        if (this.state.currentFileEntity) {\n          const updatedFileEntity = {\n            ...this.state.currentFileEntity,\n            dataFileHandleId: newFileHandleId,\n          }\n          this.setState({\n            currentFileEntity: updatedFileEntity,\n          })\n          return SynapseClient.updateEntity(\n            updatedFileEntity,\n            this.context.accessToken,\n          )\n        }\n        // else, it's a new file entity\n        const newFileEntity: FileEntity = {\n          parentId: this.state.containerId!,\n          name: fileName,\n          concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n          dataFileHandleId: newFileHandleId,\n        }\n        return SynapseClient.createEntity(\n          newFileEntity,\n          this.context.accessToken,\n        )\n      })\n      .then(fileEntity => {\n        // by this point we've either found and updated the existing file entity, or created a new one.\n        this.finishedProcessing()\n        if (this.props.synIdCallback) {\n          this.props.synIdCallback(fileEntity.id!)\n        }\n      })\n      .catch((error: any) => {\n        this.onError(error)\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.error && (\n          <div className=\"panel panel-danger errors\">\n            <div className=\"panel-heading\">\n              <h3 className=\"panel-title\">Error</h3>\n            </div>\n            <ul className=\"list-group\">\n              <li className=\"list-group-item text-danger\">\n                {this.state.error.name} {this.state.error.reason}\n                {this.state.error.message}\n              </li>\n            </ul>\n          </div>\n        )}\n        {this.context.accessToken &&\n          !this.state.isLoading &&\n          !this.state.successfullyUploaded &&\n          this.state.formSchema &&\n          this.state.formUiSchema &&\n          !this.state.error && (\n            <Form\n              validator={validator}\n              formData={this.state.formData}\n              schema={this.state.formSchema}\n              uiSchema={this.state.formUiSchema}\n              onSubmit={this.onSubmit}\n              ref={this.formRef}\n            >\n              <div style={{ display: 'none' }}>\n                <button type=\"submit\" className=\"btn btn-info\">\n                  Submit\n                </button>\n              </div>\n            </Form>\n          )}\n        {!this.state.error &&\n          this.context.accessToken &&\n          this.state.isLoading && (\n            <React.Fragment>\n              <span>Saving&hellip;</span>\n              <span style={{ marginLeft: '2px' }} className={'spinner'} />\n            </React.Fragment>\n          )}\n      </div>\n    )\n  }\n}\n\nexport default EntityForm\n","import React, { useEffect, useState } from 'react'\nimport {\n  BatchFileRequest,\n  FileHandleAssociateType,\n  FileEntity,\n  ExternalFileHandle,\n} from '@sage-bionetworks/synapse-types'\nimport SynapseClient from '../../synapse-client'\nimport { OpenInNewTwoTone } from '@mui/icons-material'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { isFileEntity, isExternalFileHandle } from '../../utils/types/IsType'\n\nexport type ExternalFileHandleLinkProps = {\n  synId: string\n  className?: string\n}\n\nexport const ExternalFileHandleLink = (props: ExternalFileHandleLinkProps) => {\n  const { accessToken } = useSynapseContext()\n  const { synId, className } = props\n  const [data, setData] = useState<\n    | { fileEntity: FileEntity; externalFileHandle: ExternalFileHandle }\n    | undefined\n  >(undefined)\n  useEffect(() => {\n    const getEntity = async () => {\n      try {\n        const fileEntity = await SynapseClient.getEntity<FileEntity>(\n          accessToken,\n          synId,\n        )\n        if (!isFileEntity(fileEntity)) {\n          throw new Error(`File Entity expected but found ${fileEntity}`)\n        }\n        const batchFileRequest: BatchFileRequest = {\n          requestedFiles: [\n            {\n              associateObjectId: synId,\n              associateObjectType: FileHandleAssociateType.FileEntity,\n              fileHandleId: fileEntity.dataFileHandleId,\n            },\n          ],\n          includeFileHandles: true,\n          includePreSignedURLs: false,\n          includePreviewPreSignedURLs: false,\n        }\n        const file = await SynapseClient.getFiles(batchFileRequest, accessToken)\n        const externalFileHandle = file.requestedFiles[0].fileHandle\n        if (externalFileHandle && isExternalFileHandle(externalFileHandle)) {\n          setData({\n            externalFileHandle,\n            fileEntity,\n          })\n        } else {\n          throw new Error(\n            `Not an external file handle: ${externalFileHandle?.id}`,\n          )\n        }\n      } catch (e) {\n        console.error('Error on getting external file handle = ', e)\n      }\n    }\n    getEntity()\n  }, [synId, accessToken])\n\n  const externalFileHandle = data?.externalFileHandle\n  const fileEntity = data?.fileEntity\n\n  return externalFileHandle ? (\n    <a\n      href={externalFileHandle.externalURL}\n      className={className}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <span>\n        {fileEntity?.name}\n        <OpenInNewTwoTone style={{ marginLeft: 5 }} />\n      </span>\n    </a>\n  ) : (\n    <></>\n  )\n}\n","import React, { useState } from 'react'\nimport ChallengeRegisterButton from '../ChallengeRegisterButton'\nimport ChallengeTeamWizard from '../ChallengeTeamWizard'\nimport AccessRequirementList from '../AccessRequirementList/AccessRequirementList'\nimport { useGetEntity, useGetEntityChallenge } from '../../synapse-queries'\nimport { Challenge } from '@sage-bionetworks/synapse-types'\nimport ConfirmationDialog from '../ConfirmationDialog'\nimport { SynapseQueries, displayToast, useSynapseContext } from '../..'\nimport { useDeleteTeamMembership } from '../../synapse-queries/team/useTeamMembers'\n\nexport type ChallengeDetailPageProps = {\n  projectId: string\n}\n\nexport function ChallengeDetailPage({ projectId }: ChallengeDetailPageProps) {\n  const { accessToken } = useSynapseContext()\n  const [showWizard, setShowWizard] = useState<boolean>(false)\n  const [showRequirements, setShowRequirements] = useState<boolean>(false)\n  const [challenge, setChallenge] = useState<Challenge>()\n  const [showLeaveConfirm, setShowLeaveConfirm] = useState<boolean>(false)\n  const { data: userProfile } = SynapseQueries.useGetCurrentUserProfile()\n  const { data: project } = useGetEntity(projectId)\n\n  const toggleShowWizard = (b: boolean) => {\n    setShowWizard(b)\n  }\n  const onJoinClick = () => {\n    setShowRequirements(true)\n  }\n  const onLeaveClick = () => {\n    setShowLeaveConfirm(true)\n  }\n\n  const { mutate: leaveChallenge } = useDeleteTeamMembership({\n    onSuccess: () => {\n      displayToast('You are no longer registered for this challenge', 'info')\n    },\n  })\n\n  const doLeaveChallenge = () => {\n    if (accessToken && challenge && userProfile) {\n      /**\n       * What does it mean to leave a challenge?\n       * Simply leaving the participant team may not be enough...\n       * the user may also belong to one or more challenge team(s).\n       * Should they be removed from those?\n       * What if the team belongs to more than one challenge?\n       * Should the team be removed from the challenge instead?\n       * Only a team admin can request this however.\n       */\n\n      leaveChallenge({\n        teamId: challenge.participantTeamId,\n        userId: userProfile.ownerId,\n      })\n    }\n  }\n\n  const handleRequirementsHide = () => {\n    setShowRequirements(false)\n    if (accessToken) {\n      setShowWizard(true)\n    }\n  }\n\n  useGetEntityChallenge(projectId, {\n    enabled: !challenge,\n    onSettled: (data, error) => {\n      // console.log('settled', { data }, { error })\n      if (data) {\n        setChallenge(data)\n      }\n      if (error) {\n        console.warn(error)\n      }\n    },\n  })\n\n  return (\n    <>\n      <ChallengeRegisterButton\n        projectId={projectId}\n        onJoinClick={onJoinClick}\n        onLeaveClick={onLeaveClick}\n      />\n      {showRequirements && (\n        <AccessRequirementList\n          entityId={projectId}\n          teamId={challenge?.participantTeamId}\n          onHide={handleRequirementsHide}\n          renderAsModal={true}\n          requestObjectName={project?.name}\n          dialogTitle=\"Challenge Terms and Conditions\"\n        />\n      )}\n      {showWizard && (\n        <ChallengeTeamWizard\n          projectId={projectId}\n          onClose={() => {\n            toggleShowWizard(false)\n          }}\n          isShowingModal={true}\n        />\n      )}\n      {showLeaveConfirm && (\n        <ConfirmationDialog\n          open={showLeaveConfirm}\n          title={'Leave this Challenge?'}\n          content={'Are you sure you want to leave this Challenge?'}\n          onCancel={() => setShowLeaveConfirm(false)}\n          onConfirm={() => {\n            doLeaveChallenge()\n            setShowLeaveConfirm(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n"],"names":["EntityForm","React","props","__publicField","promises","SynapseClient","values","userprofile","targetContainerId","formSchemaFileEntity","formUiSchemaFileEntity","error","targetFolderId","fileContent","el","getFileHandleContent","formSchemaContent","formUiSchemaContent","e","entityLookupRequest","formData","currentFileEntity","entityId","entity","existingFileData","token","submissionFileAndForm","fileContentsBlob","fileName","fileUploadComplete","newFileHandleId","updatedFileEntity","newFileEntity","fileEntity","jsxs","jsx","Form","validator","SynapseContext","ExternalFileHandleLink","accessToken","useSynapseContext","synId","className","data","setData","useState","useEffect","fileEntity2","isFileEntity","batchFileRequest","FileHandleAssociateType","externalFileHandle2","isExternalFileHandle","externalFileHandle","OpenInNewTwoTone","Fragment","ChallengeDetailPage","projectId","showWizard","setShowWizard","showRequirements","setShowRequirements","challenge","setChallenge","showLeaveConfirm","setShowLeaveConfirm","userProfile","SynapseQueries.useGetCurrentUserProfile","project","useGetEntity","toggleShowWizard","b","onJoinClick","onLeaveClick","leaveChallenge","useDeleteTeamMembership","displayToast","doLeaveChallenge","handleRequirementsHide","useGetEntityChallenge","ChallengeRegisterButton","AccessRequirementList","ChallengeTeamWizard","ConfirmationDialog"],"mappings":"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"}