{"version":3,"file":"ThemesPlot.stories-9d970c56.js","sources":["../../src/components/Plot/DotPlot.tsx","../../src/components/Plot/BarPlot.tsx","../../src/components/Plot/ThemesPlot.tsx"],"sourcesContent":["import React, { FunctionComponent /*, useState , useEffect */ } from 'react' // importing FunctionComponent\nimport Plotly from 'plotly.js-basic-dist'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { GraphItem, PlotStyle, Dictionary } from './types'\nimport _ from 'lodash-es'\nconst Plot = createPlotlyComponent(Plotly)\n\nexport type DotPlotProps = {\n  plotData: GraphItem[]\n  layoutConfig: Partial<Plotly.Layout>\n  optionsConfig: Partial<Plotly.Config>\n  label?: string\n  style?: React.CSSProperties\n  id: string\n  isLegend?: boolean\n  isXAxis?: boolean\n  xMax?: number\n  plotStyle?: PlotStyle\n  markerSymbols?: Dictionary\n  onClick?: (e: Readonly<Plotly.PlotMouseEvent>) => void\n}\n\ntype LayoutOptions = {\n  isLegend: boolean\n  isXAxis: boolean\n  maxValue?: number\n  backgroundColor?: string\n}\n\nfunction getLayout(\n  dotPlotLayoutConfig: Partial<Plotly.Layout>,\n  layoutOptions?: LayoutOptions,\n): Partial<Plotly.Layout> {\n  const result = _.cloneDeep(dotPlotLayoutConfig)\n  if (!layoutOptions) {\n    return result\n  }\n  if (layoutOptions.backgroundColor) {\n    result.plot_bgcolor = layoutOptions.backgroundColor\n  }\n  result.yaxis!.showticklabels = false\n  result.xaxis!.range = [-5, layoutOptions.maxValue! + 30]\n  result.xaxis!.visible = layoutOptions.isXAxis\n  result.showlegend = layoutOptions.isLegend\n  result.margin = {\n    t: 0,\n    b: layoutOptions.isXAxis ? 50 : 0,\n    l: 0,\n    r: 0,\n    pad: 15,\n  }\n  let height = 30\n  if (layoutOptions.isLegend) {\n    height = 35\n    result.margin.pad = 0\n    result.xaxis = {\n      visible: false,\n      zeroline: false,\n      showgrid: false,\n      showline: false,\n      range: [0, 1],\n    }\n\n    result.yaxis = {\n      visible: false,\n      showline: false,\n    }\n  }\n  if (layoutOptions.isXAxis) {\n    result.yaxis = {\n      visible: false,\n      showgrid: false,\n      showline: false,\n    }\n    height = 50\n  }\n\n  result.height = height\n\n  return result\n}\n\nfunction createArrayOfGroupValues(\n  headers: string[],\n  items: GraphItem[],\n): any[] {\n  const result = new Array(headers.length)\n  items.forEach(item => {\n    const index = headers.indexOf(item.y)\n    result[index] = item.x\n  })\n  return result\n}\n\nfunction getPlotDataPoints(\n  graphItems: GraphItem[],\n  plotStyle: PlotStyle,\n  ySorted?: string[],\n  markerSymbols?: Dictionary,\n): any[] {\n  const isFakeData = ySorted === undefined\n  const groups = _.uniq(graphItems.map(item => item.group))\n  const data: any = []\n  const defaultSymbols = [\n    'y-down',\n    'triangle-up',\n    'cross-thin-open',\n    'triangle-up-open-dot',\n    'star-square-open',\n    'diamond-x',\n  ]\n\n  groups.forEach((group, i) => {\n    data.push({\n      type: 'scatter',\n\n      x: isFakeData\n        ? [-10] // fake datavalue outside of the bounds\n        : createArrayOfGroupValues(\n            ySorted,\n            graphItems.filter(row => row.group === group),\n          ),\n      y: ySorted,\n      text: [group],\n      hovertemplate: `%{x} %{text}<extra></extra>`,\n      mode: 'markers',\n      name: group,\n      marker: {\n        color: plotStyle.markerFill,\n        line: {\n          color: plotStyle.markerLine,\n          width: 1,\n        },\n\n        symbol: markerSymbols ? markerSymbols[group] : defaultSymbols[i],\n        size: plotStyle.markerSize,\n      },\n    })\n  })\n  return data\n}\n\nconst DotPlot: FunctionComponent<DotPlotProps> = ({\n  plotData,\n  optionsConfig,\n  layoutConfig,\n  label,\n  id,\n  xMax,\n  style = { width: '100%', height: '100%' },\n  markerSymbols,\n  plotStyle = {\n    markerFill: '#515359',\n    markerLine: '#515359',\n    markerSize: 9,\n    backgroundColor: 'transparent',\n  },\n  onClick,\n  isLegend = false,\n  isXAxis = false,\n}: DotPlotProps) => {\n  const pointsTypes = label ? [label] : undefined\n\n  return (\n    <Plot\n      key={`dotPlot_${id}`}\n      layout={getLayout(layoutConfig, {\n        isLegend: isLegend,\n        isXAxis: isXAxis,\n        maxValue: xMax,\n        backgroundColor: plotStyle.backgroundColor,\n      })}\n      style={style}\n      data={getPlotDataPoints(plotData, plotStyle, pointsTypes, markerSymbols)}\n      config={optionsConfig}\n      onClick={e => (onClick ? onClick(e) : _.noop)}\n    />\n  )\n}\n\nexport default DotPlot\n","import React, { FunctionComponent } from 'react'\nimport Plotly from 'plotly.js-basic-dist'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { GraphItem, BarPlotColors, PlotStyle } from './types'\nimport _ from 'lodash-es'\n\nconst Plot = createPlotlyComponent(Plotly)\n\nexport type BarPlotProps = {\n  isTop: boolean\n  style?: React.CSSProperties\n  plotData: GraphItem[]\n  layoutConfig: Partial<Plotly.Layout>\n  optionsConfig: Partial<Plotly.Config>\n  label: string\n  xMax: number\n  colors?: BarPlotColors\n  plotStyle?: PlotStyle\n  onClick?: (event: Readonly<Plotly.PlotMouseEvent>) => void\n}\n\ntype LayoutOptions = {\n  isTop: boolean\n  maxValue: number\n  isLegend?: boolean\n  backgroundColor?: string\n}\n\nfunction getBarPlotDataPoints(\n  data: any[],\n  filter?: string,\n  colors?: BarPlotColors,\n): any[] {\n  if (filter) {\n    data = data.filter(item => item.y === filter)\n  }\n  const groups = _.uniq(data.map(item => item['group'])).sort()\n  const result: any[] = []\n  const defaultColors = [`(28,118,175,1)`, `rgba(91,176,181,1)`]\n\n  groups.forEach((group, i) => {\n    const items = data.filter(item => item.group === group)\n    result.push({\n      x: items.map(item => item.x),\n      y: items.map(item => item.y),\n      name: group,\n      orientation: 'h',\n      marker: {\n        color: colors ? colors[group] : defaultColors[i],\n        width: 1,\n      },\n      text: [group],\n      hovertemplate: `%{x} %{text}<extra></extra>`,\n      textposition: 'none',\n      type: 'bar',\n    })\n  })\n\n  return result\n}\n\nfunction getLayout(\n  layoutConfig: Partial<Plotly.Layout>,\n  { isTop, maxValue, backgroundColor }: LayoutOptions,\n): Partial<Plotly.Layout> {\n  const layout = _.cloneDeep(layoutConfig)\n  layout.xaxis = {\n    visible: false,\n    range: [0, maxValue],\n  }\n  if (backgroundColor) {\n    layout.plot_bgcolor = backgroundColor\n    layout.paper_bgcolor = backgroundColor\n  }\n  if (!isTop) {\n    layout.hoverlabel = {\n      font: {\n        size: 10,\n      },\n    }\n  }\n  layout.showlegend = false\n  layout.height = isTop ? 40 : 20\n  return layout\n}\n\nconst BarPlot: FunctionComponent<BarPlotProps> = ({\n  plotData,\n  optionsConfig,\n  isTop,\n  layoutConfig,\n  label,\n  xMax,\n  colors,\n  plotStyle = { backgroundColor: 'transparent' },\n  style = { width: '100%', height: '100%' },\n  onClick,\n}: BarPlotProps) => {\n  return (\n    <Plot\n      style={style}\n      layout={getLayout(layoutConfig, {\n        isTop,\n        maxValue: xMax,\n        backgroundColor: plotStyle.backgroundColor,\n      })}\n      config={optionsConfig}\n      data={getBarPlotDataPoints(plotData, label, colors)}\n      onClick={e => (onClick ? onClick(e) : _.noop)}\n    />\n  )\n}\n\nexport default BarPlot\n","import React, { FunctionComponent, useState, useEffect } from 'react' // importing FunctionComponent\nimport Plotly from 'plotly.js-basic-dist'\nimport {\n  ElementWithTooltip,\n  TooltipVisualProps,\n} from '../widgets/ElementWithTooltip'\nimport { unCamelCase } from '../../utils/functions/unCamelCase'\nimport { SynapseConstants } from '../../utils'\nimport { getFullQueryTableResults } from '../../synapse-client/SynapseClient'\nimport {\n  QueryResultBundle,\n  QueryBundleRequest,\n  RowSet,\n} from '@sage-bionetworks/synapse-types'\nimport { resultToJson } from '../../utils/functions/SqlFunctions'\nimport {\n  GraphItem,\n  PlotProps,\n  BarPlotColors,\n  ClickCallbackParams,\n} from './types'\nimport _ from 'lodash-es'\nimport DotPlot from './DotPlot'\nimport BarPlot from './BarPlot'\nimport loadingScreen from '../LoadingScreen'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\n\nexport type ThemesPlotProps = {\n  onPointClick: ({ facetValue, type, event }: ClickCallbackParams) => void\n  dotPlot: PlotProps\n  topBarPlot: PlotProps\n  sideBarPlot: PlotProps\n  tooltipProps?: TooltipVisualProps\n  dotPlotYAxisLabel?: string\n}\n\ntype TotalsGroupByY = { y: string; count: number }\ntype TotalsGroupByGroup = { group: string; count: number }\n\nconst optionsConfig: Partial<Plotly.Config> = {\n  displayModeBar: false,\n  responsive: true,\n  scrollZoom: false,\n  editable: false,\n  autosizable: true,\n}\n\nconst tooltipVisualProps: TooltipVisualProps = {\n  delayShow: 0,\n  place: 'right',\n  type: 'light',\n  effect: 'solid',\n  border: true,\n}\nconst dotPlotLayoutConfig: Partial<Plotly.Layout> = {\n  showlegend: true,\n  dragmode: false,\n  legend: {\n    font: {\n      size: 11,\n    },\n\n    y: 1.1,\n    xanchor: 'right',\n    x: 1,\n\n    orientation: 'h',\n  },\n  xaxis: {\n    visible: true,\n    fixedrange: true,\n    zeroline: false,\n    showgrid: false,\n    showline: true,\n    linecolor: '#ddd', //bottom line\n    autotick: true,\n    ticks: 'outside',\n    tickcolor: '#ddd',\n  },\n\n  yaxis: {\n    fixedrange: true,\n    zeroline: false,\n    gridcolor: '#ddd', //horizontal lines\n    automargin: true,\n  },\n\n  margin: {\n    pad: 20,\n  },\n  hovermode: 'closest',\n}\n\nconst barLayoutConfig: Partial<Plotly.Layout> = {\n  barmode: 'stack',\n  showlegend: false,\n  dragmode: false,\n  hovermode: 'closest',\n  yaxis: { visible: false, fixedrange: true },\n  margin: {\n    l: 0,\n    r: 0,\n    b: 0,\n    t: 0,\n    pad: 0,\n  },\n}\n\nfunction fetchData(\n  token: string,\n  { xField, yField, groupField, entityId, whereClause, infoField }: PlotProps,\n): Promise<RowSet> {\n  const sql = `SELECT ${xField} as \"x\", ${yField} as \"y\", ${\n    infoField ? infoField + ' as \"info\", ' : ''\n  }   ${groupField} as \"group\" FROM ${entityId} ${\n    whereClause ? ' WHERE ' + whereClause : ''\n  }`\n\n  const queryRequest: QueryBundleRequest = {\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    partMask: SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    entityId: entityId,\n    query: {\n      sql: sql,\n    },\n  }\n\n  return getFullQueryTableResults(queryRequest, token).then(\n    (data: QueryResultBundle) => {\n      return data.queryResult!.queryResults\n    },\n  )\n}\n\nfunction getTotalsByProp<T>(data: GraphItem[], prop: string): T[] {\n  const resultObject = data.reduce((res, obj) => {\n    res[obj[prop]] =\n      (obj[prop] in res ? Number(res[obj[prop]]) : 0) + Number(obj.x)\n    return res\n  }, {})\n  const result = []\n  for (const property in resultObject) {\n    result.push({\n      [prop]: property,\n      count: resultObject[property] as number,\n    } as unknown as T)\n  }\n  return result\n}\n\nconst getClickTargetData = (\n  e: Plotly.PlotMouseEvent,\n  swap: boolean,\n): ClickCallbackParams => {\n  const pointData = e.points[0].data\n\n  let facetValue = pointData.y[0] as string\n  let type = pointData.name\n\n  if (swap) {\n    // @ts-ignore\n    ;[facetValue, type] = [type, facetValue]\n  }\n  return { facetValue, type, event: e.event }\n}\n\nconst renderTopBarLegend = (\n  colors: BarPlotColors | undefined,\n  xLabels: string[],\n): JSX.Element => (\n  <div className=\"ThemesPlot__barPlotLegend\">\n    {xLabels.map((item, i) => (\n      <div style={{ float: 'left' }} key={`topBar_${i}`}>\n        <div\n          className=\"ThemesPlot__barPlotLegend__label\"\n          key=\"topBar_label\"\n          style={{\n            backgroundColor: `${colors ? colors[item] : 'transparent'}`,\n          }}\n        ></div>\n        <div className=\"ThemesPlot__barPlotLegend__graph\" key=\"topBar_graph\">\n          {item}\n        </div>{' '}\n      </div>\n    ))}\n  </div>\n)\n\nconst fadeColors = (colors: { [key: string]: string }, opacity: string) => {\n  for (const key in colors) {\n    colors[key] = colors[key]\n      .replace(',1)', `, ${opacity})`)\n      .replace(',1.0)', `, ${opacity})`)\n  }\n  return colors\n}\n\nconst getTooltip = (data: GraphItem[], filter: string) => {\n  return _.first(data.filter(item => item.y === filter).map(item => item.info))\n}\n\nexport const ThemesPlot: FunctionComponent<ThemesPlotProps> = ({\n  dotPlot,\n  topBarPlot,\n  sideBarPlot,\n  tooltipProps = tooltipVisualProps,\n  onPointClick,\n  dotPlotYAxisLabel = 'Research Themes',\n}: ThemesPlotProps) => {\n  const { accessToken } = useSynapseContext()\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [dotPlotQueryData, setDotPlotQueryData] = useState<GraphItem[]>([])\n  const [topBarPlotData, setTopBarQueryData] = useState<GraphItem[]>([])\n  const [sideBarPlotData, setSideBarQueryData] = useState<GraphItem[]>([])\n\n  useEffect(() => {\n    const dotPlotData = fetchData(accessToken!, dotPlot)\n    const topBarPlotData = fetchData(accessToken!, topBarPlot)\n    const sideBarPlotData = fetchData(accessToken!, sideBarPlot)\n    Promise.all([dotPlotData, topBarPlotData, sideBarPlotData])\n      .then(result => {\n        setDotPlotQueryData(resultToJson(result[0].headers, result[0].rows))\n        setTopBarQueryData(resultToJson(result[1].headers, result[1].rows))\n        setSideBarQueryData(resultToJson(result[2].headers, result[2].rows))\n        setIsLoaded(true)\n      })\n      .catch(err => {\n        throw err\n      })\n    return () => {}\n  }, [accessToken, dotPlot, topBarPlot, sideBarPlot])\n  let yLabelsForDotPlot: string[] = []\n  let xLabelsForTopBarPlot: string[] = []\n  let xMaxForDotPlot = 0\n  let xMaxForSideBarPlot = 0\n  let topBarPlotDataSorted: TotalsGroupByY[] = []\n  let totalsByDotPlotY: TotalsGroupByY[] = []\n  if (isLoaded) {\n    totalsByDotPlotY = getTotalsByProp(sideBarPlotData, 'y')\n    yLabelsForDotPlot = totalsByDotPlotY\n      .sort((a, b) => b.count - a.count)\n      .map(item => item.y)\n    xMaxForSideBarPlot = Math.max(...totalsByDotPlotY.map(item => item.count))\n    xMaxForDotPlot = Math.max(...dotPlotQueryData.map(item => Number(item.x)))\n    topBarPlotDataSorted = _.orderBy(getTotalsByProp(topBarPlotData, 'y'), [\n      'y',\n    ])\n    xLabelsForTopBarPlot = _.orderBy(\n      getTotalsByProp<TotalsGroupByGroup>(topBarPlotData, 'group'),\n      ['group'],\n    ).map(item => item.group)\n  }\n\n  return (\n    <>\n      {!isLoaded && loadingScreen}\n\n      {isLoaded && (\n        <div className=\"ThemesPlot\">\n          <div className=\"ThemesPlot__dotPlotLegend\">\n            <DotPlot\n              id=\"head\"\n              plotData={dotPlotQueryData}\n              isLegend={true}\n              markerSymbols={dotPlot.markerSymbols}\n              style={{ width: '100%', height: '100%' }}\n              layoutConfig={dotPlotLayoutConfig}\n              optionsConfig={{\n                ...optionsConfig,\n                responsive: true,\n                staticPlot: true,\n              }}\n              plotStyle={{\n                ...dotPlot.plotStyle!,\n                backgroundColor: 'transparent',\n              }}\n            ></DotPlot>\n          </div>\n          {topBarPlot.colors &&\n            renderTopBarLegend(topBarPlot.colors, xLabelsForTopBarPlot)}\n          {topBarPlotDataSorted.map((item, i) => (\n            <div className=\"ThemesPlot__topBarPlot\" key={`topBarDiv_${i}`}>\n              <div className=\"ThemesPlot__topBarPlot__label\">\n                {item.count}&nbsp;{unCamelCase(item.y)}\n              </div>\n              <div className=\"ThemesPlot__topBarPlot__plot\">\n                <BarPlot\n                  style={{ width: '100%', height: '100%' }}\n                  layoutConfig={_.cloneDeep(barLayoutConfig)}\n                  optionsConfig={{ ...optionsConfig }}\n                  plotData={topBarPlotData}\n                  isTop={true}\n                  label={item.y}\n                  xMax={item.count}\n                  onClick={(e: any) =>\n                    onPointClick(getClickTargetData(e, true))\n                  }\n                  colors={\n                    // we are not actually fading colors for now. But keeping implemenation in case it changes\n                    i % 2 === 0\n                      ? topBarPlot.colors\n                      : fadeColors({ ...topBarPlot.colors }, '1')\n                  }\n                />\n              </div>\n            </div>\n          ))}\n          <div style={{ display: 'flex', position: 'relative' }}>\n            <div className=\"ThemesPlot__dotPlotYLabel\">{dotPlotYAxisLabel}</div>\n            <div className=\"ThemesPlot__dotPlot\">\n              {yLabelsForDotPlot.map((label, i) => (\n                <div\n                  key={`plotDiv_${+i}`}\n                  className=\"ThemesPlot__dotPlot__row\"\n                  style={{\n                    backgroundColor: dotPlot.plotStyle?.backgroundColor,\n                  }}\n                >\n                  <div className=\"ThemesPlot__dotPlot__barColumn\">\n                    <ElementWithTooltip\n                      tooltipText={`${getTooltip(dotPlotQueryData, label)} `}\n                      tooltipVisualProps={tooltipProps}\n                      callbackFn={() => _.noop}\n                    >\n                      <div>\n                        <span className=\"ThemesPlot__dotPlot__themeLabel\">\n                          {label}\n                        </span>\n                        <br />\n                        <span className=\"ThemesPlot__dotPlot__countLabel\">\n                          {totalsByDotPlotY[i].count} {sideBarPlot.countLabel}\n                        </span>\n                        <br />\n                        <BarPlot\n                          style={{ width: '100%' }}\n                          layoutConfig={barLayoutConfig}\n                          optionsConfig={optionsConfig}\n                          plotData={sideBarPlotData}\n                          isTop={false}\n                          xMax={xMaxForSideBarPlot}\n                          label={label}\n                          colors={fadeColors({ ...topBarPlot.colors }, '1')}\n                        />\n                      </div>\n                    </ElementWithTooltip>\n                  </div>\n                  <div className=\"ThemesPlot__dotPlot__dotPlotColumn\">\n                    <div\n                      style={{\n                        width: '100%',\n                        backgroundColor: dotPlot.plotStyle?.backgroundColor,\n                      }}\n                    >\n                      <DotPlot\n                        id={`${i}`}\n                        onClick={(e: any) =>\n                          onPointClick(getClickTargetData(e, false))\n                        }\n                        plotData={dotPlotQueryData}\n                        plotStyle={dotPlot.plotStyle}\n                        markerSymbols={dotPlot.markerSymbols}\n                        xMax={xMaxForDotPlot}\n                        label={label}\n                        layoutConfig={dotPlotLayoutConfig}\n                        optionsConfig={{\n                          ...optionsConfig,\n                          responsive: false,\n                        }}\n                      ></DotPlot>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              <div className=\"ThemesPlot__dotPlot__row\">\n                <div\n                  className=\"ThemesPlot__dotPlot__barColumn\"\n                  style={{ textAlign: 'right' }}\n                >\n                  VOLUME:\n                </div>\n                <div\n                  className=\"ThemesPlot__dotPlot__dotPlotColumn\"\n                  style={{ marginTop: '0px' }}\n                >\n                  <DotPlot\n                    id={'footer'}\n                    plotData={dotPlotQueryData}\n                    isXAxis={true}\n                    xMax={xMaxForDotPlot}\n                    layoutConfig={dotPlotLayoutConfig}\n                    optionsConfig={{ ...optionsConfig, responsive: false }}\n                  ></DotPlot>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div></div>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default ThemesPlot\n"],"names":["Plot","createPlotlyComponent","Plotly","getLayout","dotPlotLayoutConfig","layoutOptions","result","_","height","createArrayOfGroupValues","headers","items","item","index","getPlotDataPoints","graphItems","plotStyle","ySorted","markerSymbols","isFakeData","groups","data","defaultSymbols","group","i","row","DotPlot","plotData","optionsConfig","layoutConfig","label","id","xMax","style","onClick","isLegend","isXAxis","pointsTypes","jsx","e","getBarPlotDataPoints","filter","colors","defaultColors","isTop","maxValue","backgroundColor","layout","BarPlot","tooltipVisualProps","barLayoutConfig","fetchData","token","xField","yField","groupField","entityId","whereClause","infoField","sql","getFullQueryTableResults","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","getTotalsByProp","prop","resultObject","res","obj","property","getClickTargetData","swap","pointData","facetValue","type","renderTopBarLegend","xLabels","jsxs","fadeColors","opacity","key","getTooltip","ThemesPlot","dotPlot","topBarPlot","sideBarPlot","tooltipProps","onPointClick","dotPlotYAxisLabel","accessToken","useSynapseContext","isLoaded","setIsLoaded","useState","dotPlotQueryData","setDotPlotQueryData","topBarPlotData","setTopBarQueryData","sideBarPlotData","setSideBarQueryData","useEffect","dotPlotData","topBarPlotData2","sideBarPlotData2","resultToJson","err","yLabelsForDotPlot","xLabelsForTopBarPlot","xMaxForDotPlot","xMaxForSideBarPlot","topBarPlotDataSorted","totalsByDotPlotY","a","b","Fragment","loadingScreen","unCamelCase","_a","ElementWithTooltip","_b"],"mappings":"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"}