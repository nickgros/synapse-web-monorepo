{"version":3,"file":"accessRequirementHandlers-08bf3f4e.js","sources":["../../mocks/msw/handlers/accessRequirementHandlers.ts"],"sourcesContent":["import { rest } from 'msw'\nimport {\n  ACCESS_REQUIREMENT_BY_ID,\n  ACCESS_REQUIREMENT_STATUS,\n  ACCESS_REQUIREMENT_WIKI_PAGE_KEY,\n  ENTITY_ACCESS_REQUIREMENTS,\n} from '../../../src/utils/APIConstants'\nimport { MOCK_REPO_ORIGIN } from '../../../src/utils/functions/getEndpoint'\nimport {\n  AccessRequirement,\n  AccessRequirementStatus,\n  ObjectType,\n  PaginatedResults,\n  SubmissionState,\n  WikiPageKey,\n} from '@sage-bionetworks/synapse-types'\nimport { SynapseApiResponse } from '../handlers'\nimport {\n  mockAccessRequirements,\n  mockAccessRequirementWikiPageKeys,\n} from '../../mockAccessRequirements'\nimport { mockApprovedSubmission } from '../../dataaccess/MockSubmission'\nimport { MOCK_FILE_ENTITY_ID } from '../../entity/mockFileEntity'\n\nexport const getAccessRequirementHandlers = (backendOrigin: string) => [\n  rest.get(\n    `${backendOrigin}${ACCESS_REQUIREMENT_BY_ID(':id')}`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<AccessRequirement> = {\n        reason: `Mock Service worker could not find an access requirement with ID ${req.params.id}`,\n      }\n      const ar = mockAccessRequirements.find(\n        ar => ar.id.toString() === req.params.id,\n      )\n\n      if (ar) {\n        response = ar\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ACCESS_REQUIREMENT_WIKI_PAGE_KEY(':id')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<WikiPageKey> = {\n        reason: `Mock Service worker could not find an access requirement wiki page key with AR ID ${req.params.id}`,\n      }\n      const wikiPageKey = mockAccessRequirementWikiPageKeys.find(\n        wpk =>\n          (wpk.ownerObjectType === ObjectType.ACCESS_REQUIREMENT &&\n            wpk.ownerObjectId.toString()) === req.params.id,\n      )\n\n      if (wikiPageKey) {\n        response = wikiPageKey\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n]\nexport const getAccessRequirementEntityBindingHandlers = (\n  backendOrigin: string,\n  entityId = ':entityId',\n  accessRequirements: AccessRequirement[] = mockAccessRequirements,\n) => [\n  rest.get(\n    `${MOCK_REPO_ORIGIN}${ENTITY_ACCESS_REQUIREMENTS(entityId)}`,\n\n    async (req, res, ctx) => {\n      let status = 200\n      let response: PaginatedResults<AccessRequirement> = {\n        results: accessRequirements,\n        totalNumberOfResults: accessRequirements.length,\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n]\n\nexport const getAccessRequirementStatusHandlers = (\n  backendOrigin: string,\n  arStatus: Record<string, AccessRequirementStatus> = {},\n) => [\n  rest.get(\n    `${backendOrigin}${ACCESS_REQUIREMENT_STATUS(':id')}`,\n\n    async (req, res, ctx) => {\n      let response: AccessRequirementStatus | undefined\n      const accessRequirement = mockAccessRequirements.find(\n        accessRequirement => req.params.id === accessRequirement.id.toString(),\n      )\n      if (req.params.id in arStatus) {\n        response = arStatus[req.params.id]\n      }\n      if (!response) {\n        const isManagedACTAR =\n          accessRequirement.concreteType ===\n          'org.sagebionetworks.repo.model.ManagedACTAccessRequirement'\n        response = {\n          accessRequirementId: req.params.id as string,\n          concreteType: isManagedACTAR\n            ? 'org.sagebionetworks.repo.model.dataaccess.ManagedACTAccessRequirementStatus'\n            : 'org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus',\n          isApproved: true,\n          currentSubmissionStatus: isManagedACTAR\n            ? {\n                submissionId: mockApprovedSubmission.id,\n                submittedBy: mockApprovedSubmission.submittedBy,\n                modifiedOn: mockApprovedSubmission.modifiedOn,\n                state: SubmissionState.APPROVED,\n              }\n            : undefined,\n        }\n      }\n      const status = response ? 200 : 404\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n]\n"],"names":["getAccessRequirementHandlers","backendOrigin","rest","ACCESS_REQUIREMENT_BY_ID","req","res","ctx","status","response","ar","mockAccessRequirements","ACCESS_REQUIREMENT_WIKI_PAGE_KEY","wikiPageKey","mockAccessRequirementWikiPageKeys","wpk","ObjectType","getAccessRequirementEntityBindingHandlers","entityId","accessRequirements","MOCK_REPO_ORIGIN","ENTITY_ACCESS_REQUIREMENTS","getAccessRequirementStatusHandlers","arStatus","ACCESS_REQUIREMENT_STATUS","accessRequirement","isManagedACTAR","mockApprovedSubmission","SubmissionState"],"mappings":"wOAwBa,MAAAA,EAAgCC,GAA0B,CACrEC,EAAAA,KAAK,IACH,GAAGD,IAAgBE,EAAyB,KAAK,IAEjD,MAAOC,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAAkD,CACpD,OAAQ,oEAAoEJ,EAAI,OAAO,IAAA,EAEzF,MAAMK,EAAKC,EAAuB,KAChCD,GAAMA,EAAG,GAAG,SAAS,IAAML,EAAI,OAAO,EAAA,EAGxC,OAAIK,IACSD,EAAAC,EACFF,EAAA,KAGJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EACAN,EAAAA,KAAK,IACH,GAAGD,IAAgBU,EAAiC,KAAK,IACzD,MAAOP,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAA4C,CAC9C,OAAQ,qFAAqFJ,EAAI,OAAO,IAAA,EAE1G,MAAMQ,EAAcC,EAAkC,KACpDC,IACGA,EAAI,kBAAoBC,EAAW,oBAClCD,EAAI,cAAc,SAAA,KAAgBV,EAAI,OAAO,EAAA,EAGnD,OAAIQ,IACSJ,EAAAI,EACFL,EAAA,KAGJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,CACF,EACaQ,EAA4C,CACvDf,EACAgB,EAAW,YACXC,EAA0CR,IACvC,CACHR,EAAAA,KAAK,IACH,GAAGiB,IAAmBC,EAA2BH,CAAQ,IAEzD,MAAOb,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAAgD,CAClD,QAASU,EACT,qBAAsBA,EAAmB,MAAA,EAEpC,OAAAb,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,CACF,EAEaa,EAAqC,CAChDpB,EACAqB,EAAoD,KACjD,CACHpB,EAAAA,KAAK,IACH,GAAGD,IAAgBsB,EAA0B,KAAK,IAElD,MAAOnB,EAAKC,EAAKC,IAAQ,CACnB,IAAAE,EACJ,MAAMgB,EAAoBd,EAAuB,KAC/Cc,GAAqBpB,EAAI,OAAO,KAAOoB,EAAkB,GAAG,SAAS,CAAA,EAKvE,GAHIpB,EAAI,OAAO,MAAMkB,IACRd,EAAAc,EAASlB,EAAI,OAAO,EAAE,GAE/B,CAACI,EAAU,CACP,MAAAiB,EACJD,EAAkB,eAClB,6DACShB,EAAA,CACT,oBAAqBJ,EAAI,OAAO,GAChC,aAAcqB,EACV,8EACA,yEACJ,WAAY,GACZ,wBAAyBA,EACrB,CACE,aAAcC,EAAuB,GACrC,YAAaA,EAAuB,YACpC,WAAYA,EAAuB,WACnC,MAAOC,EAAgB,QAEzB,EAAA,MAAA,EAGF,MAAApB,EAASC,EAAW,IAAM,IACzB,OAAAH,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,CACF"}