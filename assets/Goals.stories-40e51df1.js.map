{"version":3,"file":"Goals.stories-40e51df1.js","sources":["../../src/components/Goals/Goals.Mobile.tsx","../../src/components/Goals/Goals.Desktop.tsx","../../src/components/Goals/Goals.tsx"],"sourcesContent":["import React from 'react'\nimport { GoalsDataProps } from './Goals'\nimport ExpandableContent from '../home_page/ExpandableContent'\nimport QueryCount from '../QueryCount/QueryCount'\nimport { Button } from '@mui/material'\n\nexport default function GoalsMobile({\n  link,\n  summary,\n  countSql,\n  title,\n}: GoalsDataProps) {\n  const titleElement = (\n    <div className=\"Goals__Mobile__Header\">\n      {countSql && (\n        <span className=\"Goals__Mobile__Header__Count\">\n          <QueryCount parens={false} query={{ sql: countSql }} />\n        </span>\n      )}\n      <span className=\"Goals__Mobile__Header__Title\"> {title} </span>\n    </div>\n  )\n  const content = (\n    <div className=\"Goals__Mobile__Content\">\n      <p>{summary}</p>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        className=\"Goals__Mobile__Content__Link\"\n        href={link}\n      >\n        Explore\n      </Button>\n    </div>\n  )\n  return <ExpandableContent title={titleElement} content={content} />\n}\n","import React from 'react'\nimport { GoalsDataProps } from './Goals'\nimport QueryCount from '../QueryCount/QueryCount'\nimport { Button } from '@mui/material'\n\nexport default function GoalsDesktop({\n  asset,\n  link,\n  summary,\n  countSql,\n  title,\n}: GoalsDataProps) {\n  return (\n    <div className=\"Goals__Card\">\n      <div\n        className=\"Goals__Card__header\"\n        style={{ background: `url('${asset}')` }}\n      >\n        <p>\n          <span className=\"Goals__Card__header__title\"> {title} </span>\n          {countSql && (\n            <span className=\"Goals__Card__header__count\">\n              <QueryCount parens={false} query={{ sql: countSql }} />\n            </span>\n          )}\n        </p>\n      </div>\n      <div className=\"Goals__Card__summary\">\n        <p> {summary} </p>\n        <Button\n          className=\"Goals__Card__summary__link\"\n          variant=\"contained\"\n          color=\"secondary\"\n          href={link}\n        >\n          Explore\n        </Button>\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n  QueryBundleRequest,\n  FileHandleAssociation,\n  FileHandleAssociateType,\n  BatchFileRequest,\n} from '@sage-bionetworks/synapse-types'\nimport { SynapseConstants } from '../../utils'\nimport { getFiles } from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { ErrorBanner } from '../error/ErrorBanner'\nimport useGetQueryResultBundle from '../../synapse-queries/entity/useGetQueryResultBundle'\nimport useShowDesktop from '../../utils/hooks/useShowDesktop'\nimport GoalsMobile from './Goals.Mobile'\nimport GoalsDesktop from './Goals.Desktop'\nimport { getFieldIndex } from '../../utils/functions/queryUtils'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\n\nexport type GoalsProps = {\n  entityId: string\n}\n\nexport type GoalsDataProps = {\n  countSql?: string\n  title: string\n  summary: string\n  link: string\n  asset: string\n}\n\nenum ExpectedColumns {\n  TABLEID = 'TableId', // Both TableId or CountSql are used to indicate what Table rows to count.\n  COUNT_SQL = 'CountSql', // Code uses CountSql over TableId if defined (if the CountSql column is in the schema and filled in).\n  TITLE = 'Title',\n  SUMMARY = 'Summary',\n  LINK = 'Link',\n  ASSET = 'Asset',\n}\n\nexport const Goals: React.FC<GoalsProps> = (props: GoalsProps) => {\n  const { entityId } = props\n  const { accessToken } = useSynapseContext()\n  const [assets, setAssets] = useState<string[] | undefined>()\n  const [error, setError] = useState<string | SynapseClientError | undefined>()\n  const showDesktop = useShowDesktop()\n  const queryBundleRequest: QueryBundleRequest = {\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    entityId,\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    query: {\n      sql: `select * from ${entityId} order by ItemOrder`,\n    },\n  }\n  const { data: queryResultBundle } =\n    useGetQueryResultBundle(queryBundleRequest)\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const assetColumnIndex = getFieldIndex(\n          ExpectedColumns.ASSET,\n          queryResultBundle,\n        )\n        const assets = (queryResultBundle?.queryResult!.queryResults.rows.map(\n          el => el.values[assetColumnIndex],\n        ) ?? []) as string[]\n        if (assets.some(asset => asset === null)) {\n          // We cast assets above assuming there are no null values, emit a warning just in case.\n          console.warn('Row has null value(s) when no nulls expected')\n        }\n\n        if (assets.length === 0) {\n          // wait for data to load\n          return\n        }\n        const fileHandleAssociationList: FileHandleAssociation[] = assets.map(\n          fileId => {\n            return {\n              associateObjectId: entityId,\n              associateObjectType: FileHandleAssociateType.TableEntity,\n              fileHandleId: fileId,\n            }\n          },\n        )\n        const batchFileRequest: BatchFileRequest = {\n          includeFileHandles: false,\n          includePreSignedURLs: true,\n          includePreviewPreSignedURLs: false,\n          requestedFiles: fileHandleAssociationList,\n        }\n        const files = await getFiles(batchFileRequest, accessToken)\n        setError(undefined)\n        setAssets(\n          files.requestedFiles\n            .filter(el => el.preSignedURL !== undefined)\n            .map(el => el.preSignedURL!),\n        )\n      } catch (e) {\n        console.error('Error on get data', e)\n        setError(e)\n      }\n    }\n    getData()\n  }, [entityId, accessToken, queryResultBundle])\n\n  const tableIdColumnIndex = getFieldIndex(\n    ExpectedColumns.TABLEID,\n    queryResultBundle,\n  )\n  const countSqlColumnIndex = getFieldIndex(\n    ExpectedColumns.COUNT_SQL,\n    queryResultBundle,\n  )\n\n  const titleColumnIndex = getFieldIndex(\n    ExpectedColumns.TITLE,\n    queryResultBundle,\n  )\n  const summaryColumnIndex = getFieldIndex(\n    ExpectedColumns.SUMMARY,\n    queryResultBundle,\n  )\n  const linkColumnIndex = getFieldIndex(ExpectedColumns.LINK, queryResultBundle)\n\n  return (\n    <div className={`Goals${showDesktop ? '__Desktop' : ''}`}>\n      {error && <ErrorBanner error={error} />}\n      {queryResultBundle?.queryResult!.queryResults.rows.map((el, index) => {\n        const values = el.values as string[]\n        if (values.some(value => value === null)) {\n          // We cast values above assuming there are no null values, emit a warning just in case.\n          console.warn('Row has null value(s) when no nulls expected')\n        }\n        const tableId =\n          tableIdColumnIndex > -1 ? values[tableIdColumnIndex] : undefined\n        let countSql\n        if (countSqlColumnIndex > -1 && values[countSqlColumnIndex]) {\n          countSql = values[countSqlColumnIndex]\n        } else if (tableId) {\n          countSql = `SELECT * FROM ${tableId}`\n        }\n        const title = values[titleColumnIndex]\n        const summary = values[summaryColumnIndex]\n        const link = values[linkColumnIndex]\n        // assume that we recieve assets in order of rows and there is an asset for each item\n        // can revisit if this isn't the case.\n        const asset = assets?.[index] ?? ''\n        const goalsDataProps: GoalsDataProps = {\n          countSql,\n          title,\n          summary,\n          link,\n          asset,\n        }\n        return showDesktop ? (\n          <GoalsDesktop {...goalsDataProps} />\n        ) : (\n          <GoalsMobile {...goalsDataProps} />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Goals\n"],"names":["GoalsMobile","link","summary","countSql","title","jsx","ExpandableContent","jsxs","QueryCount","Button","GoalsDesktop","asset","Goals","props","entityId","accessToken","useSynapseContext","assets","setAssets","useState","error","setError","showDesktop","useShowDesktop","queryBundleRequest","SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","queryResultBundle","useGetQueryResultBundle","useEffect","assetColumnIndex","getFieldIndex","assets2","el","batchFileRequest","fileId","FileHandleAssociateType","files","getFiles","e","tableIdColumnIndex","countSqlColumnIndex","titleColumnIndex","summaryColumnIndex","linkColumnIndex","ErrorBanner","index","values","value","tableId","goalsDataProps"],"mappings":"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"}