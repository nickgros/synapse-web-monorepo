import{l as c}from"./index-07e2bb0e.js";import{l as N,i as S,bn as h,bo as D,bp as C,bq as _,br as v,bs as $,bt as w,bu as M,aa as A}from"./SynapseClient-773213a5.js";import{g as L,B as j}from"./getEndpoint-ac94413e.js";import{M as y,a as O}from"./mock_user_profile-2ebcbdfc.js";import{m as p,a as B}from"./mockProject-4b42af10.js";import{m as P}from"./mockFileEntity-f14e2177.js";import{a as V}from"./mockTableEntity-1a06ed09.js";import{b as R}from"./userProfileHandlers-8ced1f30.js";import{m as U}from"./mockSchema-5e2faaa9.js";const u="syn60000",I="A Mocked Dataset",f={id:u,parentId:p.id,name:I,concreteType:"org.sagebionetworks.repo.model.table.Dataset",createdBy:y.toString(),modifiedBy:O.toString(),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",versionNumber:3,versionLabel:"in progress",versionComment:"in progress",isLatestVersion:!0,etag:"00000000-0000-0000-0000-000000000000",items:[],columnIds:[],isSearchEnabled:!1},Y={id:u,type:"org.sagebionetworks.repo.model.table.Dataset",name:I,benefactorId:parseInt(p.id),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",createdBy:y.toString(),modifiedBy:y.toString(),versionNumber:3,versionLabel:"in progress",isLatestVersion:!0},g={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:p.name,id:p.id,type:"org.sagebionetworks.repo.model.Project"},{name:I,id:u,type:"org.sagebionetworks.repo.model.FileEntity"}]},H={1:{...f,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1},2:{...f,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1}},K=[{id:u,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1,modifiedBy:y.toString(),modifiedByPrincipalId:y.toString(),modifiedOn:"2022-03-22T18:50:22.336Z"},{id:u,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1,modifiedBy:y.toString(),modifiedByPrincipalId:y.toString(),modifiedOn:"2022-03-22T18:47:34.797Z"}],Z={accessControlList:{id:"239443242",resourceAccess:[]},annotations:{id:"34243",etag:"00000000-0000-0000-0000-000000000000",annotations:{}},benefactorAcl:{id:"239443242",resourceAccess:[]},fileHandles:[],hasChildren:!1,restrictionInformation:{restrictionLevel:N.OPEN,hasUnmetAccessRequirement:!1},threadCount:0,entity:f,entityType:S.DATASET,path:g,permissions:{canView:!0,canEdit:!0,canMove:!0,canAddChild:!0,canCertifiedUserEdit:!0,canCertifiedUserAddChild:!0,isCertifiedUser:!0,canChangePermissions:!0,canChangeSettings:!0,canDelete:!0,canDownload:!0,canUpload:!0,canEnableInheritance:!0,ownerPrincipalId:3350396,canPublicRead:!0,canModerate:!0,isCertificationRequired:!0,isEntityOpenData:!1}},T={id:u,name:I,entity:f,entityHeader:Y,path:g,bundle:Z,versions:H,versionInfo:K},b="syn70000",E="A Mocked Dataset Collection",F={id:b,parentId:p.id,name:E,concreteType:"org.sagebionetworks.repo.model.table.DatasetCollection",createdBy:y.toString(),modifiedBy:y.toString(),etag:"00000000-0000-0000-0000-000000000000",items:[{entityId:T.id,versionNumber:1}],columnIds:[],isSearchEnabled:!1},J={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:p.name,id:p.id,type:"org.sagebionetworks.repo.model.Project"},{name:E,id:b,type:"org.sagebionetworks.repo.model.FileEntity"}]},G={id:b,name:E,entity:F,path:J},l=[P,...B,T,G,V],ne=m=>[c.rest.post(`${m}${h}`,async(s,r,e)=>{let n=404,o={reason:`Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(s.body)}`};if(s.body){const t=s.body,i=l.find(a=>a.name===t.name);i?(o=i.entity,n=200):t.name===R&&(o.reason="Invalid project name",n=403)}return r(e.status(n),e.json(o))}),c.rest.get(`${m}${D(":entityId")}`,async(s,r,e)=>{let n=404,o={reason:`Mock Service worker could not find a mock entity with ID ${s.params.entityId}`};const t=l.find(i=>i.id===s.params.entityId);return t&&(o=t.entity,n=200),r(e.status(n),e.json(o))}),c.rest.get(`${m}${C(":entityId")}`,async(s,r,e)=>{let n=404,o={reason:`Mock Service worker could not find mock entity versions for ID ${s.params.entityId}`};const t=l.find(i=>i.id===s.params.entityId);return t&&t.versionInfo&&(o={results:t.versionInfo},n=200),r(e.status(n),e.json(o))}),c.rest.get(`${m}${_(":entityId",":versionNumber")}`,async(s,r,e)=>{let n=404;const o=s.params.entityId,t=s.params.versionNumber.toString(),i=parseInt(t);let a={reason:`Mock Service worker could not find a mock versioned entity with ID ${o}.${t}`};const d=l.find(k=>k.id===s.params.entityId);return d&&d.versions&&d.versions[i]&&(a=d.versions[i],n=200),r(e.status(n),e.json(a))}),c.rest.post(`${m}${v(":entityId")}`,async(s,r,e)=>{let n=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${s.params.entityId}`};const t=l.find(i=>i.id===s.params.entityId);return t!=null&&t.bundle&&(o=t.bundle,n=200),r(e.status(n),e.json(o))}),c.rest.post(`${m}${v(":entityId",":versionNumber")}`,async(s,r,e)=>{const n=s.params.entityId,o=parseInt(s.params.versionNumber);let t=404,i={reason:`Mock Service worker could not find a mock entity bundle with ID ${n}`};const a=l.find(d=>d.id===n);if(a){const d=a.bundle;a.versions&&a.versions[o]?i={...d,entity:a.versions[o]}:i=d,t=200}return r(e.status(t),e.json(i))}),c.rest.get(`${m}${$(":entityId")}`,async(s,r,e)=>r(e.status(200),e.json(U))),c.rest.get(`${m}${w(":entityId")}`,async(s,r,e)=>{let n=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${s.params.entityId}`};const t=l.find(i=>i.id===s.params.entityId);return t!=null&&t.json&&(o=t.json,n=200),r(e.status(n),e.json(o))}),c.rest.post(`${m}${M}`,async(s,r,e)=>{let n=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${s.params.entityId}`};const t=s.body,i=l.filter(a=>t.references.find(d=>d.targetId===a.id)).map(a=>a.entityHeader).filter(a=>!!a);return i&&(o={results:i},n=200),r(e.status(n),e.json(o))}),c.rest.get(`${m}${D(":entityId")}/path`,async(s,r,e)=>{let n=404,o={reason:`Mock Service worker could not find a mock entity path using ID ${s.params.entityId}`};const t=l.find(i=>s.params.entityId===i.id);return t&&t.path&&(o=t.path,n=200),r(e.status(n),e.json(o))}),c.rest.get(`${L(j.REPO_ENDPOINT)}/file/v1/entity/:id/uploadDestination`,async(s,r,e)=>{const n={banner:"",storageLocationId:1,uploadType:A.S3,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"};return r(e.status(200),e.json(n))})];export{ne as g};
//# sourceMappingURL=entityHandlers-71f83423.js.map
