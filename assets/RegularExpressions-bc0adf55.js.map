{"version":3,"file":"RegularExpressions-bc0adf55.js","sources":["../../src/utils/functions/RegularExpressions.ts"],"sourcesContent":["import { Reference } from '@sage-bionetworks/synapse-types'\n\n// doi regex here - https://www.crossref.org/blog/dois-and-matching-regular-expressions/\n// note - had to add an escape character for the second and third forward slash in the regex above\nexport const DOI_REGEX = /^10.\\d{4,9}\\/[-._;()/:a-z0-9]+$/i\n\n/**\n * Checks for a Synapse ID, with or without a version number.\n * Captures the synId and version number into capture groups.\n *\n * Usage examples:\n * > const result = 'syn123.9'.match(SYNAPSE_ENTITY_ID_REGEX)\n * > result[0]\n * 'syn123.9'\n * > result[1]\n * 'syn123'\n * > result[2]\n * '9'\n */\nexport const SYNAPSE_ENTITY_ID_REGEX = /^(syn\\d+)(?:\\.(\\d+))?$/\n\n/**\n * Given a Synapse Entity ID of the form `syn123` or `syn123.4`, returns the\n * Reference object containing the entity ID and optional version number.\n * If the ID is not a valid Synapse Entity ID, returns null.\n * @param synId\n */\nexport function parseSynId(synId: string): Reference | null {\n  const synIdMatch = SYNAPSE_ENTITY_ID_REGEX.exec(synId)\n  if (synIdMatch) {\n    return {\n      targetId: synIdMatch[1],\n      targetVersionNumber: synIdMatch[2] ? parseInt(synIdMatch[2]) : undefined,\n    }\n  } else {\n    return synIdMatch\n  }\n}\n"],"names":["DOI_REGEX","SYNAPSE_ENTITY_ID_REGEX","parseSynId","synId","synIdMatch"],"mappings":"AAIO,MAAMA,EAAY,mCAeZC,EAA0B,yBAQhC,SAASC,EAAWC,EAAiC,CACpD,MAAAC,EAAaH,EAAwB,KAAKE,CAAK,EACrD,OAAIC,GACK,CACL,SAAUA,EAAW,CAAC,EACtB,oBAAqBA,EAAW,CAAC,EAAI,SAASA,EAAW,CAAC,CAAC,EAAI,MAAA,CAKrE"}