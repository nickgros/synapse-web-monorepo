{"version":3,"file":"CertificationQuiz-8b607d7e.js","sources":["../../src/components/CertificationQuiz/CertificationQuiz.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport SynapseClient from '../../synapse-client'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  PassingRecord,\n  QuizResponse,\n  Quiz,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  MULTICHOICE_RESPONSE_CONCRETE_TYPE_VALUE,\n  QuestionResponse,\n} from '@sage-bionetworks/synapse-types'\nimport { displayToast } from '../ToastMessage/ToastMessage'\nimport { Button, Link } from '@mui/material'\nimport { MarkdownPopover } from '../Markdown/MarkdownPopover'\nimport { HelpOutlineTwoTone } from '@mui/icons-material'\nimport { ButtonProps, Typography } from '@mui/material'\nimport { useErrorHandler } from 'react-error-boundary'\n\nconst CertificationQuiz: React.FunctionComponent = () => {\n  const { accessToken } = useSynapseContext()\n  const handleError = useErrorHandler()\n  const [quiz, setQuiz] = useState<Quiz | undefined>()\n  const [questionResponse, setQuestionResponse] = useState<QuestionResponse[]>(\n    [],\n  )\n  const [passingRecord, setPassingRecord] = useState<PassingRecord>()\n  const formRef = React.useRef<HTMLFormElement>(null)\n\n  const GETTING_STARTED_URL =\n    'https://help.synapse.org/docs/Getting-Started.2055471150.html'\n\n  const getQuiz = async () => {\n    try {\n      setQuiz(await SynapseClient.getCertifyQuiz(accessToken))\n    } catch (err: any) {\n      handleError(err)\n    }\n  }\n\n  useEffect(() => {\n    getQuiz()\n  }, [accessToken])\n\n  const onUpdateAnswer = (questionIndex: number, answer: number) => {\n    const newState = [\n      ...questionResponse.filter(obj => obj.questionIndex !== questionIndex),\n      {\n        questionIndex,\n        answerIndex: [answer],\n        concreteType: MULTICHOICE_RESPONSE_CONCRETE_TYPE_VALUE,\n      },\n    ]\n    setQuestionResponse(newState)\n  }\n\n  const handleRetakeQuiz = () => {\n    formRef.current?.reset()\n    setQuestionResponse([])\n    setPassingRecord(undefined)\n    getQuiz()\n  }\n\n  const handleSubmit = async () => {\n    try {\n      if (quiz && quiz.questions.length === questionResponse.length) {\n        const quizResponse: QuizResponse = {\n          quizId: quiz.id,\n          questionResponses: questionResponse,\n        }\n        const passRec = await SynapseClient.postCertifiedUserTestResponse(\n          accessToken,\n          quizResponse,\n        )\n        setPassingRecord(passRec)\n        window.scrollTo(0, 0)\n      } else {\n        displayToast(\n          'Please answer all of the questions and try again.',\n          'warning',\n        )\n      }\n    } catch (err: any) {\n      displayToast(err.reason as string, 'danger')\n    }\n  }\n\n  const actionButtonConfig = (helpUrl: string) =>\n    helpUrl\n      ? {\n          content: <>More info</>,\n          closePopoverOnClick: true,\n          onClick: () => window.open(helpUrl, '_blank'),\n          color: 'primary' as ButtonProps['color'],\n        }\n      : undefined\n\n  return (\n    <div className=\"bootstrap-4-backport CertificationQuiz\">\n      {passingRecord && (\n        <div>\n          <>\n            {!passingRecord.passed && (\n              <div className=\"failBanner\">Quiz Failed</div>\n            )}\n            <Typography variant=\"hintText\">\n              Score: {passingRecord.score} / {quiz?.questions.length}\n            </Typography>\n            {passingRecord.passed ? (\n              displayToast(\n                `You passed the Synapse Certification Quiz on ${passingRecord.passedOn}`,\n                'success',\n              )\n            ) : (\n              <Typography variant=\"body1\">\n                Please review the items shown in red below, and{' '}\n                <Link\n                  href=\"#\"\n                  onClick={e => {\n                    e.preventDefault()\n                    handleRetakeQuiz()\n                  }}\n                >\n                  try again\n                </Link>\n                .\n              </Typography>\n            )}\n          </>\n        </div>\n      )}\n      <div className=\"CertificationQuiz__container\">\n        <Button\n          onClick={() => window.open(GETTING_STARTED_URL, '_blank')}\n          className=\"help-button\"\n          color=\"secondary\"\n          variant=\"contained\"\n        >\n          <HelpOutlineTwoTone\n            className=\"HelpButton\"\n            style={{ marginRight: '4px' }}\n          />\n          Help\n        </Button>\n        {quiz ? (\n          <div dangerouslySetInnerHTML={{ __html: quiz.header }}></div>\n        ) : (\n          ''\n        )}\n        <form ref={formRef} onSubmit={e => e.preventDefault()}>\n          <ol>\n            {quiz?.questions.map(question => (\n              <li\n                key={question.questionIndex}\n                role={question.exclusive ? 'radiogroup' : undefined}\n              >\n                <div\n                  dangerouslySetInnerHTML={{ __html: question.prompt }}\n                  className={\n                    passingRecord &&\n                    (passingRecord.corrections?.find(\n                      quest =>\n                        quest.question.questionIndex === question.questionIndex,\n                    )?.isCorrect\n                      ? ''\n                      : 'incorrectQuestion')\n                  }\n                ></div>\n                {question.answers.map(choice => (\n                  <div key={`${question.questionIndex}-${choice.answerIndex}`}>\n                    <input\n                      id={`${question.questionIndex}-${choice.answerIndex}`}\n                      name={`${question.questionIndex}`}\n                      type={question.exclusive ? 'radio' : 'checkbox'}\n                      value={choice.answerIndex}\n                      onClick={e =>\n                        onUpdateAnswer(\n                          question.questionIndex,\n                          Number(e.currentTarget.value),\n                        )\n                      }\n                      disabled={!!passingRecord}\n                    />\n                    <label\n                      style={{ fontWeight: 400 }}\n                      htmlFor={`${question.questionIndex}-${choice.answerIndex}`}\n                    >\n                      {choice.prompt}\n                    </label>\n                  </div>\n                ))}\n                <MarkdownPopover\n                  contentProps={{ markdown: question.helpText }}\n                  placement=\"right\"\n                  actionButton={actionButtonConfig(question.docLink)}\n                  showCloseButton={true}\n                >\n                  <Typography variant=\"hintText\" color=\"primary\">\n                    <HelpOutlineTwoTone\n                      className=\"HelpButton\"\n                      style={{ marginRight: '4px' }}\n                    />\n                    Need help answering this question?\n                  </Typography>\n                </MarkdownPopover>\n              </li>\n            ))}\n          </ol>\n        </form>\n        {!passingRecord && (\n          <Button\n            className=\"help-button\"\n            color=\"primary\"\n            variant=\"contained\"\n            size=\"large\"\n            onClick={() => {\n              handleSubmit()\n            }}\n          >\n            Submit\n          </Button>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default CertificationQuiz\n"],"names":["CertificationQuiz","accessToken","useSynapseContext","handleError","useErrorHandler","quiz","setQuiz","useState","questionResponse","setQuestionResponse","passingRecord","setPassingRecord","formRef","React","GETTING_STARTED_URL","getQuiz","SynapseClient","err","useEffect","onUpdateAnswer","questionIndex","answer","newState","obj","MULTICHOICE_RESPONSE_CONCRETE_TYPE_VALUE","handleRetakeQuiz","_a","handleSubmit","quizResponse","passRec","displayToast","actionButtonConfig","helpUrl","jsx","Fragment","jsxs","Typography","Link","Button","HelpOutlineTwoTone","question","_b","quest","choice","e","MarkdownPopover"],"mappings":"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"}