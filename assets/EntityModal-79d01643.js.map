{"version":3,"file":"EntityModal-79d01643.js","sources":["../../src/lib/containers/FluidModal.tsx","../../src/lib/containers/entity/metadata/AnnotationsTable.tsx","../../src/lib/containers/entity/metadata/MetadataTable.tsx","../../src/lib/containers/entity/metadata/EntityModal.tsx"],"sourcesContent":["import { Skeleton } from '@mui/material'\nimport React from 'react'\nimport { Button, Modal } from 'react-bootstrap'\nimport { ButtonVariant } from 'react-bootstrap/esm/types'\nimport { Tooltip } from '@mui/material'\nimport { Typography } from '@mui/material'\nimport { HelpPopover, HelpPopoverProps } from './HelpPopover'\n\ntype ModalAction = {\n  skeleton?: boolean\n  variant?: ButtonVariant\n  copy?: React.ReactNode\n  onClick?: () => void\n  disabled?: boolean\n  [key: string]: any\n}\n\nexport type FluidModalProps = {\n  className?: string\n  show: boolean\n  children: JSX.Element\n  title: string | JSX.Element\n  titlePopoverProps?: HelpPopoverProps\n  onClose: () => void\n  primaryAction?: ModalAction\n  secondaryActions?: ModalAction[]\n}\n\nfunction ModalActionButton(props: ModalAction) {\n  const { copy, skeleton, ...rest } = props\n\n  if (props.skeleton) {\n    return <Skeleton variant=\"rectangular\" width={150} />\n  }\n  return (\n    <Tooltip\n      title={rest['data-tip'] ?? ''}\n      placement=\"top\"\n      enterNextDelay={300}\n    >\n      <Button {...rest}>{copy}</Button>\n    </Tooltip>\n  )\n}\n\n/**\n * Full-screen modal that scales with screen size. Fits requirements defined in SWC-5801\n * @param props\n * @returns\n */\nexport const FluidModal = (props: FluidModalProps) => {\n  // TODO: Info button\n  return (\n    <Modal\n      className={`FluidModal bootstrap-4-backport ${props.className ?? ''}`}\n      backdrop=\"static\"\n      animation={false}\n      show={props.show}\n      onHide={props.onClose}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <Typography variant={'headline1'} component=\"span\">\n            {props.title}\n            {props.titlePopoverProps && (\n              <HelpPopover\n                {...{\n                  placement: 'right',\n                  ...props.titlePopoverProps,\n                  className:\n                    'SRC-margin-left-5 ' +\n                    (props.titlePopoverProps?.className ?? ''),\n                }}\n              />\n            )}\n          </Typography>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{props.children}</Modal.Body>\n      <Modal.Footer>\n        {props.secondaryActions &&\n          props.secondaryActions.reverse().map((action, index) => {\n            return (\n              <ModalActionButton\n                key={index}\n                {...{\n                  variant: 'outline',\n                  ...action,\n                }}\n              />\n            )\n          })}\n        {props.primaryAction && (\n          <ModalActionButton\n            {...{\n              variant: 'sds-primary',\n              ...props.primaryAction,\n            }}\n          />\n        )}\n      </Modal.Footer>\n    </Modal>\n  )\n}\n","import React from 'react'\nimport { isEmpty } from 'lodash-es'\nimport {\n  convertToEntityType,\n  entityTypeToFriendlyName,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport { useGetSchemaBinding } from '../../../utils/hooks/SynapseAPI/entity/useEntityBoundSchema'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\nimport { useGetJson } from '../../../utils/hooks/SynapseAPI/entity/useEntity'\nimport { SkeletonTable } from '../../../assets/skeletons/SkeletonTable'\n\nexport type AnnotationsTableProps = {\n  readonly entityId: string\n  readonly versionNumber?: number\n}\n\nexport const AnnotationsTable: React.FC<AnnotationsTableProps> = ({\n  entityId,\n}) => {\n  /**\n   * Currently, schema/validation features are only shown in experimental mode.\n   */\n  const { isInExperimentalMode } = useSynapseContext()\n\n  // TODO: Support versioned annotations, see PLFM-7290\n  const { entityMetadata, annotations, isLoading } = useGetJson(entityId)\n\n  const { data: boundSchema } = useGetSchemaBinding(entityId, {\n    enabled: isInExperimentalMode,\n  })\n\n  return isLoading ? (\n    <SkeletonTable numRows={3} numCols={2} />\n  ) : (\n    <>\n      {entityMetadata && annotations && isEmpty(annotations) ? (\n        <div className=\"placeholder\">\n          This{' '}\n          {entityTypeToFriendlyName(\n            convertToEntityType(entityMetadata.concreteType),\n          )}{' '}\n          has no annotations.\n        </div>\n      ) : null}\n      <table className=\"AnnotationsTable\">\n        <tbody>\n          {annotations &&\n            Object.keys(annotations).map((key: string) => {\n              return (\n                <tr key={key} className=\"AnnotationsTable__Row\">\n                  <td className=\"AnnotationsTable__Row__Key\">{key}</td>\n                  <td className=\"AnnotationsTable__Row__Value\">\n                    {Array.isArray(annotations[key])\n                      ? (\n                          annotations[key] as string[] | number[] | boolean[]\n                        ).join(', ')\n                      : annotations[key]!.toString()}\n                  </td>\n                </tr>\n              )\n            })}\n          {boundSchema && isInExperimentalMode ? (\n            <tr className=\"AnnotationsTable__Row\">\n              <td className=\"AnnotationsTable__Row__Key Schema\">\n                Validation Schema\n              </td>\n              <td className=\"AnnotationsTable__Row__Value\">\n                <a\n                  href={`${getEndpoint(\n                    BackendDestinationEnum.REPO_ENDPOINT,\n                  )}repo/v1/schema/type/registered/${\n                    boundSchema.jsonSchemaVersionInfo.$id\n                  }`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {boundSchema.jsonSchemaVersionInfo.schemaName}\n                </a>\n              </td>\n            </tr>\n          ) : null}\n        </tbody>\n      </table>\n    </>\n  )\n}\n","import dayjs from 'dayjs'\nimport React from 'react'\nimport { formatDate } from '../../../utils/functions/DateFormatter'\nimport {\n  entityTypeToFriendlyName,\n  getVersionDisplay,\n  isVersionableEntity,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  getDataFileHandle,\n  getStorageLocationName,\n} from '../../../utils/functions/FileHandleUtils'\nimport useGetEntityBundle from '../../../utils/hooks/SynapseAPI/entity/useEntityBundle'\nimport UserCard from '../../UserCard'\n\nexport type MetadataTableProps = {\n  readonly entityId: string\n  readonly versionNumber?: number\n}\n\nexport const MetadataTable = ({\n  entityId,\n  versionNumber,\n}: MetadataTableProps) => {\n  const { data: entityBundle } = useGetEntityBundle(entityId, versionNumber)\n\n  const isVersionable = entityBundle && isVersionableEntity(entityBundle.entity)\n\n  const dataFileHandle = entityBundle\n    ? getDataFileHandle(entityBundle)\n    : undefined\n\n  let fileLocationName = undefined\n  if (dataFileHandle) {\n    fileLocationName = getStorageLocationName(dataFileHandle)\n  }\n\n  return entityBundle ? (\n    <table className=\"MetadataTable\">\n      <tbody>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Name</td>\n          <td className=\"MetadataTable__Row__Value\">\n            {entityBundle.entity?.name}\n          </td>\n        </tr>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Type</td>\n          <td className=\"MetadataTable__Row__Value\">\n            {entityTypeToFriendlyName(entityBundle.entityType)}\n          </td>\n        </tr>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Synapse ID</td>\n          <td className=\"MetadataTable__Row__Value\">\n            {entityBundle.entity?.id}\n          </td>\n        </tr>\n        {isVersionable && (\n          <tr className=\"MetadataTable__Row\">\n            <td className=\"MetadataTable__Row__Key\">Version</td>\n            <td className=\"MetadataTable__Row__Value\">\n              {getVersionDisplay(entityBundle.entity)}\n            </td>\n          </tr>\n        )}\n        {fileLocationName && (\n          <tr className=\"MetadataTable__Row\">\n            <td className=\"MetadataTable__Row__Key\">Storage</td>\n            <td className=\"MetadataTable__Row__Value\">{fileLocationName}</td>\n          </tr>\n        )}\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\"> Last Modified By</td>\n          <td className=\"MetadataTable__Row__Value\">\n            <UserCard\n              size=\"SMALL USER CARD\"\n              ownerId={entityBundle.entity?.modifiedBy}\n            />{' '}\n            at {formatDate(dayjs(entityBundle.entity?.modifiedOn))}\n          </td>\n        </tr>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Created By</td>\n          <td className=\"MetadataTable__Row__Value\">\n            <UserCard\n              size=\"SMALL USER CARD\"\n              ownerId={entityBundle.entity?.createdBy}\n            />{' '}\n            at {formatDate(dayjs(entityBundle.entity?.createdOn))}\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  ) : null\n}\n","import Skeleton from '@mui/material/Skeleton'\nimport Form from '@rjsf/core'\nimport React, { useRef, useState } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport {\n  entityTypeToFriendlyName,\n  isVersionableEntityType,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport useGetEntityBundle from '../../../utils/hooks/SynapseAPI/entity/useEntityBundle'\nimport { VersionableEntity } from '../../../utils/synapseTypes'\nimport { SynapseErrorBoundary } from '../../error/ErrorBanner'\nimport { FluidModal } from '../../FluidModal'\nimport { displayToast } from '../../ToastMessage'\nimport { SchemaDrivenAnnotationEditor } from '../annotations/SchemaDrivenAnnotationEditor'\nimport { AnnotationsTable } from './AnnotationsTable'\nimport { MetadataTable } from './MetadataTable'\n\nexport enum EntityModalTabs {\n  METADATA = 'METADATA', // non-annotation metadata about the entity\n  ANNOTATIONS = 'ANNOTATIONS', // annotation and schema information\n  // TODO: Access -- we haven't yet built a viewer/editor for ACLs in SRC -- consider a redesign before building\n  // ACCESS = 'ACCESS', // ACLs (and maybe ARs?)\n  // TODO: Previews - we would need preview renderers that accomplish feature parity with SWC\n  // PREVIEW = 'PREVIEW' // should only show this tab if a preview exists\n}\n\nexport type EntityModalProps = {\n  readonly show: boolean\n  readonly entityId: string\n  readonly versionNumber?: number\n  readonly onClose: () => void\n  readonly initialTab?: EntityModalTabs\n  readonly showTabs?: boolean\n}\n\nexport const EntityModal: React.FC<EntityModalProps> = ({\n  entityId,\n  versionNumber,\n  show,\n  onClose,\n  initialTab = EntityModalTabs.METADATA,\n  showTabs = true,\n}: EntityModalProps) => {\n  const annotationEditorFormRef = useRef<Form<Record<string, unknown>>>(null)\n\n  const [currentTab, setCurrentTab] = useState<EntityModalTabs>(initialTab)\n  const [isInEditMode, setIsInEditMode] = useState(false)\n  const [hasClickedCancel, setHasClickedCancel] = useState(false)\n\n  const { data: entityBundle } = useGetEntityBundle(entityId, versionNumber)\n  const canEdit = entityBundle && entityBundle.permissions.canEdit\n\n  const isVersionable =\n    entityBundle && isVersionableEntityType(entityBundle.entityType)\n\n  const isLatestVersion =\n    isVersionable && (entityBundle.entity as VersionableEntity).isLatestVersion!\n\n  let primaryAction\n  let secondaryActions\n\n  if (!entityBundle) {\n    primaryAction = { skeleton: true }\n    secondaryActions = undefined\n  } else {\n    if (!window.location.href.includes(entityId)) {\n      primaryAction = {\n        skeleton: false,\n        copy: `Open ${entityTypeToFriendlyName(entityBundle.entityType)}`,\n        onClick: () =>\n          window.open(\n            `${getEndpoint(\n              BackendDestinationEnum.PORTAL_ENDPOINT,\n            )}#!Synapse:${entityId}`,\n            '_blank',\n            'noopener',\n          ),\n      }\n    }\n  }\n\n  if (currentTab === EntityModalTabs.ANNOTATIONS) {\n    if (isInEditMode) {\n      primaryAction = {\n        copy: `Save Annotations`,\n        onClick: () => {\n          // Workaround for https://github.com/rjsf-team/react-jsonschema-form/issues/2104#issuecomment-847924986\n          // Should be fixed if we upgrade to RJSF v5\n          ;(annotationEditorFormRef.current as any).formElement.dispatchEvent(\n            new CustomEvent('submit', {\n              cancelable: true,\n              bubbles: true,\n            }),\n          )\n        },\n      }\n      secondaryActions = [\n        {\n          copy: hasClickedCancel\n            ? 'Are you sure? Unsaved changes will be lost'\n            : 'Cancel',\n          onClick: () => {\n            if (hasClickedCancel) {\n              setIsInEditMode(false)\n            }\n            setHasClickedCancel(!hasClickedCancel)\n          },\n        },\n      ]\n    } else if (canEdit) {\n      secondaryActions = [\n        {\n          copy: 'Edit',\n          disabled: isVersionable && !isLatestVersion,\n          'data-for': 'entityModalTooltip',\n          'data-tip':\n            isVersionable && !isLatestVersion\n              ? 'Annotations can only be edited on the latest version'\n              : undefined,\n          onClick: () => {\n            setIsInEditMode(true)\n          },\n        },\n      ]\n    }\n  }\n\n  return (\n    <>\n      <FluidModal\n        className={`EntityMetadata ${isInEditMode ? 'isInEditMode' : ''}`}\n        title={\n          entityBundle ? (\n            <Modal.Title>{entityBundle.entity.name}</Modal.Title>\n          ) : (\n            <Skeleton width={'40%'} />\n          )\n        }\n        show={show}\n        onClose={onClose}\n        primaryAction={primaryAction}\n        secondaryActions={secondaryActions}\n      >\n        <>\n          {showTabs && !isInEditMode ? (\n            <div className=\"Tabs\">\n              {Object.keys(EntityModalTabs).map((tabName: string) => {\n                return (\n                  <div\n                    className=\"Tab\"\n                    role=\"tab\"\n                    key={tabName}\n                    onClick={e => {\n                      e.stopPropagation()\n                      setCurrentTab(EntityModalTabs[tabName])\n                    }}\n                    aria-selected={tabName === currentTab}\n                  >\n                    {tabName}\n                  </div>\n                )\n              })}\n            </div>\n          ) : null}\n          <div\n            style={\n              currentTab === EntityModalTabs.ANNOTATIONS\n                ? {}\n                : { display: 'none' }\n            }\n          >\n            {isInEditMode ? (\n              <SynapseErrorBoundary>\n                <SchemaDrivenAnnotationEditor\n                  entityId={entityId}\n                  formRef={annotationEditorFormRef}\n                  onSuccess={() => {\n                    displayToast('Annotations successfully updated.', 'success')\n                    setIsInEditMode(false)\n                  }}\n                  onCancel={() => setIsInEditMode(false)}\n                />\n              </SynapseErrorBoundary>\n            ) : (\n              <AnnotationsTable\n                entityId={entityId}\n                versionNumber={versionNumber}\n              />\n            )}\n          </div>\n          <div\n            style={\n              currentTab === EntityModalTabs.METADATA ? {} : { display: 'none' }\n            }\n          >\n            <MetadataTable entityId={entityId} versionNumber={versionNumber} />\n          </div>\n        </>\n      </FluidModal>\n    </>\n  )\n}\n"],"names":["ModalActionButton","props","copy","skeleton","rest","jsx","Skeleton","Tooltip","Button","FluidModal","jsxs","Modal","Typography","HelpPopover","_a","action","index","AnnotationsTable","entityId","isInExperimentalMode","useSynapseContext","entityMetadata","annotations","isLoading","useGetJson","boundSchema","useGetSchemaBinding","SkeletonTable","Fragment","isEmpty","entityTypeToFriendlyName","convertToEntityType","key","getEndpoint","BackendDestinationEnum","MetadataTable","versionNumber","entityBundle","useGetEntityBundle","isVersionable","isVersionableEntity","dataFileHandle","getDataFileHandle","fileLocationName","getStorageLocationName","_b","getVersionDisplay","UserCard","_c","formatDate","dayjs","_d","_e","_f","EntityModalTabs","EntityModalTabs2","EntityModal","show","onClose","initialTab","showTabs","annotationEditorFormRef","useRef","currentTab","setCurrentTab","useState","isInEditMode","setIsInEditMode","hasClickedCancel","setHasClickedCancel","canEdit","isVersionableEntityType","isLatestVersion","primaryAction","secondaryActions","tabName","e","SynapseErrorBoundary","SchemaDrivenAnnotationEditor","displayToast"],"mappings":"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"}