{"version":3,"file":"useAccessRequirements-97deb603.js","sources":["../../src/components/AccessRequirementList/AccessRequirementListUtils.ts","../../src/synapse-queries/dataaccess/useAccessRequirements.ts"],"sourcesContent":["import { sortBy } from 'lodash-es'\nimport { getAccessRequirementStatus } from '../../synapse-client/SynapseClient'\n\n/**\n * Given an array of access requirement IDs, return the IDs sorted by the user's status, where\n * completed access requirements are shown first.\n * @param accessToken\n * @param requirementIds\n */\nexport const sortAccessRequirementsByCompletion = async (\n  accessToken: string | undefined,\n  requirementIds: string[],\n): Promise<string[]> => {\n  const statuses = requirementIds.map(id => {\n    return getAccessRequirementStatus(accessToken, id)\n  })\n  const accessRequirementStatuses = await Promise.all(statuses)\n\n  return sortBy(requirementIds, id => {\n    // if its true then it should come first, which means that it should be higher in the list\n    // which is sorted ascendingly\n    return (\n      -1 *\n      Number(\n        accessRequirementStatuses.find(\n          status => id === status.accessRequirementId,\n        )!.isApproved,\n      )\n    )\n  })\n}\n","import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  AccessApproval,\n  AccessControlList,\n  AccessRequirement,\n  AccessRequirementStatus,\n  ACTSubmissionStatus,\n  ManagedACTAccessRequirementStatus,\n  Renewal,\n  Request,\n  RestrictionInformationRequest,\n  RestrictionInformationResponse,\n  WikiPageKey,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  AccessRequirementSearchRequest,\n  AccessRequirementSearchResponse,\n} from '@sage-bionetworks/synapse-types'\nimport { ResearchProject } from '@sage-bionetworks/synapse-types'\nimport { sortAccessRequirementsByCompletion } from '../../components/AccessRequirementList/AccessRequirementListUtils'\n\nexport function useGetAccessRequirements<T extends AccessRequirement>(\n  accessRequirementId: string | number,\n  options?: UseQueryOptions<T, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<T, SynapseClientError>(\n    keyFactory.getAccessRequirementQueryKey(String(accessRequirementId)),\n    () =>\n      SynapseClient.getAccessRequirementById<T>(\n        accessToken,\n        accessRequirementId,\n      ),\n    options,\n  )\n}\n\nexport function useGetAccessRequirementsForEntity(\n  entityId: string,\n  options?: UseQueryOptions<AccessRequirement[], SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<AccessRequirement[], SynapseClientError>(\n    keyFactory.getEntityAccessRequirementsQueryKey(entityId),\n    () => SynapseClient.getAllAccessRequirements(accessToken, entityId),\n    options,\n  )\n}\n\nexport function useGetAccessRequirementsForTeam(\n  teamId: string,\n  options?: UseQueryOptions<AccessRequirement[], SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<AccessRequirement[], SynapseClientError>(\n    keyFactory.getTeamAccessRequirementsQueryKey(teamId),\n    () => SynapseClient.getTeamAccessRequirements(accessToken, teamId),\n    options,\n  )\n}\n\nexport function useGetAccessRequirementWikiPageKey(\n  accessRequirementId: string,\n  options?: UseQueryOptions<WikiPageKey, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<WikiPageKey, SynapseClientError>(\n    keyFactory.getAccessRequirementWikiPageKey(accessRequirementId),\n    () =>\n      SynapseClient.getWikiPageKeyForAccessRequirement(\n        accessToken,\n        accessRequirementId,\n      ),\n    options,\n  )\n}\n\nexport function useGetAccessRequirementACL(\n  accessRequirementId: string,\n  options?: UseQueryOptions<AccessControlList | null, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<AccessControlList | null, SynapseClientError>(\n    keyFactory.getAccessRequirementAclQueryKey(accessRequirementId),\n    () =>\n      SynapseClient.getAccessRequirementAcl(accessToken, accessRequirementId),\n    options,\n  )\n}\n\nexport function useSearchAccessRequirementsInfinite(\n  params: Omit<AccessRequirementSearchRequest, 'nextPageToken'>,\n  options?: UseInfiniteQueryOptions<\n    AccessRequirementSearchResponse,\n    SynapseClientError\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<AccessRequirementSearchResponse, SynapseClientError>(\n    keyFactory.searchAccessRequirementsQueryKey(params),\n    async context => {\n      return await SynapseClient.searchAccessRequirements(accessToken, {\n        ...params,\n        nextPageToken: context.pageParam,\n      })\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useGetRestrictionInformation(\n  request: RestrictionInformationRequest,\n  options?: UseQueryOptions<RestrictionInformationResponse, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<RestrictionInformationResponse, SynapseClientError>(\n    keyFactory.getAccessRequirementRestrictionInformationQueryKey(request),\n    () => SynapseClient.getRestrictionInformation(request, accessToken),\n    options,\n  )\n}\n\nexport function useCreateLockAccessRequirement(\n  options?: UseMutationOptions<AccessRequirement, SynapseClientError, string>,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<AccessRequirement, SynapseClientError, string>({\n    ...options,\n    mutationFn: (entityId: string) =>\n      SynapseClient.createLockAccessRequirement(entityId, accessToken),\n    mutationKey: ['createLockAccessRequirement'],\n    onSuccess: async (data, variables, ctx) => {\n      // Invalidate all access requirement queries\n      await queryClient.invalidateQueries(\n        keyFactory.getAccessRequirementQueryKey(),\n      )\n      // Invalidate all entity queries (not just the current entity because the new AR may apply to this entity's children)\n      await queryClient.invalidateQueries(keyFactory.getAllEntityDataQueryKey())\n      if (options?.onSuccess) {\n        return options.onSuccess(data, variables, ctx)\n      }\n    },\n  })\n}\n\nexport function useGetAccessRequirementStatus<\n  T extends\n    | AccessRequirementStatus\n    | ManagedACTAccessRequirementStatus = AccessRequirementStatus,\n>(\n  accessRequirementId: string,\n  options?: UseQueryOptions<T, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<T, SynapseClientError>(\n    keyFactory.getAccessRequirementStatusQueryKey(accessRequirementId),\n    () =>\n      SynapseClient.getAccessRequirementStatus<T>(\n        accessToken,\n        accessRequirementId,\n      ),\n    options,\n  )\n}\n\nexport function useSortAccessRequirementIdsByCompletion(\n  accessRequirementIds: string[],\n  options?: UseQueryOptions<string[], SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<string[], SynapseClientError>(\n    keyFactory.getSortedAccessRequirementsAndStatusQueryKey(\n      accessRequirementIds,\n    ),\n    () => sortAccessRequirementsByCompletion(accessToken, accessRequirementIds),\n    options,\n  )\n}\n\nexport function useGetResearchProject(\n  accessRequirementId: string,\n  options?: UseQueryOptions<ResearchProject, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<ResearchProject, SynapseClientError>(\n    keyFactory.getAccessRequirementResearchProjectQueryKey(accessRequirementId),\n    () => SynapseClient.getResearchProject(accessRequirementId, accessToken!),\n    options,\n  )\n}\n\nexport function useUpdateResearchProject(\n  options?: UseMutationOptions<\n    ResearchProject,\n    SynapseClientError,\n    ResearchProject\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<ResearchProject, SynapseClientError, ResearchProject>(\n    (researchProject: ResearchProject) =>\n      SynapseClient.updateResearchProject(researchProject, accessToken!),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate the research project query\n        await queryClient.invalidateQueries(\n          keyFactory.getAccessRequirementResearchProjectQueryKey(\n            data.accessRequirementId,\n          ),\n        )\n        if (options?.onSuccess) {\n          return options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetDataAccessRequestForUpdate(\n  accessRequirementId: string,\n  options?: UseQueryOptions<Request | Renewal, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<Request | Renewal, SynapseClientError>(\n    keyFactory.getDataAccessRequestForUpdateQueryKey(accessRequirementId),\n    () =>\n      SynapseClient.getDataAccessRequestForUpdate(\n        accessRequirementId,\n        accessToken!,\n      ),\n    options,\n  )\n}\n\nexport function useUpdateDataAccessRequest(\n  options?: UseMutationOptions<\n    Request | Renewal,\n    SynapseClientError,\n    Request | Renewal\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<Request | Renewal, SynapseClientError, Request | Renewal>(\n    (requestInterface: Request | Renewal) =>\n      SynapseClient.updateDataAccessRequest(requestInterface, accessToken!),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate the data access request query\n        await queryClient.invalidateQueries(\n          keyFactory.getDataAccessRequestForUpdateQueryKey(\n            data.accessRequirementId,\n          ),\n        )\n        if (options?.onSuccess) {\n          return options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useCreateAccessApproval(\n  options?: UseMutationOptions<\n    AccessApproval,\n    SynapseClientError,\n    AccessApproval\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<AccessApproval, SynapseClientError, AccessApproval>(\n    request => SynapseClient.createAccessApproval(accessToken, request),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate query for AR status\n        await queryClient.invalidateQueries(\n          keyFactory.getAccessRequirementStatusQueryKey(\n            String(variables.requirementId),\n          ),\n        )\n        if (options?.onSuccess) {\n          return options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useCancelDataAccessRequest(\n  options?: UseMutationOptions<\n    ACTSubmissionStatus,\n    SynapseClientError,\n    { submissionId: string; accessRequirementId: string }\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<\n    ACTSubmissionStatus,\n    SynapseClientError,\n    { submissionId: string; accessRequirementId: string }\n  >(\n    request =>\n      SynapseClient.cancelDataAccessRequest(request.submissionId, accessToken!),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate query for AR status\n        await queryClient.invalidateQueries(\n          keyFactory.getAccessRequirementStatusQueryKey(\n            String(variables.accessRequirementId),\n          ),\n        )\n        if (options?.onSuccess) {\n          return options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n"],"names":["sortAccessRequirementsByCompletion","accessToken","requirementIds","statuses","id","getAccessRequirementStatus","accessRequirementStatuses","sortBy","status","useGetAccessRequirements","accessRequirementId","options","keyFactory","useSynapseContext","useQuery","SynapseClient","useGetAccessRequirementsForEntity","entityId","useGetAccessRequirementsForTeam","teamId","useGetAccessRequirementWikiPageKey","useGetAccessRequirementACL","useSearchAccessRequirementsInfinite","params","useInfiniteQuery","context","page","useGetRestrictionInformation","request","useCreateLockAccessRequirement","queryClient","useQueryClient","useMutation","data","variables","ctx","useGetAccessRequirementStatus","useSortAccessRequirementIdsByCompletion","accessRequirementIds","useGetResearchProject","useUpdateResearchProject","researchProject","useGetDataAccessRequestForUpdate","useUpdateDataAccessRequest","requestInterface","useCreateAccessApproval","useCancelDataAccessRequest"],"mappings":"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"}