{"version":3,"file":"FeaturedDataTabs-a9f4a938.js","sources":["../../src/components/widgets/facet-nav/FacetPlotLegendTable.tsx","../../src/components/FeaturedDataTabs/FacetPlotsCardGrid.tsx","../../src/components/FeaturedDataTabs/FacetPlotsCard.tsx","../../src/components/FeaturedDataTabs/QueryPerFacetPlotsCard.tsx","../../src/components/FeaturedDataTabs/FeaturedDataTabsUtils.ts","../../src/components/FeaturedDataTabs/SingleQueryFacetPlotsCards.tsx","../../src/components/FeaturedDataTabs/FeaturedDataPlots.tsx","../../src/components/FeaturedDataTabs/FeaturedDataTabs.tsx"],"sourcesContent":["import { Box, Link, Typography } from '@mui/material'\nimport React from 'react'\nimport {\n  FacetPlotLegendProps,\n  MAX_LEGEND_LENGTH,\n  truncate,\n} from './FacetPlotLegendUtils'\nimport { useQueryVisualizationContext } from '../../QueryVisualizationWrapper'\n\ntype FacetPlotLegendTableProps = FacetPlotLegendProps & {\n  facetName?: string\n  linkToFullQuery?: string\n}\n\nexport function FacetPlotLegendTable(props: FacetPlotLegendTableProps) {\n  const { facetName, labels, colors = [], isExpanded, linkToFullQuery } = props\n\n  const { unitDescription } = useQueryVisualizationContext()\n\n  if (!labels) {\n    return <></>\n  }\n  const numLegendItems = isExpanded\n    ? Math.min(labels.length, 9)\n    : Math.min(labels.length, 4)\n  if (numLegendItems === 0) {\n    return <></>\n  }\n  return (\n    <>\n      <Box\n        component={'table'}\n        className={`FacetNavPanel__body__legend${\n          isExpanded ? '--expanded' : ''\n        }`}\n        sx={{ width: '100%', color: 'grey.800', 'td,th': { py: 0.5 } }}\n      >\n        <thead>\n          <Box\n            component={'tr'}\n            sx={{ borderBottom: '1px solid', borderBottomColor: 'grey.300' }}\n          >\n            <th>\n              <Typography\n                variant={'body1'}\n                sx={{\n                  fontWeight: 700,\n                  size: '14px',\n                }}\n              >\n                {facetName}\n              </Typography>\n            </th>\n            <th style={{ textAlign: 'right', marginRight: '16px' }}>\n              <Typography\n                variant={'body1'}\n                sx={{\n                  size: '14px',\n                  fontWeight: 700,\n                  textAlign: 'right',\n                }}\n              >\n                {unitDescription}\n              </Typography>\n            </th>\n          </Box>\n        </thead>\n        <tbody>\n          {labels.slice(0, numLegendItems).map((facetValue, index) => {\n            const labelDisplay = truncate(facetValue.label, MAX_LEGEND_LENGTH)\n            return (\n              <tr key={facetValue.label}>\n                <td>\n                  <Box\n                    sx={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: 1,\n                    }}\n                  >\n                    <Box\n                      sx={{\n                        width: '14px',\n                        height: '14px',\n                        cursor: 'default',\n                        backgroundColor: colors[index],\n                      }}\n                      key={`legendLabel_${index}`}\n                      style={{ cursor: 'default' }}\n                    />\n                    <Typography variant=\"body1\" sx={{ fontSize: '14px' }}>\n                      {labelDisplay}\n                    </Typography>\n                  </Box>\n                </td>\n                <td>\n                  <Typography\n                    variant=\"body1\"\n                    sx={{\n                      fontSize: '14px',\n                      color: 'grey.600',\n                      textAlign: 'right',\n                    }}\n                  >\n                    {facetValue.count}\n                  </Typography>\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </Box>\n      {linkToFullQuery && (\n        <Box sx={{ my: 2 }}>\n          <Link href={linkToFullQuery}>\n            View {labels.length} {facetName} options\n          </Link>\n        </Box>\n      )}\n    </>\n  )\n}\n","import { Box, BoxProps, styled } from '@mui/material'\nimport { StyledComponent } from '@emotion/styled'\n\nexport const FACET_PLOTS_CARD_CLASSNAME = 'FacetPlotsCard'\n\nexport const FACET_PLOTS_CARD_TITLE_CONTAINER_CLASSNAME =\n  'FacetPlotsCardTitleContainer'\n\nexport const FACET_PLOTS_CARD_PLOT_CONTAINER_CLASSNAME =\n  'FacetPlotsCardPlotContainer'\n\nexport const FacetPlotsCardGridContainer: StyledComponent<BoxProps> = styled(\n  Box,\n  {\n    label: 'FacetPlotsCardGridContainer',\n  },\n)(({ theme }) => ({\n  [theme.breakpoints.down('md')]: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n  },\n  [theme.breakpoints.up('md')]: {\n    /* \n    The grid is broken up into cards which have subcomponents that should be aligned\n    Ideally we could use CSS Subgrid, but it is not widely supported as of the time of writing\n    See https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Subgrid\n\n    Instead we will use grid with `display: contents`, and style each section to look like a card.\n     */\n    display: 'grid',\n    gridTemplateRows: '[title] auto [plot0] auto',\n    gridTemplateColumns: '[col1] 32% [col2] 32% [col3] 32%',\n    columnGap: '2%',\n\n    [`.${FACET_PLOTS_CARD_CLASSNAME}`]: {\n      display: 'contents',\n    },\n\n    // Since we're using display: contents, we must assign the column based on the\n    // order of the containers\n    [`.${FACET_PLOTS_CARD_CLASSNAME}:nth-of-type(1)`]: {\n      [`.${FACET_PLOTS_CARD_PLOT_CONTAINER_CLASSNAME}`]: {\n        gridColumn: 'col1',\n      },\n    },\n    [`.${FACET_PLOTS_CARD_CLASSNAME}:nth-of-type(2)`]: {\n      [`.${FACET_PLOTS_CARD_PLOT_CONTAINER_CLASSNAME}`]: {\n        gridColumn: 'col2',\n      },\n    },\n    [`.${FACET_PLOTS_CARD_CLASSNAME}:nth-of-type(3)`]: {\n      [`.${FACET_PLOTS_CARD_PLOT_CONTAINER_CLASSNAME}`]: {\n        gridColumn: 'col3',\n      },\n    },\n\n    [`.${FACET_PLOTS_CARD_TITLE_CONTAINER_CLASSNAME}, .${FACET_PLOTS_CARD_PLOT_CONTAINER_CLASSNAME}`]:\n      {\n        // Since we're using `display:contents`, the card container style will not be displayed.\n        // So add box-shadow to each grid item\n        boxShadow: '0px 3px 10px 0px #5D69AB1A',\n        backgroundColor: theme.palette.background.paper,\n      },\n    [`.${FACET_PLOTS_CARD_TITLE_CONTAINER_CLASSNAME}`]: {\n      gridRow: 'title',\n      // For the title portion of the card, use clipPath to hide the box-shadow at the bottom of the section,\n      // since the bottom border is adjacent to the rest of the visual card\n      clipPath: 'inset(-10px -10px 0px -10px)',\n    },\n\n    [`.${FACET_PLOTS_CARD_PLOT_CONTAINER_CLASSNAME}`]: {\n      // For the plots section(s), use clipPath to hide the box-shadow at the top and bottom of the section\n      clipPath: 'inset(0px -10px 0px -10px)',\n    },\n    [`.${FACET_PLOTS_CARD_PLOT_CONTAINER_CLASSNAME}:last-of-type`]: {\n      // For the last plot section, use clipPath to hide the box-shadow at the top of the section\n      // the bottom box-shadow is shown since this is container marks the bottom of the card (visually)\n      borderBottom: '1px solid #e8e8e8',\n      clipPath: 'inset(0px -10px -10px -10px)',\n    },\n  },\n  [`.${FACET_PLOTS_CARD_PLOT_CONTAINER_CLASSNAME}:last-of-type`]: {\n    paddingBottom: theme.spacing(5),\n  },\n}))\n\nexport const FacetPlotsCardTitleContainer: StyledComponent<BoxProps> = styled(\n  Box,\n  {\n    label: 'FacetPlotsCardTitleContainer',\n  },\n)(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'start',\n  paddingTop: theme.spacing(5),\n  paddingLeft: theme.spacing(5),\n  paddingRight: theme.spacing(5),\n  minHeight: '64px',\n}))\n\nexport const FacetPlotsCardPlotContainer: StyledComponent<BoxProps> = styled(\n  Box,\n  {\n    label: 'FacetPlotsCardPlotContainer',\n  },\n)(({ theme }) => ({\n  paddingLeft: theme.spacing(5),\n  paddingRight: theme.spacing(5),\n}))\n","import React, { useEffect, useState } from 'react'\nimport Plotly from 'plotly.js-basic-dist'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { SizeMe } from 'react-sizeme'\nimport {\n  ColumnTypeEnum,\n  FacetColumnResult,\n  FacetColumnResultValueCount,\n  FacetColumnResultValues,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  extractPlotDataArray,\n  getPlotStyle,\n  GraphData,\n} from '../widgets/facet-nav/FacetNavPanel'\nimport { getFacets } from '../widgets/facet-nav/FacetNav'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { useQueryContext } from '../QueryContext'\nimport { useQueryVisualizationContext } from '../QueryVisualizationWrapper'\nimport { ShowMore } from '../row_renderers/utils'\nimport {\n  Box,\n  Button,\n  Divider,\n  Paper,\n  Skeleton,\n  Typography,\n} from '@mui/material'\nimport { FacetPlotLegendTable } from '../widgets/facet-nav/FacetPlotLegendTable'\nimport {\n  FACET_PLOTS_CARD_CLASSNAME,\n  FACET_PLOTS_CARD_PLOT_CONTAINER_CLASSNAME,\n  FACET_PLOTS_CARD_TITLE_CONTAINER_CLASSNAME,\n  FacetPlotsCardPlotContainer,\n  FacetPlotsCardTitleContainer,\n} from './FacetPlotsCardGrid'\nimport { SkeletonParagraph, SkeletonTable } from '../Skeleton'\nimport { times } from 'lodash-es'\n\nconst Plot = createPlotlyComponent(Plotly)\n\nexport type FacetPlotsCardProps = {\n  title?: string\n  description?: string\n  facetsToPlot?: string[]\n  detailsPagePath?: string\n}\n\nconst layout: Partial<Plotly.Layout> = {\n  showlegend: false,\n  annotations: [],\n  margin: { l: 0, r: 0, b: 0, t: 0, pad: 0 },\n  yaxis: {\n    visible: false,\n    showgrid: false,\n  },\n  xaxis: {\n    visible: false,\n    showgrid: false,\n  },\n}\n\nfunction LoadingCard(props: { numPlots: number }) {\n  const { numPlots } = props\n  return (\n    <Paper className={FACET_PLOTS_CARD_CLASSNAME}>\n      <FacetPlotsCardTitleContainer\n        className={FACET_PLOTS_CARD_TITLE_CONTAINER_CLASSNAME}\n      >\n        <Skeleton width={'60%'} height={'24px'} />\n\n        <SkeletonParagraph numRows={5} />\n\n        <Skeleton width={'40%'}>\n          <Button variant={'contained'}>Explore</Button>\n        </Skeleton>\n      </FacetPlotsCardTitleContainer>\n      {times(numPlots).map(index => (\n        <FacetPlotsCardPlotContainer\n          key={index}\n          className={FACET_PLOTS_CARD_PLOT_CONTAINER_CLASSNAME}\n          sx={{\n            py: 3,\n            gridRow: `plot${index}`,\n          }}\n        >\n          <Skeleton width={'100%'} height={'300px'} />\n          <SkeletonTable numRows={4} numCols={2} />\n        </FacetPlotsCardPlotContainer>\n      ))}\n    </Paper>\n  )\n}\nconst FacetPlotsCard: React.FunctionComponent<FacetPlotsCardProps> = ({\n  title,\n  description,\n  facetsToPlot,\n  detailsPagePath,\n}: FacetPlotsCardProps): JSX.Element => {\n  const { accessToken } = useSynapseContext()\n  const { data, isLoadingNewBundle } = useQueryContext<\n    'columnModels' | 'facets',\n    true\n  >()\n  const { getColumnDisplayName } = useQueryVisualizationContext()\n  const [facetPlotDataArray, setFacetPlotDataArray] = useState<GraphData[]>([])\n  const [facetDataArray, setFacetDataArray] = useState<FacetColumnResult[]>([])\n  const [selectedFacetValue, setSelectedFacetValue] = useState<string>('')\n\n  useEffect(() => {\n    if (!facetsToPlot || !data) {\n      return\n    } else {\n      const getColumnType = (\n        facetToPlot: FacetColumnResult,\n      ): ColumnTypeEnum | undefined =>\n        data?.columnModels.find(\n          columnModel => columnModel.name === facetToPlot.columnName,\n        )?.columnType as ColumnTypeEnum\n\n      const facetsDataToPlot = getFacets(data, facetsToPlot)\n      setFacetDataArray(facetsDataToPlot)\n      Promise.all(\n        facetsDataToPlot.map(async (item, index) => {\n          const plotData = await extractPlotDataArray(\n            item as FacetColumnResultValues,\n            getColumnType(item),\n            index + 1, //individual plot rgbIndex\n            'PIE',\n            accessToken,\n          )\n          return plotData\n        }),\n      ).then(newPlotData => setFacetPlotDataArray(newPlotData))\n      // If we are showing a facet selection based card, then set the selectedFacetValue.  For example, facet column \"study\" with value \"ROSMAP\"\n      const selectedFacet: FacetColumnResultValueCount | undefined =\n        data?.facets\n          .map(item => {\n            const facetValues: FacetColumnResultValueCount[] = (\n              item as FacetColumnResultValues\n            ).facetValues\n            if (facetValues) {\n              const filteredFacetValues: FacetColumnResultValueCount[] =\n                facetValues.filter(facetValue => {\n                  return facetValue.isSelected\n                })\n              return filteredFacetValues.length > 0\n                ? filteredFacetValues[0]\n                : undefined\n            } else {\n              return undefined\n            }\n          })\n          .filter(x => x !== undefined)[0]\n\n      if (selectedFacet && selectedFacet.value) {\n        setSelectedFacetValue(selectedFacet?.value)\n      }\n    }\n  }, [facetsToPlot, data, accessToken])\n\n  if (\n    isLoadingNewBundle ||\n    !facetPlotDataArray ||\n    !facetDataArray ||\n    facetDataArray.length === 0\n  ) {\n    return <LoadingCard numPlots={(facetsToPlot ?? []).length} />\n  } else {\n    const isShowingMultiplePlots = facetPlotDataArray.length > 1\n    const cardTitle =\n      title ??\n      (isShowingMultiplePlots\n        ? selectedFacetValue\n        : getColumnDisplayName(facetDataArray[0].columnName))\n    return (\n      <Paper className={FACET_PLOTS_CARD_CLASSNAME} sx={{ overflow: 'hidden' }}>\n        <FacetPlotsCardTitleContainer\n          className={FACET_PLOTS_CARD_TITLE_CONTAINER_CLASSNAME}\n        >\n          <Typography variant={'headline1'}>{cardTitle}</Typography>\n          {description && (\n            <Typography variant={'body1'} sx={{ color: 'grey.700', my: 2 }}>\n              <ShowMore summary={description} maxCharacterCount={200} />\n            </Typography>\n          )}\n\n          {detailsPagePath && selectedFacetValue && (\n            <Box sx={{ my: 2 }}>\n              <Button\n                variant={'contained'}\n                href={detailsPagePath}\n                color={'secondary'}\n              >\n                Explore {selectedFacetValue}\n              </Button>\n            </Box>\n          )}\n        </FacetPlotsCardTitleContainer>\n\n        {/* create a plot for every facet to be plotted */}\n        {facetPlotDataArray.map((plotData, index) => {\n          return (\n            <React.Fragment key={index}>\n              <FacetPlotsCardPlotContainer\n                className={FACET_PLOTS_CARD_PLOT_CONTAINER_CLASSNAME}\n                sx={{\n                  pt: index === 0 ? 5 : 0,\n                  gridRow: `plot${index}`,\n                }}\n                key={index}\n              >\n                {index != 0 && <Divider sx={{ mt: 2, mb: 4 }} />}\n                <Box sx={{ minHeight: '130px' }}>\n                  <SizeMe monitorHeight noPlaceholder>\n                    {({ size }) => (\n                      <Box\n                        sx={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          alignItems: 'center',\n                        }}\n                      >\n                        <Plot\n                          key={`${facetsToPlot![index]}-${size.width!}`}\n                          layout={layout}\n                          data={plotData?.data ?? []}\n                          style={getPlotStyle(size.width, 'PIE', 150)}\n                          config={{ displayModeBar: false }}\n                        />\n                      </Box>\n                    )}\n                  </SizeMe>\n                  <Box sx={{ mt: 4, width: '100%' }}>\n                    <FacetPlotLegendTable\n                      facetName={getColumnDisplayName(\n                        facetDataArray[index].columnName,\n                      )}\n                      labels={plotData?.labels}\n                      colors={plotData?.colors}\n                      isExpanded={false}\n                      linkToFullQuery={detailsPagePath}\n                    />\n                  </Box>\n                </Box>\n              </FacetPlotsCardPlotContainer>\n            </React.Fragment>\n          )\n        })}\n      </Paper>\n    )\n  }\n}\n\nexport default FacetPlotsCard\n","import React from 'react'\nimport { SynapseConstants } from '../../utils'\nimport { parseEntityIdFromSqlStatement } from '../../utils/functions'\nimport { DEFAULT_PAGE_SIZE } from '../../utils/SynapseConstants'\nimport { QueryBundleRequest } from '@sage-bionetworks/synapse-types'\nimport {\n  QueryVisualizationContextType,\n  QueryVisualizationWrapper,\n} from '../QueryVisualizationWrapper'\nimport { QueryWrapper } from '../QueryWrapper'\nimport { QueryWrapperErrorBanner } from '../QueryWrapperErrorBanner'\nimport FacetPlotsCard from './FacetPlotsCard'\n\nexport type QueryPerFacetPlotsCardProps = {\n  title?: string\n  description?: string\n  rgbIndex?: number\n  facetsToPlot?: string[]\n  selectFacetColumnName: string\n  selectFacetColumnValue: string\n  sql?: string\n  detailsPagePath: string\n} & Pick<QueryVisualizationContextType, 'unitDescription'>\n\nexport function getQueryRequest(\n  sql: string,\n  selectFacetColumnName: string,\n  selectFacetColumnValue: string,\n): QueryBundleRequest {\n  const entityId = parseEntityIdFromSqlStatement(sql)\n  return {\n    entityId,\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n      SynapseConstants.BUNDLE_MASK_QUERY_FACETS,\n    query: {\n      sql,\n      offset: 0,\n      limit: DEFAULT_PAGE_SIZE,\n      selectedFacets: [\n        {\n          columnName: selectFacetColumnName,\n          facetValues: [selectFacetColumnValue],\n          concreteType:\n            'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest',\n        },\n      ],\n    },\n  }\n}\nconst QueryPerFacetPlotsCard: React.FunctionComponent<\n  QueryPerFacetPlotsCardProps\n> = props => {\n  const {\n    title,\n    description,\n    sql,\n    facetsToPlot,\n    rgbIndex,\n    selectFacetColumnName,\n    selectFacetColumnValue,\n    detailsPagePath,\n    ...rest\n  } = props\n  const initQueryRequest: QueryBundleRequest = getQueryRequest(\n    sql!,\n    selectFacetColumnName,\n    selectFacetColumnValue,\n  )\n  return (\n    <QueryWrapper {...rest} initQueryRequest={initQueryRequest}>\n      <QueryVisualizationWrapper rgbIndex={rgbIndex} {...rest}>\n        <QueryWrapperErrorBanner />\n        <FacetPlotsCard\n          title={title}\n          description={description}\n          facetsToPlot={facetsToPlot}\n          detailsPagePath={detailsPagePath}\n        />\n      </QueryVisualizationWrapper>\n    </QueryWrapper>\n  )\n}\n\nexport default QueryPerFacetPlotsCard\n","export const CARDS_PER_ROW = 3\n","import React from 'react'\nimport { SynapseConstants } from '../../utils'\nimport { parseEntityIdFromSqlStatement } from '../../utils/functions'\nimport { QueryBundleRequest } from '@sage-bionetworks/synapse-types'\nimport {\n  QueryVisualizationContextType,\n  QueryVisualizationWrapper,\n} from '../QueryVisualizationWrapper'\nimport { QueryWrapper } from '../QueryWrapper'\nimport { QueryWrapperErrorBanner } from '../QueryWrapperErrorBanner'\nimport FacetPlotsCard from './FacetPlotsCard'\nimport { chunk } from 'lodash-es'\nimport { FacetPlotsCardGridContainer } from './FacetPlotsCardGrid'\nimport { CARDS_PER_ROW } from './FeaturedDataTabsUtils'\n\nexport type SingleQueryFacetPlotsCardsProps = {\n  rgbIndex?: number\n  facetsToPlot?: string[]\n  columnAliases?: Record<string, string>\n  sql?: string\n} & Pick<QueryVisualizationContextType, 'unitDescription'>\n\nexport function getQueryRequest(sql: string): QueryBundleRequest {\n  const entityId = parseEntityIdFromSqlStatement(sql)\n  return {\n    entityId,\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n      SynapseConstants.BUNDLE_MASK_QUERY_FACETS,\n    query: {\n      sql,\n      offset: 0,\n      limit: 1,\n    },\n  }\n}\n\nconst SingleQueryFacetPlotsCards: React.FunctionComponent<\n  SingleQueryFacetPlotsCardsProps\n> = props => {\n  const { sql, facetsToPlot, rgbIndex, columnAliases, unitDescription } = props\n  const initQueryRequest: QueryBundleRequest = getQueryRequest(sql!)\n  return (\n    <QueryWrapper initQueryRequest={initQueryRequest}>\n      <QueryVisualizationWrapper\n        rgbIndex={rgbIndex}\n        columnAliases={columnAliases}\n        unitDescription={unitDescription}\n      >\n        <QueryWrapperErrorBanner />\n        {chunk(facetsToPlot, CARDS_PER_ROW).map((facets, rowIndex) => {\n          return (\n            <FacetPlotsCardGridContainer\n              key={rowIndex}\n              className={`FeaturedDataPlots__queryPerCard`}\n              sx={{\n                my: 4,\n              }}\n            >\n              {facets?.map(facetName => {\n                return (\n                  <FacetPlotsCard key={facetName} facetsToPlot={[facetName]} />\n                )\n              })}\n            </FacetPlotsCardGridContainer>\n          )\n        })}\n      </QueryVisualizationWrapper>\n    </QueryWrapper>\n  )\n}\n\nexport default SingleQueryFacetPlotsCards\n","import React from 'react'\nimport QueryPerFacetPlotsCard, {\n  QueryPerFacetPlotsCardProps,\n} from './QueryPerFacetPlotsCard'\nimport SingleQueryFacetPlotsCards, {\n  SingleQueryFacetPlotsCardsProps,\n} from './SingleQueryFacetPlotsCards'\nimport { chunk, times } from 'lodash-es'\nimport { FacetPlotsCardGridContainer } from './FacetPlotsCardGrid'\nimport { CARDS_PER_ROW } from './FeaturedDataTabsUtils'\n\nexport type QueryFacetPlotsCardsProps =\n  | QueryPerFacetPlotsCardProps\n  | SingleQueryFacetPlotsCardsProps\n\nexport type FeaturedDataPlotsProps = {\n  configs: QueryFacetPlotsCardsProps[]\n  rgbIndex?: number\n  sql?: string\n  explorePagePath?: string\n}\n\nconst FeaturedDataPlots: React.FunctionComponent<\n  FeaturedDataPlotsProps\n> = props => {\n  const { configs, rgbIndex, sql } = props\n  // What mode are we in?  Either every card has a different selected facet (requiring a different query),\n  // or we're showing the facet counts for a single query.  This controls the layout, and how the cards are populated.\n  const isQueryPerCard = configs && 'selectFacetColumnName' in configs[0]\n\n  if (!isQueryPerCard) {\n    return (\n      <>\n        {(configs as SingleQueryFacetPlotsCardsProps[]).map(config => {\n          return (\n            !isQueryPerCard && (\n              <SingleQueryFacetPlotsCards\n                {...config}\n                rgbIndex={rgbIndex}\n                sql={sql}\n              />\n            )\n          )\n        })}\n      </>\n    )\n  } else if (isQueryPerCard) {\n    return (\n      <>\n        {chunk(configs as QueryPerFacetPlotsCardProps[], CARDS_PER_ROW).map(\n          (configRow, rowIndex) => {\n            let cssGridTemplateRows = '[title] auto'\n\n            // There may be more than one plot per card, so add a row for each one\n            times(configRow[0].facetsToPlot?.length ?? 1).forEach(\n              (value, index) => {\n                cssGridTemplateRows += ` [plot${index}] auto`\n              },\n            )\n\n            return (\n              <FacetPlotsCardGridContainer\n                key={rowIndex}\n                sx={{\n                  gridTemplateRows: cssGridTemplateRows,\n                }}\n              >\n                {configRow.map(config => {\n                  return (\n                    <QueryPerFacetPlotsCard\n                      key={config.selectFacetColumnName}\n                      {...config}\n                      rgbIndex={rgbIndex}\n                      sql={sql}\n                    />\n                  )\n                })}\n              </FacetPlotsCardGridContainer>\n            )\n          },\n        )}\n      </>\n    )\n  }\n  return <></>\n}\n\nexport default FeaturedDataPlots\n","import React from 'react'\nimport { useState } from 'react'\nimport FeaturedDataPlots, { FeaturedDataPlotsProps } from './FeaturedDataPlots'\nimport { Icon } from '../row_renderers/utils'\nimport NoContentAvailable from '../SynapseTable/NoContentAvailable'\nimport { Button } from '@mui/material'\nimport { Paper } from '@mui/material'\n\nexport type FeatureDataTabProps = {\n  title: string // type of data being shown, used for the tab title and explore all button\n  icon?: string\n  exploreObjectType?: string\n  explorePagePath?: string\n  plotsConfig: FeaturedDataPlotsProps\n}\n\nexport type FeaturedDataTabsProps = {\n  configs: FeatureDataTabProps[]\n  rgbIndex: number\n  sql: string\n}\n\nconst FeaturedDataTabs: React.FunctionComponent<\n  FeaturedDataTabsProps\n> = props => {\n  const [selectedTabIndex, setSelectedTabIndex] = useState<number>(0)\n  const { configs, rgbIndex, sql } = props\n  // explore all data button\n  const selectedTabProps: FeatureDataTabProps = configs[selectedTabIndex]\n  return (\n    <div className=\"FeaturedDataTabs\">\n      {/* tabs */}\n      <div className=\"FeaturedDataTabs__tabs\">\n        {configs.map((config, index) => {\n          const isSelectedTabIndex: boolean = index === selectedTabIndex\n          return (\n            <div\n              className={`FeaturedDataTabs__tabs__tab ${\n                isSelectedTabIndex\n                  ? 'FeaturedDataTabs__tabs__tab__selected'\n                  : ''\n              }`}\n              key={config.title}\n            >\n              <button\n                className=\"SRC-centerAndJustifyContent\"\n                onClick={() => setSelectedTabIndex(index)}\n              >\n                {config.icon && <Icon type={config.icon}></Icon>}\n                <span>{config.title}</span>\n              </button>\n            </div>\n          )\n        })}\n      </div>\n      {/* tab content */}\n      {selectedTabProps && (\n        <>\n          {selectedTabProps.plotsConfig.configs.length > 0 ? (\n            <>\n              <FeaturedDataPlots\n                key={`${sql}-${selectedTabIndex}`}\n                sql={sql}\n                rgbIndex={rgbIndex}\n                explorePagePath={selectedTabProps.explorePagePath}\n                {...selectedTabProps.plotsConfig}\n              />\n              {selectedTabProps.explorePagePath && (\n                <div className=\"FeaturedDataTabs__explore-all\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    href={selectedTabProps.explorePagePath}\n                  >\n                    View All {selectedTabProps.exploreObjectType}\n                  </Button>\n                </div>\n              )}\n            </>\n          ) : (\n            <Paper sx={{ p: 2 }}>\n              <NoContentAvailable />\n            </Paper>\n          )}\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default FeaturedDataTabs\n"],"names":["FacetPlotLegendTable","props","facetName","labels","colors","isExpanded","linkToFullQuery","unitDescription","useQueryVisualizationContext","jsx","Fragment","numLegendItems","jsxs","Box","Typography","facetValue","index","labelDisplay","truncate","MAX_LEGEND_LENGTH","Link","FACET_PLOTS_CARD_CLASSNAME","FACET_PLOTS_CARD_TITLE_CONTAINER_CLASSNAME","FACET_PLOTS_CARD_PLOT_CONTAINER_CLASSNAME","FacetPlotsCardGridContainer","styled","theme","FacetPlotsCardTitleContainer","FacetPlotsCardPlotContainer","Plot","createPlotlyComponent","Plotly","layout","LoadingCard","numPlots","Paper","Skeleton","SkeletonParagraph","Button","times","SkeletonTable","FacetPlotsCard","title","description","facetsToPlot","detailsPagePath","accessToken","useSynapseContext","data","isLoadingNewBundle","useQueryContext","getColumnDisplayName","facetPlotDataArray","setFacetPlotDataArray","useState","facetDataArray","setFacetDataArray","selectedFacetValue","setSelectedFacetValue","useEffect","getColumnType","facetToPlot","_a","columnModel","facetsDataToPlot","getFacets","item","extractPlotDataArray","newPlotData","selectedFacet","facetValues","filteredFacetValues","x","isShowingMultiplePlots","cardTitle","ShowMore","plotData","React","Divider","SizeMe","size","getPlotStyle","getQueryRequest","sql","selectFacetColumnName","selectFacetColumnValue","parseEntityIdFromSqlStatement","SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS","SynapseConstants.BUNDLE_MASK_QUERY_FACETS","DEFAULT_PAGE_SIZE","QueryPerFacetPlotsCard","rgbIndex","rest","initQueryRequest","QueryWrapper","QueryVisualizationWrapper","QueryWrapperErrorBanner","CARDS_PER_ROW","SingleQueryFacetPlotsCards","columnAliases","chunk","facets","rowIndex","FeaturedDataPlots","configs","isQueryPerCard","configRow","cssGridTemplateRows","value","config","FeaturedDataTabs","selectedTabIndex","setSelectedTabIndex","selectedTabProps","Icon","NoContentAvailable"],"mappings":"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"}