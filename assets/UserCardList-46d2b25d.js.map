{"version":3,"file":"UserCardList-46d2b25d.js","sources":["../../src/components/UserCardList/UserCardList.tsx"],"sourcesContent":["import React from 'react'\nimport { getUserProfileWithProfilePicAttached } from '../../utils/functions/getUserData'\nimport { UserProfileList } from '../../synapse-client/SynapseClient'\nimport { MEDIUM_USER_CARD, UserCardSize } from '../../utils/SynapseConstants'\nimport {\n  ColumnTypeEnum,\n  QueryResultBundle,\n  UserProfile,\n} from '@sage-bionetworks/synapse-types'\nimport UserCard from '../UserCard/UserCard'\nimport { without } from 'lodash-es'\n\nexport type UserCardListProps = {\n  /* The list of user IDs or null values to render. For null values, the card will be rendered with table data supplied by `firstName`, `lastName`, and `institution` columns supplied by the data prop.  */\n  list: (string | null)[]\n  size?: UserCardSize\n  // Data should not be needed, however, it gives the option to fill in a user profile with other column\n  // fields. This is required specifically by AMP-AD Explore/People page\n  data?: QueryResultBundle\n}\n\nexport type UserCardListState = {\n  userProfileMap: Record<string, UserProfile>\n}\nexport class UserCardList extends React.Component<\n  UserCardListProps,\n  UserCardListState\n> {\n  constructor(props: UserCardListProps) {\n    super(props)\n    this.state = {\n      userProfileMap: {},\n    }\n    this.update = this.update.bind(this)\n  }\n\n  componentDidMount() {\n    const { list } = this.props\n    this.update(list)\n  }\n\n  componentDidUpdate(prevProps: UserCardListProps) {\n    const priorListOfIds = prevProps.list\n    const newValues = without(\n      this.props.list.filter(el => el),\n      ...priorListOfIds,\n    )\n    // check that the props have changed by seeing that at least one element is different\n    if (newValues.length > 0) {\n      this.update(newValues)\n    }\n  }\n\n  update(list: (string | null)[]) {\n    getUserProfileWithProfilePicAttached(\n      list.filter((el): el is string => !!el),\n    )\n      .then((data: UserProfileList) => {\n        const newEntries: Record<string, UserProfile> = {}\n        data.list.forEach(el => {\n          const { ownerId } = el\n          newEntries[ownerId] = el\n        })\n        this.setState({\n          userProfileMap: { ...this.state.userProfileMap, ...newEntries },\n        })\n      })\n      .catch((err: string) => {\n        console.error('Error on batch call =', err)\n      })\n  }\n\n  /**\n   * Given data this will find rows where there is no userId columnType and create faux user profiles\n   * using firstName, lastName, and institution (company in UserProfile object).\n   * @param {QueryResultBundle} data\n   * @returns list of UserProfiles with firstName, lastName, company, userName (first letter of firstName) filled out.\n   * @memberof UserCardList\n   */\n  manuallyExtractData(data: QueryResultBundle) {\n    const firstNameIndex = data.queryResult!.queryResults.headers.findIndex(\n      el => el.name === 'firstName',\n    )\n    const lastNameIndex = data.queryResult!.queryResults.headers.findIndex(\n      el => el.name === 'lastName',\n    )\n    const institutionIndex = data.queryResult!.queryResults.headers.findIndex(\n      el => el.name === 'institution',\n    )\n    const ownerId = data.queryResult!.queryResults.headers.findIndex(\n      el => el.columnType === ColumnTypeEnum.USERID,\n    )\n    const nullOwnerIdsRows = data.queryResult!.queryResults.rows.filter(\n      el => !el.values[ownerId],\n    )\n    return nullOwnerIdsRows.map<Omit<UserProfile, 'ownerId'>>(el => {\n      const values = el.values\n      return {\n        firstName: values[firstNameIndex] ?? '',\n        lastName: values[lastNameIndex] ?? '',\n        company: values[institutionIndex] ?? undefined,\n        ownerId: null,\n        userName: values[firstNameIndex]\n          ? values[firstNameIndex]![0] ?? ''\n          : '',\n      }\n    })\n  }\n\n  render() {\n    const { size = MEDIUM_USER_CARD, data, list } = this.props\n    const { userProfileMap = {} } = this.state\n    const fauxUserProfilesList = data && this.manuallyExtractData(data)\n    let fauxUserProfileIndex = 0\n    return (\n      <div className=\"SRC-card-grid-row\">\n        {\n          // we loop through the list from the props because thats the 'active set of data' whereas the data stored in state could be stale\n          list.map(ownerId => {\n            const userProfile = ownerId != null ? userProfileMap[ownerId] : null\n            if (userProfile) {\n              return (\n                <div\n                  key={JSON.stringify(userProfile)}\n                  className=\"SRC-grid-item SRC-narrow-grid-item\"\n                >\n                  <UserCard\n                    size={size}\n                    preSignedURL={userProfile.clientPreSignedURL}\n                    userProfile={userProfile}\n                  />\n                </div>\n              )\n            }\n            const fauxUserProfile =\n              fauxUserProfilesList && fauxUserProfilesList[fauxUserProfileIndex]\n            if (!fauxUserProfile) {\n              // This could happen in one of two cases:\n              // - The props just updated with a new userlist where the data is being gathered for this particular user\n              //   OR there is no mapping for this user\n              return false\n            }\n            fauxUserProfileIndex += 1\n            return (\n              <div\n                key={JSON.stringify(fauxUserProfile)}\n                className=\"SRC-grid-item SRC-narrow-grid-item\"\n              >\n                <UserCard\n                  disableLink={true}\n                  hideEmail={true}\n                  size={size}\n                  // TODO: Modify UserCard to accept a fake profile with no ownerId field, and remove this cast.\n                  userProfile={fauxUserProfile as UserProfile}\n                />\n              </div>\n            )\n          })\n        }\n      </div>\n    )\n  }\n}\nexport default UserCardList\n"],"names":["UserCardList","React","props","list","prevProps","priorListOfIds","newValues","without","el","getUserProfileWithProfilePicAttached","data","newEntries","ownerId","err","firstNameIndex","lastNameIndex","institutionIndex","ColumnTypeEnum","values","size","MEDIUM_USER_CARD","userProfileMap","fauxUserProfilesList","fauxUserProfileIndex","jsx","userProfile","UserCard","fauxUserProfile"],"mappings":"sRAwBO,MAAAA,UAAAC,EAAA,SAAA,CAGL,YAAAC,EAAA,CAEE,MAAAA,CAAA,EACA,KAAA,MAAA,CAAa,eAAA,CAAA,CACM,EAEnB,KAAA,OAAA,KAAA,OAAA,KAAA,IAAA,CAAmC,CACrC,mBAAA,CAGE,KAAA,CAAA,KAAAC,CAAA,EAAA,KAAA,MACA,KAAA,OAAAA,CAAA,CAAgB,CAClB,mBAAAC,EAAA,CAGE,MAAAC,EAAAD,EAAA,KACAE,EAAAC,EAAkB,KAAA,MAAA,KAAA,OAAAC,GAAAA,CAAA,EACe,GAAAH,CAC5B,EAGLC,EAAA,OAAA,GACE,KAAA,OAAAA,CAAA,CACF,CACF,OAAAH,EAAA,CAGEM,EAAAN,EAAA,OAAAK,GAAA,CAAA,CAAAA,CAAA,CACwC,EAAA,KAAAE,GAAA,CAGpC,MAAAC,EAAA,CAAA,EACAD,EAAA,KAAA,QAAAF,GAAA,CACE,KAAA,CAAA,QAAAI,CAAA,EAAAJ,EACAG,EAAAC,CAAA,EAAAJ,CAAsB,CAAA,EAExB,KAAA,SAAA,CAAc,eAAA,CAAA,GAAA,KAAA,MAAA,eAAA,GAAAG,CAAA,CACkD,CAAA,CAC/D,CAAA,EAAA,MAAAE,GAAA,CAGD,QAAA,MAAA,wBAAAA,CAAA,CAA0C,CAAA,CAC3C,CACL,oBAAAH,EAAA,CAUE,MAAAI,EAAAJ,EAAA,YAAA,aAAA,QAAA,UAA8DF,GAAAA,EAAA,OAAA,WAC1C,EAEpBO,EAAAL,EAAA,YAAA,aAAA,QAAA,UAA6DF,GAAAA,EAAA,OAAA,UACzC,EAEpBQ,EAAAN,EAAA,YAAA,aAAA,QAAA,UAAgEF,GAAAA,EAAA,OAAA,aAC5C,EAEpBI,EAAAF,EAAA,YAAA,aAAA,QAAA,UAAuDF,GAAAA,EAAA,aAAAS,EAAA,MACd,EAKzC,OAHAP,EAAA,YAAA,aAAA,KAAA,OAA6DF,GAAA,CAAAA,EAAA,OAAAI,CAAA,CACnC,EAE1B,IAAAJ,GAAA,CACE,MAAAU,EAAAV,EAAA,OACA,MAAA,CAAO,UAAAU,EAAAJ,CAAA,GAAA,GACgC,SAAAI,EAAAH,CAAA,GAAA,GACF,QAAAG,EAAAF,CAAA,GAAA,OACE,QAAA,KAC5B,SAAAE,EAAAJ,CAAA,EAAAI,EAAAJ,CAAA,EAAA,CAAA,GAAA,GAAA,EAGL,CACN,CAAA,CACD,CACH,QAAA,CAGE,KAAA,CAAA,KAAAK,EAAAC,EAAA,KAAAV,EAAA,KAAAP,CAAA,EAAA,KAAA,MACA,CAAA,eAAAkB,EAAA,CAAA,GAAA,KAAA,MACAC,EAAAZ,GAAA,KAAA,oBAAAA,CAAA,EACA,IAAAa,EAAA,EACA,OAAAC,EAAA,MAAA,CACG,UAAA,oBAAc,SAAArB,EAAA,IAAAS,GAAA,CAIT,MAAAa,EAAAb,GAAA,KAAAS,EAAAT,CAAA,EAAA,KACA,GAAAa,EACE,OAAAD,EACE,MAAC,CAAA,UAAA,qCAEW,SAAAA,EAEVE,EAAC,CAAA,KAAAP,EACC,aAAAM,EAAA,mBAC0B,YAAAA,CAC1B,CAAA,CACF,EAAA,KAAA,UAAAA,CAAA,CAP+B,EAWrC,MAAAE,EAAAL,GAAAA,EAAAC,CAAA,EAEA,OAAAI,GAMAJ,GAAA,EACAC,EACE,MAAC,CAAA,UAAA,qCAEW,SAAAA,EAEVE,EAAC,CAAA,YAAA,GACc,UAAA,GACF,KAAAP,EACX,YAAAQ,CAEa,CAAA,CACf,EAAA,KAAA,UAAAA,CAAA,CATmC,GALrC,EAeA,CAAA,CAEH,CAAA,CAEL,CAGN"}