{"version":3,"file":"useDownloadList-1ce749d3.js","sources":["../../src/synapse-queries/download/useDownloadList.ts"],"sourcesContent":["import {\n  ActionRequiredRequest,\n  AvailableFilesRequest,\n  AvailableFilter,\n  Sort,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport {\n  ActionRequiredResponse,\n  AvailableFilesResponse,\n  FilesStatisticsResponse,\n} from '@sage-bionetworks/synapse-types'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport SynapseClient from '../../synapse-client'\nimport { AddBatchOfFilesToDownloadListResponse } from '@sage-bionetworks/synapse-types'\n\nexport function useGetAvailableFilesToDownload(\n  request: AvailableFilesRequest,\n  options?: UseQueryOptions<\n    AvailableFilesResponse,\n    SynapseClientError,\n    AvailableFilesResponse\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<AvailableFilesResponse, SynapseClientError>(\n    keyFactory.getDownloadListAvailableFilesQueryKey(request),\n    () => SynapseClient.getAvailableFilesToDownload(request, accessToken),\n    options,\n  )\n}\n\nexport function useGetAvailableFilesToDownloadInfinite(\n  sort?: Sort,\n  filter?: AvailableFilter,\n  options?: UseInfiniteQueryOptions<\n    AvailableFilesResponse,\n    SynapseClientError,\n    AvailableFilesResponse\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const request: AvailableFilesRequest = {\n    concreteType:\n      'org.sagebionetworks.repo.model.download.AvailableFilesRequest',\n  }\n  if (sort) {\n    request.sort = [sort]\n  }\n  if (filter) {\n    request.filter = filter\n  }\n  return useInfiniteQuery<AvailableFilesResponse, SynapseClientError>(\n    keyFactory.getDownloadListAvailableFilesInfiniteQueryKey(request),\n    async context => {\n      return SynapseClient.getAvailableFilesToDownload(\n        { ...request, nextPageToken: context.pageParam },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useGetDownloadListActionsRequired(\n  options?: UseQueryOptions<\n    ActionRequiredResponse,\n    SynapseClientError,\n    ActionRequiredResponse\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const request: ActionRequiredRequest = {\n    concreteType:\n      'org.sagebionetworks.repo.model.download.ActionRequiredRequest',\n  }\n\n  return useQuery<ActionRequiredResponse, SynapseClientError>(\n    keyFactory.getDownloadListActionsRequiredQueryKey(),\n    () => SynapseClient.getDownloadListActionsRequired(request, accessToken),\n    options,\n  )\n}\n\nexport function useGetDownloadListActionsRequiredInfinite(\n  options?: UseInfiniteQueryOptions<\n    ActionRequiredResponse,\n    SynapseClientError,\n    ActionRequiredResponse\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const request: ActionRequiredRequest = {\n    concreteType:\n      'org.sagebionetworks.repo.model.download.ActionRequiredRequest',\n  }\n  return useInfiniteQuery<ActionRequiredResponse, SynapseClientError>(\n    keyFactory.getDownloadListActionsRequiredInfiniteQueryKey(),\n    async context => {\n      return await SynapseClient.getDownloadListActionsRequired(\n        { ...request, nextPageToken: context.pageParam },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useGetDownloadListStatistics(\n  options?: UseQueryOptions<\n    FilesStatisticsResponse,\n    SynapseClientError,\n    FilesStatisticsResponse\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<FilesStatisticsResponse, SynapseClientError>(\n    keyFactory.getDownloadListStatisticsQueryKey(),\n    () => SynapseClient.getDownloadListStatistics(accessToken),\n    options,\n  )\n}\n\nexport function useAddFileToDownloadList(\n  options?: UseMutationOptions<\n    AddBatchOfFilesToDownloadListResponse,\n    SynapseClientError,\n    {\n      entityId: string\n      entityVersionNumber: number | undefined\n    }\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const queryClient = useQueryClient()\n  return useMutation({\n    ...options,\n    mutationFn: (vars: {\n      entityId: string\n      entityVersionNumber: number | undefined\n    }) =>\n      SynapseClient.addFileToDownloadListV2(\n        vars.entityId,\n        vars.entityVersionNumber,\n        accessToken,\n      ),\n    mutationKey: ['addFileToDownloadList'],\n    onSuccess: async (data, variables, ctx) => {\n      // PORTALS-2222: Invalidate to load the accurate results\n      await queryClient.invalidateQueries(\n        keyFactory.getDownloadListBaseQueryKey(),\n      )\n      if (options?.onSuccess) {\n        return options.onSuccess(data, variables, ctx)\n      }\n    },\n  })\n}\n\nexport function useAddFileBatchToDownloadList(\n  options?: UseMutationOptions<\n    AddBatchOfFilesToDownloadListResponse,\n    SynapseClientError,\n    {\n      fileEntityId: string\n      versionNumber?: number\n    }[]\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const queryClient = useQueryClient()\n  return useMutation({\n    ...options,\n    mutationFn: batchToAdd =>\n      SynapseClient.addFileBatchToDownloadListV2(batchToAdd, accessToken),\n    mutationKey: ['addFileBatchToDownloadList'],\n    onSuccess: async (data, variables, ctx) => {\n      // PORTALS-2222: Invalidate to load the accurate results\n      await queryClient.invalidateQueries(\n        keyFactory.getDownloadListBaseQueryKey(),\n      )\n      if (options?.onSuccess) {\n        return options.onSuccess(data, variables, ctx)\n      }\n    },\n  })\n}\n"],"names":["useGetAvailableFilesToDownloadInfinite","sort","filter","options","accessToken","keyFactory","useSynapseContext","request","useInfiniteQuery","context","SynapseClient","page","useGetDownloadListActionsRequiredInfinite","useGetDownloadListStatistics","useQuery","useAddFileToDownloadList","queryClient","useQueryClient","useMutation","vars","data","variables","ctx","useAddFileBatchToDownloadList","batchToAdd"],"mappings":"sKAyCgB,SAAAA,EACdC,EACAC,EACAC,EAKA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAChDC,EAAiC,CACrC,aACE,+DAAA,EAEJ,OAAIN,IACMM,EAAA,KAAO,CAACN,CAAI,GAElBC,IACFK,EAAQ,OAASL,GAEZM,EACLH,EAAW,8CAA8CE,CAAO,EAChE,MAAME,GACGC,EAAc,4BACnB,CAAE,GAAGH,EAAS,cAAeE,EAAQ,SAAU,EAC/CL,CAAA,EAGJ,CACE,GAAGD,EACH,oBAA0BQ,EAAK,aACjC,CAAA,CAEJ,CAsBO,SAASC,EACdT,EAKA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAChDC,EAAiC,CACrC,aACE,+DAAA,EAEG,OAAAC,EACLH,EAAW,+CAA+C,EAC1D,MAAMI,GACG,MAAMC,EAAc,+BACzB,CAAE,GAAGH,EAAS,cAAeE,EAAQ,SAAU,EAC/CL,CAAA,EAGJ,CACE,GAAGD,EACH,oBAA0BQ,EAAK,aACjC,CAAA,CAEJ,CAEO,SAASE,EACdV,EAKA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAC/C,OAAAQ,EACLT,EAAW,kCAAkC,EAC7C,IAAMK,EAAc,0BAA0BN,CAAW,EACzDD,CAAA,CAEJ,CAEO,SAASY,EACdZ,EAQA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAChDU,EAAcC,IACpB,OAAOC,EAAY,CACjB,GAAGf,EACH,WAAagB,GAIXT,EAAc,wBACZS,EAAK,SACLA,EAAK,oBACLf,CACF,EACF,YAAa,CAAC,uBAAuB,EACrC,UAAW,MAAOgB,EAAMC,EAAWC,IAAQ,CAKzC,GAHA,MAAMN,EAAY,kBAChBX,EAAW,4BAA4B,CAAA,EAErCF,GAAA,MAAAA,EAAS,UACX,OAAOA,EAAQ,UAAUiB,EAAMC,EAAWC,CAAG,CAEjD,CAAA,CACD,CACH,CAEO,SAASC,EACdpB,EAQA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAChDU,EAAcC,IACpB,OAAOC,EAAY,CACjB,GAAGf,EACH,WAAYqB,GACVd,EAAc,6BAA6Bc,EAAYpB,CAAW,EACpE,YAAa,CAAC,4BAA4B,EAC1C,UAAW,MAAOgB,EAAMC,EAAWC,IAAQ,CAKzC,GAHA,MAAMN,EAAY,kBAChBX,EAAW,4BAA4B,CAAA,EAErCF,GAAA,MAAAA,EAAS,UACX,OAAOA,EAAQ,UAAUiB,EAAMC,EAAWC,CAAG,CAEjD,CAAA,CACD,CACH"}