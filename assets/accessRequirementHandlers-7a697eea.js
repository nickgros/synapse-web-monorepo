import{l as d}from"./index-07e2bb0e.js";import{A as p,c as E,O as g,d as R,e as S,f as A}from"./SynapseClient-773213a5.js";import{M as l}from"./getEndpoint-ac94413e.js";import{b as u,c as f,d as m}from"./wikiHandlers-b11199b3.js";const C=o=>[d.rest.get(`${o}${p(":id")}`,async(t,e,n)=>{let a=404,s={reason:`Mock Service worker could not find an access requirement with ID ${t.params.id}`};const i=u.find(r=>r.id.toString()===t.params.id);return i&&(s=i,a=200),e(n.status(a),n.json(s))}),d.rest.get(`${o}${E(":id")}`,async(t,e,n)=>{let a=404,s={reason:`Mock Service worker could not find an access requirement wiki page key with AR ID ${t.params.id}`};const i=f.find(r=>(r.ownerObjectType===g.ACCESS_REQUIREMENT&&r.ownerObjectId.toString())===t.params.id);return i&&(s=i,a=200),e(n.status(a),n.json(s))})],_=(o,t=":entityId",e=u)=>[d.rest.get(`${l}${R(t)}`,async(n,a,s)=>{const r={results:e,totalNumberOfResults:e.length};return a(s.status(200),s.json(r))})],k=(o,t={})=>[d.rest.get(`${o}${S(":id")}`,async(e,n,a)=>{let s;const i=u.find(c=>e.params.id===c.id.toString());if(typeof e.params.id=="string"&&e.params.id in t&&(s=t[e.params.id]),!s&&i){const c=i.concreteType==="org.sagebionetworks.repo.model.ManagedACTAccessRequirement";s={accessRequirementId:e.params.id,concreteType:c?"org.sagebionetworks.repo.model.dataaccess.ManagedACTAccessRequirementStatus":"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!0,currentSubmissionStatus:c?{submissionId:m.id,submittedBy:m.submittedBy,modifiedOn:m.modifiedOn,state:A.APPROVED}:void 0}}const r=s?200:404;return n(a.status(r),a.json(s))})];export{_ as a,k as b,C as g};
//# sourceMappingURL=accessRequirementHandlers-7a697eea.js.map
