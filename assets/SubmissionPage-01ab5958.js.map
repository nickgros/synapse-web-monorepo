{"version":3,"file":"SubmissionPage-01ab5958.js","sources":["../../src/components/dataaccess/SubmissionPage.tsx"],"sourcesContent":["import { Button, Skeleton, Typography } from '@mui/material'\nimport { toLower, upperFirst } from 'lodash-es'\nimport dayjs from 'dayjs'\nimport React, { useState } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport useGetDataAccessSubmission, {\n  useUpdateDataAccessSubmissionState,\n} from '../../synapse-queries/dataaccess/useDataAccessSubmission'\nimport {\n  useGetAccessRequirements,\n  useGetAccessRequirementACL,\n  useGetAccessRequirementWikiPageKey,\n} from '../../synapse-queries/dataaccess/useAccessRequirements'\nimport { ACT_TEAM_ID } from '../../utils/SynapseConstants'\nimport {\n  FileHandleAssociateType,\n  ManagedACTAccessRequirement,\n  SubmissionState,\n} from '@sage-bionetworks/synapse-types'\nimport { SynapseErrorBoundary } from '../error/ErrorBanner'\nimport MarkdownSynapse from '../Markdown/MarkdownSynapse'\nimport WarningDialog, { WarningDialogProps } from '../SynapseForm/WarningDialog'\nimport UserCard from '../UserCard/UserCard'\nimport UserOrTeamBadge from '../UserOrTeamBadge/UserOrTeamBadge'\nimport { FileHandleLink } from '../widgets/FileHandleLink'\nimport duration from 'dayjs/plugin/duration'\nimport RejectDataAccessRequestModal from './RejectDataAccessRequestModal'\n\ndayjs.extend(duration)\n\nexport type SubmissionPageProps = {\n  /** The ID of the submission to view */\n  submissionId: string | number\n}\n\nfunction DataAccessSubmissionFileHandleLink(props: {\n  submissionId: string\n  fileHandleId: string\n}) {\n  const { submissionId, fileHandleId } = props\n  const fileHandleAssociation = React.useMemo(\n    () => ({\n      fileHandleId: fileHandleId,\n      associateObjectId: submissionId,\n      associateObjectType:\n        FileHandleAssociateType.DataAccessSubmissionAttachment,\n    }),\n    [fileHandleId, submissionId],\n  )\n  return (\n    <FileHandleLink\n      key={fileHandleId}\n      showDownloadIcon={true}\n      fileHandleAssociation={fileHandleAssociation}\n    />\n  )\n}\n\nfunction ApproveConfirmationModal(\n  props: Pick<WarningDialogProps, 'open' | 'onConfirm' | 'onCancel'>,\n) {\n  return (\n    <WarningDialog\n      open={props.open}\n      title=\"Approve Request?\"\n      content={\n        <>\n          <Typography variant=\"body1\" sx={{ marginBottom: '10px' }}>\n            Approving the request will grant access to controlled data.\n          </Typography>\n          <Typography variant=\"body1\">\n            In addition, the user will receive an email notification alerting\n            them that the request has been granted.\n          </Typography>\n        </>\n      }\n      onConfirm={props.onConfirm}\n      onConfirmCallbackArgs={[]}\n      onCancel={props.onCancel}\n      confirmButtonText=\"Approve\"\n    />\n  )\n}\n\ntype AccessRequirementWikiType = {\n  accessRequirementId: string\n}\n\nfunction AccessRequirementWiki(props: AccessRequirementWikiType) {\n  const { data: wikiPageKey } = useGetAccessRequirementWikiPageKey(\n    props.accessRequirementId,\n    {\n      useErrorBoundary: true,\n    },\n  )\n\n  return wikiPageKey ? (\n    <div className=\"AccessRequirementWikiContainer\">\n      <div className=\"AccessRequirementWikiContent\">\n        <Typography variant=\"headline1\">Access Requirement</Typography>\n        <hr />\n        <MarkdownSynapse\n          wikiId={wikiPageKey?.wikiPageId}\n          ownerId={wikiPageKey?.ownerObjectId}\n          objectType={wikiPageKey?.ownerObjectType}\n        />\n      </div>\n    </div>\n  ) : (\n    <Skeleton width={'100%'} height={'600px'} />\n  )\n}\n\n/**\n * Page for a Data Access Submission that a designated reviewer can view, and choose to approve or reject.\n */\nexport default function SubmissionPage(props: SubmissionPageProps) {\n  const { submissionId } = props\n  const [showRejectionDialog, setShowRejectionDialog] = useState(false)\n\n  const handleError = useErrorHandler()\n  const { data: submission, refetch } = useGetDataAccessSubmission(\n    submissionId,\n    { useErrorBoundary: true },\n  )\n\n  const { mutateAsync } = useUpdateDataAccessSubmissionState()\n\n  const { data: accessRequirement } =\n    useGetAccessRequirements<ManagedACTAccessRequirement>(\n      parseInt(submission?.accessRequirementId!),\n      { enabled: !!submission },\n    )\n\n  const { data: acl } = useGetAccessRequirementACL(\n    submission?.accessRequirementId!,\n    { enabled: !!submission, useErrorBoundary: true },\n  )\n\n  const [showApprovalConfirmation, setShowApprovalConfirmation] =\n    useState(false)\n\n  function approveSubmission() {\n    return mutateAsync({\n      submissionId: submission?.id ?? '',\n      newState: SubmissionState.APPROVED,\n    })\n  }\n\n  return (\n    <div className=\"SubmissionPage\">\n      <ApproveConfirmationModal\n        open={showApprovalConfirmation}\n        onCancel={() => {\n          setShowApprovalConfirmation(false)\n        }}\n        onConfirm={async () => {\n          try {\n            await approveSubmission()\n          } catch (e) {\n            handleError(e)\n          }\n          setShowApprovalConfirmation(false)\n          refetch()\n        }}\n      />\n      <RejectDataAccessRequestModal\n        // Use the submission ID as a key so that the modal form is reset for a new submission\n        key={submissionId}\n        submissionId={submissionId}\n        open={showRejectionDialog}\n        onClose={() => setShowRejectionDialog(false)}\n      />\n      <div className=\"SubmissionSummary\">\n        <Typography variant=\"dataFieldKey\">Status</Typography>\n        <Typography variant=\"headline3\">\n          {submission ? submission.state : <Skeleton width={100} />}\n        </Typography>\n        <br />\n        {submission ? (\n          submission.state === 'SUBMITTED' && (\n            <div className=\"ButtonContainer\">\n              <Button\n                onClick={() => {\n                  setShowApprovalConfirmation(true)\n                }}\n                color=\"success\"\n                variant=\"contained\"\n              >\n                Approve\n              </Button>\n              <Button\n                onClick={() => {\n                  setShowRejectionDialog(true)\n                }}\n                color=\"error\"\n                variant=\"contained\"\n              >\n                Reject\n              </Button>\n            </div>\n          )\n        ) : (\n          <Skeleton width={200} />\n        )}\n        <Typography variant=\"dataFieldKey\">Access Requirement Name</Typography>\n        <Typography variant=\"smallText1\">\n          {accessRequirement?.name ?? <Skeleton width={100} />}\n        </Typography>\n        <br />\n        <Typography variant=\"dataFieldKey\">Assigned Reviewer</Typography>\n        <Typography variant=\"smallText1\">\n          {acl !== undefined ? (\n            acl !== null ? (\n              acl.resourceAccess.map(ra => {\n                return (\n                  <UserOrTeamBadge\n                    key={ra.principalId}\n                    principalId={ra.principalId}\n                  />\n                )\n              })\n            ) : (\n              <UserOrTeamBadge principalId={ACT_TEAM_ID} />\n            )\n          ) : (\n            <Skeleton width={100} />\n          )}\n        </Typography>\n        <br />\n        <Typography variant=\"dataFieldKey\">Conditions</Typography>\n        {accessRequirement ? (\n          <Typography variant=\"smallText1\" component={'div'}>\n            <ul>\n              <li>\n                Expiration period:{' '}\n                {dayjs\n                  .duration({\n                    milliseconds: accessRequirement.expirationPeriod,\n                  })\n                  .asDays()}{' '}\n                day(s)\n                {accessRequirement.expirationPeriod === 0 && ' (no expiration)'}\n              </li>\n\n              {accessRequirement.isCertifiedUserRequired && (\n                <li>User must be Certified</li>\n              )}\n              {accessRequirement.isValidatedProfileRequired && (\n                <li>User Profile must be Validated</li>\n              )}\n              {accessRequirement.isDUCRequired && <li>DUC is required</li>}\n              {accessRequirement.isIDURequired && <li>IDU is required</li>}\n              {accessRequirement.isIDUPublic && (\n                <li>IDU will be made public</li>\n              )}\n              {accessRequirement.isIRBApprovalRequired && (\n                <li>IRB Approval is required</li>\n              )}\n              {accessRequirement.areOtherAttachmentsRequired && (\n                <li>Other attachments are required</li>\n              )}\n            </ul>\n          </Typography>\n        ) : (\n          <Skeleton width={100} />\n        )}\n        <br />\n        <div className=\"SubmissionSummaryGrid\">\n          <Typography variant=\"dataFieldKey\">Submitted By</Typography>\n          <Typography variant=\"smallText1\">\n            {submission ? (\n              <UserCard\n                size={'SMALL USER CARD'}\n                ownerId={submission.submittedBy}\n              />\n            ) : (\n              <Skeleton width={100} />\n            )}\n          </Typography>\n          <Typography variant=\"dataFieldKey\">Submitted On</Typography>\n          <Typography variant=\"smallText1\">\n            {submission ? (\n              formatDate(dayjs(submission.submittedOn))\n            ) : (\n              <Skeleton width={100} />\n            )}\n          </Typography>\n          <Typography variant=\"dataFieldKey\">Modified By</Typography>\n          <Typography variant=\"smallText1\">\n            {submission ? (\n              <UserCard\n                size={'SMALL USER CARD'}\n                ownerId={submission.modifiedBy}\n              />\n            ) : (\n              <Skeleton width={100} />\n            )}\n          </Typography>\n          <Typography variant=\"dataFieldKey\">Modified On</Typography>\n          <Typography variant=\"smallText1\">\n            {submission ? (\n              formatDate(dayjs(submission.modifiedOn))\n            ) : (\n              <Skeleton width={100} />\n            )}\n          </Typography>\n          <Typography className=\"Key\" variant=\"dataFieldKey\">\n            Data Requesters\n            {`${submission ? ` (${submission.accessorChanges.length})` : ''}`}\n          </Typography>\n          {submission ? (\n            submission.accessorChanges.map(accessorChange => (\n              <React.Fragment key={accessorChange.userId}>\n                <Typography className=\"Key DataAccessor\" variant=\"smallText1\">\n                  <span style={{ whiteSpace: 'nowrap' }}>\n                    <UserCard\n                      key={accessorChange.userId}\n                      size=\"SMALL USER CARD\"\n                      ownerId={accessorChange.userId}\n                    />\n                  </span>\n                </Typography>\n                <Typography className=\"Value DataAccessor\" variant=\"smallText1\">\n                  {upperFirst(\n                    toLower(\n                      accessorChange.type.substring(\n                        0,\n                        accessorChange.type.indexOf('_'),\n                      ),\n                    ),\n                  )}\n                </Typography>\n              </React.Fragment>\n            ))\n          ) : (\n            <Skeleton width={100} />\n          )}\n          <Typography className=\"Key\" variant=\"dataFieldKey\">\n            Institution\n          </Typography>\n          <Typography className=\"Value\" variant=\"smallText1\">\n            {submission ? (\n              submission.researchProjectSnapshot.institution\n            ) : (\n              <Skeleton width={100} />\n            )}\n          </Typography>\n          <Typography className=\"Key\" variant=\"dataFieldKey\">\n            Project Lead\n          </Typography>\n          <Typography className=\"Value\" variant=\"smallText1\">\n            {submission ? (\n              submission.researchProjectSnapshot.projectLead\n            ) : (\n              <Skeleton width={100} />\n            )}\n          </Typography>\n        </div>\n      </div>\n      <div className=\"SubmissionRightPane\">\n        <SynapseErrorBoundary>\n          {submission ? (\n            <AccessRequirementWiki\n              accessRequirementId={submission.accessRequirementId}\n            />\n          ) : (\n            <></>\n          )}\n        </SynapseErrorBoundary>\n        <div>\n          {submission?.rejectedReason && (\n            <>\n              <Typography variant=\"headline1\">\n                Reason for rejection given by reviewer\n              </Typography>\n              <hr />\n              <Typography variant=\"body1\" style={{ whiteSpace: 'pre-line' }}>\n                {submission.rejectedReason}\n              </Typography>\n            </>\n          )}\n          <Typography variant=\"headline1\">\n            Contents of the Access Request\n          </Typography>\n          <hr />\n          {submission?.researchProjectSnapshot?.intendedDataUseStatement && (\n            <>\n              <Typography variant=\"headline2\">\n                Intended Data Use Statement\n              </Typography>\n              <Typography variant=\"body1\" style={{ whiteSpace: 'pre-line' }}>\n                {submission.researchProjectSnapshot.intendedDataUseStatement}\n              </Typography>\n            </>\n          )}\n          <Typography variant=\"headline2\">Documents</Typography>\n          {submission?.ducFileHandleId && (\n            <>\n              <Typography variant=\"smallText2\">\n                Data Use Certificate (DUC)\n              </Typography>\n              <DataAccessSubmissionFileHandleLink\n                submissionId={submission.id}\n                fileHandleId={submission.ducFileHandleId}\n              />\n            </>\n          )}\n          {submission?.irbFileHandleId && (\n            <>\n              <Typography variant=\"smallText2\">IRB Approval Letter</Typography>\n              <DataAccessSubmissionFileHandleLink\n                submissionId={submission.id}\n                fileHandleId={submission.irbFileHandleId}\n              />\n            </>\n          )}\n          {submission?.attachments && (\n            <>\n              <Typography variant=\"smallText2\">Other Attachments</Typography>\n              {submission.attachments.map(fileHandleId => (\n                <React.Fragment key={fileHandleId}>\n                  <DataAccessSubmissionFileHandleLink\n                    submissionId={submission.id}\n                    fileHandleId={fileHandleId}\n                  />\n                  <br />\n                </React.Fragment>\n              ))}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":["dayjs","duration","DataAccessSubmissionFileHandleLink","props","submissionId","fileHandleId","fileHandleAssociation","React","FileHandleAssociateType","jsx","FileHandleLink","ApproveConfirmationModal","WarningDialog","jsxs","Fragment","Typography","AccessRequirementWiki","wikiPageKey","useGetAccessRequirementWikiPageKey","MarkdownSynapse","Skeleton","SubmissionPage","showRejectionDialog","setShowRejectionDialog","useState","handleError","useErrorHandler","submission","refetch","useGetDataAccessSubmission","mutateAsync","useUpdateDataAccessSubmissionState","accessRequirement","useGetAccessRequirements","acl","useGetAccessRequirementACL","showApprovalConfirmation","setShowApprovalConfirmation","approveSubmission","SubmissionState","e","RejectDataAccessRequestModal","Button","ra","UserOrTeamBadge","ACT_TEAM_ID","UserCard","formatDate","accessorChange","upperFirst","toLower","SynapseErrorBoundary","_a"],"mappings":"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"}