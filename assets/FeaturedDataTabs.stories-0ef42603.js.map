{"version":3,"file":"FeaturedDataTabs.stories-0ef42603.js","sources":["../../src/lib/containers/home_page/featured-data/FacetPlotsCard.tsx","../../src/lib/containers/home_page/featured-data/QueryPerFacetPlotsCard.tsx","../../src/lib/containers/home_page/featured-data/SingleQueryFacetPlotsCards.tsx","../../src/lib/containers/home_page/featured-data/FeaturedDataPlots.tsx","../../src/lib/containers/home_page/featured-data/FeaturedDataTabs.tsx"],"sourcesContent":["import * as React from 'react'\nimport Plotly from 'plotly.js-basic-dist'\nimport * as PlotlyTyped from 'plotly.js'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { SizeMe } from 'react-sizeme'\n\nimport {\n  FacetColumnResultValues,\n  ColumnTypeEnum,\n  FacetColumnResult,\n  FacetColumnResultValueCount,\n} from '../../../utils/synapseTypes'\n\nimport { getColorPalette } from '../../../containers/ColorGradient'\nimport { useEffect, useState } from 'react'\nimport loadingScreen from '../../LoadingScreen'\nimport {\n  GraphData,\n  extractPlotDataArray,\n  getPlotStyle,\n  FacetPlotLegend,\n} from '../../widgets/facet-nav/FacetNavPanel'\nimport { getFacets } from '../../widgets/facet-nav/FacetNav'\nimport { useSynapseContext } from '../../../utils/SynapseContext'\nimport { useQueryContext } from '../../QueryContext'\nimport { useQueryVisualizationContext } from '../../QueryVisualizationWrapper'\n\nconst Plot = createPlotlyComponent(Plotly)\n\nexport type FacetPlotsCardProps = {\n  title?: string\n  description?: string\n  facetsToPlot?: string[]\n  detailsPagePath?: string\n}\n\nconst layout: Partial<PlotlyTyped.Layout> = {\n  showlegend: false,\n  annotations: [],\n  margin: { l: 0, r: 0, b: 0, t: 0, pad: 0 },\n  yaxis: {\n    visible: false,\n    showgrid: false,\n  },\n  xaxis: {\n    visible: false,\n    showgrid: false,\n  },\n}\n\nconst FacetPlotsCard: React.FunctionComponent<FacetPlotsCardProps> = ({\n  title,\n  description,\n  facetsToPlot,\n  detailsPagePath,\n}: FacetPlotsCardProps): JSX.Element => {\n  const { accessToken } = useSynapseContext()\n  const { data, isLoadingNewBundle } = useQueryContext()\n  const { getColumnDisplayName, rgbIndex } = useQueryVisualizationContext()\n  const [facetPlotDataArray, setFacetPlotDataArray] = useState<GraphData[]>([])\n  const [facetDataArray, setFacetDataArray] = useState<FacetColumnResult[]>([])\n  const [selectedFacetValue, setSelectedFacetValue] = useState<string>('')\n  const { colorPalette } = getColorPalette(rgbIndex ?? 0, 2)\n\n  useEffect(() => {\n    if (!facetsToPlot || !data) {\n      return\n    } else {\n      const getColumnType = (\n        facetToPlot: FacetColumnResult,\n      ): ColumnTypeEnum | undefined =>\n        data?.columnModels?.find(\n          columnModel => columnModel.name === facetToPlot.columnName,\n        )?.columnType as ColumnTypeEnum\n\n      const facetsDataToPlot = getFacets(data, facetsToPlot)\n      setFacetDataArray(facetsDataToPlot)\n      Promise.all(\n        facetsDataToPlot.map(async (item, index) => {\n          const plotData = await extractPlotDataArray(\n            item as FacetColumnResultValues,\n            getColumnType(item),\n            index + 1, //individual plot rgbIndex\n            'PIE',\n            accessToken,\n          )\n          return plotData\n        }),\n      ).then(newPlotData => setFacetPlotDataArray(newPlotData))\n      // If we are showing a facet selection based card, then set the selectedFacetValue.  For example, facet column \"study\" with value \"ROSMAP\"\n      const selectedFacet: FacetColumnResultValueCount | undefined =\n        data?.facets?.map(item => {\n          const facetValues: FacetColumnResultValueCount[] = (\n            item as FacetColumnResultValues\n          ).facetValues\n          if (facetValues) {\n            const filteredFacetValues: FacetColumnResultValueCount[] =\n              facetValues.filter(facetValue => {\n                return facetValue.isSelected\n              })\n            return filteredFacetValues.length > 0\n              ? filteredFacetValues[0]\n              : undefined\n          } else {\n            return undefined\n          }\n        })[0]\n      if (selectedFacet && selectedFacet.value) {\n        setSelectedFacetValue(selectedFacet?.value)\n      }\n    }\n  }, [facetsToPlot, data])\n\n  if (\n    isLoadingNewBundle ||\n    !facetPlotDataArray ||\n    !facetDataArray ||\n    facetDataArray.length === 0\n  ) {\n    return (\n      <div className=\"FacetPlotsCard FacetPlotsCard__loading SRC-centerContentColumn\">\n        {loadingScreen}\n      </div>\n    )\n  } else {\n    let detailsPageLink = <></>\n    if (detailsPagePath && selectedFacetValue) {\n      detailsPageLink = (\n        <div className=\"FacetPlotsCard__link\">\n          <a href={detailsPagePath}>View {selectedFacetValue}</a>\n        </div>\n      )\n    }\n    const isShowingMultiplePlots = facetPlotDataArray.length > 1\n    const cardTitle =\n      title ??\n      (isShowingMultiplePlots\n        ? selectedFacetValue\n        : getColumnDisplayName(facetDataArray[0].columnName))\n    return (\n      <div className=\"FacetPlotsCard cardContainer\">\n        <div\n          className=\"FacetPlotsCard__titlebar\"\n          style={{ backgroundColor: colorPalette[0].replace(')', ',.05)') }}\n        >\n          <span className=\"FacetPlotsCard__title\">{cardTitle}</span>\n          {description && (\n            <span className=\"FacetPlotsCard__description\">{description}</span>\n          )}\n          {detailsPageLink}\n          {isLoadingNewBundle && (\n            <span style={{ marginLeft: '2px' }} className={'spinner'} />\n          )}\n        </div>\n        <div className=\"FacetPlotsCard__body\">\n          {/* create a plot for every facet to be plotted */}\n          {facetPlotDataArray.map((plotData, index) => {\n            return (\n              <div key={index}>\n                {index !== 0 && <hr></hr>}\n                {isShowingMultiplePlots && (\n                  <div className=\"FacetPlotsCard__body__facetname\">\n                    <span>\n                      {getColumnDisplayName(facetDataArray[index].columnName)}\n                    </span>\n                  </div>\n                )}\n                <div className=\"FacetPlotsCard__body__row\">\n                  <SizeMe monitorHeight>\n                    {({ size }) => (\n                      <div className=\"FacetPlotsCard__body__plot\">\n                        <Plot\n                          key={`${facetsToPlot![index]}-${size.width}`}\n                          layout={layout}\n                          data={plotData?.data ?? []}\n                          style={getPlotStyle(size.width, 'PIE', 150)}\n                          config={{ displayModeBar: false }}\n                        />\n                      </div>\n                    )}\n                  </SizeMe>\n                  <FacetPlotLegend\n                    labels={plotData?.labels}\n                    colors={plotData?.colors}\n                    isExpanded={false}\n                  />\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default FacetPlotsCard\n","import * as React from 'react'\nimport { SynapseConstants } from '../../../utils'\nimport { parseEntityIdFromSqlStatement } from '../../../utils/functions/sqlFunctions'\nimport { DEFAULT_PAGE_SIZE } from '../../../utils/SynapseConstants'\nimport { QueryBundleRequest } from '../../../utils/synapseTypes'\nimport { QueryVisualizationWrapper } from '../../QueryVisualizationWrapper'\nimport { QueryWrapper } from '../../QueryWrapper'\nimport { QueryWrapperErrorBanner } from '../../QueryWrapperErrorBanner'\nimport FacetPlotsCard from './FacetPlotsCard'\n\nexport type QueryPerFacetPlotsCardProps = {\n  title?: string\n  description?: string\n  rgbIndex?: number\n  facetsToPlot?: string[]\n  selectFacetColumnName: string\n  selectFacetColumnValue: string\n  sql?: string\n  detailsPagePath: string\n}\nexport function getQueryRequest(\n  sql: string,\n  selectFacetColumnName: string,\n  selectFacetColumnValue: string,\n): QueryBundleRequest {\n  const entityId = parseEntityIdFromSqlStatement(sql)\n  return {\n    entityId,\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n      SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    query: {\n      sql,\n      offset: 0,\n      limit: DEFAULT_PAGE_SIZE,\n      selectedFacets: [\n        {\n          columnName: selectFacetColumnName,\n          facetValues: [selectFacetColumnValue],\n          concreteType:\n            'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest',\n        },\n      ],\n    },\n  }\n}\nconst QueryPerFacetPlotsCard: React.FunctionComponent<\n  QueryPerFacetPlotsCardProps\n> = props => {\n  const {\n    title,\n    description,\n    sql,\n    facetsToPlot,\n    rgbIndex,\n    selectFacetColumnName,\n    selectFacetColumnValue,\n    detailsPagePath,\n    ...rest\n  } = props\n  const initQueryRequest: QueryBundleRequest = getQueryRequest(\n    sql!,\n    selectFacetColumnName,\n    selectFacetColumnValue,\n  )\n  return (\n    <div className=\"QueryPerFacetPlotsCard\">\n      <QueryWrapper {...rest} initQueryRequest={initQueryRequest}>\n        <QueryVisualizationWrapper rgbIndex={rgbIndex} {...rest}>\n          <QueryWrapperErrorBanner />\n          <FacetPlotsCard\n            title={title}\n            description={description}\n            facetsToPlot={facetsToPlot}\n            detailsPagePath={detailsPagePath}\n          />\n        </QueryVisualizationWrapper>\n      </QueryWrapper>\n    </div>\n  )\n}\n\nexport default QueryPerFacetPlotsCard\n","import * as React from 'react'\nimport { SynapseConstants } from '../../../utils'\nimport { parseEntityIdFromSqlStatement } from '../../../utils/functions/sqlFunctions'\nimport { QueryBundleRequest } from '../../../utils/synapseTypes'\nimport { QueryVisualizationWrapper } from '../../QueryVisualizationWrapper'\nimport { QueryWrapper } from '../../QueryWrapper'\nimport { QueryWrapperErrorBanner } from '../../QueryWrapperErrorBanner'\nimport FacetPlotsCard from './FacetPlotsCard'\n\nexport type SingleQueryFacetPlotsCardsProps = {\n  rgbIndex?: number\n  facetsToPlot?: string[]\n  columnAliases?: Record<string, string>\n  sql?: string\n}\nexport function getQueryRequest(sql: string): QueryBundleRequest {\n  const entityId = parseEntityIdFromSqlStatement(sql)\n  return {\n    entityId,\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n      SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    query: {\n      sql,\n      offset: 0,\n      limit: 1,\n    },\n  }\n}\nconst SingleQueryFacetPlotsCards: React.FunctionComponent<\n  SingleQueryFacetPlotsCardsProps\n> = props => {\n  const { sql, facetsToPlot, rgbIndex, columnAliases } = props\n  const initQueryRequest: QueryBundleRequest = getQueryRequest(sql!)\n  return (\n    <div className=\"SingleQueryFacetPlotsCards\">\n      <QueryWrapper initQueryRequest={initQueryRequest}>\n        <QueryVisualizationWrapper\n          rgbIndex={rgbIndex}\n          columnAliases={columnAliases}\n        >\n          <QueryWrapperErrorBanner />\n          {facetsToPlot?.map(facetName => {\n            return (\n              <FacetPlotsCard\n                key={`FacetPlotCard-${facetName}`}\n                facetsToPlot={[facetName]}\n              />\n            )\n          })}\n        </QueryVisualizationWrapper>\n      </QueryWrapper>\n    </div>\n  )\n}\n\nexport default SingleQueryFacetPlotsCards\n","import * as React from 'react'\nimport QueryPerFacetPlotsCard, {\n  QueryPerFacetPlotsCardProps,\n} from './QueryPerFacetPlotsCard'\nimport SingleQueryFacetPlotsCards, {\n  SingleQueryFacetPlotsCardsProps,\n} from './SingleQueryFacetPlotsCards'\n\nexport type QueryFacetPlotsCardsProps =\n  | QueryPerFacetPlotsCardProps\n  | SingleQueryFacetPlotsCardsProps\n\nexport type FeaturedDataPlotsProps = {\n  configs: QueryFacetPlotsCardsProps[]\n  rgbIndex?: number\n  sql?: string\n  explorePagePath?: string\n}\n\nconst FeaturedDataPlots: React.FunctionComponent<\n  FeaturedDataPlotsProps\n> = props => {\n  const { configs, rgbIndex, sql } = props\n  // What mode are we in?  Either every card has a different selected facet (requiring a different query),\n  // or we're showing the facet counts for a single query.  This controls the layout, and how the cards are populated.\n  const isQueryPerCard = (configs[0] as any).selectFacetColumnName\n  return (\n    <div\n      className={`FeaturedDataPlots${\n        isQueryPerCard ? '__queryPerCard' : '__singleQuery'\n      }`}\n    >\n      {configs.map((config: any) => {\n        return (\n          <>\n            {isQueryPerCard && (\n              <QueryPerFacetPlotsCard\n                {...config}\n                rgbIndex={rgbIndex}\n                sql={sql}\n              />\n            )}\n            {!isQueryPerCard && (\n              <SingleQueryFacetPlotsCards\n                {...config}\n                rgbIndex={rgbIndex}\n                sql={sql}\n              />\n            )}\n          </>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default FeaturedDataPlots\n","import * as React from 'react'\nimport { useState } from 'react'\nimport FeaturedDataPlots, { FeaturedDataPlotsProps } from './FeaturedDataPlots'\nimport { Icon } from '../../../containers/row_renderers/utils'\nimport { Button } from 'react-bootstrap'\n\nexport type FeatureDataTabProps = {\n  title: string // type of data being shown, used for the tab title and explore all button\n  icon?: string\n  exploreObjectType?: string\n  explorePagePath?: string\n  plotsConfig: FeaturedDataPlotsProps\n}\n\nexport type FeaturedDataTabsProps = {\n  configs: FeatureDataTabProps[]\n  rgbIndex: number\n  sql: string\n}\n\nconst FeaturedDataTabs: React.FunctionComponent<\n  FeaturedDataTabsProps\n> = props => {\n  const [selectedTabIndex, setSelectedTabIndex] = useState<number>(0)\n  const { configs, rgbIndex, sql } = props\n  // explore all data button\n  const selectedTabProps: FeatureDataTabProps = configs[selectedTabIndex]\n  return (\n    <div className=\"FeaturedDataTabs\">\n      {/* tabs */}\n      <div className=\"FeaturedDataTabs__tabs\">\n        {configs.map((config, index) => {\n          const isSelectedTabIndex: boolean = index === selectedTabIndex\n          return (\n            <div\n              className={`FeaturedDataTabs__tabs__tab ${\n                isSelectedTabIndex\n                  ? 'FeaturedDataTabs__tabs__tab__selected'\n                  : ''\n              }`}\n              key={config.title}\n            >\n              <button\n                className=\"SRC-centerAndJustifyContent\"\n                onClick={() => setSelectedTabIndex(index)}\n              >\n                {config.icon && <Icon type={config.icon}></Icon>}\n                <span>{config.title}</span>\n              </button>\n            </div>\n          )\n        })}\n      </div>\n      {/* tab content */}\n      {selectedTabProps && (\n        <>\n          <FeaturedDataPlots\n            key={`${sql}-${selectedTabIndex}`}\n            {...selectedTabProps.plotsConfig}\n            rgbIndex={rgbIndex}\n            sql={sql}\n            explorePagePath={selectedTabProps.explorePagePath}\n          />\n          {selectedTabProps.explorePagePath && (\n            <div className=\"bootstrap-4-backport FeaturedDataTabs__explore-all\">\n              <Button\n                variant=\"secondary\"\n                size=\"lg\"\n                href={selectedTabProps.explorePagePath}\n              >\n                Explore All {selectedTabProps.exploreObjectType}\n              </Button>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default FeaturedDataTabs\n"],"names":["Plot","createPlotlyComponent","Plotly","layout","FacetPlotsCard","title","description","facetsToPlot","detailsPagePath","accessToken","useSynapseContext","data","isLoadingNewBundle","useQueryContext","getColumnDisplayName","rgbIndex","useQueryVisualizationContext","facetPlotDataArray","setFacetPlotDataArray","useState","facetDataArray","setFacetDataArray","selectedFacetValue","setSelectedFacetValue","colorPalette","getColorPalette","useEffect","getColumnType","facetToPlot","_b","_a","columnModel","facetsDataToPlot","getFacets","item","index","extractPlotDataArray","newPlotData","selectedFacet","facetValues","filteredFacetValues","facetValue","jsx","loadingScreen","detailsPageLink","Fragment","jsxs","isShowingMultiplePlots","cardTitle","plotData","SizeMe","size","getPlotStyle","FacetPlotLegend","getQueryRequest","sql","selectFacetColumnName","selectFacetColumnValue","parseEntityIdFromSqlStatement","SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS","SynapseConstants.BUNDLE_MASK_QUERY_FACETS","SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","DEFAULT_PAGE_SIZE","QueryPerFacetPlotsCard","props","rest","initQueryRequest","QueryWrapper","QueryVisualizationWrapper","QueryWrapperErrorBanner","SingleQueryFacetPlotsCards","columnAliases","facetName","FeaturedDataPlots","configs","isQueryPerCard","config","FeaturedDataTabs","selectedTabIndex","setSelectedTabIndex","selectedTabProps","Icon","Button"],"mappings":"qnHA2BA,MAAAA,GAAAC,GAAAC,EAAA,EASAC,GAAA,CAA4C,WAAA,GAC9B,YAAA,CAAA,EACE,OAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAAA,EAC2B,MAAA,CAClC,QAAA,GACI,SAAA,EACC,EACZ,MAAA,CACO,QAAA,GACI,SAAA,EACC,CAEd,EAEAC,EAAA,CAAA,CAAsE,MAAAC,EACpE,YAAAC,EACA,aAAAC,EACA,gBAAAC,CAEF,IAAA,CACE,KAAA,CAAA,YAAAC,GAAAC,IACA,CAAA,KAAAC,EAAA,mBAAAC,CAAA,EAAAC,EAAA,EACA,CAAA,qBAAAC,EAAA,SAAAC,CAAA,EAAAC,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,CAAA,CAAA,EACA,CAAAG,EAAAC,CAAA,EAAAJ,EAAA,SAAA,EAAA,EACA,CAAA,aAAAK,CAAA,EAAAC,GAAAV,GAAA,EAAA,CAAA,EAmDA,GAjDAW,EAAAA,UAAA,IAAA,OACE,GAAA,GAAAnB,GAAA,CAAAI,GACE,CAEA,MAAAgB,EAAAC,YAAA,OAAAC,GAAAC,EAAAnB,GAAA,YAAAA,EAAA,eAAA,YAAAmB,EAAA,KAGsBC,GAAAA,EAAA,OAAAH,EAAA,cAHtB,YAAAC,EAIoD,YAGpDG,EAAAC,GAAAtB,EAAAJ,CAAA,EACAc,EAAAW,CAAA,EACA,QAAA,IAAQA,EAAA,IAAA,MAAAE,EAAAC,IAEJ,MAAAC,GAAuBF,EACrBP,EAAAO,CAAA,EACkBC,EAAA,EACV,MACR1B,CACA,CAEK,CACR,EAAA,KAAA4B,GAAAnB,EAAAmB,CAAA,CAAA,EAGH,MAAAC,GAAAR,EAAAnB,GAAA,YAAAA,EAAA,SAAA,YAAAmB,EAAA,IAAAI,GAAA,CAEI,MAAAK,EAAAL,EAAA,YAGA,GAAAK,EAAA,CACE,MAAAC,EAAAD,EAAA,OAAAE,GAEIA,EAAA,UAAkB,EAEtB,OAAAD,EAAA,OAAA,EAAAA,EAAA,CAAA,EAAA,MAEI,KAEJ,OACF,GAAA,GAEJF,GAAAA,EAAA,OACEf,EAAAe,GAAA,YAAAA,EAAA,KAAA,CACF,CACF,EAAA,CAAA/B,EAAAI,CAAA,CAAA,EAGFC,GAAA,CAAAK,GAAA,CAAAG,GAAAA,EAAA,SAAA,EAME,OAAAsB,EAAA,MAAA,CAAA,UAAA,iEAAA,SAAAC,EAAA,CAAA,EAGE,CAGF,IAAAC,EAAAF,EAAAG,EAAA,CAAA,CAAA,EACArC,GAAAc,IACEsB,EAAAF,EAAA,MAAA,CAAA,UAAA,uBAAA,SAAAI,EAAA,IAAA,CAAA,KAAAtC,EAAA,SAAA,CAE8B,QAAAc,CAAM,CAAA,CAAA,CAAA,CAAA,GAItC,MAAAyB,EAAA9B,EAAA,OAAA,EACA+B,EAAA3C,IAAA0C,EAAAzB,EAAAR,EAAAM,EAAA,CAAA,EAAA,UAAA,GAKA,OAAA0B,EAAA,MAAA,CAAA,UAAA,+BAAA,SAAA,CAEIA,EAAA,MAAC,CAAA,UAAA,2BACW,MAAA,CAAA,gBAAAtB,EAAA,CAAA,EAAA,QAAA,IAAA,OAAA,CAAA,EACsD,SAAA,CAEhEkB,EAAA,OAAA,CAAA,UAAA,wBAAA,SAAAM,EAAA,EAAmD1C,GAAAoC,EAAA,OAAA,CAAA,UAAA,8BAAA,SAAApC,EAAA,EAEUsC,EAE5DhC,GAAA8B,EAAA,OAAA,CAAA,MAAA,CAAA,WAAA,KAAA,EAAA,UAAA,UAAA,CAE2D,CAAA,CAAA,EAE9DA,EAAA,MAAA,CAAA,UAAA,uBAAA,SAAAzB,EAAA,IAAA,CAAAgC,EAAAd,IAIIW,EAAA,MAAA,CAAA,SAAA,CAEKX,IAAA,GAAAO,EAAA,KAAA,CAAA,CAAA,EAAmBK,GAAAL,EAAA,MAAA,CAAA,UAAA,kCAAA,SAAAA,EAAA,OAAA,CAAA,SAAA5B,EAAAM,EAAAe,CAAA,EAAA,UAAA,CAAA,CAAA,EAAA,EAMlBW,EAAA,MAAA,CAAA,UAAA,4BAAA,SAAA,CAGAJ,EAAAQ,GAAAA,OAAA,CAAA,cAAA,GAAA,SAAA,CAAA,CAAA,KAAAC,CAAA,IAAAT,EAAA,MAAA,CAAA,UAAA,6BAAA,SAAAA,EAGM1C,GAAC,CAAA,OAAAG,GAEC,MAAA8C,GAAA,YAAAA,EAAA,OAAA,CAAA,EACyB,MAAAG,GAAAD,EAAA,MAAA,MAAA,GAAA,EACiB,OAAA,CAAA,eAAA,EAAA,CACV,EAAA,GAAA5C,EAAA4B,CAAA,KAAAgB,EAAA,OAJK,CAAA,CAAA,CAAA,CAAA,EAQ7CT,EACAW,GAAC,CAAA,OAAAJ,GAAA,YAAAA,EAAA,OACmB,OAAAA,GAAA,YAAAA,EAAA,OACA,WAAA,EACN,CAAA,CACd,EAAA,CACF,CAAA,EAAAd,CAAA,CACF,EAAA,CAGN,CAAA,CAAA,CACF,CAGN,6fC9KO,SAAAmB,GAAAC,EAAAC,EAAAC,EAAA,CAML,MAAA,CAAO,SADPC,EAAAH,CAAA,EAEE,aAAA,0DACc,SAAAI,EAAAC,EAAAC,EAAAC,EAKK,MAAA,CACZ,IAAAP,EACL,OAAA,EACQ,MAAAQ,EACD,eAAA,CACS,CACd,WAAAP,EACc,YAAA,CAAAC,CAAA,EACwB,aAAA,+DAElC,CACJ,CACF,CACF,CAEJ,CACA,MAAAO,EAAAC,GAAA,CAGE,KAAA,CAAM,MAAA5D,EACJ,YAAAC,EACA,IAAAiD,EACA,aAAAhD,EACA,SAAAQ,EACA,sBAAAyC,EACA,uBAAAC,EACA,gBAAAjD,EACA,GAAA0D,CACG,EAAAD,EAELE,EAAAb,GAA6CC,EAC3CC,EACAC,CACA,EAEF,OAAAf,EAAA,MAAA,CAAA,UAAA,yBAAA,SAAAA,EAAA0B,EAAA,CAAA,GAAAF,EAAA,iBAAAC,EAAA,SAAArB,EAAAuB,EAAA,CAAA,SAAAtD,EAAA,GAAAmD,EAAA,SAAA,CAIQxB,EAAA4B,EAAA,EAAA,EAAyB5B,EACzBtC,EAAC,CAAA,MAAAC,EACC,YAAAC,EACA,aAAAC,EACA,gBAAAC,CACA,CAAA,CACF,EAAA,CAAA,CAAA,CAAA,CAAA,CAKV,66BCpEO,SAAA8C,EAAAC,EAAA,CAEL,MAAA,CAAO,SADPG,EAAAH,CAAA,EAEE,aAAA,0DACc,SAAAI,EAAAC,EAAAC,EAAAC,EAKK,MAAA,CACZ,IAAAP,EACL,OAAA,EACQ,MAAA,CACD,CACT,CAEJ,CACA,MAAAgB,EAAAN,GAAA,CAGE,KAAA,CAAA,IAAAV,EAAA,aAAAhD,EAAA,SAAAQ,EAAA,cAAAyD,CAAA,EAAAP,EACAE,EAAAb,EAAAC,CAAA,EACA,OAAAb,EAAA,MAAA,CAAA,UAAA,6BAAA,SAAAA,EAAA0B,EAAA,CAAA,iBAAAD,EAAA,SAAArB,EAGMuB,EAAC,CAAA,SAAAtD,EACC,cAAAyD,EACA,SAAA,CAEA9B,EAAA4B,EAAA,EAAA,EAAyB/D,GAAA,YAAAA,EAAA,IAAAkE,GAEvB/B,EACEtC,EAAC,CAAA,aAAA,CAAAqE,CAAA,CAEyB,EAAA,iBAAAA,GADF,EAI3B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAKX,yoBCtCA,MAAAC,EAAAT,GAAA,CAGE,KAAA,CAAA,QAAAU,EAAA,SAAA5D,EAAA,IAAAwC,CAAA,EAAAU,EAGAW,EAAAD,EAAA,CAAA,EAAA,sBACA,OAAAjC,EACE,MAAC,CAAA,UAAA,oBAAAkC,EAAA,iBAAA,kBAEuC,SAAAD,EAAA,IAAAE,GAIpC/B,EAAAD,EAAA,CAAA,SAAA,CAEK+B,GAAAlC,EACCsB,EAAC,CAAA,GAAAa,EACK,SAAA9D,EACJ,IAAAwC,CACA,CAAA,EACF,CAAAqB,GAAAlC,EAGA6B,EAAC,CAAA,GAAAM,EACK,SAAA9D,EACJ,IAAAwC,CACA,CAAA,CACF,CAAA,CAAA,CAEJ,CAEH,CAAA,CAGP,kgBClCA,MAAAuB,EAAAb,GAAA,CAGE,KAAA,CAAAc,EAAAC,CAAA,EAAA7D,EAAA,SAAA,CAAA,EACA,CAAA,QAAAwD,EAAA,SAAA5D,EAAA,IAAAwC,CAAA,EAAAU,EAEAgB,EAAAN,EAAAI,CAAA,EACA,OAAAjC,EAAA,MAAA,CAAA,UAAA,mBAAA,SAAA,CAGIJ,EAAA,MAAA,CAAA,UAAA,yBAAA,SAAAiC,EAAA,IAAA,CAAAE,EAAA1C,IAGIO,EACE,MAAC,CAAA,UAAA,+BAFHP,IAAA4C,EAEG,wCAAA,KAIO,SAAAjC,EAIN,SAAC,CAAA,UAAA,8BACW,QAAA,IAAAkC,EAAA7C,CAAA,EAC8B,SAAA,CAEvC0C,EAAA,MAAAnC,EAAAwC,GAAA,CAAA,KAAAL,EAAA,KAAA,EAAwCnC,EAAA,OAAA,CAAA,SAAAmC,EAAA,KAAA,CAAA,CACrB,CAAA,CAAA,CACtB,EAAAA,EAAA,KARY,CASd,EAAA,EAGNI,GAAAnC,EAAAD,EAAA,CAAA,SAAA,CAIIH,EAAAgC,EAAC,CAAA,GAAAO,EAAA,YAEsB,SAAAlE,EACrB,IAAAwC,EACA,gBAAA0B,EAAA,eACkC,EAAA,GAAA1B,KAAAwB,GAJnB,EAKjBE,EAAA,iBAAAvC,EAAA,MAAA,CAAA,UAAA,qDAAA,SAAAI,EAGIqC,GAAC,CAAA,QAAA,YACS,KAAA,KACH,KAAAF,EAAA,gBACkB,SAAA,CACxB,eAAAA,EAAA,iBAC+B,CAAA,CAAA,EAAA,CAElC,EAAA,CAEJ,CAAA,CAAA,CAIR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}