{"version":3,"file":"useEntity-01ef9709.js","sources":["../../../../node_modules/.pnpm/react-query@3.39.3_react-dom@18.2.0_react@18.2.0/node_modules/react-query/es/core/queriesObserver.js","../../../../node_modules/.pnpm/react-query@3.39.3_react-dom@18.2.0_react@18.2.0/node_modules/react-query/es/react/useQueries.js","../../src/synapse-queries/QueryClientUtils.ts","../../src/synapse-queries/entity/useEntity.ts"],"sourcesContent":["import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { difference, replaceAt } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { QueryObserver } from './queryObserver';\nimport { Subscribable } from './subscribable';\nexport var QueriesObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueriesObserver, _Subscribable);\n\n  function QueriesObserver(client, queries) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.queries = [];\n    _this.result = [];\n    _this.observers = [];\n    _this.observersMap = {};\n\n    if (queries) {\n      _this.setQueries(queries);\n    }\n\n    return _this;\n  }\n\n  var _proto = QueriesObserver.prototype;\n\n  _proto.onSubscribe = function onSubscribe() {\n    var _this2 = this;\n\n    if (this.listeners.length === 1) {\n      this.observers.forEach(function (observer) {\n        observer.subscribe(function (result) {\n          _this2.onUpdate(observer, result);\n        });\n      });\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.observers.forEach(function (observer) {\n      observer.destroy();\n    });\n  };\n\n  _proto.setQueries = function setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    this.updateObservers(notifyOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.result;\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(function (match) {\n      return match.observer.getOptimisticResult(match.defaultedQueryOptions);\n    });\n  };\n\n  _proto.findMatchingObservers = function findMatchingObservers(queries) {\n    var _this3 = this;\n\n    var prevObservers = this.observers;\n    var defaultedQueryOptions = queries.map(function (options) {\n      return _this3.client.defaultQueryObserverOptions(options);\n    });\n    var matchingObservers = defaultedQueryOptions.flatMap(function (defaultedOptions) {\n      var match = prevObservers.find(function (observer) {\n        return observer.options.queryHash === defaultedOptions.queryHash;\n      });\n\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n\n      return [];\n    });\n    var matchedQueryHashes = matchingObservers.map(function (match) {\n      return match.defaultedQueryOptions.queryHash;\n    });\n    var unmatchedQueries = defaultedQueryOptions.filter(function (defaultedOptions) {\n      return !matchedQueryHashes.includes(defaultedOptions.queryHash);\n    });\n    var unmatchedObservers = prevObservers.filter(function (prevObserver) {\n      return !matchingObservers.some(function (match) {\n        return match.observer === prevObserver;\n      });\n    });\n    var newOrReusedObservers = unmatchedQueries.map(function (options, index) {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        var previouslyUsedObserver = unmatchedObservers[index];\n\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n\n      return {\n        defaultedQueryOptions: options,\n        observer: _this3.getObserver(options)\n      };\n    });\n\n    var sortMatchesByOrderOfQueries = function sortMatchesByOrderOfQueries(a, b) {\n      return defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n    };\n\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  };\n\n  _proto.getObserver = function getObserver(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var currentObserver = this.observersMap[defaultedOptions.queryHash];\n    return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n  };\n\n  _proto.updateObservers = function updateObservers(notifyOptions) {\n    var _this4 = this;\n\n    notifyManager.batch(function () {\n      var prevObservers = _this4.observers;\n\n      var newObserverMatches = _this4.findMatchingObservers(_this4.queries); // set options for the new observers to notify of changes\n\n\n      newObserverMatches.forEach(function (match) {\n        return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n      });\n      var newObservers = newObserverMatches.map(function (match) {\n        return match.observer;\n      });\n      var newObserversMap = Object.fromEntries(newObservers.map(function (observer) {\n        return [observer.options.queryHash, observer];\n      }));\n      var newResult = newObservers.map(function (observer) {\n        return observer.getCurrentResult();\n      });\n      var hasIndexChange = newObservers.some(function (observer, index) {\n        return observer !== prevObservers[index];\n      });\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n\n      _this4.observers = newObservers;\n      _this4.observersMap = newObserversMap;\n      _this4.result = newResult;\n\n      if (!_this4.hasListeners()) {\n        return;\n      }\n\n      difference(prevObservers, newObservers).forEach(function (observer) {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(function (observer) {\n        observer.subscribe(function (result) {\n          _this4.onUpdate(observer, result);\n        });\n      });\n\n      _this4.notify();\n    });\n  };\n\n  _proto.onUpdate = function onUpdate(observer, result) {\n    var index = this.observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  };\n\n  _proto.notify = function notify() {\n    var _this5 = this;\n\n    notifyManager.batch(function () {\n      _this5.listeners.forEach(function (listener) {\n        listener(_this5.result);\n      });\n    });\n  };\n\n  return QueriesObserver;\n}(Subscribable);","import React, { useMemo } from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { QueriesObserver } from '../core/queriesObserver';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useQueries(queries) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var defaultedQueries = useMemo(function () {\n    return queries.map(function (options) {\n      var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n      defaultedOptions.optimisticResults = true;\n      return defaultedOptions;\n    });\n  }, [queries, queryClient]);\n\n  var _React$useState2 = React.useState(function () {\n    return new QueriesObserver(queryClient, defaultedQueries);\n  }),\n      observer = _React$useState2[0];\n\n  var result = observer.getOptimisticResult(defaultedQueries);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [observer]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries, observer]);\n  return result;\n}","import { QueryClient } from 'react-query'\nimport { KeyFactory } from './KeyFactory'\n\n/**\n * Invalidate all queries for the given entity.\n * @param queryClient\n * @param keyFactory\n * @param id\n */\nexport function invalidateAllQueriesForEntity(\n  queryClient: QueryClient,\n  keyFactory: KeyFactory,\n  id: string,\n) {\n  // TODO: Figure out how to handle cases where the change can affect other entities.\n  // Some examples:\n  //  - deleting an entity should invalidate the parent's children\n  //  - moving an entity should invalidate the old and new parent's children\n  return queryClient.invalidateQueries(keyFactory.getEntityQueryKey(id))\n}\n","/*\n * Hooks to access Entity Services in Synapse\n */\n\nimport { omit, pick } from 'lodash-es'\nimport { useMemo } from 'react'\nimport {\n  QueryFunctionContext,\n  QueryKey,\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQueries,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { entityJsonKeys } from '../../utils/functions/EntityTypeUtils'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  AccessControlList,\n  Entity,\n  EntityHeader,\n  EntityId,\n  EntityJson,\n  EntityPath,\n  Evaluation,\n  GetEvaluationParameters,\n  PaginatedResults,\n  UserEntityPermissions,\n  VersionInfo,\n} from '@sage-bionetworks/synapse-types'\nimport { invalidateAllQueriesForEntity } from '../QueryClientUtils'\n\nexport function useGetEntity<T extends Entity>(\n  entityId: string,\n  versionNumber?: string | number,\n  options?: UseQueryOptions<T, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<T, SynapseClientError>(\n    keyFactory.getEntityVersionQueryKey(entityId, versionNumber),\n    () =>\n      SynapseClient.getEntity<T>(\n        accessToken,\n        entityId,\n        versionNumber?.toString(),\n      ),\n    options,\n  )\n}\n\nexport function useGetEntities(\n  entityHeaders: Pick<EntityHeader, 'id' | 'versionNumber'>[],\n  options?: UseQueryOptions<Entity[], SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const headerIds = entityHeaders.map(header => header.id).join()\n  const queries = useMemo(\n    () =>\n      entityHeaders.map(header => {\n        return {\n          queryKey: keyFactory.getEntityVersionQueryKey(\n            header.id,\n            header.versionNumber,\n          ),\n          queryFn: () =>\n            SynapseClient.getEntity(\n              accessToken,\n              header.id,\n              header.versionNumber,\n            ),\n        }\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [headerIds],\n  )\n  const results = useQueries(queries)\n  const isLoading = results.some(result => result.isLoading)\n  const entities: Entity[] = results\n    .filter(query => query.data !== undefined)\n    .map(query => query.data!)\n  return useMemo(() => {\n    // @ts-ignore\n    if (!isLoading && options?.onSuccess) options.onSuccess(entities)\n    return { isLoading, data: entities }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isLoading, headerIds])\n}\n\nexport function useUpdateEntity<T extends Entity>(\n  options?: UseMutationOptions<T, SynapseClientError, T>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<T, SynapseClientError, T>(\n    (entity: T) => SynapseClient.updateEntity<T>(entity, accessToken),\n    {\n      ...options,\n      onSuccess: async (updatedEntity, variables, ctx) => {\n        await invalidateAllQueriesForEntity(\n          queryClient,\n          keyFactory,\n          updatedEntity.id!,\n        )\n        queryClient.setQueryData(\n          keyFactory.getEntityQueryKey(updatedEntity.id!),\n          updatedEntity,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedEntity, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useDeleteEntity(\n  options?: UseMutationOptions<void, SynapseClientError, string>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, string>(\n    (entityId: string) => SynapseClient.deleteEntity(accessToken, entityId),\n    {\n      ...options,\n      onSuccess: async (voidReturn, entityId, ctx) => {\n        await invalidateAllQueriesForEntity(queryClient, keyFactory, entityId)\n        if (options?.onSuccess) {\n          await options.onSuccess(voidReturn, entityId, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetVersions(\n  entityId: string,\n  offset: number = 0,\n  limit: number = 200,\n  options?: UseQueryOptions<PaginatedResults<VersionInfo>, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<PaginatedResults<VersionInfo>, SynapseClientError>(\n    keyFactory.getPaginatedEntityVersionsQueryKey(entityId, limit, offset),\n    () => SynapseClient.getEntityVersions(entityId, accessToken, offset, limit),\n    options,\n  )\n}\n\nexport function useGetVersionsInfinite(\n  entityId: string,\n  options: UseInfiniteQueryOptions<\n    PaginatedResults<VersionInfo>,\n    SynapseClientError\n  >,\n) {\n  const LIMIT = 200\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<PaginatedResults<VersionInfo>, SynapseClientError>(\n    keyFactory.getEntityVersionsQueryKey(entityId),\n    async (context: QueryFunctionContext<QueryKey, number>) => {\n      return await SynapseClient.getEntityVersions(\n        entityId,\n        accessToken,\n        context.pageParam,\n        LIMIT,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        if (lastPage.results.length > 0) return pages.length * LIMIT\n        //set the new offset to (page * limit)\n        else return undefined\n      },\n    },\n  )\n}\n\nexport function getStandardEntityFields(json: EntityJson): EntityJson {\n  return pick(json, entityJsonKeys[json.concreteType]) as EntityJson\n}\n\nexport function removeStandardEntityFields(\n  json: EntityJson,\n): Record<\n  string,\n  string | number | boolean | string[] | number[] | boolean[] | undefined\n> {\n  return omit(json, entityJsonKeys[json.concreteType])\n}\n\n/**\n * In addition to the standard objects returned by {@link useQuery}, this hook also returns the following objects:\n * - `entityMetadata`: the standard entity fields contained in the JSON response\n * - `annotations`: the annotations contained in the JSON response\n *\n * The union of these objects would be equal in value to the `data` object.\n */\nexport function useGetJson(\n  entityId: string,\n  options?: UseQueryOptions<EntityJson, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const query = useQuery<EntityJson, SynapseClientError>(\n    keyFactory.getEntityJsonQueryKey(entityId),\n    () => SynapseClient.getEntityJson(entityId, accessToken),\n    options,\n  )\n\n  // Separate the standard fields and annotations.\n  const entityMetadata = useMemo(\n    () =>\n      query?.data == undefined\n        ? undefined\n        : getStandardEntityFields(query.data),\n    [query.data],\n  )\n\n  const annotations = useMemo(\n    () =>\n      query?.data == undefined\n        ? undefined\n        : removeStandardEntityFields(query.data),\n    [query.data],\n  )\n\n  return {\n    ...query,\n    entityMetadata,\n    annotations,\n  }\n}\n\nexport function useUpdateViaJson(\n  options?: UseMutationOptions<EntityJson, SynapseClientError, EntityJson>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useMutation<EntityJson, SynapseClientError, EntityJson>(\n    (json: EntityJson) => {\n      const entityId = json.id\n      return SynapseClient.updateEntityJson(entityId, json, accessToken)\n    },\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        const entityId = data.id\n\n        await invalidateAllQueriesForEntity(queryClient, keyFactory, entityId)\n        queryClient.setQueryData(\n          keyFactory.getEntityJsonQueryKey(entityId),\n          data,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetEntityPath(\n  entityId: string,\n  options?: UseQueryOptions<EntityPath, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<EntityPath, SynapseClientError>(\n    keyFactory.getEntityPathQueryKey(entityId),\n    () => SynapseClient.getEntityPath(entityId, accessToken),\n    options,\n  )\n}\n\nexport function useGetEntityACL(\n  entityId: string,\n  options?: UseQueryOptions<AccessControlList, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<AccessControlList, SynapseClientError>(\n    keyFactory.getEntityPathQueryKey(entityId),\n    () => SynapseClient.getEntityACL(entityId, accessToken),\n    options,\n  )\n}\n\nexport function useGetEntityAlias(\n  alias: string,\n  options?: UseQueryOptions<EntityId | null, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<EntityId | null, SynapseClientError>(\n    keyFactory.getEntityAliasQueryKey(alias),\n    () => SynapseClient.getEntityAlias(alias, accessToken),\n    options,\n  )\n}\n\nexport function useGetEntityEvaluations(\n  entityId: string,\n  params?: GetEvaluationParameters,\n  options?: UseQueryOptions<Evaluation[] | null, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<Evaluation[] | null, SynapseClientError>(\n    keyFactory.getEntityEvaluationsQueryKey(entityId),\n    () => SynapseClient.getAllEntityEvaluations(entityId, params, accessToken),\n    options,\n  )\n}\n\nexport function useGetEntityPermissions(\n  entityId: string,\n  options?: UseQueryOptions<UserEntityPermissions | null, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<UserEntityPermissions | null, SynapseClientError>(\n    keyFactory.getEntityAliasQueryKey(entityId),\n    () => SynapseClient.getEntityPermissions(entityId, accessToken),\n    options,\n  )\n}\n\nexport function useUpdateEntityACL(\n  options?: UseMutationOptions<\n    AccessControlList,\n    SynapseClientError,\n    AccessControlList\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<AccessControlList, SynapseClientError, AccessControlList>(\n    (acl: AccessControlList) => SynapseClient.updateEntityACL(acl, accessToken),\n    {\n      ...options,\n      onSuccess: async (updatedACL: AccessControlList, variables, ctx) => {\n        await invalidateAllQueriesForEntity(\n          queryClient,\n          keyFactory,\n          updatedACL.id,\n        )\n        queryClient.setQueryData(\n          keyFactory.getEntityACLQueryKey(updatedACL.id),\n          updatedACL,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedACL, variables, ctx)\n        }\n      },\n    },\n  )\n}\n"],"names":["QueriesObserver","_Subscribable","_inheritsLoose","client","queries","_this","_proto","_this2","observer","result","notifyOptions","match","_this3","prevObservers","defaultedQueryOptions","options","matchingObservers","defaultedOptions","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","newOrReusedObservers","index","previouslyUsedObserver","sortMatchesByOrderOfQueries","a","b","currentObserver","QueryObserver","_this4","notifyManager","newObserverMatches","newObservers","newObserversMap","newResult","hasIndexChange","difference","replaceAt","_this5","listener","Subscribable","useQueries","mountedRef","React","_React$useState","forceUpdate","queryClient","useQueryClient","defaultedQueries","useMemo","_React$useState2","unsubscribe","x","invalidateAllQueriesForEntity","keyFactory","id","useGetEntity","entityId","versionNumber","accessToken","useSynapseContext","useQuery","SynapseClient","useGetEntities","entityHeaders","headerIds","header","results","isLoading","entities","query","useUpdateEntity","useMutation","entity","updatedEntity","variables","ctx","useDeleteEntity","voidReturn","useGetVersionsInfinite","useInfiniteQuery","context","lastPage","pages","getStandardEntityFields","json","pick","entityJsonKeys","removeStandardEntityFields","omit","useGetJson","entityMetadata","annotations","useUpdateViaJson","data","useGetEntityPath","useGetEntityACL","useGetEntityAlias","alias","useGetEntityEvaluations","params","useGetEntityPermissions","useUpdateEntityACL","acl","updatedACL"],"mappings":"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","x_google_ignoreList":[0,1]}