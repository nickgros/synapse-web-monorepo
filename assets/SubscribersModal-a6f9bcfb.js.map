{"version":3,"file":"SubscribersModal-a6f9bcfb.js","sources":["../../src/lib/utils/synapseTypes/Subscription.ts","../../src/lib/utils/hooks/SynapseAPI/subscription/useSubscription.ts","../../src/lib/containers/discussion_forum/SubscribersModal.tsx"],"sourcesContent":["import { SortDirection } from './AccessApproval'\n\nexport interface Topic {\n  objectId: string\n  objectType: SubscriptionObjectType\n}\n\nexport enum SubscriptionObjectType {\n  FORUM = 'FORUM',\n  THREAD = 'THREAD',\n  DATA_ACCESS_SUBMISSION = 'DATA_ACCESS_SUBMISSION',\n  DATA_ACCESS_SUBMISSION_STATUS = 'DATA_ACCESS_SUBMISSION_STATUS',\n}\n\nexport interface Subscription {\n  subscriptionId: string\n  subscriberId: string\n  objectId: string\n  objectType: SubscriptionObjectType\n  createdOn: string\n}\n\nexport interface SubscriptionRequest {\n  objectType: SubscriptionObjectType\n  idList: string[]\n  sortByType: SortByType\n  sortDirection: SortDirection\n}\n\nexport enum SortByType {\n  SUBSCRIPTION_ID = 'SUBSCRIPTION_ID',\n  SUBSCRIBER_ID = 'SUBSCRIBER_ID',\n  OBJECT_ID = 'OBJECT_ID',\n  OBJECT_TYPE = 'OBJECT_TYPE',\n  CREATED_ON = 'CREATED_ON',\n}\n\nexport interface SubscriptionPagedResults {\n  results: Subscription[]\n  totalNumberOfResults: number\n}\n\nexport interface SubscriberPagedResults {\n  subscribers: string[]\n  nextPageToken?: string\n}\n","import {\n  SubscriptionObjectType,\n  Subscription,\n  SortByType,\n  SubscriptionRequest,\n  Topic,\n  SubscriberPagedResults,\n} from '../../../synapseTypes/Subscription'\nimport {\n  useMutation,\n  useQuery,\n  UseMutationOptions,\n  UseQueryOptions,\n  useQueryClient,\n} from 'react-query'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { Direction } from '../../../synapseTypes'\nimport { SynapseClient } from '../../..'\nimport { useCallback } from 'react'\n\nexport function useGetSubscribers(\n  topic: Topic,\n  options?: UseQueryOptions<SubscriberPagedResults, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<SubscriberPagedResults, SynapseClientError>(\n    keyFactory.getSubscribersQueryKey(topic.objectId, topic.objectType),\n    () => SynapseClient.getSubscribers(accessToken, topic),\n    options,\n  )\n}\n\nexport function useGetSubscription(\n  objectId: string,\n  objectType: SubscriptionObjectType,\n  options?: UseQueryOptions<Subscription, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const queryFn = async () => {\n    const subscriptionRequest: SubscriptionRequest = {\n      objectType: objectType,\n      idList: [objectId],\n      sortByType: SortByType.OBJECT_ID,\n      sortDirection: Direction.ASC,\n    }\n    const subscriptionList = await SynapseClient.postSubscriptionList(\n      accessToken,\n      subscriptionRequest,\n    )\n    return subscriptionList.results[0]\n  }\n  return useQuery<Subscription, SynapseClientError>(\n    keyFactory.getSubscriptionQueryKey(objectId, objectType),\n    queryFn,\n    options,\n  )\n}\n\nexport function usePostSubscription(\n  options?: UseMutationOptions<Subscription, SynapseClientError, Topic>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<Subscription, SynapseClientError, Topic>(\n    (topic: Topic) => SynapseClient.postSubscription(accessToken, topic),\n    {\n      ...options,\n      onSuccess: async (updatedSubscription, variables, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllSubscriptionsQueryKey(),\n        )\n\n        await queryClient.invalidateQueries(\n          keyFactory.getSubscribersQueryKey(\n            variables.objectId,\n            variables.objectType,\n          ),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedSubscription, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useDeleteSubscription(\n  options?: UseMutationOptions<void, SynapseClientError, string>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, string>(\n    (subscriptionId: string) =>\n      SynapseClient.deleteSubscription(accessToken, subscriptionId),\n    {\n      ...options,\n      onSuccess: async (updatedSubscription, variables, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllSubscriptionsQueryKey(),\n        )\n\n        await queryClient.invalidateQueries(\n          keyFactory.getAllSubscribersQueryKey(),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedSubscription, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport const useSubscription = (\n  objectId: string,\n  objectType: SubscriptionObjectType,\n) => {\n  const { data: subscription, isLoading: isLoadingGet } = useGetSubscription(\n    objectId,\n    objectType,\n  )\n  const { data: subscribers } = useGetSubscribers({ objectId, objectType })\n  const { mutate: postSubscription, isLoading: isLoadingPost } =\n    usePostSubscription()\n  const { mutate: deleteSubscription, isLoading: isLoadingDelete } =\n    useDeleteSubscription()\n\n  const isLoading: boolean = isLoadingGet || isLoadingPost || isLoadingDelete\n  const toggleSubscribed = useCallback(() => {\n    if (subscription) {\n      deleteSubscription(subscription.subscriptionId)\n    } else {\n      postSubscription({ objectId, objectType })\n    }\n  }, [deleteSubscription, objectId, objectType, postSubscription, subscription])\n\n  return { isLoading, subscription, toggleSubscribed, subscribers }\n}\n","import React from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { useSubscription } from '../../utils/hooks/SynapseAPI/subscription/useSubscription'\nimport { SubscriptionObjectType } from '../../utils/synapseTypes/Subscription'\nimport { Button } from '@mui/material'\nimport UserCard from '../UserCard'\nimport { SMALL_USER_CARD } from '../../utils/SynapseConstants'\n\nexport type SubscribersModalProps = {\n  id: string\n  objectType: SubscriptionObjectType\n  showModal: boolean\n  handleModal: (a: boolean) => void\n}\n\nexport const SubscribersModal: React.FC<SubscribersModalProps> = ({\n  id,\n  objectType,\n  showModal,\n  handleModal,\n}) => {\n  const { subscribers } = useSubscription(id, objectType)\n\n  return (\n    <div className=\"SubscribersModal\">\n      {subscribers && subscribers.subscribers.length > 0 && (\n        <a\n          onClick={() => handleModal(true)}\n        >{`Followers (${subscribers.subscribers.length})`}</a>\n      )}\n      <Modal\n        className=\"bootstrap-4-backport\"\n        show={showModal}\n        onHide={() => handleModal(false)}\n        animation={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Followers</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {subscribers &&\n            subscribers.subscribers.map(user => (\n              <UserCard\n                key={user}\n                ownerId={user}\n                size={SMALL_USER_CARD}\n                showCardOnHover={true}\n              />\n            ))}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"contained\" onClick={() => handleModal(false)}>\n            Ok\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  )\n}\n"],"names":["SubscriptionObjectType","SortByType","useGetSubscribers","topic","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient.getSubscribers","useGetSubscription","objectId","objectType","queryFn","subscriptionRequest","Direction","SynapseClient.postSubscriptionList","usePostSubscription","queryClient","useQueryClient","useMutation","SynapseClient.postSubscription","updatedSubscription","variables","ctx","useDeleteSubscription","subscriptionId","SynapseClient.deleteSubscription","useSubscription","subscription","isLoadingGet","subscribers","postSubscription","isLoadingPost","deleteSubscription","isLoadingDelete","isLoading","toggleSubscribed","useCallback","SubscribersModal","id","showModal","handleModal","jsxs","jsx","Modal","user","UserCard","SMALL_USER_CARD","Button"],"mappings":"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"}