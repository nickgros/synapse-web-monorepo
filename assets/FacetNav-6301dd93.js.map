{"version":3,"file":"FacetNav-6301dd93.js","sources":["../../src/lib/utils/synapseTypes/Table/FacetColumnRequest.ts","../../src/lib/assets/skeletons/SkeletonInlineBlock.tsx","../../src/lib/containers/QueryContext.tsx","../../src/lib/utils/functions/deepLinkingUtils.ts","../../src/lib/containers/useImmutableTableQuery.ts","../../src/lib/containers/QueryWrapper.tsx","../../src/lib/containers/table/NoContentAvailable.tsx","../../src/lib/containers/table/NoContentPlaceholderType.ts","../../src/lib/containers/table/SearchResultsNotFound.tsx","../../src/lib/containers/table/TableIsEmpty.tsx","../../src/lib/utils/functions/getDataFromFromStorage.ts","../../src/lib/containers/QueryVisualizationWrapper.tsx","../../src/lib/containers/QueryWrapperErrorBanner.tsx","../../src/lib/containers/widgets/Checkbox.tsx","../../src/lib/assets/icons/IconPlus.tsx","../../src/lib/assets/icons/IconMinus.tsx","../../src/lib/containers/widgets/query-filter/FacetFilterHeader.tsx","../../src/lib/containers/widgets/query-filter/EnumFacetFilter.tsx","../../src/lib/containers/widgets/query-filter/FacetChip.tsx","../../src/lib/containers/widgets/Range.tsx","../../src/lib/containers/widgets/query-filter/RangeFacetFilter.tsx","../../src/lib/containers/widgets/query-filter/FacetFilterControls.tsx","../../src/lib/containers/widgets/facet-nav/FacetNavPanel.tsx","../../src/lib/containers/widgets/facet-nav/SelectionCriteriaPills.tsx","../../src/lib/containers/TotalQueryResults.tsx","../../src/lib/containers/widgets/facet-nav/FacetNav.tsx"],"sourcesContent":["import { isTypeViaConcreteTypeFactory } from '../../functions/TypeUtils'\n\nconst FACET_COLUMN_VALUES_REQUEST_CONCRETE_TYPE_VALUE =\n  'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest'\ntype FACET_COLUMN_VALUES_REQUEST_CONCRETE_TYPE =\n  typeof FACET_COLUMN_VALUES_REQUEST_CONCRETE_TYPE_VALUE\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/table/FacetColumnValuesRequest.html\nexport type FacetColumnValuesRequest = {\n  concreteType: FACET_COLUMN_VALUES_REQUEST_CONCRETE_TYPE\n  columnName: string // The name of the faceted column\n  facetValues: string[] // The set of facet values that were selected\n}\n\nconst FACET_COLUMN_RANGE_REQUEST_CONCRETE_TYPE_VALUE =\n  'org.sagebionetworks.repo.model.table.FacetColumnRangeRequest'\ntype FACET_COLUMN_RANGE_REQUEST_CONCRETE_TYPE =\n  typeof FACET_COLUMN_RANGE_REQUEST_CONCRETE_TYPE_VALUE\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/table/FacetColumnRangeRequest.html\nexport type FacetColumnRangeRequest = {\n  concreteType: FACET_COLUMN_RANGE_REQUEST_CONCRETE_TYPE\n  columnName: string // The name of the faceted column\n  min?: string\n  max?: string\n}\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/table/FacetColumnRequest.html\nexport type FacetColumnRequest =\n  | FacetColumnValuesRequest\n  | FacetColumnRangeRequest\n\nexport const isFacetColumnValuesRequest =\n  isTypeViaConcreteTypeFactory<FacetColumnValuesRequest>(\n    FACET_COLUMN_VALUES_REQUEST_CONCRETE_TYPE_VALUE,\n  )\n\nexport const isFacetColumnRangeRequest =\n  isTypeViaConcreteTypeFactory<FacetColumnRangeRequest>(\n    FACET_COLUMN_RANGE_REQUEST_CONCRETE_TYPE_VALUE,\n  )\n","import React from 'react'\nimport Skeleton, { SkeletonProps } from '@mui/material/Skeleton'\n\n/**\n * Skeleton with a display value of `inline-block`. MUI applies `display: block` with high specificity, so it's easiest to just apply the style to the component.\n */\nexport const SkeletonInlineBlock: React.FC<SkeletonProps> = props => {\n  return (\n    <Skeleton\n      style={{ ...props.style, display: 'inline-block' }}\n      {...props}\n    ></Skeleton>\n  )\n}\n","import * as React from 'react'\nimport { createContext, useContext } from 'react'\nimport { SynapseClientError } from '../utils/SynapseClientError'\nimport {\n  AsynchronousJobStatus,\n  ColumnModel,\n  QueryBundleRequest,\n  QueryResultBundle,\n  Table,\n} from '../utils/synapseTypes'\nimport { ImmutableTableQueryResult } from './useImmutableTableQuery'\n\nexport const QUERY_FILTERS_EXPANDED_CSS: string = 'isShowingFacetFilters'\nexport const QUERY_FILTERS_COLLAPSED_CSS: string = 'isHidingFacetFilters'\n\n/*\n  For details page: to lock a column (e.g. study, grant) so that the facet values and active filters\n  will not appear on the details page. The facet name is given by the URL search param.\n  The type is defined here so that other child components in SRC won't generate type errors.\n */\nexport type LockedColumn = {\n  columnName?: string\n  value?: string\n}\n\nexport type QueryContextType = {\n  /** The entity being queried. Will be undefined while initially fetching */\n  entity: Table | undefined\n  /** The query results, which will be undefined while initially fetching a new bundle, but will not be unloaded when fetching new pages */\n  data: QueryResultBundle | undefined\n  /** Returns a deep clone of the current query bundle request */\n  getLastQueryRequest: () => QueryBundleRequest\n  /** Returns a deep clone of the initial query bundle request */\n  getInitQueryRequest: () => QueryBundleRequest\n  /** Updates the current query with the passed request */\n  executeQueryRequest: (param: QueryBundleRequest) => void\n  /** Resets the query to its initial state, clearing all filters added by the user */\n  resetQuery: ImmutableTableQueryResult['resetQuery']\n  removeSelectedFacet: ImmutableTableQueryResult['removeSelectedFacet']\n  removeValueFromSelectedFacet: ImmutableTableQueryResult['removeValueFromSelectedFacet']\n  /** Removes a matching QueryFilter from the query */\n  removeQueryFilter: ImmutableTableQueryResult['removeQueryFilter']\n  /** Removes a value from a QueryFilter. If no more values remain in the filter, the filter is also removed */\n  removeValueFromQueryFilter: ImmutableTableQueryResult['removeValueFromQueryFilter']\n  /** Returns true when loading a brand-new query result bundle. Will not be true when just loading the next page of query results. */\n  isLoadingNewBundle: boolean\n  /** The error returned by the query request, if one is encountered */\n  error: SynapseClientError | null\n  /** The status of the asynchronous job. */\n  asyncJobStatus?: AsynchronousJobStatus<QueryBundleRequest, QueryResultBundle>\n  /** Whether facets are available to be filtered upon based on the current data */\n  isFacetsAvailable: boolean\n  /**\n   * A column name may be \"locked\" so that it is both (1) not shown to the user that the filter is active, and (2) not modifiable by the user.\n   * For example, we may show only the data matching a particular facet value on a Details Page without implying that the shown data is part of a larger table.\n   * The presence of a locked filter will result in a client-side modification of the active query and result bundle data.\n   */\n  lockedColumn?: LockedColumn\n  /** Returns true iff the current request has resettable filters applied via facet filters or additionalFilters. Excludes filters applied to a locked column */\n  hasResettableFilters: boolean\n  getColumnModel: (columnName: string) => ColumnModel | null\n}\n\nexport type PaginatedQueryContextType = QueryContextType & {\n  /** Navigates to a particular page, where the first page has value 1 */\n  goToPage: (pageNum: number) => void\n  /** The current page number, where page 1 is the first page. */\n  currentPage: number\n  /** Updates the page size */\n  setPageSize: (pageSize: number) => void\n  /** The current page size. */\n  pageSize: number\n}\n\nexport type InfiniteQueryContextType = QueryContextType & {\n  /** Returns true when loading a new page of query results */\n  isLoadingNewPage: boolean\n  /** Whether the query result bundle has a next page */\n  hasNextPage: boolean\n  /** Invoke this method to fetch and append the next page of rows to the data  */\n  appendNextPageToResults: () => Promise<void>\n  /** Invoke to fetch and update the data with the next page of query results */\n  goToNextPage: () => Promise<void>\n  /** Whether the query result bundle has a previous page */\n  hasPreviousPage: boolean\n  /** Invoke to fetch and update the data with the previous page of query results */\n  goToPreviousPage: () => Promise<void>\n}\n/**\n * This must be exported to use the context in class components.\n */\nexport const QueryContext = createContext<QueryContextType | undefined>(\n  undefined,\n)\n\nexport type QueryContextProviderProps = React.PropsWithChildren<{\n  queryContext: QueryContextType\n}>\n\n/**\n * Provides data related to a Synapse table query, and functions for iterating through pages of the data.\n */\nexport const QueryContextProvider = ({\n  children,\n  queryContext,\n}: QueryContextProviderProps) => {\n  return (\n    <QueryContext.Provider value={queryContext}>\n      {children}\n    </QueryContext.Provider>\n  )\n}\n\nexport function useQueryContext(): QueryContextType {\n  const context = useContext(QueryContext)\n  if (context === undefined) {\n    throw new Error('useQueryContext must be used within a QueryWrapper')\n  }\n  return context\n}\n\nexport function usePaginatedQueryContext(): PaginatedQueryContextType {\n  const context = useContext(QueryContext)\n  if (context === undefined) {\n    throw new Error(\n      'usePaginatedQueryContext must be used within a QueryWrapper',\n    )\n  }\n  // TODO: Identify more type-safe alternative to casting\n  return context as PaginatedQueryContextType\n}\n\nexport function useInfiniteQueryContext(): InfiniteQueryContextType {\n  const context = useContext(QueryContext)\n  if (context === undefined) {\n    throw new Error(\n      'useInfiniteQueryContext must be used within a QueryWrapper',\n    )\n  }\n  // TODO: Identify more type-safe alternative to casting\n  return context as InfiniteQueryContextType\n}\n\nexport const QueryContextConsumer = QueryContext.Consumer\n","import { QueryBundleRequest } from '../synapseTypes/Table/QueryBundleRequest'\nimport { Query } from '../synapseTypes'\nimport { SynapseConstants } from '..'\nimport { parseEntityIdFromSqlStatement } from './sqlFunctions'\n\n//id consists of a component class/function name and it's index\nfunction getComponentSearchHashId(\n  componentName: string,\n  componentIndex: number,\n): string {\n  return `${componentName}${componentIndex}`\n}\n\n//returns updated search string with the component's info\nfunction patchSearchString(\n  componentSearchHashId: string,\n  stringifiedQuery: string,\n): string | undefined {\n  const searchString = window.location.search\n\n  const searchFragment = `${componentSearchHashId}=${stringifiedQuery}`\n  if (!searchString) {\n    return searchFragment\n  }\n\n  if (!searchString.includes(`${componentSearchHashId}=`)) {\n    //substr(1) because we don't want '?' character\n    return `${searchString.substr(1)}&${searchFragment}`\n  }\n  const searchHashes = window.location.search\n    .slice(searchString.indexOf('?') + 1)\n    .split('&')\n\n  const searchHashesUpdated = searchHashes\n    .map(item => {\n      const split = item.split('=')\n      if (split[0] === componentSearchHashId) {\n        return `${searchFragment}`\n      } else return item\n    })\n    .join('&')\n  return searchHashesUpdated\n}\n\n//gets a value for the search param for the component from the url\nexport function getSearchParamValueFromUrl(\n  componentName: string,\n  componentIndex: number,\n): string | undefined {\n  if (!window.location.search) {\n    return undefined\n  }\n  const componentSearchHashId = getComponentSearchHashId(\n    componentName,\n    componentIndex,\n  )\n  const hashes = window.location.search\n    .slice(window.location.search.indexOf('?') + 1)\n    .split('&')\n  const getSearchParamValue = hashes\n    .filter(item => {\n      const hash = item.split('=')\n      return hash[0] === componentSearchHashId\n    })\n    .map(item => item.split('=')[1])[0]\n  return getSearchParamValue\n    ? decodeURIComponent(getSearchParamValue)\n    : undefined\n}\n\n//updates the url with the components new search params\nexport function updateUrlWithNewSearchParam(\n  componentName: string,\n  componentIndex: number | undefined,\n  stringifiedQuery: string,\n) {\n  const componentSearchHashId =\n    componentIndex !== undefined\n      ? getComponentSearchHashId(componentName, componentIndex)\n      : componentName\n  const searchString = patchSearchString(\n    componentSearchHashId,\n    stringifiedQuery,\n  )\n  const location = window.location\n  const newURL = `${location.protocol}//${location.hostname}${\n    location.port ? ':' + location.port : ''\n  }${location.pathname}?${searchString}`\n\n  window.history.replaceState('object or string', 'Title', newURL)\n}\n\nexport function getQueryRequestFromLink(\n  componentName: string,\n  componentIndex: number,\n): QueryBundleRequest | undefined {\n  const searchParamValue = getSearchParamValueFromUrl(\n    componentName,\n    componentIndex,\n  )\n\n  let initQueryRequest: QueryBundleRequest | undefined = undefined\n  if (searchParamValue) {\n    const query = JSON.parse(searchParamValue) as Query\n    if (query.sql) {\n      initQueryRequest = {\n        concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n        partMask:\n          SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n          SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n          SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n          SynapseConstants.BUNDLE_MASK_QUERY_RESULTS |\n          SynapseConstants.BUNDLE_MASK_QUERY_COUNT,\n        entityId: parseEntityIdFromSqlStatement(query.sql),\n        query,\n      }\n    }\n  }\n  return initQueryRequest\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport {\n  FacetColumnRequest,\n  isFacetColumnValuesRequest,\n  QueryBundleRequest,\n} from '../utils/synapseTypes'\nimport { cloneDeep, isEqual } from 'lodash-es'\nimport * as DeepLinkingUtils from '../utils/functions/deepLinkingUtils'\nimport { DEFAULT_PAGE_SIZE } from '../utils/SynapseConstants'\nimport { parseEntityIdAndVersionFromSqlStatement } from '../utils/functions/sqlFunctions'\nimport {\n  isColumnMultiValueFunctionQueryFilter,\n  isColumnSingleValueQueryFilter,\n  QueryFilter,\n} from '../utils/synapseTypes/Table/QueryFilter'\nimport useDeepCompareEffect from 'use-deep-compare-effect'\n\nexport type ImmutableTableQueryResult = {\n  /** The ID of the table parsed from the SQL query */\n  entityId: string\n  /** The version number of the table parsed from the SQL query */\n  versionNumber?: number\n  getInitQueryRequest: () => QueryBundleRequest\n  getLastQueryRequest: () => QueryBundleRequest\n  setQuery: (\n    queryRequest:\n      | QueryBundleRequest\n      | ((lastQueryRequest: QueryBundleRequest) => QueryBundleRequest),\n  ) => void\n  pageSize: number\n  /** The current page of results. The first page is `1` */\n  currentPage: number\n  setPageSize: (pageSize: number) => void\n  /** pageNumber is 1-indexed */\n  goToPage: (pageNumber: number) => void\n  /** Resets the query to the initial state, clearing all user-specified filters */\n  resetQuery: () => void\n  /** Removes a particular selected facet from the query */\n  removeSelectedFacet: (facet: FacetColumnRequest) => void\n  /** Removes a particular value from a selected facet. If the value is the last value in the FacetColumnRequest, the selected facet will be removed. */\n  removeValueFromSelectedFacet: (\n    facet: FacetColumnRequest,\n    value: string,\n  ) => void\n  /** Removes a particular QueryFilter from the query */\n  removeQueryFilter: (filter: QueryFilter) => void\n  /** Removes a particular value from a QueryFilter. If the value is the last value in the filter, the filter will be removed. */\n  removeValueFromQueryFilter: (filter: QueryFilter, value: string) => void\n\n  /**\n   * TODO: This hook could handle all potential query transformations, such as\n   *    - addFacetFilter, removeFacetFilter, clearFacetFilters\n   *    - addAdditionalFilter, remove..., clear...\n   *\n   * This could be preferable to allowing any QueryContext subscriber to arbitrarily update the query with `setQuery`\n   *  because we could uniformly handle all complex stateful logic in this hook\n   */\n}\n\nexport type UseImmutableTableQueryOptions = {\n  /** The initial table query request object */\n  initQueryRequest: QueryBundleRequest\n  /** Whether the URL should update when the query is modified. */\n  shouldDeepLink?: boolean\n  /** Unique index for the component on the page so URL updates do not conflict between table query components */\n  componentIndex?: number\n  /** Callback invoked when the query is modified */\n  onQueryChange?: (newQueryJson: string) => void\n}\n\n/**\n * Custom hook that maintains and manages the state of a Synapse Table query.\n * @param options\n * @returns\n */\nexport default function useImmutableTableQuery(\n  options: UseImmutableTableQueryOptions,\n): ImmutableTableQueryResult {\n  const {\n    initQueryRequest,\n    componentIndex = 0,\n    shouldDeepLink = false,\n    onQueryChange,\n  } = options\n\n  const [lastQueryRequest, setLastQueryRequest] =\n    useState<QueryBundleRequest>(initQueryRequest)\n\n  /**\n   * Inspect the URL on mount to see if we have a particular query request that we must show.\n   */\n  useEffect(() => {\n    const query = DeepLinkingUtils.getQueryRequestFromLink(\n      'QueryWrapper',\n      componentIndex,\n    )\n    if (query) {\n      setLastQueryRequest(query)\n    }\n  }, [componentIndex])\n\n  /**\n   * Pass down a deep clone (so no side effects on the child's part) of the\n   * last query request made\n   *\n   * @returns\n   * @memberof QueryWrapper\n   */\n  const getLastQueryRequest = useCallback(() => {\n    return cloneDeep(lastQueryRequest)\n  }, [lastQueryRequest])\n\n  /**\n   * Pass down a deep clone (so no side effects on the child's part) of the\n   * first query request made\n   *\n   * @returns\n   * @memberof QueryWrapper\n   */\n  const getInitQueryRequest = useCallback((): QueryBundleRequest => {\n    return cloneDeep(initQueryRequest)\n  }, [initQueryRequest])\n\n  /**\n   * Execute the given query request, updating all the data in the QueryContext to match the new query\n   * @param {*} queryRequest Query request as specified by\n   *                         https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   */\n  const setQuery = useCallback(\n    (\n      queryRequest:\n        | QueryBundleRequest\n        | ((lastQueryRequest: QueryBundleRequest) => QueryBundleRequest),\n    ): void => {\n      let newQueryRequest: QueryBundleRequest\n      if (typeof queryRequest === 'function') {\n        newQueryRequest = queryRequest(getLastQueryRequest())\n      } else {\n        newQueryRequest = queryRequest\n      }\n\n      // Clone the query request before storing it in state, in case the original is mutated\n      const clonedQueryRequest = cloneDeep(newQueryRequest)\n      setLastQueryRequest(clonedQueryRequest)\n\n      if (clonedQueryRequest.query) {\n        const clonedQueryJson = JSON.stringify(clonedQueryRequest.query)\n        if (shouldDeepLink) {\n          const encodedQuery = encodeURIComponent(clonedQueryJson)\n          DeepLinkingUtils.updateUrlWithNewSearchParam(\n            'QueryWrapper',\n            componentIndex,\n            encodedQuery,\n          )\n        }\n        if (onQueryChange) {\n          onQueryChange(clonedQueryJson)\n        }\n      }\n    },\n    [componentIndex, getLastQueryRequest, onQueryChange, shouldDeepLink],\n  )\n\n  const { entityId, versionNumber } = useMemo(\n    () => parseEntityIdAndVersionFromSqlStatement(lastQueryRequest.query.sql)!,\n    [lastQueryRequest.query.sql],\n  )\n\n  const pageSize = lastQueryRequest.query.limit ?? DEFAULT_PAGE_SIZE\n  const currentPage = Math.ceil(\n    ((lastQueryRequest.query.offset ?? 0) + Number(pageSize)) / pageSize,\n  )\n\n  const setPageSize = useCallback(\n    (pageSize: number) => {\n      setQuery(currentQuery => {\n        currentQuery.query.limit = pageSize\n        return currentQuery\n      })\n    },\n    [setQuery],\n  )\n\n  const goToPage = useCallback(\n    (pageNumber: number) => {\n      setQuery(currentQuery => {\n        currentQuery.query.offset = (pageNumber - 1) * pageSize\n        return currentQuery\n      })\n    },\n    [pageSize, setQuery],\n  )\n\n  const resetQuery = useCallback(() => {\n    setQuery(initQueryRequest)\n  }, [initQueryRequest, setQuery])\n\n  /* If the initial query changes, then reset the query to match the new prop */\n  useDeepCompareEffect(() => {\n    if (lastQueryRequest != initQueryRequest) {\n      resetQuery()\n    }\n  }, [initQueryRequest])\n\n  const removeSelectedFacet = useCallback(\n    (facetColumnRequest: FacetColumnRequest) => {\n      setQuery(currentQuery => {\n        currentQuery.query.selectedFacets = (\n          currentQuery.query.selectedFacets ?? []\n        ).filter(facet => {\n          // Use lodash for deep comparison\n          return !isEqual(facet, facetColumnRequest)\n        })\n        return currentQuery\n      })\n    },\n    [setQuery],\n  )\n\n  const removeValueFromSelectedFacet = useCallback(\n    (facet: FacetColumnRequest, value: string) => {\n      setQuery(currentQuery => {\n        currentQuery.query.selectedFacets = (\n          currentQuery.query.selectedFacets ?? []\n        )\n          // Modify the requested filter\n          .map(facetColumnRequest => {\n            if (\n              isFacetColumnValuesRequest(facetColumnRequest) &&\n              isEqual(facetColumnRequest, facet)\n            ) {\n              // Remove the value from the filter\n              facetColumnRequest.facetValues =\n                facetColumnRequest.facetValues.filter(v => v !== value)\n            }\n            return facetColumnRequest\n          })\n          // Remove filters that have no values\n          .filter(facetColumnRequest => {\n            if (isFacetColumnValuesRequest(facetColumnRequest)) {\n              // Remove the value from the filter\n              return (\n                Array.isArray(facetColumnRequest.facetValues) &&\n                facetColumnRequest.facetValues.length > 0\n              )\n            }\n            return true\n          })\n        return currentQuery\n      })\n    },\n    [setQuery],\n  )\n\n  const removeQueryFilter = useCallback(\n    (queryFilter: QueryFilter) => {\n      setQuery(currentQuery => {\n        currentQuery.query.additionalFilters = (\n          currentQuery.query.additionalFilters ?? []\n        ).filter(qf => {\n          // Use lodash for deep comparison\n          return !isEqual(qf, queryFilter)\n        })\n        return currentQuery\n      })\n    },\n    [setQuery],\n  )\n\n  const removeValueFromQueryFilter = useCallback(\n    (queryFilter: QueryFilter, value: string) => {\n      setQuery(currentQuery => {\n        currentQuery.query.additionalFilters = (\n          currentQuery.query.additionalFilters ?? []\n        )\n          // Modify the requested filter\n          .map(qf => {\n            if (\n              (isColumnSingleValueQueryFilter(qf) ||\n                isColumnMultiValueFunctionQueryFilter(qf)) &&\n              isEqual(qf, queryFilter)\n            ) {\n              // Remove the value from the filter\n              qf.values = qf.values.filter(v => v !== value)\n            }\n            return qf\n          })\n          // Remove filters that have no values\n          .filter(qf => {\n            if (\n              isColumnSingleValueQueryFilter(qf) ||\n              isColumnMultiValueFunctionQueryFilter(qf)\n            ) {\n              // Remove the value from the filter\n              return Array.isArray(qf.values) && qf.values.length > 0\n            }\n            return true\n          })\n        return currentQuery\n      })\n    },\n    [setQuery],\n  )\n\n  return {\n    entityId,\n    versionNumber,\n    getInitQueryRequest,\n    getLastQueryRequest,\n    setQuery,\n    pageSize,\n    currentPage,\n    setPageSize,\n    goToPage,\n    resetQuery,\n    removeSelectedFacet,\n    removeValueFromSelectedFacet,\n    removeQueryFilter,\n    removeValueFromQueryFilter,\n  }\n}\n","import React, { useCallback } from 'react'\nimport { useMemo, useState } from 'react'\nimport { useDeepCompareEffectNoCheck } from 'use-deep-compare-effect'\nimport {\n  isFacetAvailable,\n  hasResettableFilters as hasResettableFiltersUtil,\n  removeLockedColumnFromFacetData,\n} from '../utils/functions/queryUtils'\nimport {\n  useGetEntity,\n  useGetQueryResultBundleWithAsyncStatus,\n} from '../utils/hooks/SynapseAPI'\nimport {\n  AsynchronousJobStatus,\n  QueryBundleRequest,\n  QueryResultBundle,\n  Table,\n} from '../utils/synapseTypes'\nimport {\n  LockedColumn,\n  PaginatedQueryContextType,\n  QueryContextProvider,\n} from './QueryContext'\nimport useImmutableTableQuery from './useImmutableTableQuery'\n\nexport const QUERY_FILTERS_EXPANDED_CSS: string = 'isShowingFacetFilters'\nexport const QUERY_FILTERS_COLLAPSED_CSS: string = 'isHidingFacetFilters'\n\nexport type QueryWrapperProps = {\n  children: React.ReactNode | React.ReactNode[]\n  initQueryRequest: QueryBundleRequest\n  componentIndex?: number //used for deep linking\n  shouldDeepLink?: boolean\n  onQueryChange?: (newQueryJson: string) => void\n  onQueryResultBundleChange?: (newQueryResultBundleJson: string) => void\n  lockedColumn?: LockedColumn\n}\n\n/**\n * Component that manages the state of a Synapse table query. Data can be accessed via QueryContext using\n * either `useQueryContext` or `QueryContextConsumer`.\n */\nexport function QueryWrapper(props: QueryWrapperProps) {\n  const {\n    initQueryRequest,\n    onQueryChange,\n    onQueryResultBundleChange,\n    lockedColumn,\n    componentIndex,\n    shouldDeepLink,\n  } = props\n\n  const [currentAsyncStatus, setCurrentAsyncStatus] = useState<\n    AsynchronousJobStatus<QueryBundleRequest, QueryResultBundle> | undefined\n  >(undefined)\n\n  const {\n    entityId,\n    versionNumber,\n    getInitQueryRequest,\n    getLastQueryRequest,\n    setQuery,\n    currentPage,\n    pageSize,\n    goToPage,\n    setPageSize,\n    resetQuery,\n    removeSelectedFacet,\n    removeValueFromSelectedFacet,\n    removeQueryFilter,\n    removeValueFromQueryFilter,\n  } = useImmutableTableQuery({\n    initQueryRequest,\n    shouldDeepLink,\n    componentIndex,\n    onQueryChange,\n  })\n\n  const lastQueryRequest = useMemo(() => {\n    return getLastQueryRequest()\n  }, [getLastQueryRequest])\n\n  const {\n    data: asyncJobStatus,\n    isLoading: queryIsLoading,\n    error,\n    isPreviousData: newQueryIsFetching,\n  } = useGetQueryResultBundleWithAsyncStatus(\n    lastQueryRequest,\n    {\n      // We use `keepPreviousData` because we don't want to clear out the current data when the query is modified via the UI\n      keepPreviousData: true,\n    },\n    setCurrentAsyncStatus,\n  )\n\n  const data = asyncJobStatus?.responseBody\n\n  // Indicate if we're fetching data for the first time (queryIsLoading) or if we're fetching data for a brand-new query (newQueryIsFetching)\n  const isLoadingNewBundle = queryIsLoading || newQueryIsFetching\n\n  const { data: entity } = useGetEntity<Table>(entityId, versionNumber)\n\n  // data is sometimes undefined, which useDeepCompareEffect doesn't like, so use useDeepCompareEffectNoCheck instead\n  useDeepCompareEffectNoCheck(() => {\n    if (data && onQueryResultBundleChange) {\n      onQueryResultBundleChange(JSON.stringify(data))\n    }\n  }, [data, onQueryResultBundleChange])\n\n  const isFacetsAvailable = data\n    ? isFacetAvailable(data.facets, data.selectColumns)\n    : true\n\n  /**\n   * Remove a particular facet name (e.g. study) and all possible values based on the parameter specified in the url\n   * this is to remove the facet from the charts, search and filter.\n   * @return data: QueryResultBundle\n   */\n  const dataWithLockedColumnFacetRemoved = useMemo(() => {\n    return removeLockedColumnFromFacetData(data, lockedColumn)\n  }, [data, lockedColumn])\n\n  const hasResettableFilters = useMemo(() => {\n    const request = getLastQueryRequest()\n    return hasResettableFiltersUtil(request.query, lockedColumn)\n  }, [getLastQueryRequest, lockedColumn])\n\n  const getColumnModel = useCallback(\n    (columnName: string) => {\n      return data?.columnModels?.find(cm => cm.name === columnName) ?? null\n    },\n    [data?.columnModels],\n  )\n\n  const context: PaginatedQueryContextType = {\n    data: dataWithLockedColumnFacetRemoved,\n    currentPage,\n    pageSize,\n    setPageSize,\n    isLoadingNewBundle: isLoadingNewBundle,\n    getLastQueryRequest,\n    getInitQueryRequest,\n    error: error,\n    entity,\n    executeQueryRequest: setQuery,\n    isFacetsAvailable,\n    asyncJobStatus: currentAsyncStatus,\n    goToPage,\n    hasResettableFilters,\n    removeSelectedFacet,\n    removeValueFromSelectedFacet,\n    resetQuery,\n    removeQueryFilter,\n    removeValueFromQueryFilter,\n    lockedColumn,\n    getColumnModel,\n  }\n  /**\n   * Render the children without any formatting\n   */\n  const { children } = props\n  const loadingCursorClass = isLoadingNewBundle ? 'SRC-logo-cursor' : ''\n  return (\n    <QueryContextProvider queryContext={context}>\n      <div\n        className={`SRC-wrapper ${loadingCursorClass} ${\n          isFacetsAvailable ? 'has-facets' : ''\n        }`}\n      >\n        {children}\n      </div>\n    </QueryContextProvider>\n  )\n}\n","import React from 'react'\n\nexport default function NoContentAvailable() {\n  return (\n    <>\n      <p className=\"SRC-no-results-title\">\n        There is currently no content here.\n      </p>\n      <p className=\"SRC-no-results-description\">\n        Information is always being updated, so check back later to see if\n        content has been added.\n      </p>\n    </>\n  )\n}\n","/**\n * When displaying that there are no results, there are two scenarios:\n * 1. Interactive - the user can modify the query and may have chosen a query with no results\n *    - If the user has not modified the query, show a message that the table is empty\n *    - If the user has modified the query, show a message that there are no results and to try a different input\n * 2. Static - the user cannot modify the query. Show a message that there is no content available.\n */\nexport enum NoContentPlaceholderType {\n  INTERACTIVE = 'INTERACTIVE',\n  STATIC = 'STATIC',\n}\n","import React from 'react'\nimport NoSearchResults from '../../assets/icons/NoSearchResults'\n\nexport default function SearchResultsNotFound() {\n  return (\n    <div className=\"text-center\">\n      {NoSearchResults}\n      <h4>No Matching Results</h4>\n      <p>Try checking the spelling or removing filters.</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport NoData from '../../assets/icons/NoData'\n\nexport default function ThisTableIsEmpty() {\n  return (\n    <div className=\"text-center SRCBorderedPanel SRCBorderedPanel--padded2x\">\n      {NoData}\n      <div style={{ marginTop: '20px', fontStyle: 'italic' }}>\n        This table is currently empty\n      </div>\n    </div>\n  )\n}\n","import {\n  ColumnType,\n  ColumnTypeEnum,\n  EntityHeader,\n  Evaluation,\n  UserProfile,\n} from '../synapseTypes'\nimport { SynapseConstants } from '..'\n\nconst getStoredEntityHeaders = (): EntityHeader[] => {\n  try {\n    const lookUpEntityHeaders: EntityHeader[] = JSON.parse(\n      sessionStorage.getItem(SynapseConstants.ENTITY_HEADER_STORAGE_KEY) || '',\n    )\n    return lookUpEntityHeaders\n  } catch (e) {\n    return []\n  }\n}\n\nconst getStoredUserProfiles = (): UserProfile[] => {\n  try {\n    const lookUpUserIds: UserProfile[] = JSON.parse(\n      sessionStorage.getItem(SynapseConstants.USER_PROFILE_STORAGE_KEY) || '',\n    )\n    return lookUpUserIds\n  } catch (e) {\n    return []\n  }\n}\n\nconst getStoredEvaluation = (): Evaluation[] => {\n  try {\n    const lookUpEvaluations: UserProfile[] = JSON.parse(\n      sessionStorage.getItem(SynapseConstants.EVALUATIONS_STORAGE_KEY) || '',\n    )\n    return lookUpEvaluations\n  } catch (e) {\n    return []\n  }\n}\n\nconst getDisplayValueForEntityColumn = (value: string): string => {\n  const entity = getStoredEntityHeaders().find(item => item.id === value)\n  return entity?.name ?? value\n}\n\nconst getDisplayValueEvaluationIdColumn = (facetValue: string): string => {\n  const evaluation = getStoredEvaluation().find(item => item.id === facetValue)\n  return evaluation?.name || facetValue\n}\n\nconst getDisplayValueUserIdColumn = (facetValue: string): string => {\n  const userProfile = getStoredUserProfiles().find(\n    item => item.ownerId === facetValue,\n  )\n  return userProfile?.userName || facetValue\n}\n\nexport const getDisplayValue = (value: string, columnType: ColumnType) => {\n  if (value === SynapseConstants.VALUE_NOT_SET) {\n    return SynapseConstants.FRIENDLY_VALUE_NOT_SET\n  }\n\n  switch (columnType) {\n    case ColumnTypeEnum.ENTITYID:\n    case ColumnTypeEnum.ENTITYID_LIST:\n      return getDisplayValueForEntityColumn(value)\n    case ColumnTypeEnum.USERID:\n    case ColumnTypeEnum.USERID_LIST:\n      return getDisplayValueUserIdColumn(value)\n    case ColumnTypeEnum.EVALUATIONID:\n      return getDisplayValueEvaluationIdColumn(value)\n    default:\n      return value\n  }\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport { useDeepCompareMemoize } from 'use-deep-compare-effect'\nimport { useQueryContext } from './QueryContext'\nimport NoContentAvailable from './table/NoContentAvailable'\nimport { NoContentPlaceholderType } from './table/NoContentPlaceholderType'\nimport SearchResultsNotFound from './table/SearchResultsNotFound'\nimport ThisTableIsEmpty from './table/TableIsEmpty'\nimport { unCamelCase } from '../utils/functions/unCamelCase'\nimport { ColumnType } from '../utils/synapseTypes'\nimport { getDisplayValue } from '../utils/functions/getDataFromFromStorage'\n\nexport type QueryVisualizationContextType = {\n  topLevelControlsState: TopLevelControlsState\n  setTopLevelControlsState: React.Dispatch<\n    React.SetStateAction<TopLevelControlsState>\n  >\n  columnsToShowInTable: string[]\n  setColumnsToShowInTable: (newState: string[]) => void\n  selectedRowIndices: number[]\n  setSelectedRowIndices: (newState: number[]) => void\n  rgbIndex?: number\n  unitDescription?: string\n  /** Whether to show when the table or view was last updated. */\n  showLastUpdatedOn?: boolean\n  /** Given a column name, return the display name for the column */\n  getColumnDisplayName: (columnName?: string) => string | undefined\n  /** Given a cell value and a column type, returns the displayed value for the data */\n  getDisplayValue: (value: string, columnType: ColumnType) => string\n  /** React node to display in place of cards/table when there are no results. */\n  NoContentPlaceholder: () => JSX.Element\n}\n\n/**\n * This must be exported to use the context in class components.\n */\nexport const QueryVisualizationContext = createContext<\n  QueryVisualizationContextType | undefined\n>(undefined)\n\nexport type QueryVisualizationContextProviderProps = React.PropsWithChildren<{\n  queryVisualizationContext: QueryVisualizationContextType\n}>\n\n/**\n * Provides fields and functions related to visualizing a Synapse table query. For actual query data, see QueryContextProvider.\n */\nexport const QueryVisualizationContextProvider = ({\n  children,\n  queryVisualizationContext,\n}: QueryVisualizationContextProviderProps) => {\n  return (\n    <QueryVisualizationContext.Provider value={queryVisualizationContext}>\n      {children}\n    </QueryVisualizationContext.Provider>\n  )\n}\n\nexport function useQueryVisualizationContext(): QueryVisualizationContextType {\n  const context = useContext(QueryVisualizationContext)\n  if (context === undefined) {\n    throw new Error(\n      'useQueryVisualizationContext must be used within a QueryWrapper',\n    )\n  }\n  return context\n}\n\nexport const QueryVisualizationContextConsumer =\n  QueryVisualizationContext.Consumer\n\nexport type QueryVisualizationWrapperProps = {\n  children: React.ReactNode | React.ReactNode[]\n  rgbIndex?: number\n  unitDescription?: string\n  /** Mapping from column name to the name that should be shown for the column */\n  columnAliases?: Record<string, string>\n  visibleColumnCount?: number\n  hiddenColumns?: string[]\n  defaultShowFacetVisualization?: boolean\n  defaultShowSearchBar?: boolean\n  showLastUpdatedOn?: boolean\n  /** Default is INTERACTIVE */\n  noContentPlaceholderType?: NoContentPlaceholderType\n}\n\nexport type TopLevelControlsState = {\n  showFacetVisualization: boolean\n  showFacetFilter?: boolean\n  showColumnFilter: boolean\n  showSearchBar: boolean\n  showDownloadConfirmation: boolean\n  showColumnSelectDropdown: boolean\n  showSqlEditor: boolean\n}\n\n/**\n * QueryVisualizationWrapper manages UI state for components that query tables in Synapse. That state can be accessed\n * or updated using QueryVisualizationContext. A QueryVisualizationWrapper must be used within a QueryWrapper.\n */\nexport function QueryVisualizationWrapper(\n  props: QueryVisualizationWrapperProps,\n) {\n  const { noContentPlaceholderType = NoContentPlaceholderType.INTERACTIVE } =\n    props\n\n  const {\n    data,\n    getLastQueryRequest,\n    isFacetsAvailable,\n    isLoadingNewBundle,\n    hasResettableFilters,\n  } = useQueryContext()\n\n  const { columnAliases = {} } = props\n\n  const [topLevelControlsState, setTopLevelControlsState] =\n    useState<TopLevelControlsState>({\n      showColumnFilter: true,\n      showFacetFilter: true,\n      showFacetVisualization: props.defaultShowFacetVisualization ?? true,\n      showSearchBar: props.defaultShowSearchBar ?? false,\n      showDownloadConfirmation: false,\n      showColumnSelectDropdown: false,\n      showSqlEditor: false,\n    })\n\n  useEffect(() => {\n    if (!isFacetsAvailable) {\n      setTopLevelControlsState(state => ({\n        ...state,\n        showFacetFilter: false,\n        showFacetVisualization: false,\n      }))\n    }\n  }, [isFacetsAvailable])\n\n  useEffect(() => {\n    if (isLoadingNewBundle) {\n      setSelectedRowIndices([])\n    }\n  }, [isLoadingNewBundle])\n\n  const [visibleColumns, setVisibleColumns] = useState<string[]>([])\n  const [selectedRowIndices, setSelectedRowIndices] = useState<number[]>([])\n\n  const lastQueryRequest = getLastQueryRequest()\n\n  // We deep-compare-memoize the selectColumns so we don't reset visible columns when the reference changes, but not the contents (e.g. on page change)\n  const selectColumns = useDeepCompareMemoize(data?.selectColumns)\n\n  useEffect(() => {\n    // SWC-6030: If sql changes, reset what columns are visible\n    setVisibleColumns(\n      selectColumns\n        ?.slice(0, props.visibleColumnCount ?? Infinity)\n        .map(el => el.name) ?? [],\n    )\n  }, [selectColumns, lastQueryRequest.query.sql, props.visibleColumnCount])\n\n  const getColumnDisplayName = useCallback(\n    (columnName?: string) => {\n      // SWC-5982: if force-display-original-column-names is set, then just return the string\n      const forceDisplayOriginalColumnName =\n        localStorage.getItem('force-display-original-column-names') === 'true'\n\n      if (!columnName || forceDisplayOriginalColumnName) {\n        return columnName\n      }\n      if (columnAliases[columnName]) {\n        return columnAliases[columnName]\n      }\n      return unCamelCase(columnName)\n    },\n    [columnAliases],\n  )\n\n  const NoContentPlaceholder = useCallback(() => {\n    switch (noContentPlaceholderType) {\n      case NoContentPlaceholderType.INTERACTIVE:\n        if (hasResettableFilters) {\n          return <SearchResultsNotFound />\n        } else {\n          return <ThisTableIsEmpty />\n        }\n      case NoContentPlaceholderType.STATIC:\n      default:\n        return <NoContentAvailable />\n    }\n  }, [noContentPlaceholderType, hasResettableFilters])\n\n  const context: QueryVisualizationContextType = {\n    topLevelControlsState,\n    setTopLevelControlsState,\n    columnsToShowInTable: visibleColumns,\n    setColumnsToShowInTable: setVisibleColumns,\n    selectedRowIndices,\n    setSelectedRowIndices,\n    rgbIndex: props.rgbIndex,\n    unitDescription: props.unitDescription,\n    showLastUpdatedOn: props.showLastUpdatedOn,\n    getColumnDisplayName,\n    getDisplayValue,\n    NoContentPlaceholder,\n  }\n  /**\n   * Render the children without any formatting\n   */\n  const { children } = props\n  return (\n    <QueryVisualizationContextProvider queryVisualizationContext={context}>\n      {children}\n    </QueryVisualizationContextProvider>\n  )\n}\n","import React from 'react'\nimport { ErrorBanner } from './error/ErrorBanner'\nimport { useQueryContext } from './QueryContext'\n\n/**\n * Error banner that automatically pulls the error from QueryContext.\n */\nexport const QueryWrapperErrorBanner = () => {\n  const { error } = useQueryContext()\n  return <ErrorBanner error={error} />\n}\n","import { uniqueId as _uniqueId } from 'lodash-es'\nimport React, { useEffect, useState } from 'react'\n\nexport type CheckboxProps = {\n  label: string\n  hideLabel?: boolean\n  checked?: boolean\n  className?: string\n  onChange: (newValue: boolean) => void\n  isSelectAll?: boolean\n  children?: React.ReactChild\n  onClick?: (event: React.SyntheticEvent<HTMLDivElement>) => void\n  disabled?: boolean\n  'data-testid'?: string\n}\n\nexport const Checkbox: React.FunctionComponent<CheckboxProps> = (\n  props: CheckboxProps,\n) => {\n  const {\n    checked: propsChecked = false,\n    hideLabel = false,\n    isSelectAll = false,\n    disabled = false,\n  } = props\n  const [checked, setChecked] = useState<boolean>(propsChecked)\n  const [uniqueId] = useState(_uniqueId('src-checkbox-'))\n\n  useEffect(() => {\n    setChecked(propsChecked)\n  }, [propsChecked])\n\n  const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    props.onChange(event.target.checked)\n    if (isSelectAll && event.target.checked === false) {\n      /* \n         You can click the all checkbox from off -> on\n         but clicking it off is a no-op\n      */\n      setChecked(true)\n    } else {\n      setChecked(event.target.checked)\n    }\n  }\n\n  let className = 'checkbox'\n  if (props.className) {\n    className += ` ${props.className}`\n  }\n\n  return (\n    <div className={className} onClick={props.onClick}>\n      <input\n        aria-label={props.label}\n        type=\"checkbox\"\n        checked={checked}\n        id={uniqueId}\n        onChange={handleCheckboxChange}\n        disabled={disabled}\n        data-testid={props['data-testid']}\n      />\n      {<label htmlFor={uniqueId}>{hideLabel ? <></> : props.label}</label>}\n      {props.children ?? <></>}\n    </div>\n  )\n}\n","import React from 'react'\n\ntype IconPlusProps = {\n  title?: string\n}\n\nconst IconPlus = (props: React.SVGProps<SVGSVGElement> & IconPlusProps) => (\n  <svg\n    {...props}\n    className={`Icon-Plus ${props.className ?? ''}`}\n    width=\"15\"\n    height=\"14\"\n    viewBox=\"0 0 15 14\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    {props.title && <title>{props.title}</title>}\n    <path d=\"M14.3887 8H8.38867V14H6.38867V8H0.388672V6H6.38867V0H8.38867V6H14.3887V8Z\" />\n  </svg>\n)\n\nexport default IconPlus\n","import React from 'react'\n\ntype IconMinusProps = {\n  title?: string\n}\n\nconst IconMinus = (props: React.SVGProps<SVGSVGElement> & IconMinusProps) => (\n  <svg\n    {...props}\n    className={`Icon-Minus ${props.className ?? ''}`}\n    width=\"15\"\n    height=\"2\"\n    viewBox=\"0 0 15 2\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    {props.title && <title>{props.title}</title>}\n    <path d=\"M14.3887 2H8.38867H6.38867H0.388672V0H6.38867H8.38867H14.3887V2Z\" />\n  </svg>\n)\n\nexport default IconMinus\n","import * as React from 'react'\nimport IconPlus from '../../../assets/icons/IconPlus'\nimport IconMinus from '../../../assets/icons/IconMinus'\nimport { useQueryVisualizationContext } from '../../QueryVisualizationWrapper'\n\nexport type FacetFilterHeaderProps = {\n  label: string\n  isCollapsed: boolean\n  onClick: (newValue: boolean) => void\n}\n\nexport const FacetFilterHeader: React.FunctionComponent<\n  FacetFilterHeaderProps\n> = ({ label, isCollapsed, onClick }: FacetFilterHeaderProps) => {\n  const { getColumnDisplayName } = useQueryVisualizationContext()\n  return (\n    <div className=\"FacetFilterHeader\">\n      <label className=\"FacetFilterHeader__label\">\n        {getColumnDisplayName(label)}\n      </label>\n      <button\n        className=\"FacetFilterHeader__collapseToggleBtn\"\n        onClick={() => onClick(!isCollapsed)}\n      >\n        {isCollapsed ? (\n          <IconPlus className=\"icon-plus\" title=\"Expand Menu\" />\n        ) : (\n          <IconMinus className=\"icon-minus\" title=\"Collapse Menu\" />\n        )}\n      </button>\n    </div>\n  )\n}\n","import { Collapse } from '@mui/material'\nimport React, { useState } from 'react'\nimport { Dropdown } from 'react-bootstrap'\nimport useDeepCompareEffect from 'use-deep-compare-effect'\nimport { ElementWithTooltip } from '../../../containers/widgets/ElementWithTooltip'\nimport { SynapseConstants } from '../../../utils'\nimport useGetInfoFromIds from '../../../utils/hooks/useGetInfoFromIds'\nimport {\n  ColumnTypeEnum,\n  Evaluation,\n  UserGroupHeader,\n} from '../../../utils/synapseTypes'\nimport { EntityHeader } from '../../../utils/synapseTypes/EntityHeader'\nimport {\n  FacetColumnResultValueCount,\n  SelectColumn,\n} from '../../../utils/synapseTypes/Table'\nimport IconSvg from '../../IconSvg'\nimport { Checkbox } from '../Checkbox'\nimport { FacetFilterHeader } from './FacetFilterHeader'\n\nexport type EnumFacetFilterProps = {\n  facetValues: FacetColumnResultValueCount[]\n  columnModel: SelectColumn\n  onChange: (facetNamesMap: Record<string, string>) => void\n  onClear: () => void\n  containerAs?: 'Collapsible' | 'Dropdown'\n  dropdownType?: 'Icon' | 'SelectBox'\n  collapsed?: boolean\n}\n\nfunction valueToId(value: string): string {\n  return value.replace(/\\s/g, '').toLowerCase()\n}\n\nfunction valueToLabel(\n  facet: FacetColumnResultValueCount,\n  profiles: UserGroupHeader[] = [],\n  entityHeaders: EntityHeader[] = [],\n  evaluations: Evaluation[] = [],\n): string {\n  const { value } = facet\n  let displayValue = value\n  if (value === SynapseConstants.VALUE_NOT_SET) {\n    displayValue = SynapseConstants.FRIENDLY_VALUE_NOT_SET\n  }\n  const profile = profiles.find(profile => profile.ownerId === value)\n  if (profile) {\n    displayValue = profile ? profile.userName : `unknown (${value})`\n  }\n\n  const eh = entityHeaders.find(eh => eh.id === value)\n  if (eh) {\n    displayValue = eh ? eh.name : `unknown (${value})`\n  }\n\n  const evaluation = evaluations.find(evaluation => evaluation.id === value)\n  if (evaluation?.name) {\n    displayValue = evaluation.name\n  }\n\n  return `${displayValue}`\n}\n\nfunction formatFacetValuesForDisplay(\n  facetValues: FacetColumnResultValueCount[],\n  isShowAll: boolean,\n  visibleItemsCount: number,\n) {\n  //sort facets by count\n  const facets = [...facetValues.sort((a, b) => b.count - a.count)]\n  if (isShowAll || facets.length <= visibleItemsCount) {\n    return facets\n  } else {\n    //if we are not hiding elected facets\n    if (facets.slice(visibleItemsCount).find(item => item.isSelected)) {\n      return facets\n    } else {\n      return facets.splice(0, visibleItemsCount)\n    }\n  }\n}\n\n/************* QUERY ENUM CONMPONENT  *************/\n\nexport const EnumFacetFilter: React.FunctionComponent<EnumFacetFilterProps> = ({\n  facetValues,\n  columnModel,\n  onClear,\n  onChange,\n  containerAs = 'Collapsible',\n  dropdownType = 'Icon',\n  collapsed = false,\n}: EnumFacetFilterProps) => {\n  const [isShowAll, setIsShowAll] = useState<boolean>(false)\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(collapsed)\n  const [isShowDropdown, setIsShowDropdown] = useState<boolean>(false)\n  const [showSearch, setShowSearch] = useState<boolean>(false)\n  const [searchTerm, setSearchText] = useState<string>('')\n  const [filteredSet, setFilteredSet] =\n    useState<FacetColumnResultValueCount[]>(facetValues)\n\n  useDeepCompareEffect(() => {\n    setFilteredSet(facetValues)\n  }, [facetValues])\n\n  const visibleItemsCount = 5\n  const selectionDelay = 1500 // in ms\n  const textInput: React.RefObject<HTMLInputElement> = React.createRef()\n  const selectedValuesMap = {}\n  let timer: ReturnType<typeof setTimeout>\n\n  const allIsSelected = facetValues.filter(item => item.isSelected).length === 0\n\n  const userIds =\n    columnModel?.columnType === ColumnTypeEnum.USERID ||\n    columnModel?.columnType === ColumnTypeEnum.USERID_LIST\n      ? facetValues.map(facet => facet.value)\n      : []\n  const userGroupHeaders = useGetInfoFromIds<UserGroupHeader>({\n    ids: userIds,\n    type: 'USER_PROFILE',\n  })\n\n  const entityIds =\n    columnModel?.columnType === ColumnTypeEnum.ENTITYID ||\n    columnModel?.columnType === ColumnTypeEnum.ENTITYID_LIST\n      ? facetValues.map(facet => facet.value)\n      : []\n  const entityHeaders = useGetInfoFromIds<EntityHeader>({\n    ids: entityIds,\n    type: 'ENTITY_HEADER',\n  })\n\n  const evaluationIds =\n    columnModel?.columnType === ColumnTypeEnum.EVALUATIONID\n      ? facetValues.map(facet => facet.value)\n      : []\n  const evaluations = useGetInfoFromIds<Evaluation>({\n    ids: evaluationIds,\n    type: 'EVALUATION_QUEUE',\n  })\n\n  const handleTextInputFilterEvent = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const inputValue: string = e.target.value\n    setSearchText(inputValue)\n    setIsShowAll(true) // While in filter search mode, display all filtered values\n\n    if (!inputValue) {\n      // if input field is empty, display all facet values\n      facetValues.forEach(obj => {\n        obj.isSelected = false\n      })\n      setFilteredSet(facetValues)\n    } else {\n      // display only facet values that contain text from the text input field\n      const filtered = facetValues.filter(obj => {\n        const label = valueToLabel(\n          obj,\n          userGroupHeaders,\n          entityHeaders,\n          evaluations,\n        )\n        return label.toLowerCase().indexOf(inputValue.trim().toLowerCase()) > -1\n          ? obj\n          : null\n      })\n      setFilteredSet(filtered)\n    }\n  }\n\n  if (!columnModel) {\n    return <></>\n  }\n  const isDropdown = containerAs === 'Dropdown'\n  const content = (\n    <div className={isDropdown ? 'EnumFacetFilter__dropdown_menu' : ''}>\n      <div className=\"EnumFacetFilter__checkboxContainer--forAll\">\n        <div\n          className={\n            showSearch\n              ? 'EnumFacetFilter__search active'\n              : 'EnumFacetFilter__search'\n          }\n        >\n          <button // Close Search Button\n            className=\"EnumFacetFilter__closeSearch\"\n            onClick={() => {\n              setFilteredSet(facetValues)\n              setShowSearch(false)\n              setIsShowAll(false)\n            }}\n          >\n            <span className=\"EnumFacetFilter__previous\">\n              <IconSvg icon=\"arrowBack\" />\n            </span>\n          </button>\n          {searchTerm.length > 0 && (\n            <button // Clear Search Filter Text Button\n              className=\"EnumFacetFilter__resetSearch\"\n              onClick={() => {\n                setSearchText('')\n                textInput.current?.focus()\n              }}\n            >\n              <span className=\"EnumFacetFilter__reset\">\n                <IconSvg icon=\"close\" />\n              </span>\n            </button>\n          )}\n          <input // Search Filter Text\n            type=\"text\"\n            placeholder=\"Find values\"\n            value={searchTerm}\n            ref={textInput}\n            onChange={e => {\n              handleTextInputFilterEvent(e)\n            }}\n          />\n        </div>\n        {!showSearch && (\n          <div className=\"EnumFacetFilter__checkAll\">\n            <Checkbox\n              className=\"EnumFacetFilter__checkbox\"\n              onChange={() => {\n                onClear()\n              }}\n              key=\"select_all\"\n              checked={allIsSelected}\n              label=\"All\"\n              isSelectAll={true}\n            ></Checkbox>\n            <button\n              className=\"EnumFacetFilter__searchbtn\"\n              onClick={() => {\n                setSearchText('')\n                setShowSearch(true)\n                textInput.current?.focus()\n              }}\n            >\n              <span className=\"EnumFacetFilter__searchicon\">\n                <IconSvg icon=\"search\" />\n              </span>\n            </button>\n          </div>\n        )}\n      </div>\n      <div>\n        {filteredSet.length > 0 &&\n          formatFacetValuesForDisplay(\n            filteredSet,\n            isShowAll || isDropdown,\n            visibleItemsCount,\n          ).map((facet, index: number) => (\n            <EnumFacetFilterOption\n              key={`checkLabel${index}`}\n              id={valueToId(facet.value)}\n              index={index}\n              label={valueToLabel(\n                facet,\n                userGroupHeaders,\n                entityHeaders,\n                evaluations,\n              )}\n              count={facet.count}\n              isDropdown={isDropdown}\n              initialIsSelected={facet.isSelected}\n              onChange={(isChecked: boolean) => {\n                selectedValuesMap[facet.value] = isChecked\n                clearTimeout(timer)\n                timer = setTimeout(() => {\n                  onChange(selectedValuesMap)\n                  setIsShowDropdown(false)\n                }, selectionDelay)\n              }}\n            />\n          ))}\n        {!isDropdown && (\n          <>\n            {!isShowAll && filteredSet.length > visibleItemsCount && (\n              <button\n                className=\"EnumFacetFilter__showMoreFacetsBtn\"\n                onClick={() => setIsShowAll(true)}\n              >\n                <div className=\"EnumFacetFilter__checkboxContainer\">\n                  <div className=\"EnumFacetFilter__showMoreFacetsLabel\">\n                    Show all ({filteredSet.length})\n                  </div>\n                </div>\n              </button>\n            )}\n            {isShowAll && filteredSet.length > visibleItemsCount && (\n              <button\n                className=\"EnumFacetFilter__showMoreFacetsBtn\"\n                onClick={() => setIsShowAll(false)}\n              >\n                <div className=\"EnumFacetFilter__checkboxContainer\">\n                  <div className=\"EnumFacetFilter__showMoreFacetsLabel\">\n                    Show less\n                  </div>\n                </div>\n              </button>\n            )}\n          </>\n        )}\n        {filteredSet.length <= 0 && (\n          <div className=\"EnumFacetFilter__noMatch\">No match found</div>\n        )}\n      </div>\n    </div>\n  )\n\n  const onToggle = () => setIsShowDropdown(!isShowDropdown)\n\n  if (isDropdown) {\n    if (dropdownType === 'SelectBox') {\n      return (\n        <Dropdown\n          className={'EnumFacetFilter EnumFacetFilterSelect'}\n          show={isShowDropdown}\n          onToggle={onToggle}\n        >\n          <Dropdown.Toggle className=\"secondary-caret\" variant=\"gray-select\">\n            {allIsSelected && 'All'}\n            {!allIsSelected &&\n              facetValues.filter(item => item.isSelected).length === 1 &&\n              facetValues.filter(item => item.isSelected)[0].value}\n            {!allIsSelected &&\n              facetValues.filter(item => item.isSelected).length > 1 &&\n              'Multiple Values Selected'}\n          </Dropdown.Toggle>\n          <Dropdown.Menu>{content}</Dropdown.Menu>\n        </Dropdown>\n      )\n    } else {\n      return (\n        <Dropdown\n          className=\"EnumFacetFilter\"\n          show={isShowDropdown}\n          onToggle={onToggle}\n        >\n          <ElementWithTooltip\n            tooltipText=\"Filter by specific facet\"\n            key=\"facetFilterTooltip\"\n            darkTheme={false}\n            icon={'filter'}\n          />\n          <Dropdown.Menu>{content}</Dropdown.Menu>\n        </Dropdown>\n      )\n    }\n  } else {\n    return (\n      <>\n        <FacetFilterHeader\n          isCollapsed={isCollapsed}\n          label={columnModel.name}\n          onClick={(isCollapsed: boolean) => setIsCollapsed(isCollapsed)}\n        />\n        <Collapse className=\"EnumFacetFilter\" in={!isCollapsed}>\n          {content}\n        </Collapse>\n      </>\n    )\n  }\n}\n\ntype EnumFacetFilterOptionProps = {\n  readonly id: string\n  readonly index: number\n  readonly label: string\n  readonly count: number\n  readonly isDropdown: boolean\n  readonly initialIsSelected: boolean\n  readonly onChange: (selected: boolean) => void\n}\n\nfunction EnumFacetFilterOption({\n  id,\n  index,\n  label,\n  count,\n  isDropdown,\n  initialIsSelected,\n  onChange,\n}: EnumFacetFilterOptionProps) {\n  const [isSelected, setIsSelected] = useState(initialIsSelected)\n\n  React.useEffect(() => {\n    setIsSelected(initialIsSelected)\n  }, [initialIsSelected])\n\n  return (\n    <div\n      className=\"EnumFacetFilter__checkboxContainer\"\n      onClick={() => {\n        if (isDropdown) {\n          setIsSelected(!isSelected)\n          onChange(!isSelected)\n        }\n      }}\n    >\n      <Checkbox\n        className=\"EnumFacetFilter__checkbox\"\n        onClick={event => event.stopPropagation()}\n        onChange={newValue => {\n          setIsSelected(newValue)\n          onChange(newValue)\n        }}\n        key={`${id}-${index}`}\n        checked={isSelected}\n        label={label}\n      ></Checkbox>\n      {isDropdown && <span className=\"EnumFacetFilter__count\">({count})</span>}\n      {!isDropdown && <div className=\"EnumFacetFilter__count\">{count}</div>}\n    </div>\n  )\n}\n","import React from 'react'\nimport { FacetColumnResult } from '../../../utils/synapseTypes'\nimport IconSvg from '../../IconSvg'\nimport { useQueryVisualizationContext } from '../../QueryVisualizationWrapper'\n\nexport type FacetChipProps = {\n  facet: FacetColumnResult\n  isChecked: boolean\n  onClick: () => void\n}\n\nexport const FacetChip: React.FC<FacetChipProps> = ({\n  facet,\n  isChecked,\n  onClick,\n}) => {\n  const { getColumnDisplayName } = useQueryVisualizationContext()\n  return (\n    <button className={`Chip ${isChecked ? 'Checked' : ''}`} onClick={onClick}>\n      {getColumnDisplayName(facet.columnName)}\n      <IconSvg\n        icon={isChecked ? 'check' : 'add'}\n        sx={{\n          width: '14px',\n          paddingLeft: '0.2rem',\n        }}\n      ></IconSvg>\n    </button>\n  )\n}\n","import React, { useState } from 'react'\nimport dayjs from 'dayjs'\n\ntype ControlType = 'number' | 'date'\n\nexport type RangeValues<T = string | number> = {\n  min?: T\n  max?: T\n}\n\nexport type RangeProps = {\n  type: ControlType\n  initialValues?: RangeValues\n  className?: string\n  errorText?: string\n  onChange: (newValues: RangeValues) => void\n}\n\nexport const Range: React.FunctionComponent<RangeProps> = (\n  props: RangeProps,\n) => {\n  const errorText = 'Min value should be less then max value'\n  const [error, setError] = useState(false)\n  const [values, setValues] = useState(() =>\n    props.type === 'number' && props.initialValues\n      ? props.initialValues\n      : (props.initialValues && {\n          min: dayjs(props.initialValues.min).format('YYYY-MM-DD'),\n          max: dayjs(props.initialValues.max).format('YYYY-MM-DD'),\n        }) || {\n          min: undefined,\n          max: undefined,\n        },\n  )\n\n  const className = props.className ? `range ${props.className}` : `range`\n\n  const isValid = (\n    { min, max }: RangeValues,\n\n    type: ControlType = 'number',\n  ) => {\n    if (\n      min === null ||\n      min === undefined ||\n      max === null ||\n      max === undefined\n    ) {\n      setError(false)\n      return true\n    }\n\n    if (type === 'number') {\n      if (Number(min) > Number(max)) {\n        setError(true)\n        return false\n      }\n    } else if (Date.parse(min as string) > Date.parse(max as string)) {\n      setError(true)\n      return false\n    }\n    setError(false)\n    return true\n  }\n\n  const handleAppyChanges = (\n    values: RangeValues,\n    callBackFn: (newValues: RangeValues) => void,\n    type: ControlType = 'number',\n  ) => {\n    if (isValid(values, type)) {\n      callBackFn(values)\n    }\n  }\n\n  return (\n    <div className={className} style={{ display: 'flex', flexWrap: 'wrap' }}>\n      <div style={{ marginRight: '10px' }}>\n        <input\n          aria-label=\"min\"\n          key=\"range_min\"\n          type={props.type}\n          value={values.min}\n          onChange={({ target }: React.ChangeEvent<HTMLInputElement>) =>\n            setValues({ min: target.value, max: values.max })\n          }\n        />\n        <div>to</div>\n        <input\n          aria-label=\"max\"\n          key=\"range_max\"\n          type={props.type}\n          value={values.max}\n          onChange={({ target }: React.ChangeEvent<HTMLInputElement>) =>\n            setValues({ min: values.min, max: target.value })\n          }\n        />\n      </div>\n      <button\n        className=\"btn btn-link SRC-noPadding\"\n        onClick={() => handleAppyChanges(values, props.onChange, props.type)}\n      >\n        Apply\n      </button>\n      {error && (\n        <div className=\"SRC-danger-color\">{props.errorText || errorText}</div>\n      )}\n    </div>\n  )\n}\n","import { Collapse } from '@mui/material'\nimport * as React from 'react'\nimport { useState } from 'react'\nimport {\n  FRIENDLY_VALUE_NOT_SET,\n  VALUE_NOT_SET,\n} from '../../../utils/SynapseConstants'\nimport { SelectColumn } from '../../../utils/synapseTypes'\nimport { FacetColumnResultRange } from '../../../utils/synapseTypes/Table/FacetColumnResult'\nimport { RadioGroup } from '../RadioGroup'\nimport { Range, RangeValues } from '../Range'\nimport { RangeSlider } from '../RangeSlider'\nimport { FacetFilterHeader } from './FacetFilterHeader'\n\nexport enum RadioValuesEnum {\n  NOT_SET = 'org.sagebionetworks.UNDEFINED_NULL_NOTSET',\n  RANGE = 'RANGE',\n  ANY = '',\n}\n\nexport type RangeFacetFilterProps = {\n  facetResult: FacetColumnResultRange\n  columnModel: SelectColumn\n  onChange: (range: (RadioValuesEnum | number | string | undefined)[]) => void\n  collapsed?: boolean\n}\n\nexport type RangeFacetFilterState = {\n  facetResult: FacetColumnResultRange\n  columnModel: SelectColumn\n}\n\nexport const RangeFacetFilter: React.FunctionComponent<\n  RangeFacetFilterProps\n> = ({\n  facetResult,\n  columnModel,\n  onChange,\n  collapsed = false,\n}: RangeFacetFilterProps) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(collapsed)\n  const options = [\n    { label: FRIENDLY_VALUE_NOT_SET, value: RadioValuesEnum.NOT_SET },\n    { label: 'Any', value: RadioValuesEnum.ANY },\n    { label: 'Range', value: RadioValuesEnum.RANGE },\n  ]\n\n  let { columnMin, columnMax, selectedMin, selectedMax } = facetResult // the upper bound of the selected range\n\n  const hasAnyValue = !selectedMin && !selectedMax\n\n  selectedMin = selectedMin || columnMin\n  selectedMax = selectedMax || columnMax\n\n  const rangeType = columnModel.columnType === 'DOUBLE' ? 'number' : 'date'\n\n  const getRadioValue = (min: string, isAnyValue: boolean) => {\n    if (isAnyValue) {\n      return RadioValuesEnum.ANY\n    } else if (min === VALUE_NOT_SET) {\n      return RadioValuesEnum.NOT_SET\n    }\n    return RadioValuesEnum.RANGE\n  }\n\n  const handleRadioGroupChange = (\n    radioValue: RadioValuesEnum,\n    onChangeCallback: (\n      range: (RadioValuesEnum | number | string | undefined)[],\n    ) => void,\n  ) => {\n    setRadioValue(radioValue)\n\n    if (radioValue !== RadioValuesEnum.RANGE) {\n      onChangeCallback([radioValue, radioValue])\n    }\n  }\n\n  const [radioValue, setRadioValue] = useState(\n    getRadioValue(selectedMin, hasAnyValue),\n  )\n\n  const result = (\n    <div>\n      <FacetFilterHeader\n        isCollapsed={isCollapsed}\n        label={columnModel.name}\n        onClick={(isCollapsed: boolean) => setIsCollapsed(isCollapsed)}\n      ></FacetFilterHeader>\n      <Collapse in={!isCollapsed}>\n        <RadioGroup\n          value={radioValue}\n          id=\"rangeSelector\"\n          options={options}\n          onChange={(radioValue: string) =>\n            handleRadioGroupChange(radioValue as RadioValuesEnum, onChange)\n          }\n        ></RadioGroup>\n        {radioValue === RadioValuesEnum.RANGE &&\n          (columnMin === columnMax ? (\n            <label>{columnMax}</label>\n          ) : (\n            <>\n              {columnModel.columnType === 'INTEGER' && (\n                <RangeSlider\n                  key=\"RangeSlider\"\n                  domain={[columnMin, columnMax]}\n                  initialValues={{ min: selectedMin, max: selectedMax }}\n                  step={1}\n                  doUpdateOnApply={true}\n                  onChange={(values: RangeValues) =>\n                    onChange([values.min, values.max])\n                  }\n                >\n                  ) {'>'}\n                </RangeSlider>\n              )}\n\n              {(columnModel.columnType === 'DATE' ||\n                columnModel.columnType === 'DOUBLE') && (\n                <Range\n                  key=\"Range\"\n                  initialValues={{\n                    min: selectedMin,\n                    max: selectedMax,\n                  }}\n                  type={rangeType}\n                  onChange={(values: RangeValues) =>\n                    onChange([values.min, values.max])\n                  }\n                ></Range>\n              )}\n            </>\n          ))}\n      </Collapse>\n    </div>\n  )\n  return result\n}\n","import React from 'react'\nimport { useDeepCompareEffectNoCheck } from 'use-deep-compare-effect'\nimport { isSingleNotSetValue } from '../../../utils/functions/queryUtils'\nimport {\n  QueryBundleRequest,\n  FacetColumnRangeRequest,\n  FacetColumnRequest,\n  FacetColumnValuesRequest,\n  FacetColumnResult,\n  FacetColumnResultRange,\n  FacetColumnResultValues,\n} from '../../../utils/synapseTypes'\nimport { useQueryContext } from '../../QueryContext'\nimport { useQueryVisualizationContext } from '../../QueryVisualizationWrapper'\nimport {\n  QUERY_FILTERS_COLLAPSED_CSS,\n  QUERY_FILTERS_EXPANDED_CSS,\n} from '../../QueryWrapper'\nimport { EnumFacetFilter } from './EnumFacetFilter'\nimport { FacetChip } from './FacetChip'\nimport { RangeFacetFilter } from './RangeFacetFilter'\nimport { Box, Skeleton, Stack } from '@mui/material'\n\nexport type FacetFilterControlsProps = {\n  /* The set of faceted column names that should be shown in the Facet controls. If undefined, all faceted columns with at least one non-null value will be shown. */\n  availableFacets?: string[]\n}\n\nconst convertFacetToFacetColumnValuesRequest = (\n  facet: FacetColumnResultValues,\n): FacetColumnValuesRequest => ({\n  concreteType: 'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest',\n  columnName: facet.columnName,\n  facetValues: facet.facetValues\n    .filter(facet => facet.isSelected)\n    .map(facet => facet.value),\n})\n\nconst convertFacetColumnRangeRequest = (\n  facet: FacetColumnResultRange,\n): FacetColumnRangeRequest => {\n  let result: FacetColumnRangeRequest = {\n    concreteType:\n      'org.sagebionetworks.repo.model.table.FacetColumnRangeRequest',\n    columnName: facet.columnName, // The name of the faceted column\n  }\n\n  if (facet.columnMin) {\n    result = { ...result, min: facet.columnMin, max: facet.columnMax }\n  }\n  return result\n}\n\nconst patchRequestFacets = (\n  changedFacet: FacetColumnRequest,\n  lastRequest?: QueryBundleRequest,\n): FacetColumnRequest[] => {\n  const selections = lastRequest?.query?.selectedFacets ?? []\n  const changedFacetIndex = selections.findIndex(\n    facet => facet.columnName === changedFacet.columnName,\n  )\n\n  const isEmptyValuesFacet =\n    changedFacet.concreteType ===\n      'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest' &&\n    (!changedFacet.facetValues || !changedFacet.facetValues.length)\n  if (changedFacetIndex > -1) {\n    if (isEmptyValuesFacet) {\n      selections.splice(changedFacetIndex, 1)\n    } else {\n      selections[changedFacetIndex] = changedFacet\n    }\n  } else {\n    selections.push(changedFacet)\n  }\n  return selections\n}\n\nexport function applyChangesToValuesColumn(\n  lastRequest: QueryBundleRequest | undefined,\n  facet: FacetColumnResultValues,\n  onChangeFn: (result: FacetColumnRequest[]) => void,\n  facetName?: string,\n  checked: boolean = false,\n) {\n  if (facetName) {\n    facet.facetValues.forEach(facetValue => {\n      if (facetValue.value === facetName) {\n        facetValue.isSelected = checked\n      }\n    })\n  } else {\n    // else clear all\n    facet.facetValues.forEach(facet => {\n      facet.isSelected = false\n    })\n  }\n\n  const changedFacet = convertFacetToFacetColumnValuesRequest(facet)\n  const result = patchRequestFacets(changedFacet, lastRequest)\n  onChangeFn(result)\n}\n\n// This handles multiple checkbox selection with delay refresh\nexport const applyMultipleChangesToValuesColumn = (\n  lastRequest: QueryBundleRequest | undefined,\n  facet: FacetColumnResultValues,\n  onChangeFn: (result: FacetColumnRequest[]) => void,\n  facetNameMap?: Record<string, string>,\n) => {\n  const facetNames = (facetNameMap && Object.keys(facetNameMap)) || []\n  if (facetNames.length) {\n    facet.facetValues.forEach(facetValue => {\n      if (facetNames.includes(facetValue.value)) {\n        facetValue.isSelected = facetNameMap\n          ? !!facetNameMap[facetValue.value]\n          : false\n      }\n    })\n  }\n  const changedFacet = convertFacetToFacetColumnValuesRequest(facet)\n  const result = patchRequestFacets(changedFacet, lastRequest)\n  onChangeFn(result)\n}\n\n//rangeChanges\nexport const applyChangesToRangeColumn = (\n  lastRequest: QueryBundleRequest | undefined,\n  facet: FacetColumnResultRange,\n  onChangeFn: (result: FacetColumnRequest[]) => void,\n  values: string[],\n) => {\n  facet.columnMin = values[0]\n  facet.columnMax = values[1]\n  const changedFacet = convertFacetColumnRangeRequest(facet)\n  const result = patchRequestFacets(changedFacet, lastRequest)\n  onChangeFn(result)\n}\n\n/**\n * Determines which facet filters should be shown after loading a new bundle. The shown facets will be the first\n * three available facets, plus any other facets that have a filter applied.\n * @param facets\n * @param selectedFacets\n * @returns the columnNames of the facets that should be shown.\n */\nexport function getDefaultShownFacetFilters(\n  facets: FacetColumnResult[],\n  selectedFacets?: FacetColumnRequest[],\n): Set<string> {\n  const columnsWithExistingFilters = (selectedFacets ?? []).map(\n    fcr => fcr.columnName,\n  )\n  return new Set([\n    ...facets.slice(0, 3).map(f => f.columnName),\n    ...columnsWithExistingFilters,\n  ])\n}\n\nfunction FacetFilterSkeleton() {\n  const facetFilterFormRow = (\n    <Stack direction={'row'} gap={'10px'} sx={{ my: 1 }}>\n      <Skeleton width={'15px'} />\n      <Skeleton width={'40%'} />\n    </Stack>\n  )\n  return (\n    <Box className={'FacetFilterControls__facet'}>\n      <Box className={'FacetFilterHeader'}>\n        <Skeleton width={'100%'} />\n      </Box>\n      <Box>\n        {facetFilterFormRow}\n        {facetFilterFormRow}\n        {facetFilterFormRow}\n      </Box>\n    </Box>\n  )\n}\n\nfunction FacetFilterControlsSkeleton() {\n  const { topLevelControlsState } = useQueryVisualizationContext()\n  const { showFacetFilter } = topLevelControlsState\n  return (\n    <div\n      className={`FacetFilterControls ${\n        showFacetFilter\n          ? QUERY_FILTERS_EXPANDED_CSS\n          : QUERY_FILTERS_COLLAPSED_CSS\n      }`}\n    >\n      <FacetFilterSkeleton />\n      <FacetFilterSkeleton />\n      <FacetFilterSkeleton />\n      <FacetFilterSkeleton />\n    </div>\n  )\n}\n\nfunction FacetFilterControls(props: FacetFilterControlsProps) {\n  const { availableFacets } = props\n  const {\n    data: data,\n    getLastQueryRequest,\n    executeQueryRequest,\n  } = useQueryContext()\n  const lastRequest = getLastQueryRequest()\n\n  const facets = data!\n    .facets!.filter(\n      facet =>\n        // If availableFacets is configured, remove those that don't match.\n        availableFacets == null || availableFacets.includes(facet.columnName),\n    )\n    .filter(\n      facet =>\n        // Don't show facets where there are no values\n        !isSingleNotSetValue(facet),\n    )\n\n  // Controls which facet filter sections are shown/hidden by clicking on chips\n  const [facetFiltersShown, setFacetFiltersShown] = React.useState<Set<string>>(\n    getDefaultShownFacetFilters(facets, lastRequest.query.selectedFacets),\n  )\n  const { topLevelControlsState } = useQueryVisualizationContext()\n  const { showFacetFilter } = topLevelControlsState\n\n  /**\n   * When the data facets change, reset the initially-selected chips\n   */\n  useDeepCompareEffectNoCheck(() => {\n    // Select the first three facet columns, plus any columns where a facet is already filtered\n    setFacetFiltersShown(\n      getDefaultShownFacetFilters(facets, lastRequest.query.selectedFacets),\n    )\n  }, [facets])\n\n  const columnModels = data!.selectColumns\n\n  const applyChanges = (facets: FacetColumnRequest[]) => {\n    const queryRequest: QueryBundleRequest = getLastQueryRequest()\n    queryRequest.query.selectedFacets = facets\n    queryRequest.query.offset = 0\n    executeQueryRequest(queryRequest)\n  }\n\n  const toggleShowFacetFilter = (facet: FacetColumnResult) => {\n    const newFacetFilterShown = new Set(facetFiltersShown)\n    if (newFacetFilterShown.has(facet.columnName)) {\n      newFacetFilterShown.delete(facet.columnName)\n    } else {\n      newFacetFilterShown.add(facet.columnName)\n    }\n    setFacetFiltersShown(newFacetFilterShown)\n  }\n\n  return (\n    <div\n      className={`FacetFilterControls ${\n        showFacetFilter\n          ? QUERY_FILTERS_EXPANDED_CSS\n          : QUERY_FILTERS_COLLAPSED_CSS\n      }`}\n    >\n      {(facets ?? [])\n        .filter(facet => facetFiltersShown.has(facet.columnName))\n        .map(facet => {\n          const columnModel = columnModels!.find(\n            model => model.name === facet.columnName,\n          )\n          return (\n            <div className=\"FacetFilterControls__facet\" key={facet.columnName}>\n              {facet.facetType === 'enumeration' && columnModel && (\n                <EnumFacetFilter\n                  containerAs=\"Collapsible\"\n                  collapsed={false}\n                  facetValues={facet.facetValues}\n                  columnModel={columnModel}\n                  onChange={(facetNamesMap: Record<string, string>) =>\n                    applyMultipleChangesToValuesColumn(\n                      lastRequest,\n                      facet,\n                      applyChanges,\n                      facetNamesMap,\n                    )\n                  }\n                  onClear={() =>\n                    applyChangesToValuesColumn(lastRequest, facet, applyChanges)\n                  }\n                ></EnumFacetFilter>\n              )}\n              {facet.facetType === 'range' && columnModel && (\n                <RangeFacetFilter\n                  facetResult={facet}\n                  columnModel={columnModel}\n                  collapsed={false}\n                  onChange={(values: (string | number | undefined)[]) =>\n                    applyChangesToRangeColumn(\n                      lastRequest,\n                      facet,\n                      applyChanges,\n                      values as string[],\n                    )\n                  }\n                ></RangeFacetFilter>\n              )}\n            </div>\n          )\n        })}\n      <div>\n        <div className=\"AvailableFacet\">\n          <label className=\"AvailableFacet__label\">Available Facets</label>\n        </div>\n        {facets.map(facet => {\n          return (\n            <FacetChip\n              key={facet.columnName}\n              facet={facet}\n              onClick={() => toggleShowFacetFilter(facet)}\n              isChecked={facetFiltersShown.has(facet.columnName)}\n            />\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default function FacetFilterControlsOrLoader(\n  props: FacetFilterControlsProps,\n) {\n  const { data, isLoadingNewBundle } = useQueryContext()\n  if (isLoadingNewBundle) {\n    return <FacetFilterControlsSkeleton />\n  } else if (data == null || data.facets == null) {\n    return <></>\n  }\n  return <FacetFilterControls {...props} />\n}\n","import { InfoOutlined } from '@mui/icons-material'\nimport * as PlotlyTyped from 'plotly.js'\nimport Plotly from 'plotly.js-basic-dist'\nimport React, { useCallback, useState } from 'react'\nimport { Button, Dropdown, Modal } from 'react-bootstrap'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { SizeMe } from 'react-sizeme'\nimport { SkeletonInlineBlock } from '../../../assets/skeletons/SkeletonInlineBlock'\nimport getColorPalette from '../../../containers/ColorGradient'\nimport { ElementWithTooltip } from '../../../containers/widgets/ElementWithTooltip'\nimport { SynapseClient, SynapseConstants } from '../../../utils'\n\nimport { useSynapseContext } from '../../../utils/SynapseContext'\nimport {\n  ColumnTypeEnum,\n  FacetColumnRequest,\n  FacetColumnResultValueCount,\n  FacetColumnResultValues,\n} from '../../../utils/synapseTypes'\nimport loadingScreen from '../../LoadingScreen'\nimport { useQueryVisualizationContext } from '../../QueryVisualizationWrapper'\nimport { useQueryContext } from '../../QueryContext'\nimport { EnumFacetFilter } from '../query-filter/EnumFacetFilter'\nimport {\n  applyChangesToValuesColumn,\n  applyMultipleChangesToValuesColumn,\n} from '../query-filter/FacetFilterControls'\nimport { Box, Tooltip, Typography } from '@mui/material'\nimport { useQuery } from 'react-query'\n\nconst Plot = createPlotlyComponent(Plotly)\n\nexport type FacetNavPanelProps = {\n  applyChangesToGraphSlice: (\n    facet: FacetColumnResultValues,\n    value: FacetColumnResultValueCount | undefined,\n    isSelected: boolean,\n  ) => void\n  applyChangesToFacetFilter: (facets: FacetColumnRequest[]) => void\n  index: number\n  facetToPlot: FacetColumnResultValues\n  plotType: PlotType\n  onSetPlotType: (plotType: PlotType) => void\n  onHide: () => void\n  isModalView: boolean\n  onCloseModal?: () => void\n}\n\nconst maxLabelLength: number = 19\nconst maxLegendLength: number = 30\n\nexport type PlotType = 'PIE' | 'BAR'\n\nconst layout: Partial<PlotlyTyped.Layout> = {\n  showlegend: false,\n  annotations: [],\n  margin: { l: 0, r: 0, b: 0, t: 0, pad: 0 },\n  yaxis: {\n    visible: false,\n    showgrid: false,\n  },\n  xaxis: {\n    visible: false,\n    showgrid: false,\n  },\n}\n\nexport type GraphData = {\n  data: PlotlyTyped.Data[]\n  labels: FacetWithLabel[]\n  colors: string[]\n}\n\nexport function truncate(str: string | undefined, n: number) {\n  if (!str) {\n    return str\n  }\n  const trimmedStr: string = str.trim()\n  return trimmedStr.length > n ? trimmedStr.substr(0, n - 1) + '…' : str\n}\n\nexport async function extractPlotDataArray(\n  facetToPlot: FacetColumnResultValues,\n  columnType: ColumnTypeEnum | undefined,\n  index: number,\n  plotType: PlotType,\n  accessToken?: string,\n) {\n  const { colorPalette } = getColorPalette(\n    index,\n    facetToPlot.facetValues.length,\n  )\n\n  const getLabels = async (\n    facetValues: FacetColumnResultValueCount[],\n    columnType?: ColumnTypeEnum,\n    accessToken?: string,\n  ) => {\n    const map = new Map<string, string>()\n    map.set(\n      SynapseConstants.VALUE_NOT_SET,\n      SynapseConstants.FRIENDLY_VALUE_NOT_SET,\n    )\n    // Filter out empties\n    const filteredValues = facetValues\n      .map(value => value.value)\n      .filter(val => val !== SynapseConstants.VALUE_NOT_SET)\n    if (\n      columnType === ColumnTypeEnum.ENTITYID ||\n      columnType === ColumnTypeEnum.ENTITYID_LIST\n    ) {\n      // TODO: Pagination\n      const response = await SynapseClient.getEntityHeadersByIds(\n        filteredValues,\n        accessToken,\n      )\n      for (const header of response.results) {\n        map.set(header.id, header.name)\n      }\n    } else if (\n      columnType === ColumnTypeEnum.USERID ||\n      columnType === ColumnTypeEnum.USERID_LIST\n    ) {\n      const response = await SynapseClient.getGroupHeadersBatch(\n        filteredValues,\n        accessToken,\n      )\n      for (const header of response.children) {\n        map.set(header.ownerId, header.userName)\n      }\n    }\n\n    return facetValues.map(facetValue => ({\n      facet: facetValue,\n      label: getLabel(facetValue, false, map),\n      truncatedLabel: getLabel(facetValue, true, map),\n      count: facetValue.count,\n    }))\n  }\n\n  const getLabel = (\n    facetValue: FacetColumnResultValueCount,\n    truncateFlag: boolean,\n    labelMap: Map<string, string>,\n  ): string => {\n    let label = labelMap.get(facetValue.value) ?? facetValue.value\n    if (truncateFlag) {\n      label = truncate(label, maxLabelLength)!\n    }\n    return label\n  }\n\n  const labels = await getLabels(\n    facetToPlot.facetValues,\n    columnType,\n    accessToken,\n  )\n  const text = labels.map(el => el.truncatedLabel)\n\n  const anyFacetsSelected = facetToPlot.facetValues.some(\n    value => value.isSelected,\n  )\n\n  const selectionAwareColorPalette = anyFacetsSelected\n    ? facetToPlot.facetValues.map((facetValue, index) =>\n        facetValue.isSelected\n          ? colorPalette[index]\n          : colorPalette[index]\n              .replace('rgb(', 'rgba(')\n              .replace(')', ', 0.25)'),\n      )\n    : colorPalette\n  const singleChartData: PlotlyTyped.Data = {\n    values:\n      plotType === 'PIE'\n        ? facetToPlot.facetValues.map(facet => facet.count)\n        : undefined,\n    labels: labels.map(el => el.label),\n    text,\n    x:\n      plotType === 'BAR'\n        ? facetToPlot.facetValues.map(\n            facet =>\n              labels.find(label => label.facet === facet)?.label ?? facet.value,\n          )\n        : undefined,\n    y:\n      plotType === 'BAR'\n        ? facetToPlot.facetValues.map(facet => facet.count)\n        : undefined,\n    // @ts-ignore\n    facetEnumerationValues: facetToPlot.facetValues.map(\n      facetValue => facetValue.value,\n    ),\n    name: facetToPlot.columnName,\n    hovertemplate:\n      plotType === 'PIE'\n        ? '<b>%{text}</b><br>%{value} (%{percent})<br><extra></extra>'\n        : '<b>%{text}: </b><br>%{value} <br><extra></extra>',\n    textinfo: 'none',\n    type: plotType === 'PIE' ? 'pie' : 'bar',\n    pull:\n      plotType === 'PIE'\n        ? facetToPlot.facetValues.map(facetValue =>\n            facetValue.isSelected ? 0.1 : 0,\n          )\n        : undefined,\n    marker: {\n      colors: plotType === 'PIE' ? selectionAwareColorPalette : undefined,\n      color: plotType === 'BAR' ? selectionAwareColorPalette : undefined,\n    },\n  }\n\n  const result = {\n    data: [singleChartData],\n    labels,\n    colors:\n      plotType === 'PIE'\n        ? ((singleChartData as any).marker?.colors as string[])\n        : ((singleChartData as any).marker?.color as string[]),\n  }\n  return result\n}\n\nconst applyFacetFilter = (\n  event: PlotlyTyped.PlotMouseEvent,\n  allFacetValues: FacetColumnResultValues,\n  callbackApplyFn: FacetNavPanelProps['applyChangesToGraphSlice'],\n) => {\n  if (event.points && event.points[0]) {\n    const plotPointData: any = event.points[0]\n    const facetValueClickedValue =\n      plotPointData.data.facetEnumerationValues[plotPointData.pointNumber]\n    const facetValueClicked = allFacetValues.facetValues.find(\n      facet => facet.value === facetValueClickedValue,\n    )\n    callbackApplyFn(\n      allFacetValues,\n      facetValueClicked,\n      !facetValueClicked!.isSelected,\n    )\n  }\n}\n\nexport function getPlotStyle(\n  parentWidth: number | null,\n  plotType: PlotType,\n  maxHeight: number,\n): { width: string; height: string } {\n  const quotient = plotType === 'BAR' ? 0.8 : 0.6\n  const width = parentWidth ? parentWidth * quotient : 200\n  let height = plotType === 'PIE' ? width : width / 3\n  // max height of .FacetNav row col* is 200px, so the effective plot height max is around 150 unless it's expanded\n  if (height > maxHeight) {\n    height = maxHeight\n  }\n\n  return {\n    width: `${width}px`,\n    height: `${height}px`,\n  }\n}\n\nexport type FacetWithLabel = {\n  label: string\n  count: number\n}\n\ntype FacetPlotLegendProps = {\n  labels?: FacetWithLabel[]\n  colors?: string[]\n  isExpanded: boolean\n}\n\nexport function FacetPlotLegend(props: FacetPlotLegendProps) {\n  const { labels, colors = [], isExpanded } = props\n  if (!labels) {\n    return <></>\n  }\n  const numLegendItems = isExpanded\n    ? Math.min(labels.length, 9)\n    : Math.min(labels.length, 4)\n  if (numLegendItems === 0) {\n    return <></>\n  }\n  return (\n    <div\n      className={`FacetNavPanel__body__legend${isExpanded ? '--expanded' : ''}`}\n    >\n      {labels.slice(0, numLegendItems).map((facetValue, index) => {\n        const labelDisplay = truncate(facetValue.label, maxLegendLength)\n        return (\n          <ElementWithTooltip\n            tooltipText={facetValue.label}\n            key={facetValue.label}\n          >\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\n              <Box\n                sx={{\n                  width: '14px',\n                  height: '14px',\n                  cursor: 'default',\n                  backgroundColor: colors[index],\n                }}\n                key={`legendLabel_${index}`}\n                style={{ cursor: 'default' }}\n              />\n              <Typography variant=\"body2\">{labelDisplay}</Typography>\n              <Typography variant=\"body2\" sx={{ color: 'grey.600' }}>\n                {facetValue.count}\n              </Typography>\n            </Box>\n          </ElementWithTooltip>\n        )\n      })}\n    </div>\n  )\n}\n\nconst getClassNameForPlotDiv = (isExpanded: boolean, plotType: PlotType) => {\n  if (!isExpanded) {\n    return 'FacetNavPanel__body__plot'\n  }\n  return `FacetNavPanel__body__plot--expanded${\n    plotType === 'BAR' ? 'Bar' : 'Pie'\n  }`\n}\n\nconst FacetNavPanel: React.FunctionComponent<FacetNavPanelProps> = (\n  props: FacetNavPanelProps,\n): JSX.Element => {\n  const {\n    onHide,\n    isModalView,\n    applyChangesToFacetFilter,\n    applyChangesToGraphSlice,\n    index,\n    facetToPlot,\n    plotType,\n    onSetPlotType,\n  } = props\n  const { accessToken } = useSynapseContext()\n  const { data, isLoadingNewBundle, getLastQueryRequest } = useQueryContext()\n\n  const { getColumnDisplayName } = useQueryVisualizationContext()\n\n  const [showModal, setShowModal] = useState(false)\n\n  const plotTitle = getColumnDisplayName(facetToPlot.columnName)\n\n  const getColumnType = useCallback(\n    (): ColumnTypeEnum | undefined =>\n      data?.columnModels?.find(\n        columnModel => columnModel.name === facetToPlot.columnName,\n      )?.columnType as ColumnTypeEnum,\n    [data, facetToPlot.columnName],\n  )\n\n  const { data: plotData } = useQuery(\n    [\n      'extractPlotDataArray',\n      facetToPlot,\n      getColumnType(),\n      index,\n      plotType,\n      accessToken,\n    ],\n    () =>\n      extractPlotDataArray(\n        facetToPlot,\n        getColumnType(),\n        index,\n        plotType,\n        accessToken,\n      ),\n    {\n      enabled: !!facetToPlot,\n    },\n  )\n\n  /* rendering functions */\n  const ChartSelectionToggle = (): JSX.Element => (\n    <div\n      onClick={event => {\n        event.stopPropagation()\n      }}\n      className=\"bootstrap-4-backport SRC-labeled-dropdown\"\n    >\n      <span className=\"SRC-labeled-dropdown__label\">Chart Type</span>\n      <Dropdown>\n        <Dropdown.Toggle className=\"secondary-caret\" variant=\"gray-select\">\n          {plotType === 'PIE' ? 'Pie Chart' : 'Bar Chart'}\n        </Dropdown.Toggle>\n        <Dropdown.Menu className=\"chart-tools\">\n          <Dropdown.Item as=\"button\" onClick={() => onSetPlotType('BAR')}>\n            Bar Chart\n          </Dropdown.Item>\n          <Dropdown.Item as=\"button\" onClick={() => onSetPlotType('PIE')}>\n            Pie Chart\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </div>\n  )\n\n  if ((!data && isLoadingNewBundle) || !facetToPlot) {\n    return (\n      <div className=\"SRC-loadingContainer SRC-centerContentColumn\">\n        {loadingScreen}\n      </div>\n    )\n  } else {\n    return (\n      <>\n        <Modal\n          animation={false}\n          show={showModal}\n          onHide={() => setShowModal(false)}\n          backdrop=\"static\"\n        >\n          <Modal.Header closeButton={true}>\n            <Modal.Title>{plotTitle ?? ''}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <FacetNavPanel {...props} isModalView={true} />\n            <div className=\"bootstrap-4-backport SaveFiltersButtonContainer\">\n              <Button\n                variant=\"secondary\"\n                className=\"SaveFiltersButton\"\n                onClick={() => setShowModal(false)}\n              >\n                Apply Filters\n              </Button>\n            </div>\n          </Modal.Body>\n        </Modal>\n        <div\n          role=\"graphics-document\"\n          className={`FacetNavPanel${isModalView ? '--expanded' : ''}`}\n        >\n          {!isModalView && (\n            <div className=\"FacetNavPanel__title\">\n              {!data && isLoadingNewBundle ? (\n                <SkeletonInlineBlock width={100} />\n              ) : (\n                <span className=\"FacetNavPanel__title__name\">{plotTitle}</span>\n              )}\n              <div className=\"FacetNavPanel__title__tools\">\n                <EnumFacetFilter\n                  facetValues={facetToPlot.facetValues}\n                  columnModel={\n                    data?.columnModels!.find(\n                      el => el.name === facetToPlot.columnName,\n                    )!\n                  }\n                  onChange={(facetNamesMap: Record<string, string>) => {\n                    applyMultipleChangesToValuesColumn(\n                      getLastQueryRequest(),\n                      facetToPlot,\n                      applyChangesToFacetFilter,\n                      facetNamesMap,\n                    )\n                  }}\n                  onClear={() => {\n                    applyChangesToValuesColumn(\n                      getLastQueryRequest(),\n                      facetToPlot,\n                      applyChangesToFacetFilter,\n                    )\n                  }}\n                  containerAs=\"Dropdown\"\n                />\n                <ElementWithTooltip\n                  tooltipText=\"Expand to large graph\"\n                  key=\"expandGraph\"\n                  callbackFn={() => setShowModal(true)}\n                  className=\"SRC-primary-color\"\n                  darkTheme={false}\n                  icon={'expand'}\n                />\n                <ElementWithTooltip\n                  tooltipText=\"Hide graph under Show More\"\n                  key=\"hideGraph\"\n                  callbackFn={() => onHide()}\n                  className=\"SRC-primary-color\"\n                  darkTheme={false}\n                  icon={'close'}\n                />\n              </div>\n            </div>\n          )}\n          {isModalView && (\n            <>\n              <div className={'bootstrap-4-backport SRC-labeled-dropdown'}>\n                <span className=\"SRC-labeled-dropdown__label\">\n                  Filter All Data By\n                </span>\n                <EnumFacetFilter\n                  facetValues={facetToPlot.facetValues}\n                  columnModel={\n                    data?.columnModels!.find(\n                      el => el.name === facetToPlot.columnName,\n                    )!\n                  }\n                  onChange={(facetNamesMap: Record<string, string>) => {\n                    applyMultipleChangesToValuesColumn(\n                      getLastQueryRequest(),\n                      facetToPlot,\n                      applyChangesToFacetFilter,\n                      facetNamesMap,\n                    )\n                  }}\n                  onClear={() => {\n                    applyChangesToValuesColumn(\n                      getLastQueryRequest(),\n                      facetToPlot,\n                      applyChangesToFacetFilter,\n                    )\n                  }}\n                  containerAs=\"Dropdown\"\n                  dropdownType=\"SelectBox\"\n                />\n                <Tooltip title=\"Selecting items in this dropdown will affect all facets on the Explore page.\">\n                  <InfoOutlined className=\"SRC-hand-cursor SRC-secondary-text-color\" />\n                </Tooltip>\n              </div>\n              <ChartSelectionToggle />\n            </>\n          )}\n          <div\n            className={`FacetNavPanel__body${isModalView ? '--expanded' : ''}`}\n            role=\"graphics-object\"\n          >\n            <SizeMe monitorHeight>\n              {({ size }) => (\n                <div className={getClassNameForPlotDiv(isModalView, plotType)}>\n                  <Plot\n                    key={`${facetToPlot.columnName}-${plotType}-${size.width}`}\n                    layout={layout}\n                    data={plotData?.data ?? []}\n                    style={getPlotStyle(\n                      size.width,\n                      plotType,\n                      isModalView ? 300 : 150,\n                    )}\n                    config={{ displayModeBar: false }}\n                    onClick={evt =>\n                      applyFacetFilter(\n                        evt,\n                        facetToPlot,\n                        applyChangesToGraphSlice,\n                      )\n                    }\n                  ></Plot>\n                </div>\n              )}\n            </SizeMe>\n            <FacetPlotLegend\n              labels={plotData?.labels}\n              colors={plotData?.colors}\n              isExpanded={isModalView}\n            />\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default FacetNavPanel\n","import React from 'react'\nimport { QueryContextType, useQueryContext } from '../../QueryContext'\nimport {\n  ColumnMultiValueFunctionQueryFilter,\n  ColumnSingleValueQueryFilter,\n  isColumnMultiValueFunctionQueryFilter,\n  isColumnSingleValueQueryFilter,\n  isTextMatchesQueryFilter,\n  QueryFilter,\n  TextMatchesQueryFilter,\n} from '../../../utils/synapseTypes/Table/QueryFilter'\nimport SelectionCriteriaPill, {\n  SelectionCriteriaPillProps,\n} from './SelectionCriteriaPill'\nimport {\n  FacetColumnRequest,\n  isFacetColumnRangeRequest,\n  isFacetColumnValuesRequest,\n} from '../../../utils/synapseTypes'\nimport {\n  QueryVisualizationContextType,\n  useQueryVisualizationContext,\n} from '../../QueryVisualizationWrapper'\n\nfunction getPillPropsFromColumnQueryFilter(\n  queryFilter:\n    | ColumnSingleValueQueryFilter\n    | ColumnMultiValueFunctionQueryFilter,\n  queryContext: QueryContextType,\n  queryVisualizationContext: QueryVisualizationContextType,\n): SelectionCriteriaPillProps[] {\n  // ColumnSingleValueQueryFilter and ColumnMultiValueQueryFilter both allow for a list of values\n  // We want to render 1 pill per value, so we expand\n  const columnModel = queryContext.getColumnModel(queryFilter.columnName)!\n  return queryFilter.values.map(value => {\n    let filterValue = value\n\n    if (value?.startsWith('%') && value?.endsWith('%')) {\n      // strip '%' wildcard character when using a LIKE condition\n      filterValue = filterValue.substring(1, filterValue.length - 1)\n    }\n    filterValue = queryVisualizationContext.getDisplayValue(\n      filterValue,\n      columnModel.columnType,\n    )\n    const text = `${queryFilter.columnName}: ${filterValue}`\n    return {\n      key: `queryFilter-${queryFilter.concreteType}-${queryFilter.columnName}-${value}`,\n      innerText: text,\n      tooltipText: text,\n      onRemoveFilter: () => {\n        queryContext.removeValueFromQueryFilter(queryFilter, value)\n      },\n    }\n  })\n}\n\nfunction getPillPropsFromTextMatchesQueryFilter(\n  queryFilter: TextMatchesQueryFilter,\n  queryContext: QueryContextType,\n): SelectionCriteriaPillProps {\n  return {\n    key: `queryFilter-${queryFilter.concreteType}-${queryFilter.searchExpression}`,\n    innerText: queryFilter.searchExpression,\n    tooltipText: `Text matches: \"${queryFilter.searchExpression}\"`,\n    onRemoveFilter: () => {\n      queryContext.removeQueryFilter(queryFilter)\n    },\n  }\n}\n\nfunction getPillPropsFromQueryFilter(\n  queryFilter: QueryFilter,\n  queryContext: QueryContextType,\n  queryVisualizationContext: QueryVisualizationContextType,\n): SelectionCriteriaPillProps[] {\n  if (\n    isColumnSingleValueQueryFilter(queryFilter) ||\n    isColumnMultiValueFunctionQueryFilter(queryFilter)\n  ) {\n    if (queryFilter.columnName === queryContext.lockedColumn?.columnName) {\n      return []\n    }\n    return getPillPropsFromColumnQueryFilter(\n      queryFilter,\n      queryContext,\n      queryVisualizationContext,\n    )\n  } else if (isTextMatchesQueryFilter(queryFilter)) {\n    return [getPillPropsFromTextMatchesQueryFilter(queryFilter, queryContext)]\n  } else {\n    console.log('Unknown query filter type', queryFilter.concreteType)\n    return []\n  }\n}\n\nfunction getPillPropsFromFacet(\n  selectedFacet: FacetColumnRequest,\n  queryContext: QueryContextType,\n  queryVisualizationContext: QueryVisualizationContextType,\n): SelectionCriteriaPillProps[] {\n  if (selectedFacet.columnName === queryContext.lockedColumn?.columnName) {\n    return []\n  }\n  const columnModel = queryContext.getColumnModel(selectedFacet.columnName)!\n  const { getColumnDisplayName, getDisplayValue } = queryVisualizationContext\n  if (isFacetColumnValuesRequest(selectedFacet)) {\n    return selectedFacet.facetValues.map(facetValue => {\n      const innerText = getDisplayValue(facetValue, columnModel.columnType)\n      return {\n        key: `facet-${selectedFacet.concreteType}-${selectedFacet.columnName}-${facetValue}`,\n        innerText: innerText,\n        tooltipText: `${getColumnDisplayName(\n          selectedFacet.columnName,\n        )}: ${innerText}`,\n        onRemoveFilter: () => {\n          queryContext.removeValueFromSelectedFacet(selectedFacet, facetValue)\n        },\n      }\n    })\n  } else if (isFacetColumnRangeRequest(selectedFacet)) {\n    const innerText = `${selectedFacet.min} - ${selectedFacet.max}`\n    return [\n      {\n        key: `facet-${selectedFacet.concreteType}-${selectedFacet.columnName}-${selectedFacet.min}-${selectedFacet.max}`,\n        innerText: innerText,\n        tooltipText: `${getColumnDisplayName(\n          selectedFacet.columnName,\n        )}: ${innerText}`,\n        onRemoveFilter: () => {\n          queryContext.removeSelectedFacet(selectedFacet)\n        },\n      },\n    ]\n  } else {\n    console.log(\n      'Unknown facet type',\n      (selectedFacet as unknown as FacetColumnRequest).concreteType,\n    )\n    return []\n  }\n}\n\nfunction SelectionCriteriaPills() {\n  const queryContext = useQueryContext()\n  const queryVisualizationContext = useQueryVisualizationContext()\n  const { getLastQueryRequest } = queryContext\n  const lastQueryRequest = getLastQueryRequest()\n\n  const queryFilterPillProps = (\n    lastQueryRequest.query?.additionalFilters ?? []\n  ).flatMap(qf =>\n    getPillPropsFromQueryFilter(qf, queryContext, queryVisualizationContext),\n  )\n\n  const facetPillProps = (lastQueryRequest.query.selectedFacets ?? []).flatMap(\n    facet =>\n      getPillPropsFromFacet(facet, queryContext, queryVisualizationContext),\n  )\n\n  const allPills = [...queryFilterPillProps, ...facetPillProps]\n\n  return (\n    <>\n      {allPills.map(pillProps => {\n        // Encode the key because the facet may include an illegal character\n        const key = encodeURIComponent(pillProps.key)\n        return <SelectionCriteriaPill {...pillProps} key={key} />\n      })}\n    </>\n  )\n}\n\nexport default SelectionCriteriaPills\n","import React from 'react'\nimport { SkeletonInlineBlock } from '../assets/skeletons/SkeletonInlineBlock'\nimport { FacetColumnRequest } from '../utils/synapseTypes'\nimport { useQueryVisualizationContext } from './QueryVisualizationWrapper'\nimport {\n  QUERY_FILTERS_COLLAPSED_CSS,\n  QUERY_FILTERS_EXPANDED_CSS,\n} from './QueryWrapper'\nimport { useQueryContext } from './QueryContext'\nimport IconSvg from './IconSvg'\nimport SelectionCriteriaPills from './widgets/facet-nav/SelectionCriteriaPills'\n\nexport type TotalQueryResultsProps = {\n  style?: React.CSSProperties\n  frontText: string\n  endText?: string\n  applyChanges?: (newFacets: FacetColumnRequest[]) => void\n  hideIfUnfiltered?: boolean\n}\n\nfunction TotalQueryResults(props: TotalQueryResultsProps) {\n  const { style, frontText, endText = '', hideIfUnfiltered = false } = props\n  const { data, isLoadingNewBundle, resetQuery, error, hasResettableFilters } =\n    useQueryContext()\n\n  const { topLevelControlsState, unitDescription } =\n    useQueryVisualizationContext()\n\n  const total = data?.queryCount\n\n  const showFacetFilter = topLevelControlsState?.showFacetFilter\n\n  const showClearAll = hasResettableFilters\n  if (error) {\n    return <></>\n  }\n  return (\n    <div\n      className={`TotalQueryResults ${\n        showFacetFilter\n          ? QUERY_FILTERS_EXPANDED_CSS\n          : QUERY_FILTERS_COLLAPSED_CSS\n      } ${hasResettableFilters ? 'hasFilters' : ''}`}\n      style={style}\n    >\n      {isLoadingNewBundle ? (\n        <SkeletonInlineBlock width={100} />\n      ) : (\n        <>\n          {(hasResettableFilters || !hideIfUnfiltered) && (\n            <div className=\"TotalQueryResults__topbar\">\n              <span className=\"SRC-boldText\">\n                {frontText} {total?.toLocaleString()} {unitDescription}{' '}\n                {endText}\n              </span>\n              {showClearAll && (\n                <a\n                  onClick={resetQuery}\n                  className=\"TotalQueryResults__topbar__clearall\"\n                >\n                  <IconSvg icon=\"deleteSweep\" />\n                  Clear all filters\n                </a>\n              )}\n            </div>\n          )}\n          <div className=\"TotalQueryResults__selections\">\n            <SelectionCriteriaPills />\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default TotalQueryResults\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { isSingleNotSetValue } from '../../../utils/functions/queryUtils'\nimport {\n  FacetColumnRequest,\n  FacetColumnResult,\n  FacetColumnResultValueCount,\n  FacetColumnResultValues,\n  QueryResultBundle,\n} from '../../../utils/synapseTypes'\nimport { useQueryVisualizationContext } from '../../QueryVisualizationWrapper'\nimport {\n  QUERY_FILTERS_COLLAPSED_CSS,\n  QUERY_FILTERS_EXPANDED_CSS,\n} from '../../QueryWrapper'\nimport { useQueryContext } from '../../QueryContext'\nimport { applyChangesToValuesColumn } from '../query-filter/FacetFilterControls'\nimport FacetNavPanel, { PlotType } from './FacetNavPanel'\nimport TotalQueryResults from '../../TotalQueryResults'\n\n/*\nTODO: This component has a few bugs when its props are updated with new data, this should be handled\nat some point. As of the moment the portal doesn't have a case when the props will update,\nit will always mount this component.\n*/\n\nexport type FacetNavProps = {\n  facetsToPlot?: string[]\n}\n\ntype UiFacetState = {\n  name: string\n  isHidden: boolean\n  plotType: PlotType\n  index?: number\n}\n\nconst DEFAULT_VISIBLE_FACETS = 2\n\ntype ShowMoreState = 'MORE' | 'LESS' | 'NONE'\n\nexport function getFacets(\n  data: QueryResultBundle | undefined,\n  facetsToPlot?: string[],\n): FacetColumnResult[] {\n  const result =\n    data?.facets?.filter(item => {\n      const isFacetToPlot =\n        item.facetType === 'enumeration' &&\n        (!facetsToPlot?.length || facetsToPlot.indexOf(item.columnName) > -1)\n      // PORTALS-1993: only plot if the facet has count data\n      return (\n        isFacetToPlot &&\n        item.facetValues.length > 0 &&\n        !isSingleNotSetValue(item)\n      )\n    }) ?? []\n  return result\n}\n\nconst FacetNav: React.FunctionComponent<FacetNavProps> = ({\n  facetsToPlot,\n}: FacetNavProps): JSX.Element => {\n  const {\n    data,\n    getLastQueryRequest,\n    isLoadingNewBundle,\n    executeQueryRequest,\n    error,\n    asyncJobStatus,\n  } = useQueryContext()\n\n  const { topLevelControlsState } = useQueryVisualizationContext()\n  const [facetUiStateArray, setFacetUiStateArray] = useState<UiFacetState[]>([])\n  const [isFirstTime, setIsFirstTime] = useState(true)\n  const { showFacetVisualization, showFacetFilter } = topLevelControlsState\n\n  const lastQueryRequest = getLastQueryRequest()\n\n  useEffect(() => {\n    const result = getFacets(data, facetsToPlot)\n    if (result.length === 0) {\n      return\n    }\n    if (isFirstTime) {\n      setFacetUiStateArray(\n        result.map((item, index) => ({\n          name: item.columnName,\n          isHidden: index >= DEFAULT_VISIBLE_FACETS,\n          plotType: 'PIE',\n        })),\n      )\n      setIsFirstTime(false)\n    }\n  }, [data, isFirstTime, facetsToPlot])\n\n  // when 'show more/less' is clicked\n  const onShowMoreClick = (shouldShowMore: boolean) => {\n    setFacetUiStateArray(facetUiStateArray => {\n      return facetUiStateArray.map((item, index) => {\n        if (shouldShowMore) {\n          // show everything\n          return { ...item, isHidden: false }\n        }\n        // otherwise hide everything except the first three items\n        return { ...item, isHidden: index >= DEFAULT_VISIBLE_FACETS }\n      })\n    })\n  }\n\n  // what needs to happen after the filters are adjusted from the plot\n  const applyChangesFromQueryFilter = (facets: FacetColumnRequest[]) => {\n    lastQueryRequest.query.selectedFacets = facets\n    lastQueryRequest.query.offset = 0\n    executeQueryRequest(lastQueryRequest)\n  }\n\n  // don't show hidden facets\n  const isFacetHiddenInGrid = (columnName: string) => {\n    const itemHidden = facetUiStateArray.find(\n      item => item.name === columnName && item.isHidden === true,\n    )\n    const result = itemHidden !== undefined\n    return result\n  }\n\n  const showMoreButtonState = useMemo<ShowMoreState>(() => {\n    if (\n      // if at least one item is hidden\n      facetUiStateArray.find(item => item.isHidden === true)\n    ) {\n      return 'MORE'\n    } else if (facetUiStateArray.length <= DEFAULT_VISIBLE_FACETS) {\n      return 'NONE'\n    } else {\n      return 'LESS'\n    }\n  }, [facetUiStateArray])\n\n  // hides facet graph\n  const hideFacetInGrid = (columnName: string) => {\n    setUiPropertyForFacet(columnName, 'isHidden', true)\n  }\n\n  const setPlotType = (columnName: string, plotType: PlotType) => {\n    setUiPropertyForFacet(columnName, 'plotType', plotType)\n  }\n\n  const getPlotType = (columnName: string): PlotType => {\n    const plotType = facetUiStateArray.find(\n      item => item.name === columnName,\n    )?.plotType\n    return plotType ?? 'PIE'\n  }\n\n  const setUiPropertyForFacet = (\n    columnName: string,\n    propName: keyof UiFacetState,\n    value: boolean | PlotType, // 'the possible values of the above type' (currently can't be specified in TS using symbols)\n  ) => {\n    setFacetUiStateArray(facetUiStateArray =>\n      facetUiStateArray.map(item =>\n        item.name === columnName ? { ...item, [propName]: value } : item,\n      ),\n    )\n  }\n\n  const facets = getFacets(data, facetsToPlot)\n\n  const colorTracker = getFacets(data, facetsToPlot).map((el, index) => {\n    return {\n      columnName: el.columnName,\n      colorIndex: index,\n    }\n  })\n  const hasFacetsOrFilters =\n    (lastQueryRequest?.query.selectedFacets !== undefined &&\n      lastQueryRequest.query.selectedFacets.length > 0) ||\n    (lastQueryRequest?.query.additionalFilters !== undefined &&\n      lastQueryRequest?.query.additionalFilters.length > 0)\n  if (error) {\n    return <></>\n  } else if (!data && isLoadingNewBundle) {\n    return (\n      <div className=\"SRC-loadingContainer SRC-centerContentColumn\">\n        {asyncJobStatus?.progressMessage && (\n          <div>\n            <span className=\"spinner\" />\n            {asyncJobStatus.progressMessage}\n          </div>\n        )}\n      </div>\n    )\n  } else {\n    return (\n      <>\n        <TotalQueryResults\n          frontText={''}\n          endText={hasFacetsOrFilters ? 'filtered by' : ''}\n          hideIfUnfiltered={true}\n        />\n        {facets.length > 0 && (\n          <div\n            className={`FacetNav ${showFacetVisualization ? '' : 'hidden'} ${\n              showFacetFilter\n                ? QUERY_FILTERS_EXPANDED_CSS\n                : QUERY_FILTERS_COLLAPSED_CSS\n            } ${showMoreButtonState === 'LESS' ? 'less' : ''}`}\n          >\n            <div className=\"FacetNav__row\" role=\"list\">\n              {facets.map(facet => (\n                <div\n                  className=\"col-sm-12 col-md-4\"\n                  style={{\n                    display: isFacetHiddenInGrid(facet.columnName)\n                      ? 'none'\n                      : 'block',\n                  }}\n                  key={facet.columnName}\n                >\n                  <FacetNavPanel\n                    index={\n                      colorTracker.find(\n                        el => el.columnName === facet.columnName,\n                      )?.colorIndex!\n                    }\n                    onHide={() => hideFacetInGrid(facet.columnName)}\n                    plotType={getPlotType(facet.columnName)}\n                    onSetPlotType={(plotType: PlotType) =>\n                      setPlotType(facet.columnName, plotType)\n                    }\n                    facetToPlot={facet as FacetColumnResultValues}\n                    /*\n                      TODO: Simplify the nested functions below, all the logic should be contained\n                      in the EnumFacetFilter component.\n                    */\n                    applyChangesToFacetFilter={applyChangesFromQueryFilter}\n                    applyChangesToGraphSlice={(\n                      facet: FacetColumnResultValues,\n                      value: FacetColumnResultValueCount | undefined,\n                      isSelected: boolean,\n                    ) =>\n                      applyChangesToValuesColumn(\n                        lastQueryRequest,\n                        facet,\n                        applyChangesFromQueryFilter,\n                        value?.value,\n                        isSelected,\n                      )\n                    }\n                    isModalView={false}\n                  />\n                </div>\n              ))}\n            </div>\n            {showMoreButtonState !== 'NONE' && (\n              <div className=\"FacetNav__showMoreContainer bootstrap-4-backport\">\n                <Button\n                  variant=\"secondary\"\n                  className=\"btn-wide FacetNav__showMore\"\n                  onClick={() =>\n                    onShowMoreClick(showMoreButtonState === 'MORE')\n                  }\n                >\n                  {showMoreButtonState === 'LESS'\n                    ? 'Hide Charts'\n                    : 'View All Charts'}\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n      </>\n    )\n  }\n}\n\nexport default FacetNav\n"],"names":["FACET_COLUMN_VALUES_REQUEST_CONCRETE_TYPE_VALUE","FACET_COLUMN_RANGE_REQUEST_CONCRETE_TYPE_VALUE","isFacetColumnValuesRequest","isTypeViaConcreteTypeFactory","isFacetColumnRangeRequest","SkeletonInlineBlock","props","jsx","Skeleton","QueryContext","createContext","QueryContextProvider","children","queryContext","useQueryContext","context","useContext","usePaginatedQueryContext","useInfiniteQueryContext","QueryContextConsumer","getComponentSearchHashId","componentName","componentIndex","patchSearchString","componentSearchHashId","stringifiedQuery","searchString","searchFragment","item","getSearchParamValueFromUrl","getSearchParamValue","updateUrlWithNewSearchParam","location","newURL","getQueryRequestFromLink","searchParamValue","initQueryRequest","query","SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS","SynapseConstants.BUNDLE_MASK_QUERY_FACETS","SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","SynapseConstants.BUNDLE_MASK_QUERY_COUNT","parseEntityIdFromSqlStatement","useImmutableTableQuery","options","shouldDeepLink","onQueryChange","lastQueryRequest","setLastQueryRequest","useState","useEffect","DeepLinkingUtils.getQueryRequestFromLink","getLastQueryRequest","useCallback","cloneDeep","getInitQueryRequest","setQuery","queryRequest","newQueryRequest","clonedQueryRequest","clonedQueryJson","encodedQuery","DeepLinkingUtils.updateUrlWithNewSearchParam","entityId","versionNumber","useMemo","parseEntityIdAndVersionFromSqlStatement","pageSize","DEFAULT_PAGE_SIZE","currentPage","setPageSize","currentQuery","goToPage","pageNumber","resetQuery","useDeepCompareEffect","removeSelectedFacet","facetColumnRequest","facet","isEqual","removeValueFromSelectedFacet","value","v","removeQueryFilter","queryFilter","qf","removeValueFromQueryFilter","isColumnSingleValueQueryFilter","isColumnMultiValueFunctionQueryFilter","QUERY_FILTERS_EXPANDED_CSS","QUERY_FILTERS_COLLAPSED_CSS","QueryWrapper","onQueryResultBundleChange","lockedColumn","currentAsyncStatus","setCurrentAsyncStatus","asyncJobStatus","queryIsLoading","error","newQueryIsFetching","useGetQueryResultBundleWithAsyncStatus","data","isLoadingNewBundle","entity","useGetEntity","useDeepCompareEffectNoCheck","isFacetsAvailable","isFacetAvailable","dataWithLockedColumnFacetRemoved","removeLockedColumnFromFacetData","hasResettableFilters","request","hasResettableFiltersUtil","getColumnModel","columnName","_a","cm","NoContentAvailable","jsxs","Fragment","NoContentPlaceholderType","SearchResultsNotFound","NoSearchResults","ThisTableIsEmpty","NoData","getStoredEntityHeaders","SynapseConstants.ENTITY_HEADER_STORAGE_KEY","getStoredUserProfiles","SynapseConstants.USER_PROFILE_STORAGE_KEY","getStoredEvaluation","SynapseConstants.EVALUATIONS_STORAGE_KEY","getDisplayValueForEntityColumn","getDisplayValueEvaluationIdColumn","facetValue","evaluation","getDisplayValueUserIdColumn","userProfile","getDisplayValue","columnType","SynapseConstants.VALUE_NOT_SET","SynapseConstants.FRIENDLY_VALUE_NOT_SET","ColumnTypeEnum","QueryVisualizationContext","QueryVisualizationContextProvider","queryVisualizationContext","useQueryVisualizationContext","QueryVisualizationContextConsumer","QueryVisualizationWrapper","noContentPlaceholderType","columnAliases","topLevelControlsState","setTopLevelControlsState","state","setSelectedRowIndices","visibleColumns","setVisibleColumns","selectedRowIndices","selectColumns","useDeepCompareMemoize","el","getColumnDisplayName","forceDisplayOriginalColumnName","unCamelCase","NoContentPlaceholder","QueryWrapperErrorBanner","ErrorBanner","Checkbox","propsChecked","hideLabel","isSelectAll","disabled","checked","setChecked","uniqueId","_uniqueId","handleCheckboxChange","event","className","IconPlus","IconMinus","FacetFilterHeader","label","isCollapsed","onClick","valueToId","valueToLabel","profiles","entityHeaders","evaluations","displayValue","profile","profile2","eh","eh2","evaluation2","formatFacetValuesForDisplay","facetValues","isShowAll","visibleItemsCount","facets","a","b","EnumFacetFilter","columnModel","onClear","onChange","containerAs","dropdownType","collapsed","setIsShowAll","setIsCollapsed","isShowDropdown","setIsShowDropdown","showSearch","setShowSearch","searchTerm","setSearchText","filteredSet","setFilteredSet","selectionDelay","textInput","React","selectedValuesMap","timer","allIsSelected","userIds","userGroupHeaders","useGetInfoFromIds","entityIds","evaluationIds","handleTextInputFilterEvent","e","inputValue","obj","filtered","isDropdown","content","IconSvg","index","EnumFacetFilterOption","isChecked","onToggle","Dropdown","ElementWithTooltip","isCollapsed2","Collapse","id","count","initialIsSelected","isSelected","setIsSelected","newValue","FacetChip","Range","errorText","setError","values","setValues","dayjs","isValid","min","max","type","handleAppyChanges","values2","callBackFn","target","RangeFacetFilter","facetResult","FRIENDLY_VALUE_NOT_SET","columnMin","columnMax","selectedMin","selectedMax","hasAnyValue","rangeType","getRadioValue","isAnyValue","VALUE_NOT_SET","handleRadioGroupChange","radioValue2","onChangeCallback","setRadioValue","radioValue","RadioGroup","RangeSlider","convertFacetToFacetColumnValuesRequest","facet2","convertFacetColumnRangeRequest","result","patchRequestFacets","changedFacet","lastRequest","selections","changedFacetIndex","isEmptyValuesFacet","applyChangesToValuesColumn","onChangeFn","facetName","applyMultipleChangesToValuesColumn","facetNameMap","facetNames","applyChangesToRangeColumn","getDefaultShownFacetFilters","selectedFacets","columnsWithExistingFilters","fcr","f","FacetFilterSkeleton","facetFilterFormRow","Stack","Box","FacetFilterControlsSkeleton","showFacetFilter","FacetFilterControls","availableFacets","executeQueryRequest","isSingleNotSetValue","facetFiltersShown","setFacetFiltersShown","columnModels","applyChanges","facets2","toggleShowFacetFilter","newFacetFilterShown","model","facetNamesMap","FacetFilterControlsOrLoader","Plot","createPlotlyComponent","Plotly","maxLabelLength","maxLegendLength","layout","truncate","str","n","trimmedStr","extractPlotDataArray","facetToPlot","plotType","accessToken","colorPalette","getColorPalette","getLabels","columnType2","accessToken2","map","filteredValues","val","response","SynapseClient.getEntityHeadersByIds","header","SynapseClient.getGroupHeadersBatch","getLabel","truncateFlag","labelMap","labels","text","selectionAwareColorPalette","index2","singleChartData","_b","applyFacetFilter","allFacetValues","callbackApplyFn","plotPointData","facetValueClickedValue","facetValueClicked","getPlotStyle","parentWidth","maxHeight","width","height","FacetPlotLegend","colors","isExpanded","numLegendItems","labelDisplay","Typography","getClassNameForPlotDiv","FacetNavPanel","onHide","isModalView","applyChangesToFacetFilter","applyChangesToGraphSlice","onSetPlotType","useSynapseContext","showModal","setShowModal","plotTitle","getColumnType","plotData","useQuery","ChartSelectionToggle","loadingScreen","Modal","Button","Tooltip","InfoOutlined","SizeMe","size","evt","getPillPropsFromColumnQueryFilter","filterValue","getPillPropsFromTextMatchesQueryFilter","getPillPropsFromQueryFilter","isTextMatchesQueryFilter","getPillPropsFromFacet","selectedFacet","innerText","SelectionCriteriaPills","queryFilterPillProps","facetPillProps","allPills","pillProps","key","createElement","SelectionCriteriaPill","TotalQueryResults","style","frontText","endText","hideIfUnfiltered","unitDescription","total","showClearAll","DEFAULT_VISIBLE_FACETS","getFacets","facetsToPlot","FacetNav","facetUiStateArray","setFacetUiStateArray","isFirstTime","setIsFirstTime","showFacetVisualization","onShowMoreClick","shouldShowMore","facetUiStateArray2","applyChangesFromQueryFilter","isFacetHiddenInGrid","showMoreButtonState","hideFacetInGrid","setUiPropertyForFacet","setPlotType","getPlotType","propName","colorTracker","hasFacetsOrFilters"],"mappings":"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"}