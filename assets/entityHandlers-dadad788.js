import{a as m}from"./index-9b6e88c5.js";import{a0 as L,a1 as O,a2 as S,a3 as B,a4 as V,a5 as h,a6 as U,a7 as Y,a8 as P}from"./EntityTypeUtils-80a22eb6.js";import{g as Z,B as H}from"./getEndpoint-ac94413e.js";import{M as y,a as k}from"./mock_user_profile-2a6b656b.js";import{m as u}from"./mock_file_handle-36531fe4.js";import{m as N,b as K}from"./userProfileHandlers-7b86a0ea.js";import{U as R}from"./UploadDestination-5ff3844f.js";const f="syn234",g="A Mocked Dataset",I={id:f,parentId:u.id,name:g,concreteType:"org.sagebionetworks.repo.model.table.Dataset",createdBy:y.toString(),modifiedBy:k.toString(),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",versionNumber:3,versionLabel:"in progress",versionComment:"in progress",isLatestVersion:!0,etag:"00000000-0000-0000-0000-000000000000",items:[],columnIds:[],isSearchEnabled:!1},F={id:f,type:"org.sagebionetworks.repo.model.table.Dataset",name:g,benefactorId:parseInt(u.id),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",createdBy:y.toString(),modifiedBy:y.toString(),versionNumber:3,versionLabel:"in progress",isLatestVersion:!0},$={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:u.name,id:u.id,type:"org.sagebionetworks.repo.model.Project"},{name:g,id:f,type:"org.sagebionetworks.repo.model.FileEntity"}]},J={1:{...I,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1},2:{...I,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1}},z=[{id:f,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1,modifiedBy:y.toString(),modifiedByPrincipalId:y.toString(),modifiedOn:"2022-03-22T18:50:22.336Z"},{id:f,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1,modifiedBy:y.toString(),modifiedByPrincipalId:y.toString(),modifiedOn:"2022-03-22T18:47:34.797Z"}],q={entity:I,entityType:L.DATASET,path:$,permissions:{canView:!0,canEdit:!0,canMove:!0,canAddChild:!0,canCertifiedUserEdit:!0,canCertifiedUserAddChild:!0,isCertifiedUser:!0,canChangePermissions:!0,canChangeSettings:!0,canDelete:!0,canDownload:!0,canUpload:!0,canEnableInheritance:!0,ownerPrincipalId:3350396,canPublicRead:!0,canModerate:!0,isCertificationRequired:!0,isEntityOpenData:!1}},_={id:f,name:g,entity:I,entityHeader:F,path:$,bundle:q,versions:J,versionInfo:z},b="syn654651",T="A Mocked Dataset Collection",G={id:b,parentId:u.id,name:T,concreteType:"org.sagebionetworks.repo.model.table.DatasetCollection",createdBy:y.toString(),modifiedBy:y.toString(),etag:"00000000-0000-0000-0000-000000000000",items:[{entityId:_.id,versionNumber:1}],columnIds:[],isSearchEnabled:!1},Q={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:u.name,id:u.id,type:"org.sagebionetworks.repo.model.Project"},{name:T,id:b,type:"org.sagebionetworks.repo.model.FileEntity"}]},W={id:b,name:T,entity:G,path:Q},v="syn345",w="my table name",C=u.id,l={id:v,versionNumber:1,versionLabel:"in progress",versionComment:"in progress",parentId:C,name:w,concreteType:"org.sagebionetworks.repo.model.table.TableEntity",createdBy:y.toString(),createdOn:"2022-02-03T12:44:35.457Z",modifiedOn:"2022-05-14T17:10:36.915Z",modifiedBy:k.toString(),etag:"00000000-0000-0000-0000-000000000000",columnIds:[],isSearchEnabled:!0,isLatestVersion:!0},X={name:l.name,id:v,type:"org.sagebionetworks.repo.model.table.TableEntity",versionNumber:l.versionNumber,versionLabel:l.versionLabel,benefactorId:C,createdOn:l.createdOn,modifiedOn:l.modifiedOn,createdBy:l.createdBy,modifiedBy:l.modifiedBy,isLatestVersion:l.isLatestVersion},x={id:v,name:w,entity:l,entityHeader:X},p=[N,u,_,W,x];var A=(a=>(a.entity="entity",a))(A||{}),M=(a=>(a.entity="entity",a))(M||{});const D=N.entity,E={jsonSchemaVersionInfo:{organizationId:"1",organizationName:"org.sagebionetworks",schemaId:"1",schemaName:"Mock Schema",versionId:"555",$id:"org.sagebionetworks-MockSchema",jsonSHA256Hex:"5f2cd73c0fe25b30cbee2f213b6d633951f1873ca1911f494d4654f702a69e95",createdOn:"2021-04-01T08:00:00.000Z",createdBy:"1"},objectId:3333,objectType:A.entity,createdOn:"2021-04-01T08:00:00.000Z",createdBy:"1"};D.id,M.entity,D.etag,`${E.jsonSchemaVersionInfo.$id}`;`${E.jsonSchemaVersionInfo.$id}`;const ae=a=>[m.rest.post(`${a}${O}`,async(n,i,e)=>{let o=404,s={reason:`Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(n.body)}`};if(n.body){const t=n.body,r=p.find(d=>d.name===t.name);r?(s=r.entity,o=200):t.name===K&&(s.reason="Invalid project name",o=403)}return i(e.status(o),e.json(s))}),m.rest.get(`${a}${S(":entityId")}`,async(n,i,e)=>{let o=404,s={reason:`Mock Service worker could not find a mock entity with ID ${n.params.entityId}`};const t=p.find(r=>r.id===n.params.entityId);return t&&(s=t.entity,o=200),i(e.status(o),e.json(s))}),m.rest.get(`${a}${B(":entityId")}`,async(n,i,e)=>{let o=404,s={reason:`Mock Service worker could not find mock entity versions for ID ${n.params.entityId}`};const t=p.find(r=>r.id===n.params.entityId);return t&&t.versionInfo&&(s={results:t.versionInfo},o=200),i(e.status(o),e.json(s))}),m.rest.get(`${a}${V(":entityId",":versionNumber")}`,async(n,i,e)=>{let o=404;const s=n.params.entityId,t=n.params.versionNumber.toString(),r=parseInt(t);let d={reason:`Mock Service worker could not find a mock versioned entity with ID ${s}.${t}`};const c=p.find(j=>j.id===n.params.entityId);return c&&c.versions&&c.versions[r]&&(d=c.versions[r],o=200),i(e.status(o),e.json(d))}),m.rest.post(`${a}${h(":entityId")}`,async(n,i,e)=>{let o=404,s={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=p.find(r=>r.id===n.params.entityId);return t!=null&&t.bundle&&(s=t.bundle,o=200),i(e.status(o),e.json(s))}),m.rest.post(`${a}${h(":entityId",":versionNumber")}`,async(n,i,e)=>{const o=n.params.entityId,s=parseInt(n.params.versionNumber);let t=404,r={reason:`Mock Service worker could not find a mock entity bundle with ID ${o}`};const d=p.find(c=>c.id===o);if(d){const c=d.bundle;d.versions&&d.versions[s]?r={...c,entity:d.versions[s]}:r=c,t=200}return i(e.status(t),e.json(r))}),m.rest.get(`${a}${U(":entityId")}`,async(n,i,e)=>i(e.status(200),e.json(E))),m.rest.get(`${a}${Y(":entityId")}`,async(n,i,e)=>{let o=404,s={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=p.find(r=>r.id===n.params.entityId);return t!=null&&t.json&&(s=t.json,o=200),i(e.status(o),e.json(s))}),m.rest.post(`${a}${P}`,async(n,i,e)=>{let o=404,s={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=n.body,r=p.filter(d=>t.references.find(c=>c.targetId===d.id)).map(d=>d.entityHeader).filter(d=>!!d);return r&&(s={results:r},o=200),i(e.status(o),e.json(s))}),m.rest.get(`${a}${S(":entityId")}/path`,async(n,i,e)=>{let o=404,s={reason:`Mock Service worker could not find a mock entity path using ID ${n.params.entityId}`};const t=p.find(r=>n.params.entityId===r.id);return t&&t.path&&(s=t.path,o=200),i(e.status(o),e.json(s))}),m.rest.get(`${Z(H.REPO_ENDPOINT)}/file/v1/entity/:id/uploadDestination`,async(n,i,e)=>{const o={banner:"",storageLocationId:1,uploadType:R.S3,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"};return i(e.status(200),e.json(o))})];export{ae as g};
//# sourceMappingURL=entityHandlers-dadad788.js.map
