{"version":3,"file":"DiscussionThread-94a9d434.js","sources":["../../src/components/Forum/DiscussionReply.tsx","../../src/components/Forum/DiscussionThread.tsx"],"sourcesContent":["import dayjs from 'dayjs'\nimport React, { useState } from 'react'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport {\n  DiscussionReplyBundle,\n  ObjectType,\n} from '@sage-bionetworks/synapse-types'\nimport MarkdownSynapse from '../Markdown/MarkdownSynapse'\nimport IconSvg from '../IconSvg/IconSvg'\nimport { ForumThreadEditor } from './ForumThreadEditor'\nimport {\n  useGetCurrentUserProfile,\n  useGetEntityBundle,\n} from '../../synapse-queries'\nimport {\n  useDeleteReply,\n  useGetReply,\n} from '../../synapse-queries/forum/useReply'\nimport { displayToast } from '../ToastMessage/ToastMessage'\nimport WarningDialog from '../SynapseForm/WarningDialog'\nimport { SkeletonTable } from '../Skeleton/SkeletonTable'\nimport { UserBadge } from '../UserCard/UserBadge'\n\nexport type DiscussionReplyProps = {\n  reply: DiscussionReplyBundle\n  onClickLink?: () => void\n}\n\nexport const DiscussionReply: React.FC<DiscussionReplyProps> = ({\n  reply,\n  onClickLink = () => alert('This functionality has not been implemented yet'),\n}) => {\n  const [showReplyModal, setShowReplyModal] = useState(false)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const { data: currentUserProfile } = useGetCurrentUserProfile()\n  const { data: entityBundle } = useGetEntityBundle(reply.projectId)\n  const { data: message, isLoading } = useGetReply(reply)\n\n  const { mutate: deleteReply } = useDeleteReply({\n    onSuccess: () => {\n      setShowDeleteModal(false)\n      displayToast('A reply has been deleted.', 'info')\n    },\n  })\n\n  const isCurrentUserAuthor = reply.createdBy == currentUserProfile?.ownerId\n\n  return (\n    <div className=\"reply-container\">\n      {isLoading ? (\n        <SkeletonTable numCols={1} numRows={4} />\n      ) : (\n        <>\n          {message && (\n            <>\n              <div>\n                <UserBadge\n                  userId={reply.createdBy}\n                  withAvatar={true}\n                  avatarSize=\"MEDIUM\"\n                  showCardOnHover={true}\n                />\n                <div className=\"message-body\">\n                  <MarkdownSynapse\n                    markdown={message}\n                    objectType={ObjectType.REPLY}\n                  />\n                  <span>\n                    posted {formatDate(dayjs(reply.createdOn), 'M/D/YYYY')}\n                  </span>\n                  <div style={{ float: 'right' }}>\n                    <button onClick={() => onClickLink()}>\n                      <IconSvg icon=\"link\" />\n                    </button>\n                    {isCurrentUserAuthor && (\n                      <button onClick={() => setShowReplyModal(true)}>\n                        <IconSvg icon=\"edit\" />\n                      </button>\n                    )}\n                    {entityBundle?.permissions.canModerate && (\n                      <button onClick={() => setShowDeleteModal(true)}>\n                        <IconSvg icon=\"delete\" />\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <ForumThreadEditor\n                isReply={true}\n                initialText={message}\n                onClose={() => setShowReplyModal(false)}\n                id={reply.id}\n                isDialog={true}\n                openDialog={showReplyModal}\n              />\n              <WarningDialog\n                open={showDeleteModal}\n                title=\"Confirm Deletion\"\n                content=\"Are you sure you want to delete this reply?\"\n                onCancel={() => {\n                  setShowDeleteModal(false)\n                }}\n                onConfirm={() =>\n                  deleteReply({\n                    forumId: reply.forumId,\n                    threadId: reply.threadId,\n                    replyId: reply.id,\n                  })\n                }\n                confirmButtonColor=\"error\"\n                confirmButtonText=\"Delete\"\n              />\n            </>\n          )}\n        </>\n      )}\n    </div>\n  )\n}\n","import dayjs from 'dayjs'\nimport React, { useState } from 'react'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport { useGetRepliesInfinite } from '../../synapse-queries/forum/useReply'\nimport {\n  useDeleteThread,\n  useGetThread,\n  useRestoreThread,\n} from '../../synapse-queries/forum/useThread'\nimport { SRC_SIGN_IN_CLASS } from '../../utils/SynapseConstants'\nimport {\n  ALL_ENTITY_BUNDLE_FIELDS,\n  ObjectType,\n  SubscriptionObjectType,\n} from '@sage-bionetworks/synapse-types'\nimport { displayToast } from '../ToastMessage/ToastMessage'\nimport { DiscussionReply } from './DiscussionReply'\nimport { FormControl } from 'react-bootstrap'\nimport { Button, Typography } from '@mui/material'\nimport IconSvg from '../IconSvg/IconSvg'\nimport MarkdownSynapse from '../Markdown/MarkdownSynapse'\nimport { useSubscription } from '../../synapse-queries/subscription/useSubscription'\nimport {\n  useGetCurrentUserProfile,\n  useGetEntityBundle,\n} from '../../synapse-queries'\nimport { ForumThreadEditor } from './ForumThreadEditor'\nimport WarningDialog from '../SynapseForm/WarningDialog'\nimport { SubscribersModal } from './SubscribersModal'\nimport { ConfirmationDialog } from '../ConfirmationDialog/ConfirmationDialog'\nimport { UserBadge } from '../UserCard/UserBadge'\n\nexport type DiscussionThreadProps = {\n  threadId: string\n  limit: number\n}\n\nconst FOLLOWING_TEXT = 'You are following this topic. Click to stop following.'\nconst UNFOLLOWING_TEXT = 'You are not following this topic. Click to follow.'\nconst SIGN_IN_TEXT = 'You will need to sign in for access to that resource'\nconst INPUT_PLACEHOLDER = 'Write a reply...'\n\nexport function DiscussionThread(props: DiscussionThreadProps) {\n  const { threadId, limit } = props\n\n  const [orderByDatePosted, setOrderByDatePosted] = useState(true)\n  const [showThreadModal, setShowThreadModal] = useState(false)\n  const [showReplyEditor1, setShowReplyEditor1] = useState(false)\n  const [showReplyEditor2, setShowReplyEditor2] = useState(false)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const [showSignInModal, setShowSignInModal] = useState(false)\n  const [showRestoreModal, setShowRestoreModal] = useState(false)\n  const [showSubscriberModal, setShowSubscriberModal] = useState(false)\n\n  const { threadData, threadBody, togglePin } = useGetThread(threadId)\n  const { data: currentUserProfile } = useGetCurrentUserProfile()\n  const { data: entityBundle } = useGetEntityBundle(\n    threadData?.projectId ?? '',\n    undefined,\n    ALL_ENTITY_BUNDLE_FIELDS,\n    {\n      enabled: !!threadData,\n    },\n  )\n\n  const { subscription, toggleSubscribed, isLoading } = useSubscription(\n    threadId,\n    SubscriptionObjectType.THREAD,\n  )\n  const { mutate: deleteThread } = useDeleteThread({\n    onSuccess: () => {\n      setShowDeleteModal(false)\n      displayToast('A thread has been deleted.', 'info')\n    },\n  })\n  const { mutate: restoreThread } = useRestoreThread({\n    onSuccess: () => {\n      setShowRestoreModal(false)\n      displayToast('A thread has been restored.', 'info')\n    },\n  })\n\n  const isCurrentUserAuthor =\n    threadData?.createdBy == currentUserProfile?.ownerId\n\n  function handleFollowBtn() {\n    if (currentUserProfile?.userName == 'anonymous') {\n      setShowSignInModal(true)\n    } else {\n      try {\n        toggleSubscribed()\n      } catch (err: any) {\n        displayToast(err.reason as string, 'danger')\n      }\n    }\n  }\n\n  const {\n    data: replyData,\n    hasNextPage,\n    fetchNextPage,\n  } = useGetRepliesInfinite(threadId, orderByDatePosted, limit)\n  const replies = replyData?.pages.flatMap(page => page.results) ?? []\n\n  return (\n    <div className=\"bootstrap-4-backport DiscussionThread\">\n      {threadData && threadBody ? (\n        <>\n          <div style={{ textAlign: 'center' }}>\n            <Button\n              variant={orderByDatePosted ? 'contained' : 'outlined'}\n              onClick={() => setOrderByDatePosted(true)}\n            >\n              Date Posted\n            </Button>\n            <Button\n              variant={orderByDatePosted ? 'outlined' : 'contained'}\n              onClick={() => setOrderByDatePosted(false)}\n            >\n              Most Recent\n            </Button>\n          </div>\n          <UserBadge\n            userId={threadData.createdBy}\n            withAvatar={true}\n            avatarSize=\"MEDIUM\"\n            showCardOnHover={true}\n          />\n          <div>\n            <Typography style={{ marginTop: '4px' }} variant=\"headline2\">\n              {threadData.title}\n            </Typography>\n            <SubscribersModal\n              id={threadId}\n              objectType={SubscriptionObjectType.THREAD}\n              showModal={showSubscriberModal}\n              handleModal={setShowSubscriberModal}\n            />\n          </div>\n          <div>\n            <MarkdownSynapse\n              markdown={threadBody}\n              objectType={ObjectType.THREAD}\n            />\n          </div>\n          <span>\n            posted {formatDate(dayjs(threadData.createdOn), 'M/D/YYYY')}\n          </span>\n          <ForumThreadEditor\n            isReply={false}\n            initialText={threadBody}\n            onClose={() => setShowThreadModal(false)}\n            initialTitle={threadData?.title}\n            id={threadId}\n            isDialog={true}\n            openDialog={showThreadModal}\n          />\n        </>\n      ) : (\n        <></>\n      )}\n      <div className=\"control-container\">\n        {threadData?.isDeleted ? (\n          <button onClick={() => setShowRestoreModal(true)}>\n            <IconSvg icon=\"restore\" label=\"Restore deleted thread\" />\n          </button>\n        ) : (\n          <>\n            <span>\n              <button\n                className=\"follow-button\"\n                aria-label={subscription ? 'Unfollow thread' : 'Follow thread'}\n                disabled={isLoading}\n                onClick={() => handleFollowBtn()}\n              >\n                {subscription ? (\n                  <IconSvg icon=\"visibility\" label={FOLLOWING_TEXT} />\n                ) : (\n                  <IconSvg icon=\"visibilityOff\" label={UNFOLLOWING_TEXT} />\n                )}\n              </button>\n            </span>\n            {isCurrentUserAuthor && (\n              <button onClick={() => setShowThreadModal(true)}>\n                <IconSvg icon=\"edit\" label=\"Edit thread\" />\n              </button>\n            )}\n\n            {entityBundle?.permissions.canModerate ? (\n              <>\n                <button onClick={() => setShowDeleteModal(true)}>\n                  <IconSvg icon=\"delete\" label=\"Delete thread\" />\n                </button>\n                <button onClick={() => togglePin()}>\n                  {threadData?.isPinned ? (\n                    <IconSvg\n                      icon=\"pushpin\"\n                      sx={{ color: 'error.main' }}\n                      label=\"Unpin thread\"\n                    />\n                  ) : (\n                    <IconSvg icon=\"pushpin\" label=\"Pin thread\" />\n                  )}\n                </button>\n              </>\n            ) : null}\n          </>\n        )}\n      </div>\n      {!showReplyEditor1 ? (\n        <FormControl\n          type=\"text\"\n          placeholder={INPUT_PLACEHOLDER}\n          onClick={() => {\n            currentUserProfile?.userName == 'anonymous'\n              ? setShowSignInModal(true)\n              : setShowReplyEditor1(true)\n          }}\n        />\n      ) : (\n        <ForumThreadEditor\n          id={threadId}\n          isReply={true}\n          onClose={() => setShowReplyEditor1(false)}\n          isDialog={false}\n        />\n      )}\n      <div>\n        {replies.map(reply => (\n          <DiscussionReply key={reply.id} reply={reply} />\n        ))}\n      </div>\n      {replies.length > 0 && (\n        <>\n          {!showReplyEditor2 ? (\n            <FormControl\n              type=\"text\"\n              placeholder={INPUT_PLACEHOLDER}\n              onClick={() => {\n                currentUserProfile?.userName == 'anonymous'\n                  ? setShowSignInModal(true)\n                  : setShowReplyEditor2(true)\n              }}\n            />\n          ) : (\n            <ForumThreadEditor\n              id={threadId}\n              isReply={true}\n              onClose={() => setShowReplyEditor2(false)}\n              isDialog={false}\n            />\n          )}\n        </>\n      )}\n\n      {hasNextPage ? (\n        <Button\n          variant=\"outlined\"\n          onClick={() => {\n            fetchNextPage()\n          }}\n        >\n          Show more results\n        </Button>\n      ) : (\n        <></>\n      )}\n      <WarningDialog\n        open={showDeleteModal}\n        title=\"Confirm Deletion\"\n        content=\"Are you sure you want to delete this thread?\"\n        onCancel={() => setShowDeleteModal(false)}\n        onConfirm={() => threadData && deleteThread(threadData)}\n        confirmButtonColor=\"error\"\n        confirmButtonText=\"Delete\"\n      />\n      <WarningDialog\n        open={showRestoreModal}\n        title=\"Confirm Restoration\"\n        content=\"Are you sure you want to restore this thread?\"\n        onCancel={() => setShowRestoreModal(false)}\n        onConfirm={() => threadData && restoreThread(threadData)}\n        confirmButtonColor=\"info\"\n        confirmButtonText=\"Restore\"\n      />\n      <ConfirmationDialog\n        open={showSignInModal}\n        title=\"Sign In Required\"\n        content={SIGN_IN_TEXT}\n        onCancel={() => setShowSignInModal(false)}\n        hasCancelButton={false}\n        onConfirm={() => setShowSignInModal(false)}\n        confirmButtonProps={{\n          children: 'Sign In',\n          className: SRC_SIGN_IN_CLASS,\n        }}\n      />\n    </div>\n  )\n}\n"],"names":["DiscussionReply","reply","onClickLink","showReplyModal","setShowReplyModal","useState","showDeleteModal","setShowDeleteModal","currentUserProfile","useGetCurrentUserProfile","entityBundle","useGetEntityBundle","message","isLoading","useGetReply","deleteReply","useDeleteReply","displayToast","isCurrentUserAuthor","jsx","SkeletonTable","Fragment","jsxs","UserBadge","MarkdownSynapse","ObjectType","formatDate","dayjs","IconSvg","ForumThreadEditor","WarningDialog","FOLLOWING_TEXT","UNFOLLOWING_TEXT","SIGN_IN_TEXT","INPUT_PLACEHOLDER","DiscussionThread","props","threadId","limit","orderByDatePosted","setOrderByDatePosted","showThreadModal","setShowThreadModal","showReplyEditor1","setShowReplyEditor1","showReplyEditor2","setShowReplyEditor2","showSignInModal","setShowSignInModal","showRestoreModal","setShowRestoreModal","showSubscriberModal","setShowSubscriberModal","threadData","threadBody","togglePin","useGetThread","ALL_ENTITY_BUNDLE_FIELDS","subscription","toggleSubscribed","useSubscription","SubscriptionObjectType","deleteThread","useDeleteThread","restoreThread","useRestoreThread","handleFollowBtn","err","replyData","hasNextPage","fetchNextPage","useGetRepliesInfinite","replies","page","Button","Typography","SubscribersModal","FormControl","ConfirmationDialog","SRC_SIGN_IN_CLASS"],"mappings":"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"}