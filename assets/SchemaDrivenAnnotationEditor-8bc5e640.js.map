{"version":3,"file":"SchemaDrivenAnnotationEditor-8bc5e640.js","sources":["../../src/synapse-queries/entity/useEntityBoundSchema.ts","../../src/synapse-queries/entity/useSchema.ts","../../src/assets/icons/AddToList.tsx","../../src/components/SchemaDrivenAnnotationEditor/field/AdditionalPropertiesSchemaField.tsx","../../src/components/SchemaDrivenAnnotationEditor/template/ObjectFieldTemplate.tsx","../../src/components/SchemaDrivenAnnotationEditor/field/CustomObjectField.tsx","../../src/components/SchemaDrivenAnnotationEditor/template/WrapIfAdditionalTemplate.tsx","../../src/components/SchemaDrivenAnnotationEditor/template/FieldTemplate.tsx","../../src/components/SchemaDrivenAnnotationEditor/template/FieldDescriptionTable.tsx","../../src/components/SchemaDrivenAnnotationEditor/template/DescriptionFieldTemplate.tsx","../../src/components/SchemaDrivenAnnotationEditor/template/BaseInputTemplate.tsx","../../src/components/SchemaDrivenAnnotationEditor/template/FieldErrorTemplate.tsx","../../src/components/SchemaDrivenAnnotationEditor/SchemaDrivenAnnotationEditor.tsx"],"sourcesContent":["import { UseQueryOptions, useQuery } from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { JsonSchemaObjectBinding } from '@sage-bionetworks/synapse-types'\nimport { ValidationResults } from '@sage-bionetworks/synapse-types'\n\nexport function useGetSchemaBinding(\n  entityId: string,\n  options?: UseQueryOptions<JsonSchemaObjectBinding | null, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<JsonSchemaObjectBinding | null, SynapseClientError>(\n    keyFactory.getEntityBoundJsonSchemaQueryKey(entityId),\n    () => SynapseClient.getSchemaBinding(entityId, accessToken),\n    options,\n  )\n}\n\nexport function useGetValidationResults(\n  entityId: string,\n  options?: UseQueryOptions<ValidationResults, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<ValidationResults, SynapseClientError>(\n    keyFactory.getEntitySchemaValidationResultsQueryKey(entityId),\n    () => SynapseClient.getSchemaValidationResults(entityId, accessToken),\n    options,\n  )\n}\n","/*\n * Hooks for accessing services related to JSON Schemas in the Synapse REST API\n */\n\nimport { JSONSchema7 } from 'json-schema'\nimport { useQuery, UseQueryOptions } from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\n\nexport function useGetSchema(\n  schema$id: string,\n  options?: UseQueryOptions<JSONSchema7, SynapseClientError>,\n) {\n  const { keyFactory } = useSynapseContext()\n  return useQuery<JSONSchema7, SynapseClientError>(\n    keyFactory.getValidationSchemaQueryKey(schema$id),\n    async () => {\n      const response = await SynapseClient.getValidationSchema(schema$id)\n      return response.validationSchema\n    },\n    options,\n  )\n}\n","import React from 'react'\nimport SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon'\n\nconst AddToList = (props: SvgIconProps) => {\n  return (\n    <SvgIcon\n      {...props}\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M14 10H2V12H14V10ZM14 6H2V8H14V6ZM18 14V10H16V14H12V16H16V20H18V16H22V14H18ZM2 16H10V14H2V16Z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AddToList\n","import {\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils'\nimport { isEqual } from 'lodash-es'\nimport React, { useEffect, useState } from 'react'\nimport FullWidthAlert from '../../FullWidthAlert/FullWidthAlert'\nimport { convertToArray } from '../AnnotationEditorUtils'\nimport { Grid, InputLabel } from '@mui/material'\nimport { AdditionalPropertyContextProvider } from '../template/AdditionalPropertyContext'\n\n// Matches ####-##-##T##:##:##.###Z, e.g. 1970-01-01T12:00:000Z\nconst ISO_TIMESTAMP_REGEX = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/\n\n// Types that correspond to the different input fields that the annotation editor supports\nconst propertyTypeArray = [\n  'String',\n  'Integer',\n  'Float',\n  'Boolean',\n  'Datetime',\n] as const\n\nexport type PropertyType = (typeof propertyTypeArray)[number]\n\nexport function guessPropertyType(list: Array<unknown>): PropertyType {\n  if (list.length === 0) {\n    // The field was just added, so default to string\n    return 'String'\n  } else if (\n    list.every(\n      item => typeof item === 'number' || item === 'NaN', // \"NaN\" is technically a float value\n    )\n  ) {\n    if (list.every(item => Number.isInteger(item))) {\n      return 'Integer'\n    } else {\n      return 'Float'\n    }\n  } else if (list.every(item => typeof item === 'boolean')) {\n    return 'Boolean'\n  } else if (\n    list.every(item => typeof item === 'string') &&\n    (list as string[]).every((item: string) => !!ISO_TIMESTAMP_REGEX.exec(item))\n  ) {\n    return 'Datetime'\n  }\n  // otherwise, default type is 'string'\n  return 'String'\n}\n\nexport function transformDataFromPropertyType(\n  list: Array<any>,\n  propertyType: PropertyType,\n) {\n  switch (propertyType) {\n    case 'Integer':\n      return list.map(item =>\n        Number.isNaN(Number(item)) ? 0 : Math.floor(Number(item)),\n      )\n\n    case 'Float':\n      return list.map(item => {\n        const asFloat = parseFloat(item as string)\n        if (Number.isNaN(asFloat)) {\n          return 'NaN'\n        } else if (Number.isInteger(asFloat)) {\n          return asFloat.toFixed(1)\n        } else {\n          return asFloat\n        }\n      })\n    case 'Datetime':\n      return list.map(item => {\n        if (typeof item === 'string' && ISO_TIMESTAMP_REGEX.exec(item)) {\n          return item\n        } else {\n          return new Date().toISOString()\n        }\n      })\n    case 'Boolean':\n      return list.map(item => !!item)\n    case 'String':\n    default:\n      return list.map(item => String(item))\n  }\n}\n\n/**\n * Maps a Synapse Annotation PropertyType to a JSON Schema that captures the type and format.\n * @param propertyType\n */\nexport function getSchemaForPropertyType(propertyType: PropertyType) {\n  switch (propertyType) {\n    case 'Datetime':\n      return { type: 'string', format: 'datetime' }\n    case 'Boolean':\n      return { type: 'boolean' }\n    case 'Float':\n      return { type: 'number' }\n    case 'Integer':\n      return { type: 'integer' }\n    case 'String':\n    default:\n      return { type: 'string' }\n  }\n}\n\n/**\n * react-jsonschema-form SchemaField override for \"additionalProperties\" only. In Synapse these are \"custom annotations\".\n * Modifies the data to provide full compatibility with Synapse annotations features.\n *\n * This component provides these enhancements to the SchemaField:\n * - Supports selecting a type, and changing the input widget appropriately\n * - Identifying the type on mount\n * - Treat all field values as arrays\n * - When the last array value is removed, remove the entire key from the form.\n * @param props\n * @returns\n */\nexport function AdditionalPropertiesSchemaField<\n  T extends Array<unknown> = Array<unknown>,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any,\n>(\n  props: FieldProps<T, S, F> & {\n    onDropPropertyClick: (key: string) => (event: any) => void\n  },\n) {\n  const {\n    formData,\n    onChange,\n    registry,\n    schema,\n    name,\n    onDropPropertyClick,\n    idSchema,\n  } = props\n  const id = idSchema.$id\n  const { ArrayField } = registry.fields\n  const { SelectWidget } = registry.widgets\n\n  // The type determines which widget we show.\n  const [propertyType, setPropertyType] = useState(\n    guessPropertyType(convertToArray(formData)),\n  )\n\n  // If the property type is updated, store it in a new variable where we'll show a warning if data may be lost on coersion\n  const [nextPropertyType, setNextPropertyType] = useState(propertyType)\n\n  /**\n   * This effect is invoked whenever the user attempts to change the datatype of a custom annotation.\n   */\n  useEffect(() => {\n    function onNextPropertyTypeUpdate() {\n      if (Array.isArray(formData)) {\n        const dataIsEmpty =\n          formData.length === 0 ||\n          formData.every(item => item == null || item == '')\n        const coercedList = transformDataFromPropertyType(\n          formData,\n          nextPropertyType,\n        )\n        // if the data is empty or identical after conversion, then just update the property type\n        if (dataIsEmpty || nextPropertyType !== propertyType) {\n          if (isEqual(formData, coercedList)) {\n            setPropertyType(nextPropertyType)\n          }\n        }\n      }\n    }\n\n    onNextPropertyTypeUpdate()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [nextPropertyType])\n\n  /**\n   * This effect is invoked whenever the propertyType changes.\n   */\n  useEffect(() => {\n    function coerceDataAndUpdateWidget() {\n      if (Array.isArray(formData)) {\n        if (formData.every(item => item == null)) {\n          onDropPropertyClick(name)(new CustomEvent('dropEmptyProperty'))\n        } else {\n          const coercedList = transformDataFromPropertyType(\n            formData,\n            nextPropertyType,\n          ) as unknown as T\n\n          // Data conversion is non-destructive or has been confirmed by the user\n          setPropertyType(nextPropertyType)\n          // Coerce the data to match the new type\n          onChange(coercedList)\n        }\n      }\n    }\n\n    coerceDataAndUpdateWidget()\n    // Don't add other properties to dependency array because we don't want to automatically coerce input\n    // i.e. Only coerce data when the type changes, which should only be on mount or when the user explicitly chooses a new type.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [propertyType])\n\n  const itemsSchema = getSchemaForPropertyType(propertyType)\n\n  // If the additional property has not yet been coerced to an array, trigger an update to coerce and render nothing.\n  // We must do this because RJSF does not currently batch these kinds of updates\n  // See https://github.com/rjsf-team/react-jsonschema-form/issues/3367\n  if (!Array.isArray(formData)) {\n    onChange(convertToArray(formData) as unknown as T)\n    return <></>\n  }\n\n  return (\n    <AdditionalPropertyContextProvider\n      value={{\n        dropProperty: e => {\n          onDropPropertyClick(name)(e)\n        },\n      }}\n    >\n      <Grid item xs={2}>\n        <InputLabel htmlFor={`${id}-type`}>Type</InputLabel>\n        <SelectWidget\n          name={'Type'}\n          id={`${id}-type`}\n          schema={{} as S}\n          options={{\n            enumOptions: propertyTypeArray.map(type => ({\n              label: type,\n              value: type,\n            })),\n          }}\n          value={propertyType}\n          onChange={value => {\n            setNextPropertyType(value as PropertyType)\n          }}\n          disabled={props.disabled}\n          readOnly={props.readonly}\n          required={true}\n          isClearable={false}\n          onBlur={() => {}}\n          onFocus={() => {}}\n          registry={registry}\n          label={'Type'}\n        />\n      </Grid>\n      <Grid item xs={7}>\n        <ArrayField\n          {...props}\n          schema={{\n            ...schema,\n            items: {\n              ...itemsSchema,\n            },\n          }}\n        />\n      </Grid>\n      {propertyType !== nextPropertyType && (\n        <FullWidthAlert\n          variant=\"warning\"\n          title=\"Data may be lost when converting types\"\n          description={`Are you sure you want to convert ${name} from ${propertyType} to ${nextPropertyType}? Current values may be lost on conversion.`}\n          primaryButtonConfig={{\n            text: 'Convert',\n            onClick: () => {\n              setPropertyType(nextPropertyType)\n            },\n          }}\n          secondaryButtonConfig={{\n            text: 'Cancel',\n            onClick: () => {\n              setNextPropertyType(propertyType)\n            },\n          }}\n          isGlobal={false}\n        />\n      )}\n    </AdditionalPropertyContextProvider>\n  )\n}\n","import {\n  ADDITIONAL_PROPERTY_FLAG,\n  canExpand,\n  FormContextType,\n  getTemplate,\n  getUiOptions,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils'\nimport React, { useRef } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { useDeepCompareEffectNoCheck } from 'use-deep-compare-effect'\nimport { displayToast } from '../../ToastMessage'\nimport AddToList from '../../../assets/icons/AddToList'\nimport { JSONSchema7Definition } from 'json-schema'\n\n/**\n * Derived from the base ObjectFieldTemplate with annotations-editor-specific changes\n * - Custom button for adding additional properties\n * - Tracks properties to show a toast message if a property is converted to an additionalProperty because it was\n *   dropped from the schema (e.g. in a conditional schema)\n *\n * See https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/mui/src/ObjectFieldTemplate/ObjectFieldTemplate.tsx\n * @param props\n * @returns\n */\nexport function ObjectFieldTemplate<\n  T extends Record<string, any> | null | undefined = Record<string, any>,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any,\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props\n\n  const options = getUiOptions<T, S, F>(uiSchema)\n  const TitleFieldTemplate = getTemplate<'TitleFieldTemplate', T, S, F>(\n    'TitleFieldTemplate',\n    registry,\n    options,\n  )\n  const DescriptionFieldTemplate = getTemplate<\n    'DescriptionFieldTemplate',\n    T,\n    S,\n    F\n  >('DescriptionFieldTemplate', registry, options)\n\n  /*\n     Tracks the property keys that were last known to exist in the object.\n     */\n  const previousSchemaDefinedProperties = useRef<Set<string>>(new Set())\n\n  /**\n   * We track how the schema changes as the user enters data, causing conditional subschemas to be evaluated.\n   *\n   * If a property exists in the previous version of the schema and has user data, and then is dropped from the schema due to a data update, then\n   * we need to prompt the user whether they want to undo the change, or continue and keep/remove those fields\n   *\n   * In this component, we can identify when one or more fields with user data are dropped (the field gains the additional property flag in the schema prop).\n   * We then use a function provided by the context to report which fields were lost.\n   */\n  useDeepCompareEffectNoCheck(() => {\n    if ('properties' in schema && schema.properties) {\n      const propertyKeys = Object.keys(schema.properties)\n      // Schema-defined properties are those properties in the schema without the additional property flag.\n      const schemaDefinedProperties = new Set<string>(\n        propertyKeys.filter(key => {\n          const propertyObject = schema.properties![\n            key\n          ] as JSONSchema7Definition &\n            Record<typeof ADDITIONAL_PROPERTY_FLAG, any>\n          return !propertyObject[ADDITIONAL_PROPERTY_FLAG]\n        }),\n      )\n\n      if (previousSchemaDefinedProperties.current != null) {\n        // Compare the schema defined properties with the previous version to see if any were lost.\n        const lostProperties = Array.from(\n          previousSchemaDefinedProperties.current,\n        ).filter(schemaDefinedProperty => {\n          return (\n            // Property is no longer in schema\n            !schemaDefinedProperties.has(schemaDefinedProperty) &&\n            // Form data exists\n            !!formData &&\n            // Property still exists in form data and is not null\n            // if the data is null, then we don't need to worry about it; user data wasn't lost\n            formData[schemaDefinedProperty] != null &&\n            // Property matches `additionalProperties` requirements: is an array and contains non-null values\n            Array.isArray(formData[schemaDefinedProperty]) &&\n            (formData[schemaDefinedProperty] as Array<never>).filter(\n              item => item != null,\n            ).length > 0\n          )\n        })\n        if (lostProperties.length > 0) {\n          // Report the converted fields in a toast message\n          displayToast(\n            `The following annotations are no longer specified by the schema and have been converted to custom fields: ${lostProperties.join(\n              ', ',\n            )}.`,\n            'warning',\n            {\n              title: 'Fields No Longer Specified By Schema',\n            },\n          )\n        }\n      }\n      // Update the last known properties to match the current properties\n      previousSchemaDefinedProperties.current = schemaDefinedProperties\n    }\n  }, [schema.properties])\n\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          schema={schema}\n          title={options.title || title}\n          required={required}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          registry={registry}\n          schema={schema}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n\n      {canExpand(schema, uiSchema, formData) && (\n        <Tooltip title=\"Add a new custom field\" placement=\"top\">\n          <Button\n            sx={{ my: 2 }}\n            variant=\"contained\"\n            className=\"object-property-expand\"\n            onClick={onAddClick(schema)}\n            disabled={disabled || readonly}\n            aria-label={'Add Custom Field'}\n          >\n            <AddToList />\n          </Button>\n        </Tooltip>\n      )}\n    </fieldset>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { getDefaultRegistry } from '@rjsf/core'\nimport { convertToArray } from '../AnnotationEditorUtils'\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  deepEquals,\n  FieldProps,\n  FormContextType,\n  PROPERTIES_KEY,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils'\nimport { JSONSchema7Definition } from 'json-schema'\n\n/**\n * Extends the @rjsf/core `ObjectField` and just adds a custom hook for Synapse annotation business logic\n */\nexport function CustomObjectField<\n  T extends Record<string, any> | null | undefined = Record<string, any>,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any,\n>(props: FieldProps<T, S, F>) {\n  const {\n    fields: { ObjectField },\n  } = getDefaultRegistry<T, S, F>()\n  /**\n   * For an object, this will\n   * - convert additionalProperties formData to arrays\n   * - convert schema-defined formData from an array to a non-array if the schema type is not an array\n   * @param props\n   */\n  useEffect(() => {\n    const { schema, formData, onChange } = props\n    const newFormData: Record<string, any> = { ...formData }\n    if (schema[PROPERTIES_KEY]) {\n      Object.entries(schema[PROPERTIES_KEY]).forEach(\n        ([key, propertySchema]) => {\n          const data = newFormData[key]\n          if (\n            (\n              propertySchema as JSONSchema7Definition &\n                Record<typeof ADDITIONAL_PROPERTY_FLAG, any>\n            )[ADDITIONAL_PROPERTY_FLAG]\n          ) {\n            /**\n             * All additional properties should be converted to arrays.\n             *\n             * We need to convert it right away because the order of items is not stable, and seems to depend on if the item is an array or not\n             */\n            if (!Array.isArray(data)) {\n              newFormData[key] = convertToArray(data)\n            }\n          } else {\n            /**\n             * If the schema does not call for an array, but the formData is an array, then this will coerce it to a string.\n             *\n             * This can occur when a formData value is an additionalProperty, which we always treat as an array, then the key\n             * is added to the schema (e.g. conditionally).\n             */\n            if (\n              typeof propertySchema === 'object' &&\n              'type' in propertySchema &&\n              propertySchema.type !== 'array' &&\n              Array.isArray(data)\n            ) {\n              newFormData[key] = data.map(v => `${v}`).join(', ')\n            }\n          }\n        },\n      )\n      if (!deepEquals(formData, newFormData)) {\n        onChange(newFormData as T)\n      }\n    }\n  })\n\n  return <ObjectField {...props} />\n}\n\nexport default CustomObjectField\n","import {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WrapIfAdditionalTemplateProps,\n} from '@rjsf/utils'\nimport React, { FocusEventHandler } from 'react'\nimport { Grid, TextField } from '@mui/material'\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any,\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    readonly,\n    required,\n    schema,\n    children,\n    registry,\n  } = props\n  const { translateString } = registry\n  const keyLabel = translateString(TranslatableString.KeyLabel, [''])\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>\n  }\n\n  const handleBlur: FocusEventHandler<\n    HTMLInputElement | HTMLTextAreaElement\n  > = ({ target }) => {\n    if (target) onKeyChange(target.value)\n  }\n\n  return (\n    <div className={classNames}>\n      <Grid container sx={{ my: 2 }} columnSpacing={2} rowSpacing={0}>\n        <Grid item xs={3}>\n          <TextField\n            fullWidth={true}\n            required={required}\n            label={keyLabel}\n            defaultValue={label}\n            disabled={disabled || readonly}\n            id={`${id}-key`}\n            name={`${id}-key`}\n            onBlur={!readonly ? handleBlur : undefined}\n            type=\"text\"\n          />\n        </Grid>\n        {children}\n        {/* All additional properties are treated as arrays, so we don't show a remove button here. */}\n        {/* To drop the property, drop the last array item. */}\n      </Grid>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  FieldTemplateProps,\n  FormContextType,\n  getTemplate,\n  getUiOptions,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils'\nimport { HelpOutline } from '@mui/icons-material'\nimport { Collapse, Grid, IconButton, InputLabel, Tooltip } from '@mui/material'\n\n// TODO: Wrap and pull out class names to remove bootstrap classes\n//  https://rjsf-team.github.io/react-jsonschema-form/docs/advanced-customization/custom-templates/#baseinputtemplate\n\nexport function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any,\n>(props: FieldTemplateProps<T, S, F>) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n    schema,\n  } = props\n  const uiOptions = getUiOptions<T, S, F>(uiSchema)\n  const WrapIfAdditionalTemplate = getTemplate<\n    'WrapIfAdditionalTemplate',\n    T,\n    S,\n    F\n  >('WrapIfAdditionalTemplate', registry, uiOptions)\n  const [showDetails, setShowDetails] = useState(false)\n\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {/* RJSF hides labels for boolean checkboxes, but since we replaced checkboxes with a custom component, we want to show them */}\n      {(displayLabel || schema.type === 'boolean') && (\n        <div className=\"LabelContainer\">\n          <InputLabel htmlFor={id}>\n            {label}\n            {required && <span className=\"required\">*</span>}\n          </InputLabel>\n          <Tooltip title={'More Info'}>\n            <IconButton\n              onClick={e => {\n                e.preventDefault()\n                setShowDetails(!showDetails)\n              }}\n              aria-expanded={showDetails}\n              size={'small'}\n            >\n              <HelpOutline\n                color={'primary'}\n                sx={{ width: '16px', height: '16px' }}\n              />\n            </IconButton>\n          </Tooltip>\n        </div>\n      )}\n      {children}\n      <Grid item xs={12}>\n        {errors}\n      </Grid>\n      <Collapse className=\"field-description\" in={showDetails}>\n        {description}\n      </Collapse>\n      {help}\n    </WrapIfAdditionalTemplate>\n  )\n}\n","import { Collapse } from '@mui/material'\nimport React from 'react'\nimport { JSONSchema7, JSONSchema7Definition } from 'json-schema'\n\nexport type FieldDescriptionTableProps = {\n  schema: JSONSchema7\n  description: React.ReactNode\n}\n\nfunction getTypeAsString(\n  schema: JSONSchema7 | JSONSchema7Definition | JSONSchema7Definition[],\n): string {\n  if (Array.isArray(schema) || typeof schema === 'boolean') {\n    return 'unknown'\n  }\n  const { type, enum: _enum } = schema\n\n  if (type === 'array' && typeof schema.items === 'object') {\n    return `List of ${getTypeAsString(schema.items)}`\n  }\n\n  if (_enum) {\n    return 'enumeration'\n  }\n\n  if (Array.isArray(type)) {\n    return type.reduce(\n      (typesCommaSeparated, nextType) => `${typesCommaSeparated}, ${nextType}`,\n      '',\n    )\n  }\n  return type || 'unknown'\n}\n\nexport default function FieldDescriptionTable(\n  props: FieldDescriptionTableProps,\n) {\n  const { description, schema } = props\n\n  const typeString = getTypeAsString(schema)\n\n  return (\n    <Collapse className=\"field-description\" in={true}>\n      <table className=\"FieldDescriptionTable\">\n        <tbody>\n          {description && (\n            <tr>\n              <th>Description</th>\n              <td>{description}</td>\n            </tr>\n          )}\n          <tr>\n            <th>Type</th>\n            <td>{typeString}</td>\n          </tr>\n        </tbody>\n      </table>\n    </Collapse>\n  )\n}\n","import { DescriptionFieldProps } from '@rjsf/utils'\nimport React from 'react'\nimport { Typography } from '@mui/material'\nimport FieldDescriptionTable from './FieldDescriptionTable'\n\nexport default function DescriptionFieldTemplate(props: DescriptionFieldProps) {\n  const { description, schema = {} } = props\n\n  if (schema.type === 'object') {\n    return (\n      <Typography variant={'body1'} sx={{ my: 2 }}>\n        {description}\n      </Typography>\n    )\n  }\n\n  return <FieldDescriptionTable schema={schema} description={description} />\n}\n","import React from 'react'\nimport { ChangeEvent, FocusEvent } from 'react'\nimport TextField, { TextFieldProps } from '@mui/material/TextField'\nimport {\n  ariaDescribedByIds,\n  BaseInputTemplateProps,\n  examplesId,\n  getInputProps,\n  labelValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils'\n\nconst TYPES_THAT_SHRINK_LABEL = ['date', 'datetime-local', 'file', 'time']\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any,\n>(props: BaseInputTemplateProps<T, S, F>) {\n  const {\n    id,\n    name, // remove this from textFieldProps\n    placeholder,\n    required,\n    readonly,\n    disabled,\n    type,\n    label,\n    // hideLabel,\n    value,\n    onChange,\n    onChangeOverride,\n    onBlur,\n    onFocus,\n    autofocus,\n    options,\n    schema,\n    uiSchema,\n    rawErrors = [],\n    formContext,\n    registry,\n    InputLabelProps,\n    ...textFieldProps\n  } = props\n  const hideLabel = true\n  const inputProps = getInputProps<T, S, F>(schema, type, options)\n  // Now we need to pull out the step, min, max into an inner `inputProps` for material-ui\n  const { step, min, max, ...rest } = inputProps\n  const otherProps = {\n    inputProps: {\n      step,\n      min,\n      max,\n      ...(schema.examples ? { list: examplesId<T>(id) } : undefined),\n    },\n    ...rest,\n  }\n  const _onChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) =>\n    onChange(value === '' ? options.emptyValue : value)\n  const _onBlur = ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n    onBlur(id, value)\n  const _onFocus = ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n    onFocus(id, value)\n  const DisplayInputLabelProps = TYPES_THAT_SHRINK_LABEL.includes(type)\n    ? {\n        ...InputLabelProps,\n        shrink: true,\n      }\n    : InputLabelProps\n\n  let derivedValuePlaceholder: string | undefined = undefined\n  if (schema.default || schema.const) {\n    derivedValuePlaceholder =\n      JSON.stringify(schema.default || schema.const) + ' (derived)'\n  }\n\n  return (\n    <>\n      <TextField\n        id={id}\n        name={id}\n        placeholder={derivedValuePlaceholder || placeholder}\n        label={labelValue(label || undefined, hideLabel, false)}\n        autoFocus={autofocus}\n        required={false}\n        disabled={disabled || readonly}\n        {...otherProps}\n        value={value || value === 0 ? value : ''}\n        error={rawErrors.length > 0}\n        onChange={onChangeOverride || _onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        InputLabelProps={DisplayInputLabelProps}\n        {...(textFieldProps as TextFieldProps)}\n        inputProps={{\n          'aria-label': id,\n        }}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(\n              schema.default && !schema.examples.includes(schema.default)\n                ? ([schema.default] as string[])\n                : [],\n            )\n            .map((example: any) => {\n              return <option key={example} value={example} />\n            })}\n        </datalist>\n      )}\n    </>\n  )\n}\n","import React from 'react'\nimport ListItem from '@mui/material/ListItem'\nimport FormHelperText from '@mui/material/FormHelperText'\nimport List from '@mui/material/List'\nimport {\n  errorId,\n  FieldErrorProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils'\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any,\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props\n  if (errors.length === 0) {\n    return null\n  }\n  const id = errorId<T>(idSchema)\n\n  return (\n    <List dense={true} disablePadding={true}>\n      {errors.map((error, i: number) => {\n        return (\n          <ListItem key={i} disableGutters={true}>\n            <FormHelperText id={id} sx={{ color: 'error.main' }}>\n              {error}\n            </FormHelperText>\n          </ListItem>\n        )\n      })}\n    </List>\n  )\n}\n","import Form from '@rjsf/mui'\nimport { JSONSchema7, JSONSchema7Definition } from 'json-schema'\nimport isEmpty from 'lodash-es/isEmpty'\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Alert, Box, Divider, Link, Typography } from '@mui/material'\nimport AddToList from '../../assets/icons/AddToList'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../utils/functions/getEndpoint'\nimport {\n  useGetJson,\n  useGetSchema,\n  useGetSchemaBinding,\n  useUpdateViaJson,\n} from '../../synapse-queries'\nimport { SynapseClientError } from '../../utils'\nimport {\n  ENTITY_CONCRETE_TYPE,\n  EntityJson,\n} from '@sage-bionetworks/synapse-types'\nimport { SynapseSpinner } from '../LoadingScreen/LoadingScreen'\nimport { AdditionalPropertiesSchemaField } from './field/AdditionalPropertiesSchemaField'\nimport {\n  dropNullishArrayValues,\n  dropNullValues,\n  getFriendlyPropertyName,\n  getTransformErrors,\n} from './AnnotationEditorUtils'\nimport { BooleanWidget } from './widget/BooleanWidget'\nimport { DateTimeWidget } from './widget/DateTimeWidget'\nimport { ObjectFieldTemplate } from './template/ObjectFieldTemplate'\nimport { SelectWidget } from './widget/SelectWidget'\nimport TextWidget from './widget/TextWidget'\nimport { entityJsonKeys } from '../../utils/functions/EntityTypeUtils'\nimport {\n  ConfirmationButtons,\n  ConfirmationDialog,\n} from '../ConfirmationDialog/ConfirmationDialog'\nimport { RJSFValidationError } from '@rjsf/utils'\nimport validator from '@rjsf/validator-ajv8'\nimport CustomObjectField from './field/CustomObjectField'\nimport ArrayFieldItemTemplate from './template/ArrayFieldItemTemplate'\nimport ArrayFieldTemplate from './template/ArrayFieldTemplate'\nimport WrapIfAdditionalTemplate from './template/WrapIfAdditionalTemplate'\nimport { FieldTemplate } from './template/FieldTemplate'\nimport ArrayFieldTitleTemplate from './template/ArrayFieldTitleTemplate'\nimport ButtonTemplate from './template/ButtonTemplate'\nimport DescriptionFieldTemplate from './template/DescriptionFieldTemplate'\nimport ArrayFieldDescriptionTemplate from './template/ArrayFieldDescriptionTemplate'\nimport BaseInputTemplate from './template/BaseInputTemplate'\nimport RJSF from '@rjsf/core'\nimport FieldErrorTemplate from './template/FieldErrorTemplate'\nimport ErrorListTemplate from './template/ErrorListTemplate'\n\nexport type SchemaDrivenAnnotationEditorProps = {\n  /** The entity whose annotations should be edited with the form */\n  entityId?: string\n  /** If no entity ID is supplied, the schema to use for the form */\n  schemaId?: string\n  /** May be used to directly provide a JSON Schema to use for the form */\n  validationSchema?: JSONSchema7\n  /** Optionally supply a ref to the form to handle submission externally with `formRef.current.submit()`. If provided, the editor will not render its own submit UI. */\n  formRef?: React.RefObject<RJSF>\n  /** Provide live input validation. This can cause major performance degradation. */\n  liveValidate?: boolean\n  /** Invoked after a successful form submission */\n  onSuccess?: () => void\n  /** If defined and formRef is not supplied, shows a 'Cancel' button and runs this effect on click */\n  onCancel?: () => void\n  /** Passes new form data upon each change to the form */\n  onChange?: (annotations: Record<string, unknown>) => void\n}\n\n/**\n * patternProperties lets us define how to treat additionalProperties in a JSON schema by property name.\n * In all cases, let's ban properties that collide with entity properties by making their schema \"not: {}\"\n */\nfunction getPatternPropertiesBannedKeys(\n  concreteType?: ENTITY_CONCRETE_TYPE,\n): Record<string, JSONSchema7Definition> {\n  if (!concreteType) {\n    return {}\n  }\n  // for each property (e.g. id, name, etag, etc.)\n  //  Add to the JSON Schema `\"^id$\": { \"not\": {} }` to ban the property from being added as an additional property.\n  return entityJsonKeys[concreteType].reduce(\n    (current: Record<string, JSONSchema7Definition>, item) => {\n      current[`^${item}$`] = { not: {} }\n      return current\n    },\n    {},\n  )\n}\n\n/**\n * Cleans the formData to remove values that are invalid for Synapse Annotations\n * @param formData\n * @param dropNullishValuesInArrays\n */\nfunction cleanFormData(\n  formData: Record<string, unknown> | undefined,\n  dropNullishValuesInArrays: boolean,\n) {\n  let cleanedFormData = dropNullValues(formData)\n  if (dropNullishValuesInArrays) {\n    cleanedFormData = dropNullishArrayValues(cleanedFormData)\n  }\n  return cleanedFormData\n}\n\n/**\n * Renders a form for editing an entity's annotations. The component also supports supplying just a schema ID,\n * but work to support annotation flows without an entity (i.e. before creating entities) is not yet complete.\n */\nexport function SchemaDrivenAnnotationEditor(\n  props: SchemaDrivenAnnotationEditorProps,\n) {\n  const {\n    entityId,\n    schemaId,\n    validationSchema: validationSchemaFromProps,\n    liveValidate = false,\n    onSuccess = () => {\n      /* no-op */\n    },\n    onCancel,\n    formRef: formRefFromParent,\n    onChange,\n  } = props\n  const localRef = useRef<RJSF>(null)\n  const ref = formRefFromParent ?? localRef\n\n  // Client-side validation errors\n  const [validationError, setValidationError] = React.useState<\n    RJSFValidationError[] | undefined\n  >(undefined)\n\n  // Errors from the backend response\n  const [submissionError, setSubmissionError] = React.useState<\n    SynapseClientError | undefined\n  >(undefined)\n  const [showSubmissionError, setShowSubmissionError] = React.useState(false)\n\n  const [showConfirmation, setShowConfirmation] = React.useState(false)\n\n  const { entityMetadata: entityJson, annotations } = useGetJson(\n    entityId!,\n    // Derived annotations will be precomputed and displayed as placeholders in the form\n    false,\n    {\n      // Metadata is being edited, so don't refetch\n      staleTime: Infinity,\n      enabled: !!entityId,\n      useErrorBoundary: true,\n    },\n  )\n\n  // Annotation fields fetched and modified via the form\n  const [formData, setFormData] = React.useState<\n    Record<string, unknown> | undefined\n  >(annotations)\n\n  /**\n   * patternProperties lets us define how to treat additionalProperties in a JSON schema by property name.\n   * In all cases, let's ban properties that collide with entity properties by making their schema \"not: {}\"\n   */\n  const patternPropertiesBannedKeys = useMemo(\n    () => getPatternPropertiesBannedKeys(entityJson?.concreteType),\n    [entityJson?.concreteType],\n  )\n\n  const transformErrors = useCallback(\n    getTransformErrors(entityJson?.concreteType),\n    [entityJson?.concreteType],\n  )\n\n  useEffect(() => {\n    if (annotations) {\n      // Put the annotations into a state variable so it can be modified by the form.\n      setFormData(annotations)\n    }\n  }, [annotations])\n\n  const { data: schema, isLoading: isLoadingBinding } = useGetSchemaBinding(\n    entityId!,\n    {\n      enabled: !!entityId,\n      refetchOnWindowFocus: false,\n      useErrorBoundary: true,\n    },\n  )\n\n  const { data: fetchedValidationSchema, isLoading: isLoadingSchema } =\n    useGetSchema(schemaId ?? schema?.jsonSchemaVersionInfo.$id ?? '', {\n      enabled: !!schemaId || !!schema,\n      useErrorBoundary: true,\n    })\n\n  const validationSchema = validationSchemaFromProps || fetchedValidationSchema\n\n  const isLoading = isLoadingBinding || isLoadingSchema\n\n  const mutation = useUpdateViaJson({\n    onSuccess: () => {\n      onSuccess()\n    },\n    onError: error => {\n      setSubmissionError(error)\n      setShowSubmissionError(true)\n    },\n  })\n\n  function submitChangedEntity() {\n    mutation.mutate({\n      ...cleanFormData(formData, true),\n      ...entityJson,\n    } as EntityJson)\n  }\n\n  return (\n    <div className=\"JsonSchemaFormContainer\">\n      {isLoading ? (\n        <div className=\"LoadingPlaceholder\">\n          <SynapseSpinner size={30} />\n        </div>\n      ) : (\n        <>\n          {entityJson && schema && (\n            <Alert severity=\"info\" sx={{ mb: 2 }}>\n              <b>{entityJson.name}</b> requires scientific annotations specified\n              by <b>{schema.jsonSchemaVersionInfo.$id}</b>\n              {'. '}\n              <b>\n                <Link\n                  href={`${getEndpoint(\n                    BackendDestinationEnum.REPO_ENDPOINT,\n                  )}/repo/v1/schema/type/registered/${\n                    schema.jsonSchemaVersionInfo.$id\n                  }`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  View required schema (JSON)\n                </Link>\n              </b>\n            </Alert>\n          )}\n          {entityJson && isEmpty(formData) && schema === null && (\n            <Alert severity=\"info\">\n              <Box display={'flex'} alignItems={'center'} gap={0.5}>\n                <Typography variant={'smallText1'}>\n                  <b>{entityJson.name}</b> has no annotations. Click the{' '}\n                </Typography>\n                <AddToList />\n                <Typography variant={'smallText1'}>\n                  button to annotate.\n                </Typography>\n              </Box>\n            </Alert>\n          )}\n          {formData != undefined && (\n            <Form\n              validator={validator}\n              className=\"JsonSchemaForm\"\n              liveValidate={liveValidate}\n              noHtml5Validate={true}\n              experimental_defaultFormStateBehavior={{\n                emptyObjectFields: 'skipDefaults',\n              }}\n              fields={{\n                ObjectField: CustomObjectField,\n              }}\n              templates={{\n                ArrayFieldDescriptionTemplate: ArrayFieldDescriptionTemplate,\n                ArrayFieldItemTemplate: ArrayFieldItemTemplate,\n                ArrayFieldTemplate: ArrayFieldTemplate,\n                ArrayFieldTitleTemplate: ArrayFieldTitleTemplate,\n                BaseInputTemplate: BaseInputTemplate,\n                FieldErrorTemplate: FieldErrorTemplate,\n                FieldTemplate: FieldTemplate,\n                ObjectFieldTemplate: ObjectFieldTemplate,\n                WrapIfAdditionalTemplate: WrapIfAdditionalTemplate,\n                ButtonTemplates: ButtonTemplate,\n                DescriptionFieldTemplate: DescriptionFieldTemplate,\n                ErrorListTemplate: ErrorListTemplate,\n              }}\n              ref={ref}\n              disabled={mutation.isLoading}\n              schema={\n                {\n                  ...(validationSchema ?? {}),\n                  patternProperties: {\n                    ...(validationSchema?.patternProperties ?? {}),\n                    ...patternPropertiesBannedKeys,\n                  },\n                  additionalProperties:\n                    validationSchema?.additionalProperties ?? true,\n                } as JSONSchema7\n              }\n              uiSchema={{\n                'ui:options': {\n                  copyable: true,\n                  duplicateKeySuffixSeparator: '_',\n                },\n                additionalProperties: {\n                  'ui:field': AdditionalPropertiesSchemaField,\n                },\n              }}\n              transformErrors={transformErrors}\n              formData={formData}\n              onChange={({ formData }) => {\n                if (onChange) {\n                  onChange(formData)\n                }\n                setFormData(formData)\n                setValidationError(undefined)\n              }}\n              onBlur={() => {\n                setFormData(\n                  // Clean the formData onBlur to remove null values that we will need to strip before submission\n                  // This will ensure that the user gets accurate validation information since the data will match what the backend will receive\n                  cleanFormData(\n                    formData,\n                    // Don't remove null values in arrays--the fields will disappear, which the user probably does not want\n                    false,\n                  ),\n                )\n              }}\n              onSubmit={({ formData, errors }, event) => {\n                event.preventDefault()\n                if (errors && errors.length > 0) {\n                  setValidationError(errors)\n                }\n                setShowSubmissionError(false)\n                setFormData(formData)\n                submitChangedEntity()\n              }}\n              onError={(errors: RJSFValidationError[]) => {\n                // invoked when submit is clicked and there are client-side validation errors\n                setValidationError(errors)\n                if (validationError && entityId) {\n                  setShowConfirmation(true)\n                }\n              }}\n              widgets={{\n                TextWidget: TextWidget,\n                DateTimeWidget: DateTimeWidget,\n                SelectWidget: SelectWidget,\n                CheckboxWidget: BooleanWidget,\n              }}\n            >\n              {submissionError && showSubmissionError && (\n                <Alert severity=\"error\" sx={{ my: 2 }}>\n                  Annotations could not be updated: {submissionError.reason}\n                </Alert>\n              )}\n              {!formRefFromParent && (\n                <>\n                  <Divider sx={{ my: 2 }} />\n                  <Box\n                    display=\"flex\"\n                    justifyContent=\"space-between\"\n                    sx={{ gridRowStart: 5 }}\n                  >\n                    <ConfirmationButtons\n                      hasCancelButton={onCancel !== undefined}\n                      onCancel={() => {\n                        onCancel && onCancel()\n                      }}\n                      onConfirm={() => {\n                        ref.current!.formElement.current.requestSubmit()\n                      }}\n                      confirmButtonProps={{\n                        children: entityId ? 'Save' : 'Validate',\n                      }}\n                    />\n                  </Box>\n                </>\n              )}\n            </Form>\n          )}\n          {showConfirmation && (\n            <ConfirmationDialog\n              open={true}\n              onConfirm={() => {\n                submitChangedEntity()\n                setShowConfirmation(false)\n              }}\n              onCancel={() => {\n                setShowConfirmation(false)\n              }}\n              title=\"Update Annotations\"\n              content={\n                <>\n                  <div>\n                    The following errors exist with the annotations you entered:\n                  </div>\n                  <div>\n                    <ul>\n                      {(validationError ?? []).map(\n                        (e: RJSFValidationError, index: number) => (\n                          <li key={index}>\n                            <b>{`${getFriendlyPropertyName(e)}: `}</b>{' '}\n                            {`${e.message}`}\n                          </li>\n                        ),\n                      )}\n                    </ul>\n                  </div>\n                  <div>\n                    Are you sure you want to save the invalid annotations?\n                  </div>\n                </>\n              }\n              confirmButtonProps={{\n                children: 'Save',\n              }}\n            />\n          )}\n        </>\n      )}\n    </div>\n  )\n}\n"],"names":["useGetSchemaBinding","entityId","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient","useGetValidationResults","useGetSchema","schema$id","AddToList","props","jsx","SvgIcon","ISO_TIMESTAMP_REGEX","propertyTypeArray","guessPropertyType","list","item","transformDataFromPropertyType","propertyType","asFloat","getSchemaForPropertyType","AdditionalPropertiesSchemaField","formData","onChange","registry","schema","name","onDropPropertyClick","idSchema","id","ArrayField","SelectWidget","setPropertyType","useState","convertToArray","nextPropertyType","setNextPropertyType","useEffect","onNextPropertyTypeUpdate","dataIsEmpty","coercedList","isEqual","coerceDataAndUpdateWidget","itemsSchema","jsxs","AdditionalPropertyContextProvider","e","Grid","InputLabel","type","value","FullWidthAlert","Fragment","ObjectFieldTemplate","description","disabled","onAddClick","properties","readonly","required","title","uiSchema","getUiOptions","TitleFieldTemplate","getTemplate","DescriptionFieldTemplate","previousSchemaDefinedProperties","useRef","useDeepCompareEffectNoCheck","propertyKeys","schemaDefinedProperties","key","ADDITIONAL_PROPERTY_FLAG","lostProperties","schemaDefinedProperty","displayToast","prop","canExpand","Tooltip","Button","CustomObjectField","ObjectField","getDefaultRegistry","newFormData","PROPERTIES_KEY","propertySchema","data","v","deepEquals","WrapIfAdditionalTemplate","classNames","label","onKeyChange","children","translateString","keyLabel","TranslatableString","handleBlur","target","TextField","FieldTemplate","errors","help","hidden","displayLabel","uiOptions","showDetails","setShowDetails","IconButton","HelpOutline","Collapse","getTypeAsString","_enum","typesCommaSeparated","nextType","FieldDescriptionTable","typeString","Typography","TYPES_THAT_SHRINK_LABEL","BaseInputTemplate","placeholder","onChangeOverride","onBlur","onFocus","autofocus","rawErrors","formContext","InputLabelProps","textFieldProps","hideLabel","inputProps","getInputProps","step","min","max","rest","otherProps","examplesId","_onChange","value2","_onBlur","_onFocus","DisplayInputLabelProps","derivedValuePlaceholder","labelValue","ariaDescribedByIds","example","FieldErrorTemplate","errorId","List","error","i","ListItem","FormHelperText","getPatternPropertiesBannedKeys","concreteType","entityJsonKeys","current","cleanFormData","dropNullishValuesInArrays","cleanedFormData","dropNullValues","dropNullishArrayValues","SchemaDrivenAnnotationEditor","schemaId","validationSchemaFromProps","liveValidate","onSuccess","onCancel","formRefFromParent","localRef","ref","validationError","setValidationError","React","submissionError","setSubmissionError","showSubmissionError","setShowSubmissionError","showConfirmation","setShowConfirmation","entityJson","annotations","useGetJson","setFormData","patternPropertiesBannedKeys","useMemo","transformErrors","useCallback","getTransformErrors","isLoadingBinding","fetchedValidationSchema","isLoadingSchema","validationSchema","isLoading","mutation","useUpdateViaJson","submitChangedEntity","SynapseSpinner","Alert","Link","getEndpoint","BackendDestinationEnum","isEmpty","Box","Form","validator","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","ArrayFieldTemplate","ArrayFieldTitleTemplate","ButtonTemplate","ErrorListTemplate","formData2","event","TextWidget","DateTimeWidget","BooleanWidget","Divider","ConfirmationButtons","ConfirmationDialog","index","getFriendlyPropertyName"],"mappings":"gtDAOgB,SAAAA,GACdC,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,GAAkB,EAC/C,OAAAC,GACLF,EAAW,iCAAiCH,CAAQ,EACpD,IAAMM,GAAc,iBAAiBN,EAAUE,CAAW,EAC1DD,CAAA,CAEJ,CAEgB,SAAAM,GACdP,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,GAAkB,EAE/C,OAAAC,GACLF,EAAW,yCAAyCH,CAAQ,EAC5D,IAAMM,GAAc,2BAA2BN,EAAUE,CAAW,EACpED,CAAA,CAEJ,CCpBgB,SAAAO,GACdC,EACAR,EACA,CACM,KAAA,CAAE,WAAAE,GAAeC,KAChB,OAAAC,GACLF,EAAW,4BAA4BM,CAAS,EAChD,UACmB,MAAMH,GAAc,oBAAoBG,CAAS,GAClD,iBAElBR,CAAA,CAEJ,CCpBA,MAAAS,EAAAC,GACEC,EACEC,GAAC,CAAA,GAAAF,EACK,MAAA,KACE,OAAA,KACC,QAAA,YACC,KAAA,OACH,MAAA,6BACC,SAAAC,EAAA,OAAA,CAAA,EAAA,+FAAA,CAAA,CAEkG,CAAA,yWCC9G,MAAAE,GAAA,8CAGAC,GAAA,CAA0B,SACxB,UACA,QACA,UACA,UAEF,EAIO,SAAAC,EAAAC,EAAA,CACL,OAAAA,EAAA,SAAA,EAEE,SAAOA,EAAA,MAEFC,GAAA,OAAAA,GAAA,UAAAA,IAAA,KAC0C,EAG/CD,EAAA,MAAAC,GAAA,OAAA,UAAAA,CAAA,CAAA,EACE,UAEA,QACFD,EAAA,MAAAC,GAAA,OAAAA,GAAA,SAAA,EAEA,UAAOD,EAAA,MAAAC,GAAA,OAAAA,GAAA,QAAA,GAAAD,EAAA,MAAAC,GAAA,CAAA,CAAAJ,GAAA,KAAAI,CAAA,CAAA,EAKP,WAGF,QACF,CAEO,SAAAC,GAAAF,EAAAG,EAAA,CAIL,OAAAA,EAAA,CAAsB,IAAA,UAElB,OAAAH,EAAA,IAAYC,GAAA,OAAA,MAAA,OAAAA,CAAA,CAAA,EAAA,EAAA,KAAA,MAAA,OAAAA,CAAA,CAAA,CAC8C,EAC1D,IAAA,QAGA,OAAAD,EAAA,IAAAC,GAAA,CACE,MAAAG,EAAA,WAAAH,CAAA,EACA,OAAA,OAAA,MAAAG,CAAA,EACE,MAAO,OAAA,UAAAA,CAAA,EAEPA,EAAA,QAAA,CAAA,EAEAA,CACF,CAAA,EACD,IAAA,WAED,OAAAJ,EAAA,IAAAC,GACE,OAAAA,GAAA,UAAAJ,GAAA,KAAAI,CAAA,EACEA,EAEA,IAAA,OAAA,aACF,EACD,IAAA,UAED,OAAAD,EAAA,IAAAC,GAAA,CAAA,CAAAA,CAAA,EAA8B,IAAA,SAC3B,QAEH,OAAAD,EAAA,IAAAC,GAAA,OAAAA,CAAA,CAAA,CAAoC,CAE1C,CAMO,SAAAI,EAAAF,EAAA,CACL,OAAAA,EAAA,CAAsB,IAAA,WAElB,MAAA,CAAA,KAAA,SAAA,OAAA,UAAA,EAA4C,IAAA,UAE5C,MAAA,CAAA,KAAA,WAAyB,IAAA,QAEzB,MAAA,CAAA,KAAA,UAAwB,IAAA,UAExB,MAAA,CAAA,KAAA,WAAyB,IAAA,SACtB,QAEH,MAAA,CAAA,KAAA,SAAwB,CAE9B,CAcO,SAAAG,EAAAZ,EAAA,CASL,KAAA,CAAM,SAAAa,EACJ,SAAAC,EACA,SAAAC,EACA,OAAAC,EACA,KAAAC,EACA,oBAAAC,EACA,SAAAC,CACA,EAAAnB,EAEFoB,EAAAD,EAAA,IACA,CAAA,WAAAE,CAAA,EAAAN,EAAA,OACA,CAAA,aAAAO,CAAA,EAAAP,EAAA,QAGA,CAAAN,EAAAc,CAAA,EAAAC,EAAA,SAAwCnB,EAAAoB,EAAAZ,CAAA,CAAA,CACI,EAI5C,CAAAa,EAAAC,CAAA,EAAAH,EAAA,SAAAf,CAAA,EAKAmB,EAAAA,UAAA,IAAA,CACE,SAAAC,GAAA,CACE,GAAA,MAAA,QAAAhB,CAAA,EAAA,CACE,MAAAiB,EAAAjB,EAAA,SAAA,GAAAA,EAAA,MAAAN,GAAAA,GAAA,MAAAA,GAAA,EAAA,EAGAwB,EAAAvB,GAAoBK,EAClBa,CACA,GAGFI,GAAAJ,IAAAjB,IACEuB,GAAAnB,EAAAkB,CAAA,GACER,EAAAG,CAAA,CAEJ,CACF,CAGFG,GAAyB,EAAA,CAAAH,CAAA,CAAA,EAO3BE,EAAAA,UAAA,IAAA,CACE,SAAAK,GAAA,CACE,GAAA,MAAA,QAAApB,CAAA,EACE,GAAAA,EAAA,MAAAN,GAAAA,GAAA,IAAA,EACEW,EAAAD,CAAA,EAAA,IAAA,YAAA,mBAAA,CAAA,MAA8D,CAE9D,MAAAc,EAAAvB,GAAoBK,EAClBa,CACA,EAIFH,EAAAG,CAAA,EAEAZ,EAAAiB,CAAA,CAAoB,CAExB,CAGFE,GAA0B,EAAA,CAAAxB,CAAA,CAAA,EAM5B,MAAAyB,EAAAvB,EAAAF,CAAA,EAKA,OAAA,MAAA,QAAAI,CAAA,EAKAsB,EACEC,GAAC,CAAA,MAAA,CACQ,aAAAC,GAAA,CAEHnB,EAAAD,CAAA,EAAAoB,CAAA,CAA2B,CAC7B,EACF,SAAA,CAEAF,EAAAG,EAAA,CAAA,KAAA,GAAA,GAAA,EAAA,SAAA,CACErC,EAAAsC,GAAA,CAAA,QAAA,GAAAnB,CAAA,QAAA,SAAA,OAAA,EAAuCnB,EACvCqB,EAAC,CAAA,KAAA,OACO,GAAA,GAAAF,CAAA,QACG,OAAA,CAAA,EACA,QAAA,CACA,YAAAhB,GAAA,IAAAoC,IAAA,CACqC,MAAAA,EACnC,MAAAA,CACA,EAAA,CACP,EACJ,MAAA/B,EACO,SAAAgC,GAAA,CAELd,EAAAc,CAAA,CAAyC,EAC3C,SAAAzC,EAAA,SACgB,SAAAA,EAAA,SACA,SAAA,GACN,YAAA,GACG,OAAA,IAAA,CACC,EAAC,QAAA,IAAA,CACA,EAAC,SAAAe,EAChB,MAAA,MACO,CAAA,CACT,EAAA,EACFd,EAAAqC,EAAA,CAAA,KAAA,GAAA,GAAA,EAAA,SAAArC,EAEEoB,EAAC,CAAA,GAAArB,EACK,OAAA,CACI,GAAAgB,EACH,MAAA,CACI,GAAAkB,CACF,CACL,CACF,CAAA,EAAA,EAEJzB,IAAAiB,GAAAzB,EAEEyC,GAAC,CAAA,QAAA,UACS,MAAA,yCACF,YAAA,oCAAAzB,CAAA,SAAAR,CAAA,OAAAiB,CAAA,8CAC2F,oBAAA,CAC5E,KAAA,UACb,QAAA,IAAA,CAEJH,EAAAG,CAAA,CAAgC,CAClC,EACF,sBAAA,CACuB,KAAA,SACf,QAAA,IAAA,CAEJC,EAAAlB,CAAA,CAAgC,CAClC,EACF,SAAA,EACU,CAAA,CACZ,CAAA,CAAA,GAnEJK,EAAAW,EAAAZ,CAAA,CAAA,EACAZ,EAAA0C,EAAA,CAAA,CAAA,EAsEJ;;;;;;;8RC/PO,SAAAC,EAAA5C,EAAA,CAKL,KAAA,CAAM,YAAA6C,EACJ,SAAAC,EACA,SAAAjC,EACA,SAAAM,EACA,WAAA4B,EACA,WAAAC,EACA,SAAAC,EACA,SAAAlC,EACA,SAAAmC,EACA,OAAAlC,EACA,MAAAmC,EACA,SAAAC,CACA,EAAApD,EAGFV,EAAA+D,GAAAD,CAAA,EACAE,EAAAC,EAA2B,qBACzBxC,EACAzB,CACA,EAEFkE,EAAAD,EAAA,2BAAAxC,EAAAzB,CAAA,EAUAmE,EAAAC,EAAAA,OAAA,IAAA,GAAA,EAWA,OAAAC,GAAA,IAAA,CACE,GAAA,eAAA3C,GAAAA,EAAA,WAAA,CACE,MAAA4C,EAAA,OAAA,KAAA5C,EAAA,UAAA,EAEA6C,EAAA,IAAA,IAAoCD,EAAA,OAAAE,GAMhC,CAJA9C,EAAA,WAAA8C,CAAA,EAIAC,EAAA,CAA+C,CAChD,EAGH,GAAAN,EAAA,SAAA,KAAA,CAEE,MAAAO,EAAA,MAAA,KAA6BP,EAAA,OACK,EAAA,OAAAQ,GAEhC,CAAAJ,EAAA,IAAAI,CAAA,GAEoD,CAAA,CAAApD,GAEhDA,EAAAoD,CAAA,GAAA,MAGiC,MAAA,QAAApD,EAAAoD,CAAA,CAAA,GAAApD,EAAAoD,CAAA,EAAA,OAGe1D,GAAAA,GAAA,IAChC,EAAA,OAAA,CACP,EAGfyD,EAAA,OAAA,GAEEE,GAAA,6GAAAF,EAAA,KAC8H,IAC1H,CAAA,IACD,UACD,CACA,MAAA,sCACS,CACT,CAEJ,CAGFP,EAAA,QAAAI,CAA0C,CAC5C,EAAA,CAAA7C,EAAA,UAAA,CAAA,EAGFmB,EAAA,WAAA,CAAA,GAAAhB,EAAA,IAAA,SAAA,EAEM7B,EAAA,OAAA6D,IAAAlD,EACAqD,EAAC,CAAA,GAAA,GAAAnC,EAAA,GAAA,UACoB,OAAAH,EACnB,MAAA1B,EAAA,OAAA6D,EACwB,SAAAD,EACxB,SAAAE,EACA,SAAArC,CACA,CAAA,GACFzB,EAAA,aAAAuD,IAAA5C,EAGAuD,EAAC,CAAA,GAAA,GAAArC,EAAA,GAAA,gBACoB,YAAA7B,EAAA,aAAAuD,EACiB,SAAA9B,EACpC,OAAAC,CACA,CAAA,EACFgC,EAAA,IAAAmB,GAAAA,EAAA,OAAA,EAEqEC,GAAApD,EAAAoC,EAAAvC,CAAA,GAAAZ,EAAAoE,GAAA,CAAA,MAAA,yBAAA,UAAA,MAAA,SAAApE,EAInEqE,GAAC,CAAA,GAAA,CAAA,GAAA,CAAA,EACa,QAAA,YACJ,UAAA,yBACE,QAAAvB,EAAA/B,CAAA,EACgB,SAAA8B,GAAAG,EACJ,aAAA,mBACV,SAAAhD,EAAAF,EAAA,EAAA,CAED,CAAA,EAAA,CAEf,CAAA,CAAA,CAIR;;;;;g7ECpJO,SAAAwE,EAAAvE,EAAA,CAKL,KAAA,CAAM,OAAA,CAAA,YAAAwE,CAAA,CACkB,EAAAC,GAAA,EAQxB7C,OAAAA,EAAAA,UAAA,IAAA,CACE,KAAA,CAAA,OAAAZ,EAAA,SAAAH,EAAA,SAAAC,CAAA,EAAAd,EACA0E,EAAA,CAAA,GAAA7D,GACAG,EAAA2D,EAAA,IACE,OAAA,QAAA3D,EAAA2D,EAAA,CAAA,EAAA,QAAuC,CAAA,CAAAb,EAAAc,CAAA,IAAA,CAEnC,MAAAC,EAAAH,EAAAZ,CAAA,EACAc,EAAAb,EAAA,EAWE,MAAA,QAAAc,CAAA,IACEH,EAAAZ,CAAA,EAAArC,EAAAoD,CAAA,GASF,OAAAD,GAAA,UAAA,SAAAA,GAAAA,EAAA,OAAA,SAAA,MAAA,QAAAC,CAAA,IAMEH,EAAAZ,CAAA,EAAAe,EAAA,IAAAC,GAAA,GAAAA,CAAA,EAAA,EAAA,KAAA,IAAA,EAEJ,CACF,EAEFC,GAAAlE,EAAA6D,CAAA,GACE5D,EAAA4D,CAAA,EAEJ,CAAA,EAGFzE,EAAAuE,EAAA,CAAA,GAAAxE,CAAA,CAAA,CACF,kIC7DA,SAAAgF,EAAAhF,EAAA,CAKE,KAAA,CAAM,GAAAoB,EACJ,WAAA6D,EACA,SAAAnC,EACA,MAAAoC,EACA,YAAAC,EACA,SAAAlC,EACA,SAAAC,EACA,OAAAlC,EACA,SAAAoE,EACA,SAAArE,CACA,EAAAf,EAEF,CAAA,gBAAAqF,CAAA,EAAAtE,EACAuE,EAAAD,EAAAE,GAAA,SAAA,CAAA,EAAA,CAAA,EAGA,GAAA,EAFAxB,MAAA/C,GAGE,OAAAf,EAAA,MAAA,CAAA,UAAAgF,EAAA,SAAAG,CAAA,CAAA,EAGF,MAAAI,EAAA,CAAA,CAAA,OAAAC,KAAA,CAGEA,GAAYN,EAAAM,EAAA,KAAA,CAAwB,EAGtC,OAAAxF,EAAA,MAAA,CAAA,UAAAgF,EAAA,SAAA9C,EAAAG,EAAA,CAAA,UAAA,GAAA,GAAA,CAAA,GAAA,CAAA,EAAA,cAAA,EAAA,WAAA,EAAA,SAAA,CAGMrC,EAAAqC,EAAA,CAAA,KAAA,GAAA,GAAA,EAAA,SAAArC,EACEyF,GAAC,CAAA,UAAA,GACY,SAAAxC,EACX,MAAAoC,EACO,aAAAJ,EACO,SAAApC,GAAAG,EACQ,GAAA,GAAA7B,CAAA,OACb,KAAA,GAAAA,CAAA,OACE,OAAA6B,EAAA,OAAAuC,EACsB,KAAA,MAC5B,CAAA,EAAA,EAETJ,CACC,CAAA,CAAA,CAAA,CAAA,CAMT,g2ECtDO,SAAAO,EAAA3F,EAAA,CAKL,KAAA,CAAM,GAAAoB,EACJ,MAAA8D,EACA,SAAAE,EACA,OAAAQ,EACA,KAAAC,EACA,YAAAhD,EACA,OAAAiD,EACA,SAAA5C,EACA,aAAA6C,EACA,SAAAhF,EACA,SAAAqC,EACA,OAAApC,CACA,EAAAhB,EAEFgG,EAAA3C,GAAAD,CAAA,EACA4B,EAAAzB,EAAA,2BAAAxC,EAAAiF,CAAA,EAMA,CAAAC,EAAAC,CAAA,EAAA1E,EAAA,SAAA,EAAA,EAEA,OAAAsE,EACE7F,EAAA,MAAA,CAAA,UAAA,SAAA,SAAAmF,CAAA,CAAA,EAEFjD,EAAA6C,EAAA,CAAA,GAAAhF,EAAA,SAAA,EAGM+F,GAAA/E,EAAA,OAAA,YAAAmB,EAAA,MAAA,CAAA,UAAA,iBAAA,SAAA,CAEEA,EAAAI,GAAA,CAAA,QAAAnB,EAAA,SAAA,CACG8D,EAAAhC,GAAAjD,EAAA,OAAA,CAAA,UAAA,WAAA,SAAA,IAAA,CACwC,EAAA,EAC3CA,EAAAoE,GAAA,CAAA,MAAA,YAAA,SAAApE,EAEEkG,GAAC,CAAA,QAAA9D,GAAA,CAEGA,EAAA,eAAA,EACA6D,EAAA,CAAAD,CAAA,CAA2B,EAC7B,gBAAAA,EACe,KAAA,QACT,SAAAhG,EAENmG,GAAC,CAAA,MAAA,UACQ,GAAA,CAAA,MAAA,OAAA,OAAA,MAAA,CAC6B,CAAA,CACtC,CAAA,EAAA,CAEJ,EAAA,EACFhB,EAEDnF,EAAAqC,EAAA,CAAA,KAAA,GAAA,GAAA,GAAA,SAAAsD,EAAA,EAGD3F,EAAAoG,GAAA,CAAA,UAAA,oBAAA,GAAAJ,EAAA,SAAApD,EAAA,EAGAgD,CACC,CAAA,CAAA,CAGP;i+CCzEA,SAAAS,GAAAtF,EAAA,CAGE,GAAA,MAAA,QAAAA,CAAA,GAAA,OAAAA,GAAA,UACE,MAAA,UAEF,KAAA,CAAA,KAAAwB,EAAA,KAAA+D,CAAA,EAAAvF,EAEA,OAAAwB,IAAA,SAAA,OAAAxB,EAAA,OAAA,SACE,WAAAsF,GAAAtF,EAAA,KAAA,CAAA,GAGFuF,EACE,cAGF,MAAA,QAAA/D,CAAA,EACEA,EAAA,OAAY,CAAAgE,EAAAC,IAAA,GAAAD,CAAA,KAAAC,CAAA,GAC4D,EACtE,EAGJjE,GAAA,SACF,CAEA,SAAAkE,GAAA1G,EAAA,CAGE,KAAA,CAAA,YAAA6C,EAAA,OAAA7B,CAAA,EAAAhB,EAEA2G,EAAAL,GAAAtF,CAAA,EAEA,OAAAf,EAAAoG,GAAA,CAAA,UAAA,oBAAA,GAAA,GAAA,SAAApG,EAAA,QAAA,CAAA,UAAA,wBAAA,SAAAkC,EAAA,QAAA,CAAA,SAAA,CAISU,GAAAV,EAAA,KAAA,CAAA,SAAA,CAEGlC,EAAA,KAAA,CAAA,SAAA,aAAA,CAAA,EAAeA,EAAA,KAAA,CAAA,SAAA4C,CAAA,CAAA,CACE,EAAA,EACnBV,EAAA,KAAA,CAAA,SAAA,CAGAlC,EAAA,KAAA,CAAA,SAAA,MAAA,CAAA,EAAQA,EAAA,KAAA,CAAA,SAAA0G,CAAA,CAAA,CACQ,EAAA,CAClB,EAAA,CAAA,CAAA,CAAA,CAAA,CAKV,oUCtDA,SAAAnD,GAAAxD,EAAA,CACE,KAAA,CAAA,YAAA6C,EAAA,OAAA7B,EAAA,CAAA,CAAA,EAAAhB,EAEA,OAAAgB,EAAA,OAAA,SACEf,EAAA2G,EAAA,CAAA,QAAA,QAAA,GAAA,CAAA,GAAA,CAAA,EAAA,SAAA/D,CAAA,CAAA,EAOF5C,EAAAyG,GAAA,CAAA,OAAA1F,EAAA,YAAA6B,CAAA,CAAA,CACF,u4BCHA,MAAAgE,GAAA,CAAA,OAAA,iBAAA,OAAA,MAAA,EAQA,SAAAC,GAAA9G,EAAA,CAKE,KAAA,CAAM,GAAAoB,EACJ,KAAAH,EACA,YAAA8F,EACA,SAAA7D,EACA,SAAAD,EACA,SAAAH,EACA,KAAAN,EACA,MAAA0C,EACA,MAAAzC,EAEA,SAAA3B,EACA,iBAAAkG,EACA,OAAAC,EACA,QAAAC,EACA,UAAAC,EACA,QAAA7H,EACA,OAAA0B,EACA,SAAAoC,EACA,UAAAgE,EAAA,CAAA,EACa,YAAAC,EACb,SAAAtG,EACA,gBAAAuG,EACA,GAAAC,CACG,EAAAvH,EAELwH,EAAA,GACAC,EAAAC,GAAA1G,EAAAwB,EAAAlD,CAAA,EAEA,CAAA,KAAAqI,EAAA,IAAAC,EAAA,IAAAC,EAAA,GAAAC,CAAA,EAAAL,EACAM,EAAA,CAAmB,WAAA,CACL,KAAAJ,EACV,IAAAC,EACA,IAAAC,EACA,GAAA7G,EAAA,SAAA,CAAA,KAAAgH,GAAA5G,CAAA,CAAA,EAAA,MACoD,EACtD,GAAA0G,CACG,EAELG,EAAA,CAAA,CAAA,OAAA,CAAA,MAAAC,CAAA,CAAA,IAAApH,EAAAoH,IAAA,GAAA5I,EAAA,WAAA4I,CAAA,EAEAC,EAAA,CAAA,CAAA,OAAA,CAAA,MAAAD,CAAA,CAAA,IAAAjB,EAAA7F,EAAA8G,CAAA,EAEAE,EAAA,CAAA,CAAA,OAAA,CAAA,MAAAF,CAAA,CAAA,IAAAhB,EAAA9F,EAAA8G,CAAA,EAEAG,EAAAxB,GAAA,SAAArE,CAAA,EAAA,CACI,GAAA8E,EACK,OAAA,EACK,EAAAA,EAId,IAAAgB,EACA,OAAAtH,EAAA,SAAAA,EAAA,SACEsH,EAAA,KAAA,UAAAtH,EAAA,SAAAA,EAAA,KAAA,EAAA,cAIFmB,EAAAQ,EAAA,CAAA,SAAA,CAEI1C,EAAAyF,GAAC,CAAA,GAAAtE,EACC,KAAAA,EACM,YAAAkH,GAAAvB,EACkC,MAAAwB,GAAArD,GAAA,OAAAsC,EAAA,EAAA,EACc,UAAAL,EAC3C,SAAA,GACD,SAAArE,GAAAG,EACY,GAAA8E,EAClB,MAAAtF,GAAAA,IAAA,EAAAA,EAAA,GACkC,MAAA2E,EAAA,OAAA,EACZ,SAAAJ,GAAAiB,EACI,OAAAE,EACtB,QAAAC,EACC,gBAAAC,EACQ,GAAAd,EACZ,WAAA,CACO,aAAAnG,CACI,EAChB,mBAAAoH,GAAApH,EAAA,CAAA,CAAAJ,EAAA,QAAA,CAC6D,CAAA,EAC/D,MAAA,QAAAA,EAAA,QAAA,GAAAf,EAAA,WAAA,CAAA,GAAA+H,GAAA5G,CAAA,EAAA,SAAAJ,EAAA,SAAA,OAIOA,EAAA,SAAA,CAAAA,EAAA,SAAA,SAAAA,EAAA,OAAA,EAAA,CAAAA,EAAA,OAAA,EAAA,CAAA,CAGM,EAAA,IAAAyH,GAGLxI,EAAA,SAAA,CAAA,MAAAwI,CAAA,EAAAA,CAAA,CAA6C,EAAA,CAEnD,CAAA,CAAA,CAIR,sbC1GA,SAAAC,GAAA1I,EAAA,CAKE,KAAA,CAAA,OAAA4F,EAAA,CAAA,EAAA,SAAAzE,CAAA,EAAAnB,EACA,GAAA4F,EAAA,SAAA,EACE,OAAA,KAEF,MAAAxE,EAAAuH,GAAAxH,CAAA,EAEA,OAAAlB,EAAA2I,GAAA,CAAA,MAAA,GAAA,eAAA,GAAA,SAAAhD,EAAA,IAAA,CAAAiD,EAAAC,IAGM7I,EAAA8I,GAAA,CAAA,eAAA,GAAA,SAAA9I,EAAA+I,GAAA,CAAA,GAAA5H,EAAA,GAAA,CAAA,MAAA,cAAA,SAAAyH,EAAA,CAAA,EAAAC,CAAA,CAKE,CAAA,CAAA,CAKV,kiCCsCA,SAAAG,GAAAC,EAAA,CAGE,OAAAA,EAKAC,GAAAD,CAAA,EAAA,OAAoC,CAAAE,EAAA7I,KAEhC6I,EAAA,IAAA7I,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,GACA6I,GACF,CAAA,CACC,EATD,EAWJ,CAOA,SAAAC,GAAAxI,EAAAyI,EAAA,CAIE,IAAAC,EAAAC,GAAA3I,CAAA,EACA,OAAAyI,IACEC,EAAAE,GAAAF,CAAA,GAEFA,CACF,CAMO,SAAAG,GAAA1J,EAAA,CAGL,KAAA,CAAM,SAAAX,EACJ,SAAAsK,EACA,iBAAAC,EACkB,aAAAC,EAAA,GACH,UAAAC,EAAA,IAAA,CACG,EAElB,SAAAC,EACA,QAAAC,EACS,SAAAlJ,CACT,EAAAd,EAEFiK,EAAAvG,SAAA,IAAA,EACAwG,EAAAF,GAAAC,EAGA,CAAAE,EAAAC,CAAA,EAAAC,EAAA,SAAA,MAAA,EAKA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,MAAA,EAGA,CAAAG,EAAAC,CAAA,EAAAJ,EAAA,SAAA,EAAA,EAEA,CAAAK,EAAAC,CAAA,EAAAN,EAAA,SAAA,EAAA,EAEA,CAAA,eAAAO,EAAA,YAAAC,CAAA,EAAAC,GAAoDzL,EAClD,GAEA,CACA,UAAA,IAEa,QAAA,CAAA,CAAAA,EACA,iBAAA,EACO,CACpB,EAIF,CAAAwB,EAAAkK,CAAA,EAAAV,EAAA,SAAAQ,CAAA,EAQAG,EAAAC,EAAA,QAAoC,IAAAhC,GAAA2B,GAAA,YAAAA,EAAA,YAAA,EAC2B,CAAAA,GAAA,YAAAA,EAAA,YAAA,CACpC,EAG3BM,EAAAC,EAAA,YAAwBC,GAAAR,GAAA,YAAAA,EAAA,YAAA,EACqB,CAAAA,GAAA,YAAAA,EAAA,YAAA,CAClB,EAG3BhJ,EAAAA,UAAA,IAAA,CACEiJ,GAEEE,EAAAF,CAAA,CACF,EAAA,CAAAA,CAAA,CAAA,EAGF,KAAA,CAAA,KAAA7J,EAAA,UAAAqK,CAAA,EAAAjM,GAAsDC,EACpD,CACA,QAAA,CAAA,CAAAA,EACa,qBAAA,GACW,iBAAA,EACJ,CACpB,EAGF,CAAA,KAAAiM,EAAA,UAAAC,CAAA,EAAA1L,GAAA8J,IAAA3I,GAAA,YAAAA,EAAA,sBAAA,MAAA,GAAA,CACoE,QAAA,CAAA,CAAA2I,GAAA,CAAA,CAAA3I,EACvC,iBAAA,EACP,CAAA,EAGtBwK,EAAA5B,GAAA0B,EAEAG,EAAAJ,GAAAE,EAEAG,EAAAC,GAAA,CAAkC,UAAA,IAAA,CAE9B7B,GAAU,EACZ,QAAAjB,GAAA,CAEE0B,EAAA1B,CAAA,EACA4B,EAAA,EAAA,CAA2B,CAC7B,CAAA,EAGF,SAAAmB,GAAA,CACEF,EAAA,OAAA,CAAgB,GAAArC,GAAAxI,EAAA,EAAA,EACiB,GAAA+J,CAC5B,CAAA,CACU,CAGjB,OAAA3K,EAAA,MAAA,CAAA,UAAA,0BAAA,SAAAwL,EAAAxL,EAAA,MAAA,CAAA,UAAA,qBAAA,SAAAA,EAAA4L,GAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA,EAAA1J,EAAAQ,EAAA,CAAA,SAAA,CAQSiI,GAAA5J,GAAAmB,EAAA2J,EAAA,CAAA,SAAA,OAAA,GAAA,CAAA,GAAA,CAAA,EAAA,SAAA,CAEG7L,EAAA,IAAA,CAAA,SAAA2K,EAAA,IAAA,CAAA,EAAoB,iDAAI3K,EAAA,IAAA,CAAA,SAAAe,EAAA,sBAAA,IAAA,EACgB,KACvCf,EAAA,IAAA,CAAA,SAAAA,EAEC8L,GAAC,CAAA,KAAA,GAAAC,GACUC,GAAA,aACgB,CAAA,mCAAAjL,EAAA,sBAAA,GAAA,GAGzB,OAAA,SACO,IAAA,sBACH,SAAA,6BACL,CAAA,EAAA,CAGH,EAAA,EACF4J,GAAAsB,GAAArL,CAAA,GAAAG,IAAA,MAAAf,EAAA6L,EAAA,CAAA,SAAA,OAAA,SAAA3J,EAAAgK,GAAA,CAAA,QAAA,OAAA,WAAA,SAAA,IAAA,GAAA,SAAA,CAKIhK,EAAAyE,EAAA,CAAA,QAAA,aAAA,SAAA,CACE3G,EAAA,IAAA,CAAA,SAAA2K,EAAA,IAAA,CAAA,EAAoB,iCAAI,GAA+B,EAAA,EACzD3K,EAAAF,EAAA,EAAA,EACWE,EAAA2G,EAAA,CAAA,QAAA,aAAA,SAAA,sBAAA,CAGX,CAAA,CAAA,CAAA,CAAA,EAEJ/F,GAAA,MAAAsB,EAGAiK,GAAC,CAAA,UAAAC,GACC,UAAA,iBACU,aAAAxC,EACV,gBAAA,GACiB,sCAAA,CACsB,kBAAA,cAClB,EACrB,OAAA,CACQ,YAAAtF,CACO,EACf,UAAA,CACW,8BAAA+H,GACT,uBAAAC,GACA,mBAAAC,GACA,wBAAAC,GACA,kBAAA3F,GACA,mBAAA4B,GACA,cAAA/C,EACA,oBAAA/C,EACA,yBAAAoC,EACA,gBAAA0H,GACiB,yBAAAlJ,GACjB,kBAAAmJ,EACA,EACF,IAAAzC,EACA,SAAAwB,EAAA,UACmB,OAAA,CAEjB,GAAAF,GAAA,CAAA,EAC2B,kBAAA,CACN,IAAAA,GAAA,YAAAA,EAAA,oBAAA,CAAA,EAC2B,GAAAR,CACzC,EACL,sBAAAQ,GAAA,YAAAA,EAAA,uBAAA,EAE4C,EAC9C,SAAA,CAEQ,aAAA,CACM,SAAA,GACF,4BAAA,GACmB,EAC/B,qBAAA,CACsB,WAAA5K,CACR,CACd,EACF,gBAAAsK,EACA,SAAArK,EACA,SAAA,CAAA,CAAA,SAAA+L,KAAA,CAEE9L,GACEA,EAAA8L,CAAA,EAEF7B,EAAA6B,CAAA,EACAxC,EAAA,MAAA,CAA4B,EAC9B,OAAA,IAAA,CAEEW,EAAA1B,GAGExI,EACE,EAEA,CACF,CACF,EACF,SAAA,CAAA,CAAA,SAAA+L,EAAA,OAAAhH,CAAA,EAAAiH,IAAA,CAEEA,EAAA,eAAA,EACAjH,GAAAA,EAAA,OAAA,GACEwE,EAAAxE,CAAA,EAEF6E,EAAA,EAAA,EACAM,EAAA6B,CAAA,EACAhB,GAAoB,EACtB,QAAAhG,GAAA,CAGEwE,EAAAxE,CAAA,EACAuE,GAAA9K,GACEsL,EAAA,EAAA,CACF,EACF,QAAA,CACS,WAAAmC,GACP,eAAAC,GACA,aAAAzL,GACA,eAAA0L,EACgB,EAClB,SAAA,CAEC1C,GAAAE,GAAArI,EAAA2J,EAAA,CAAA,SAAA,QAAA,GAAA,CAAA,GAAA,CAAA,EAAA,SAAA,CACwC,qCAAAxB,EAAA,MACc,EAAA,EACrD,CAAAN,GAAA7H,EAAAQ,EAAA,CAAA,SAAA,CAIE1C,EAAAgN,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA,EAAwBhN,EACxBkM,GAAC,CAAA,QAAA,OACS,eAAA,gBACO,GAAA,CAAA,aAAA,CAAA,EACO,SAAAlM,EAEtBiN,GAAC,CAAA,gBAAAnD,IAAA,OAC+B,SAAA,IAAA,CAE5BA,GAAAA,EAAA,CAAqB,EACvB,UAAA,IAAA,CAEEG,EAAA,QAAA,YAAA,QAAA,cAAA,CAA+C,EACjD,mBAAA,CACoB,SAAA7K,EAAA,OAAA,UACY,CAChC,CAAA,CACF,CAAA,CACF,EAAA,CACF,CAAA,CAAA,EAEJqL,GAAAzK,EAGAkN,GAAC,CAAA,KAAA,GACO,UAAA,IAAA,CAEJvB,IACAjB,EAAA,EAAA,CAAyB,EAC3B,SAAA,IAAA,CAEEA,EAAA,EAAA,CAAyB,EAC3B,MAAA,qBACM,QAAAxI,EAAAQ,EAAA,CAAA,SAAA,CAGF1C,EAAA,MAAA,CAAA,SAAA,8DAAA,CAAA,EAEAA,EAAA,MAAA,CAAA,SAAAA,EAAA,KAAA,CAAA,UAAAkK,GAAA,CAAA,GAAA,IAG6B,CAAA9H,EAAA+K,IAAAjL,EAAA,KAAA,CAAA,SAAA,CAGnBlC,EAAA,IAAA,CAAA,SAAA,GAAAoN,GAAAhL,CAAA,CAAA,KAAA,EAAsC,IAAK,GAAAA,EAAA,OAAA,EAC9B,CAAA,EAAA+K,CAAA,CACf,CAAA,CAAA,CAAA,CAAA,EAIRnN,EAAA,MAAA,CAAA,SAAA,wDAAA,CAAA,CAGA,EAAA,EACF,mBAAA,CAEkB,SAAA,MACR,CACZ,CAAA,CACF,CAAA,CAAA,CAAA,CAAA,CAMZ;"}