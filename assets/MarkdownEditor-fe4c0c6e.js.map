{"version":3,"file":"MarkdownEditor-fe4c0c6e.js","sources":["../../src/components/Markdown/UserMentionModal.tsx","../../src/components/Markdown/MarkdownEditor.tsx"],"sourcesContent":["import React, { useCallback } from 'react'\nimport { DialogBase } from '../DialogBase'\nimport { TYPE_FILTER, UserGroupHeader } from '@sage-bionetworks/synapse-types'\nimport UserSearchBoxV2 from '../UserSearchBox/UserSearchBoxV2'\n\nexport type UserMentionModalProps = {\n  show: boolean\n  onClose: () => void\n  handleUserTag: (user: string) => void\n}\n\nexport const UserMentionModal: React.FC<UserMentionModalProps> = ({\n  show,\n  onClose,\n  handleUserTag,\n}: UserMentionModalProps) => {\n  const onUserChange = useCallback(\n    (selected: string | null, header: UserGroupHeader | null) => {\n      if (selected && header) {\n        handleUserTag(header.userName)\n      }\n      onClose()\n    },\n    [onClose, handleUserTag],\n  )\n\n  return (\n    <>\n      <DialogBase\n        open={show}\n        onCancel={onClose}\n        title=\"Find User or Team\"\n        content={\n          <UserSearchBoxV2\n            placeholder=\"Search for a user or team name\"\n            onChange={onUserChange}\n            typeFilter={TYPE_FILTER.ALL}\n            focusOnSelect={true}\n          />\n        }\n        sx={{\n          '.MuiDialog-paperFullWidth': {\n            overflowY: 'visible',\n            '.MuiDialogContent-root': { overflowY: 'visible' },\n          },\n        }}\n      />\n    </>\n  )\n}\n","import React, { useRef, useState, useEffect } from 'react'\nimport {\n  commandList,\n  CommandListType,\n  MARKDOWN_COMMANDS_DATA,\n} from '@sage-bionetworks/synapse-types'\nimport IconSvg from '../IconSvg/IconSvg'\nimport MarkdownSynapse from './MarkdownSynapse'\nimport { UserMentionModal } from './UserMentionModal'\nimport { startCase } from 'lodash-es'\n\nconst MarkdownEditorTabs = ['WRITE', 'PREVIEW'] as const\n\nexport type MarkdownEditorProps = {\n  placeholder?: string\n  text: string\n  setText: (text: string) => void\n}\n\nexport const MarkdownEditor: React.FunctionComponent<MarkdownEditorProps> = ({\n  placeholder,\n  text,\n  setText,\n}) => {\n  const [currentTab, setCurrentTab] =\n    useState<(typeof MarkdownEditorTabs)[number]>('WRITE')\n  const [selectionStart, setSelectionStart] = useState<number>(0)\n  const [isShowingTagModal, setIsShowingTagModal] = useState<boolean>(false)\n  const [tagModalWithKeyboard, setTagModalWithKeyboard] =\n    useState<boolean>(false)\n  const textAreaRef = useRef<HTMLTextAreaElement>(null)\n\n  /**\n   * Updates the position of the cursor. This must occur within `useEffect` because we need to ensure that the\n   * cursor position is updated after the state of `text` is updated.\n   */\n  useEffect(() => {\n    const input = textAreaRef.current\n    if (input) {\n      input.setSelectionRange(selectionStart, selectionStart)\n    }\n  }, [textAreaRef, selectionStart])\n\n  useEffect(() => {\n    textAreaRef.current?.focus()\n  }, [isShowingTagModal])\n\n  const handleUserTag = (user: string) => {\n    const newText: string[] = []\n    const textVal = textAreaRef.current\n    if (textVal) {\n      const start = textVal?.selectionStart\n      const textBeforeTag = text.substring(0, start)\n      const textAfterTag = text.substring(start, text.length)\n      setSelectionStart(start + user.length)\n      newText.push(\n        textBeforeTag,\n        `${tagModalWithKeyboard ? '' : '@'}${user.replace(/\\s/g, '')}`,\n        textAfterTag,\n      )\n    }\n    setText(newText.join(''))\n    setTagModalWithKeyboard(false)\n  }\n\n  const handleTagModal = (text: string) => {\n    const start = textAreaRef.current && textAreaRef.current.selectionStart\n    if (start && start > 0 && text.charAt(start - 1) === '@') {\n      setTagModalWithKeyboard(true)\n      setIsShowingTagModal(true)\n    }\n  }\n  const handleCommands = (command: CommandListType) => {\n    const textVal = textAreaRef.current\n    if (textVal) {\n      const start = textVal.selectionStart\n      const end = textVal.selectionEnd\n      const selected = text.substring(start, end)\n      const textBeforeSelection = text.substring(0, start)\n      const textAfterSelection = text.substring(end, text.length)\n\n      const openSyntax = MARKDOWN_COMMANDS_DATA[command].openSyntax\n      const closeSyntax = MARKDOWN_COMMANDS_DATA[command].closeSyntax\n\n      switch (command) {\n        case 'code': {\n          const newText: string[] = []\n          newText.push(\n            textBeforeSelection,\n            openSyntax,\n            selected,\n            closeSyntax,\n            textAfterSelection,\n          )\n\n          setText(newText.join('\\r\\n'))\n          textVal.focus()\n          // adds 2 due to new line\n          setSelectionStart(start + openSyntax.length + 2)\n          break\n        }\n        case 'title':\n        case 'bold':\n        case 'italic':\n        case 'strikethrough':\n        case 'latex':\n        case 'subscript':\n        case 'superscript':\n        case 'link':\n        case 'image': {\n          const newText = `${textBeforeSelection}${openSyntax}${selected}${closeSyntax}${textAfterSelection}`\n          textVal.focus()\n          setSelectionStart(start + openSyntax.length)\n          setText(newText)\n        }\n      }\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport MarkdownEditor\">\n      <div className=\"MarkdownEditorControls\">\n        <div className=\"Tabs\">\n          {MarkdownEditorTabs.map(tabName => {\n            return (\n              <button\n                className=\"Tab\"\n                role=\"tab\"\n                aria-selected={tabName === currentTab}\n                key={tabName}\n                onClick={e => {\n                  e.stopPropagation()\n                  setCurrentTab(tabName)\n                }}\n              >\n                {tabName}\n              </button>\n            )\n          })}\n        </div>\n        {currentTab === 'WRITE' && (\n          <div className=\"MarkdownEditorControlsToolbar\">\n            {commandList.map(type => {\n              return (\n                <button key={type} onClick={() => handleCommands(type)}>\n                  <IconSvg icon={type} label={startCase(type)} />\n                </button>\n              )\n            })}\n            <button onClick={() => setIsShowingTagModal(true)}>\n              <IconSvg icon=\"tag\" label=\"Mention\" />\n            </button>\n          </div>\n        )}\n      </div>\n      <div>\n        {currentTab === 'WRITE' ? (\n          <textarea\n            onChange={e => {\n              setText(e.target.value)\n              handleTagModal(e.target.value)\n            }}\n            style={{ width: '100%' }}\n            rows={6}\n            value={text}\n            ref={textAreaRef}\n            placeholder={placeholder}\n          />\n        ) : text ? (\n          <MarkdownSynapse markdown={text} />\n        ) : (\n          'Nothing to preview'\n        )}\n      </div>\n\n      <UserMentionModal\n        show={isShowingTagModal}\n        onClose={() => setIsShowingTagModal(false)}\n        handleUserTag={handleUserTag}\n      />\n    </div>\n  )\n}\n"],"names":["UserMentionModal","show","onClose","handleUserTag","onUserChange","useCallback","selected","header","jsx","Fragment","DialogBase","UserSearchBoxV2","TYPE_FILTER","MarkdownEditorTabs","MarkdownEditor","placeholder","text","setText","currentTab","setCurrentTab","useState","selectionStart","setSelectionStart","isShowingTagModal","setIsShowingTagModal","tagModalWithKeyboard","setTagModalWithKeyboard","textAreaRef","useRef","useEffect","input","_a","user","newText","textVal","start","textBeforeTag","textAfterTag","handleTagModal","text2","handleCommands","command","end","textBeforeSelection","textAfterSelection","openSyntax","MARKDOWN_COMMANDS_DATA","closeSyntax","jsxs","tabName","e","commandList","type","IconSvg","startCase","MarkdownSynapse"],"mappings":"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"}