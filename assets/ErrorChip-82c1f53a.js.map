{"version":3,"file":"ErrorChip-82c1f53a.js","sources":["../../../../node_modules/.pnpm/@mui+icons-material@5.14.16_@mui+material@5.14.17_@types+react@18.0.27_react@18.2.0/node_modules/@mui/icons-material/esm/LockOutlined.js","../../src/components/error/ErrorChip.tsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6zm9 14H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z\"\n}), 'LockOutlined');","import { Avatar, Chip, Tooltip } from '@mui/material'\nimport { ErrorOutlined, LockOutlined } from '@mui/icons-material'\nimport React from 'react'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useJiraIssueCollector } from '../JiraIssueCollector'\nimport { SignInPrompt, YOU_ARE_NOT_AUTHORIZED_MESSAGE } from './ErrorBanner'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\n\nexport type ErrorChipProps = {\n  chipText: string\n  error: SynapseClientError\n}\n\n/**\n * A chip component for handling inline errors, where some information can be shown (e.g. an ID) without breaking an entire component.\n * @constructor\n */\nexport default function ErrorChip(props: ErrorChipProps) {\n  const { chipText, error } = props\n  const { accessToken } = useSynapseContext()\n\n  const loginError =\n    (error.status === 403 || error.status === 401) && !accessToken\n  const accessDenied = error.status === 403 && accessToken\n\n  useJiraIssueCollector({\n    show: error.status >= 500,\n    issueCollector: 'SWC',\n    issueSummary: '',\n    issueDescription: error.reason,\n    issuePriority: '3',\n  })\n\n  const variant = loginError ? 'warning' : 'error'\n  let avatar\n  let icon\n  if (loginError || accessDenied) {\n    avatar = (\n      <Avatar sx={{ bgcolor: `${variant}.main` }}>\n        <LockOutlined sx={{ color: 'white', width: '18px' }} />\n      </Avatar>\n    )\n  } else {\n    icon = loginError || accessDenied ? undefined : <ErrorOutlined />\n  }\n  let tooltipText\n  if (loginError) {\n    tooltipText = <SignInPrompt />\n  } else if (accessDenied) {\n    tooltipText = YOU_ARE_NOT_AUTHORIZED_MESSAGE\n  } else {\n    tooltipText = error.reason\n  }\n\n  return (\n    <Tooltip title={tooltipText}>\n      <Chip\n        avatar={avatar}\n        color={variant}\n        variant=\"outlined\"\n        icon={icon}\n        label={chipText}\n      />\n    </Tooltip>\n  )\n}\n"],"names":["LockOutlined","createSvgIcon","_jsx","ErrorChip","props","chipText","error","accessToken","useSynapseContext","loginError","accessDenied","useJiraIssueCollector","variant","avatar","icon","jsx","Avatar","ErrorOutlined","tooltipText","SignInPrompt","YOU_ARE_NOT_AUTHORIZED_MESSAGE","Tooltip","Chip"],"mappings":"gVAIA,MAAAA,EAAeC,EAA4BC,EAAK,OAAQ,CACtD,EAAG,6NACL,CAAC,EAAG,cAAc,ECWlB,SAAAC,EAAAC,EAAA,CACE,KAAA,CAAA,SAAAC,EAAA,MAAAC,CAAA,EAAAF,EACA,CAAA,YAAAG,GAAAC,IAEAC,GAAAH,EAAA,SAAA,KAAAA,EAAA,SAAA,MAAA,CAAAC,EAEAG,EAAAJ,EAAA,SAAA,KAAAC,EAEAI,EAAA,CAAsB,KAAAL,EAAA,QAAA,IACE,eAAA,MACN,aAAA,GACF,iBAAAA,EAAA,OACU,cAAA,GACT,CAAA,EAGjB,MAAAM,EAAAH,EAAA,UAAA,QACA,IAAAI,EACAC,EACAL,GAAAC,EACEG,EAAAE,EAAAC,EAAA,CAAA,GAAA,CAAA,QAAA,GAAAJ,CAAA,SAAA,SAAAG,EAAAf,EAAA,CAAA,GAAA,CAAA,MAAA,QAAA,MAAA,MAAA,EAAA,CAAA,CAAA,EAMAc,EAAAL,GAAAC,EAAA,OAAAK,EAAAE,EAAA,CAAA,CAAA,EAEF,IAAAC,EACA,OAAAT,EACES,EAAAH,EAAAI,EAAA,CAAA,CAAA,EAA4BT,EAE5BQ,EAAAE,EAEAF,EAAAZ,EAAA,OAGFS,EAAAM,EAAA,CAAA,MAAAH,EAAA,SAAAH,EAEIO,EAAC,CAAA,OAAAT,EACC,MAAAD,EACO,QAAA,WACC,KAAAE,EACR,MAAAT,CACO,CAAA,CAAA,CAAA,CAIf","x_google_ignoreList":[0]}