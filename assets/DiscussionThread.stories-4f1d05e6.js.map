{"version":3,"file":"DiscussionThread.stories-4f1d05e6.js","sources":["../../src/lib/containers/discussion_forum/DiscussionReply.tsx","../../src/lib/containers/discussion_forum/DiscussionThread.tsx"],"sourcesContent":["import dayjs from 'dayjs'\nimport React, { useState } from 'react'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport { SMALL_USER_CARD } from '../../utils/SynapseConstants'\nimport { DiscussionReplyBundle } from '../../utils/synapseTypes/DiscussionBundle'\nimport UserCard from '../UserCard'\nimport MarkdownSynapse from '../markdown/MarkdownSynapse'\nimport { ObjectType } from '../../utils/synapseTypes'\nimport IconSvg from '../IconSvg'\nimport { Modal } from 'react-bootstrap'\nimport { ForumThreadEditor } from './ForumThreadEditor'\nimport {\n  useGetCurrentUserProfile,\n  useGetEntityBundle,\n} from '../../utils/hooks/SynapseAPI'\nimport {\n  useDeleteReply,\n  useGetReply,\n} from '../../utils/hooks/SynapseAPI/forum/useReply'\nimport { displayToast } from '../ToastMessage'\nimport WarningDialog from '../synapse_form_wrapper/WarningDialog'\nimport { SkeletonTable } from '../../assets/skeletons/SkeletonTable'\n\nexport type DiscussionReplyProps = {\n  reply: DiscussionReplyBundle\n  onClickLink?: () => void\n}\n\nexport const DiscussionReply: React.FC<DiscussionReplyProps> = ({\n  reply,\n  onClickLink = () => alert('This functionality has not been implemented yet'),\n}) => {\n  const [showReplyModal, setShowReplyModal] = useState(false)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const { data: currentUserProfile } = useGetCurrentUserProfile()\n  const { data: entityBundle } = useGetEntityBundle(reply.projectId)\n  const { data: message, isLoading } = useGetReply(reply)\n\n  const { mutate: deleteReply } = useDeleteReply({\n    onSuccess: () => {\n      setShowDeleteModal(false)\n      displayToast('A reply has been deleted.', 'info')\n    },\n  })\n\n  const isCurrentUserAuthor = reply.createdBy == currentUserProfile?.ownerId\n\n  return (\n    <div className=\"reply-container\">\n      {isLoading ? (\n        <SkeletonTable numCols={1} numRows={4} />\n      ) : (\n        <>\n          {message && (\n            <div>\n              <UserCard\n                withAvatar={true}\n                avatarSize=\"MEDIUM\"\n                showCardOnHover={true}\n                size={SMALL_USER_CARD}\n                ownerId={reply.createdBy}\n              />\n              <div className=\"message-body\">\n                <MarkdownSynapse\n                  markdown={message}\n                  objectType={ObjectType.REPLY}\n                />\n                <span>\n                  posted {formatDate(dayjs(reply.createdOn), 'M/D/YYYY')}\n                </span>\n                <div style={{ float: 'right' }}>\n                  <button onClick={() => onClickLink()}>\n                    <IconSvg icon=\"link\" />\n                  </button>\n                  {isCurrentUserAuthor && (\n                    <button onClick={() => setShowReplyModal(true)}>\n                      <IconSvg icon=\"edit\" />\n                    </button>\n                  )}\n                  {entityBundle?.permissions.canModerate && (\n                    <button onClick={() => setShowDeleteModal(true)}>\n                      <IconSvg icon=\"delete\" />\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n      <Modal\n        size=\"lg\"\n        show={showReplyModal}\n        onHide={() => setShowReplyModal(false)}\n        animation={false}\n      >\n        <Modal.Header>\n          <Modal.Title>Edit Reply</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <ForumThreadEditor\n            isReply={true}\n            initialText={message}\n            onClose={() => setShowReplyModal(false)}\n            id={reply.id}\n          />\n        </Modal.Body>\n      </Modal>\n      <WarningDialog\n        open={showDeleteModal}\n        title=\"Confirm Deletion\"\n        content=\"Are you sure you want to delete this reply?\"\n        onCancel={() => setShowDeleteModal(false)}\n        onConfirm={() =>\n          deleteReply({\n            forumId: reply.forumId,\n            threadId: reply.threadId,\n            replyId: reply.id,\n          })\n        }\n        confirmButtonColor=\"error\"\n        confirmButtonText=\"Delete\"\n      />\n    </div>\n  )\n}\n","import dayjs from 'dayjs'\nimport React, { useState } from 'react'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport { useGetRepliesInfinite } from '../../utils/hooks/SynapseAPI/forum/useReply'\nimport {\n  useDeleteThread,\n  useGetThread,\n  useRestoreThread,\n} from '../../utils/hooks/SynapseAPI/forum/useThread'\nimport {\n  ALL_ENTITY_BUNDLE_FIELDS,\n  SMALL_USER_CARD,\n  SRC_SIGN_IN_CLASS,\n} from '../../utils/SynapseConstants'\nimport { SubscriptionObjectType } from '../../utils/synapseTypes/Subscription'\nimport UserCard from '../UserCard'\nimport { displayToast } from '../ToastMessage'\nimport { DiscussionReply } from './DiscussionReply'\nimport { FormControl, Modal } from 'react-bootstrap'\nimport { Button, Typography } from '@mui/material'\nimport IconSvg from '../IconSvg'\nimport MarkdownSynapse from '../markdown/MarkdownSynapse'\nimport { ObjectType } from '../../utils/synapseTypes'\nimport { useSubscription } from '../../utils/hooks/SynapseAPI/subscription/useSubscription'\nimport {\n  useGetCurrentUserProfile,\n  useGetEntityBundle,\n} from '../../utils/hooks/SynapseAPI'\nimport { ForumThreadEditor } from './ForumThreadEditor'\nimport WarningDialog from '../synapse_form_wrapper/WarningDialog'\nimport { SubscribersModal } from './SubscribersModal'\n\nexport type DiscussionThreadProps = {\n  threadId: string\n  limit: number\n}\n\nconst FOLLOWING_TEXT = 'You are following this topic. Click to stop following.'\nconst UNFOLLOWING_TEXT = 'You are not following this topic. Click to follow.'\nconst SIGN_IN_TEXT = 'You will need to sign in for access to that resource'\nconst INPUT_PLACEHOLDER = 'Write a reply...'\n\nexport function DiscussionThread(props: DiscussionThreadProps) {\n  const { threadId, limit } = props\n\n  const [orderByDatePosted, setOrderByDatePosted] = useState(true)\n  const [showThreadModal, setShowThreadModal] = useState(false)\n  const [showReplyEditor1, setShowReplyEditor1] = useState(false)\n  const [showReplyEditor2, setShowReplyEditor2] = useState(false)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const [showSignInModal, setShowSignInModal] = useState(false)\n  const [showRestoreModal, setShowRestoreModal] = useState(false)\n  const [showSubscriberModal, setShowSubscriberModal] = useState(false)\n\n  const { threadData, threadBody, togglePin } = useGetThread(threadId)\n  const { data: currentUserProfile } = useGetCurrentUserProfile()\n  const { data: entityBundle } = useGetEntityBundle(\n    threadData?.projectId ?? '',\n    undefined,\n    ALL_ENTITY_BUNDLE_FIELDS,\n    {\n      enabled: !!threadData,\n    },\n  )\n\n  const { subscription, toggleSubscribed, isLoading } = useSubscription(\n    threadId,\n    SubscriptionObjectType.THREAD,\n  )\n  const { mutate: deleteThread } = useDeleteThread({\n    onSuccess: () => {\n      setShowDeleteModal(false)\n      displayToast('A thread has been deleted.', 'info')\n    },\n  })\n  const { mutate: restoreThread } = useRestoreThread({\n    onSuccess: () => {\n      setShowRestoreModal(false)\n      displayToast('A thread has been restored.', 'info')\n    },\n  })\n\n  const isCurrentUserAuthor =\n    threadData?.createdBy == currentUserProfile?.ownerId\n\n  function handleFollowBtn() {\n    if (currentUserProfile?.userName == 'anonymous') {\n      setShowSignInModal(true)\n    } else {\n      try {\n        toggleSubscribed()\n      } catch (err: any) {\n        displayToast(err.reason as string, 'danger')\n      }\n    }\n  }\n\n  const {\n    data: replyData,\n    hasNextPage,\n    fetchNextPage,\n  } = useGetRepliesInfinite(threadId, orderByDatePosted, limit)\n  const replies = replyData?.pages.flatMap(page => page.results) ?? []\n\n  return (\n    <div className=\"bootstrap-4-backport DiscussionThread\">\n      {threadData && threadBody ? (\n        <>\n          <div style={{ textAlign: 'center' }}>\n            <Button\n              variant={orderByDatePosted ? 'contained' : 'outlined'}\n              onClick={() => setOrderByDatePosted(true)}\n            >\n              Date Posted\n            </Button>\n            <Button\n              variant={orderByDatePosted ? 'outlined' : 'contained'}\n              onClick={() => setOrderByDatePosted(false)}\n            >\n              Most Recent\n            </Button>\n          </div>\n          <UserCard\n            withAvatar={true}\n            avatarSize=\"MEDIUM\"\n            showCardOnHover={true}\n            size={SMALL_USER_CARD}\n            ownerId={threadData.createdBy}\n          />\n          <div>\n            <Typography style={{ marginTop: '4px' }} variant=\"headline2\">\n              {threadData.title}\n            </Typography>\n            <SubscribersModal\n              id={threadId}\n              objectType={SubscriptionObjectType.THREAD}\n              showModal={showSubscriberModal}\n              handleModal={setShowSubscriberModal}\n            />\n          </div>\n          <div>\n            <MarkdownSynapse\n              markdown={threadBody}\n              objectType={ObjectType.THREAD}\n            />\n          </div>\n          <span>\n            posted {formatDate(dayjs(threadData.createdOn), 'M/D/YYYY')}\n          </span>\n        </>\n      ) : (\n        <></>\n      )}\n      <div className=\"control-container\">\n        {threadData?.isDeleted ? (\n          <button onClick={() => setShowRestoreModal(true)}>\n            <IconSvg icon=\"restore\" label=\"Restore deleted thread\" />\n          </button>\n        ) : (\n          <>\n            <span>\n              <button\n                className=\"follow-button\"\n                aria-label={subscription ? 'Unfollow thread' : 'Follow thread'}\n                disabled={isLoading}\n                onClick={() => handleFollowBtn()}\n              >\n                {subscription ? (\n                  <IconSvg icon=\"visibility\" label={FOLLOWING_TEXT} />\n                ) : (\n                  <IconSvg icon=\"visibilityOff\" label={UNFOLLOWING_TEXT} />\n                )}\n              </button>\n            </span>\n            {isCurrentUserAuthor && (\n              <button onClick={() => setShowThreadModal(true)}>\n                <IconSvg icon=\"edit\" label=\"Edit thread\" />\n              </button>\n            )}\n\n            {entityBundle?.permissions.canModerate ? (\n              <>\n                <button onClick={() => setShowDeleteModal(true)}>\n                  <IconSvg icon=\"delete\" label=\"Delete thread\" />\n                </button>\n                <button onClick={() => togglePin()}>\n                  {threadData?.isPinned ? (\n                    <IconSvg\n                      icon=\"pushpin\"\n                      sx={{ color: 'error.main' }}\n                      label=\"Unpin thread\"\n                    />\n                  ) : (\n                    <IconSvg icon=\"pushpin\" label=\"Pin thread\" />\n                  )}\n                </button>\n              </>\n            ) : null}\n          </>\n        )}\n      </div>\n      {!showReplyEditor1 ? (\n        <FormControl\n          type=\"text\"\n          placeholder={INPUT_PLACEHOLDER}\n          onClick={() => {\n            currentUserProfile?.userName == 'anonymous'\n              ? setShowSignInModal(true)\n              : setShowReplyEditor1(true)\n          }}\n        />\n      ) : (\n        <ForumThreadEditor\n          id={threadId}\n          isReply={true}\n          onClose={() => setShowReplyEditor1(false)}\n        />\n      )}\n      <div>\n        {replies.map(reply => (\n          <DiscussionReply key={reply.id} reply={reply} />\n        ))}\n      </div>\n      {replies.length > 0 && (\n        <>\n          {!showReplyEditor2 ? (\n            <FormControl\n              type=\"text\"\n              placeholder={INPUT_PLACEHOLDER}\n              onClick={() => {\n                currentUserProfile?.userName == 'anonymous'\n                  ? setShowSignInModal(true)\n                  : setShowReplyEditor2(true)\n              }}\n            />\n          ) : (\n            <ForumThreadEditor\n              id={threadId}\n              isReply={true}\n              onClose={() => setShowReplyEditor2(false)}\n            />\n          )}\n        </>\n      )}\n\n      {hasNextPage ? (\n        <Button\n          variant=\"outlined\"\n          onClick={() => {\n            fetchNextPage()\n          }}\n        >\n          Show more results\n        </Button>\n      ) : (\n        <></>\n      )}\n      <Modal\n        size=\"lg\"\n        show={showThreadModal}\n        onHide={() => setShowThreadModal(false)}\n        animation={false}\n      >\n        <Modal.Header>\n          <Modal.Title>Edit Thread</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <ForumThreadEditor\n            isReply={false}\n            initialText={threadBody}\n            onClose={() => setShowThreadModal(false)}\n            initialTitle={threadData?.title}\n            id={threadId}\n          />\n        </Modal.Body>\n      </Modal>\n      <WarningDialog\n        open={showDeleteModal}\n        title=\"Confirm Deletion\"\n        content=\"Are you sure you want to delete this thread?\"\n        onCancel={() => setShowDeleteModal(false)}\n        onConfirm={() => threadData && deleteThread(threadData)}\n        confirmButtonColor=\"error\"\n        confirmButtonText=\"Delete\"\n      />\n      <WarningDialog\n        open={showRestoreModal}\n        title=\"Confirm Restoration\"\n        content=\"Are you sure you want to restore this thread?\"\n        onCancel={() => setShowRestoreModal(false)}\n        onConfirm={() => threadData && restoreThread(threadData)}\n        confirmButtonColor=\"info\"\n        confirmButtonText=\"Restore\"\n      />\n      <Modal\n        className=\"bootstrap-4-backport\"\n        show={showSignInModal}\n        onHide={() => setShowSignInModal(false)}\n        animation={false}\n      >\n        <Modal.Header closeButton />\n        <Modal.Body>{SIGN_IN_TEXT}</Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => setShowSignInModal(false)}\n            variant=\"contained\"\n            className={SRC_SIGN_IN_CLASS}\n          >\n            Sign In\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  )\n}\n"],"names":["DiscussionReply","reply","onClickLink","showReplyModal","setShowReplyModal","useState","showDeleteModal","setShowDeleteModal","currentUserProfile","useGetCurrentUserProfile","entityBundle","useGetEntityBundle","message","isLoading","useGetReply","deleteReply","useDeleteReply","displayToast","isCurrentUserAuthor","jsxs","jsx","SkeletonTable","Fragment","UserCard","SMALL_USER_CARD","MarkdownSynapse","ObjectType","formatDate","dayjs","IconSvg","Modal","ForumThreadEditor","WarningDialog","FOLLOWING_TEXT","UNFOLLOWING_TEXT","SIGN_IN_TEXT","INPUT_PLACEHOLDER","DiscussionThread","props","threadId","limit","orderByDatePosted","setOrderByDatePosted","showThreadModal","setShowThreadModal","showReplyEditor1","setShowReplyEditor1","showReplyEditor2","setShowReplyEditor2","showSignInModal","setShowSignInModal","showRestoreModal","setShowRestoreModal","showSubscriberModal","setShowSubscriberModal","threadData","threadBody","togglePin","useGetThread","ALL_ENTITY_BUNDLE_FIELDS","subscription","toggleSubscribed","useSubscription","SubscriptionObjectType","deleteThread","useDeleteThread","restoreThread","useRestoreThread","handleFollowBtn","err","replyData","hasNextPage","fetchNextPage","useGetRepliesInfinite","replies","page","Button","Typography","SubscribersModal","FormControl","SRC_SIGN_IN_CLASS"],"mappings":"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"}