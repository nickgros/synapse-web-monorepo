{"version":3,"file":"useThread-612e961f.js","sources":["../../src/synapse-queries/forum/useThread.ts"],"sourcesContent":["import { useCallback } from 'react'\nimport {\n  UseQueryOptions,\n  useQuery,\n  UseMutationOptions,\n  useQueryClient,\n  useMutation,\n} from 'react-query'\nimport {\n  CreateDiscussionThread,\n  DiscussionThreadBundle,\n  UpdateThreadMessageRequest,\n  UpdateThreadTitleRequest,\n} from '@sage-bionetworks/synapse-types'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\n\nexport function useGetThread(threadId: string) {\n  const { data: threadData, isLoading: isLoadingBundle } =\n    useGetThreadBundle(threadId)\n  const { data: threadBody, isLoading: isLoadingBody } = useGetThreadBody(\n    threadData,\n    { enabled: !!threadData },\n  )\n  const { mutate: pinThread } = usePinThread()\n  const { mutate: unPinThread } = useUnPinThread()\n\n  const togglePin = useCallback(() => {\n    if (threadData) {\n      if (threadData?.isPinned) {\n        unPinThread(threadData)\n      } else {\n        pinThread(threadData)\n      }\n    }\n  }, [unPinThread, pinThread, threadData])\n\n  const isLoading = isLoadingBody || isLoadingBundle\n  return { threadData, threadBody, togglePin, isLoading }\n}\n\nexport function useGetThreadBundle(\n  threadId: string,\n  options?: UseQueryOptions<DiscussionThreadBundle, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<DiscussionThreadBundle, SynapseClientError>(\n    keyFactory.getThreadQueryKey(threadId),\n    () => SynapseClient.getThread(threadId, accessToken),\n    options,\n  )\n}\n\nexport function useGetThreadBody(\n  threadData?: DiscussionThreadBundle,\n  options?: UseQueryOptions<string, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  const queryFn = async () => {\n    const messageUrl = await SynapseClient.getThreadMessageUrl(\n      threadData?.messageKey!,\n      accessToken,\n    )\n    const data = await fetch(messageUrl.messageUrl, {\n      method: 'GET',\n      headers: {\n        Accept: '*/*',\n        'Access-Control-Request-Headers': 'authorization',\n        'Content-Type': 'text/plain; charset=utf-8',\n      },\n    })\n    return data.text()\n  }\n  return useQuery<string, SynapseClientError>(\n    keyFactory.getThreadBodyQueryKey(threadData?.id!, threadData?.messageKey!),\n    queryFn,\n    options,\n  )\n}\n\nexport function useUpdateThreadTitle(\n  options?: UseMutationOptions<\n    DiscussionThreadBundle,\n    SynapseClientError,\n    UpdateThreadTitleRequest\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useMutation<\n    DiscussionThreadBundle,\n    SynapseClientError,\n    UpdateThreadTitleRequest\n  >(\n    (request: UpdateThreadTitleRequest) =>\n      SynapseClient.putThreadTitle(accessToken, request),\n    {\n      ...options,\n      onSuccess: async (newThread, variables, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllForumThreadsQueryKey(newThread.forumId),\n        )\n        await queryClient.invalidateQueries(\n          keyFactory.getThreadQueryKey(variables.threadId),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(newThread, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useUpdateThreadMessage(\n  options?: UseMutationOptions<\n    DiscussionThreadBundle,\n    SynapseClientError,\n    UpdateThreadMessageRequest\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<\n    DiscussionThreadBundle,\n    SynapseClientError,\n    UpdateThreadMessageRequest\n  >(\n    (request: UpdateThreadMessageRequest) =>\n      SynapseClient.putThreadMessage(accessToken, request),\n    {\n      ...options,\n      onSuccess: async (newThread, variables, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getThreadQueryKey(variables.threadId),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(newThread, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useCreateThread(\n  options?: UseMutationOptions<\n    DiscussionThreadBundle,\n    SynapseClientError,\n    CreateDiscussionThread\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<\n    DiscussionThreadBundle,\n    SynapseClientError,\n    CreateDiscussionThread\n  >(\n    (newThread: CreateDiscussionThread) =>\n      SynapseClient.postThread(accessToken, newThread),\n    {\n      ...options,\n      onSuccess: async (threadBundle, newThreadRequest, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllForumThreadsQueryKey(threadBundle.forumId),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(threadBundle, newThreadRequest, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useDeleteThread(\n  options?: UseMutationOptions<\n    void,\n    SynapseClientError,\n    DiscussionThreadBundle\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, DiscussionThreadBundle>(\n    (threadBundle: DiscussionThreadBundle) =>\n      SynapseClient.deleteThread(accessToken, threadBundle.id),\n    {\n      ...options,\n      onSuccess: async (updatedThread, threadBundle, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllForumThreadsQueryKey(threadBundle.forumId),\n        )\n        await queryClient.invalidateQueries(\n          keyFactory.getThreadQueryKey(threadBundle.id),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedThread, threadBundle, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useRestoreThread(\n  options?: UseMutationOptions<\n    void,\n    SynapseClientError,\n    DiscussionThreadBundle\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, DiscussionThreadBundle>(\n    (threadBundle: DiscussionThreadBundle) =>\n      SynapseClient.restoreThread(accessToken, threadBundle.id),\n    {\n      ...options,\n      onSuccess: async (updatedThread, threadBundle, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllForumThreadsQueryKey(threadBundle.forumId),\n        )\n        await queryClient.invalidateQueries(\n          keyFactory.getThreadQueryKey(threadBundle.id),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedThread, threadBundle, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function usePinThread(\n  options?: UseMutationOptions<\n    void,\n    SynapseClientError,\n    DiscussionThreadBundle\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, DiscussionThreadBundle>(\n    (threadBundle: DiscussionThreadBundle) =>\n      SynapseClient.pinThread(accessToken, threadBundle.id),\n    {\n      ...options,\n      onSuccess: async (updatedThread, threadBundle, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllForumThreadsQueryKey(threadBundle.forumId),\n        )\n        await queryClient.invalidateQueries(\n          keyFactory.getThreadQueryKey(threadBundle.id),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedThread, threadBundle, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useUnPinThread(\n  options?: UseMutationOptions<\n    void,\n    SynapseClientError,\n    DiscussionThreadBundle\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, DiscussionThreadBundle>(\n    (threadBundle: DiscussionThreadBundle) =>\n      SynapseClient.unPinThread(accessToken, threadBundle.id),\n    {\n      ...options,\n      onSuccess: async (updatedThread, threadBundle, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllForumThreadsQueryKey(threadBundle.forumId),\n        )\n        await queryClient.invalidateQueries(\n          keyFactory.getThreadQueryKey(threadBundle.id),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedThread, threadBundle, ctx)\n        }\n      },\n    },\n  )\n}\n"],"names":["useGetThread","threadId","threadData","isLoadingBundle","useGetThreadBundle","threadBody","isLoadingBody","useGetThreadBody","pinThread","usePinThread","unPinThread","useUnPinThread","togglePin","useCallback","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient","queryFn","messageUrl","useUpdateThreadTitle","queryClient","useQueryClient","useMutation","request","newThread","variables","ctx","useUpdateThreadMessage","useCreateThread","threadBundle","newThreadRequest","useDeleteThread","updatedThread","useRestoreThread"],"mappings":"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"}