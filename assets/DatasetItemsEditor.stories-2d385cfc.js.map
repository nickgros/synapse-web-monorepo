{"version":3,"file":"DatasetItemsEditor.stories-2d385cfc.js","sources":["../../src/utils/hooks/useSet.ts","../../src/components/SynapseTable/datasets/DatasetItemsEditor.tsx"],"sourcesContent":["import { useState } from 'react'\n\nexport interface UseSetReturn<T> {\n  set: Omit<Set<T>, 'add' | 'delete' | 'clear'>\n  add: (...items: T[]) => void\n  remove: (item: T) => void\n  clear: () => void\n}\n\n/**\n * Hook for storing an ES6 set in React state. Methods that mutate the set have been hidden via TypeScript,\n * so if you adhere to the type definitions, the set is essentially immutable.\n * Modifications to the set should only be done via the functions returned by the hook, which will create a new object to trigger rerendering.\n * @param initialState\n * @returns\n */\nexport function useSet<T>(initialState?: T[] | Set<T>): UseSetReturn<T> {\n  const [set, setSet] = useState(new Set(initialState))\n\n  function add(...items: T[]) {\n    const newSet = new Set(set)\n    for (const item of items) {\n      newSet.add(item)\n    }\n    setSet(newSet)\n  }\n\n  function remove(item: T) {\n    const newSet = new Set(set)\n    newSet.delete(item)\n    setSet(newSet)\n  }\n\n  function clear() {\n    setSet(new Set())\n  }\n\n  return {\n    set,\n    add,\n    remove,\n    clear,\n  }\n}\n","import { Alert, Button, Skeleton, Typography } from '@mui/material'\nimport AddCircleTwoToneIcon from '@mui/icons-material/AddCircleTwoTone'\nimport BaseTable, {\n  AutoResizer,\n  ColumnShape,\n} from '@sage-bionetworks/react-base-table'\nimport { isEqual, upperFirst } from 'lodash-es'\nimport pluralize from 'pluralize'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { SkeletonTable } from '../../Skeleton/SkeletonTable'\nimport {\n  convertToEntityType,\n  entityTypeToFriendlyName,\n  isDataset,\n  isDatasetCollection,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  useGetEntity,\n  useGetEntityPath,\n  useUpdateEntity,\n} from '../../../synapse-queries/entity/useEntity'\nimport { useSet } from '../../../utils/hooks/useSet'\nimport {\n  EntityRef,\n  EntityRefCollectionView,\n  EntityType,\n  Reference,\n} from '@sage-bionetworks/synapse-types'\nimport { RequiredProperties } from '../../../utils/types/RequiredProperties'\nimport {\n  BadgeIconsRenderer,\n  CellRendererProps,\n  CreatedOnRenderer,\n  DatasetEditorCheckboxRenderer,\n  DatasetEditorVersionRenderer,\n  EntityErrorRenderer,\n  EntityNameRenderer,\n  ModifiedByRenderer,\n  ModifiedOnRenderer,\n  ProjectRenderer,\n} from '../../EntityFinder/details/view/DetailsViewTableRenderers'\nimport { EntityFinderModal } from '../../EntityFinder/EntityFinderModal'\nimport { FinderScope } from '../../EntityFinder/tree/EntityTree'\nimport { VersionSelectionType } from '../../EntityFinder/VersionSelectionType'\nimport { BlockingLoader } from '../../LoadingScreen'\nimport WarningDialog from '../../SynapseForm/WarningDialog'\nimport { displayToast } from '../../ToastMessage/ToastMessage'\nimport { Checkbox } from '../../widgets/Checkbox'\nimport WideButton from '../../../components/styled/WideButton'\n\nfunction getSelectableTypes(entity: EntityRefCollectionView) {\n  if (isDataset(entity)) {\n    return [EntityType.FILE]\n  } else if (isDatasetCollection(entity)) {\n    return [EntityType.DATASET]\n  } else {\n    console.error(\n      'Cannot determine selectable types for entity type: ' +\n        entity.concreteType,\n    )\n    return []\n  }\n}\n\nexport function getCopy(entity?: EntityRefCollectionView) {\n  const displayName = entity\n    ? entityTypeToFriendlyName(convertToEntityType(entity.concreteType))\n    : 'Collection'\n  let itemName = 'Item'\n  let currentVersionName = 'Current Version'\n  if (entity && isDataset(entity)) {\n    itemName = entityTypeToFriendlyName(EntityType.FILE)\n    currentVersionName = 'Draft'\n  } else if (entity && isDatasetCollection(entity)) {\n    itemName = entityTypeToFriendlyName(EntityType.DATASET)\n  }\n\n  const entityFinderPopover =\n    entity && isDataset(entity)\n      ? `Use the left pane to browse projects and folders. Select ${pluralize(\n          itemName,\n        )} from the right pane to add to this ${displayName}. ${upperFirst(\n          pluralize(itemName),\n        )} in a ${displayName} can be added from multiple folders. You can also use Search to find and select ${pluralize(\n          itemName,\n        )}.`\n      : `Use the left pane to browse projects. Select ${pluralize(\n          itemName,\n        )} from the right pane to add to this ${displayName}. ${upperFirst(\n          pluralize(itemName),\n        )} in a ${displayName} can be added from multiple projects. You can also use Search to find and select ${pluralize(\n          itemName,\n        )}.`\n\n  return {\n    ADD_ITEMS: `Add ${pluralize(itemName)}`,\n    ADD_ITEMS_TO: `Add ${pluralize(itemName)} to ${displayName}`,\n    REMOVE_ITEMS: `Remove ${pluralize(itemName)}`,\n    NO_ITEMS_IN_THIS_DATASET: `No ${pluralize(\n      itemName,\n    )} in this ${displayName}`,\n    SAVE_TO_CONTINUE: `Save the ${displayName} to continue`,\n    CREATE_VERSION_TO_FREEZE: `Create a Version of this ${displayName} to freeze it in its current state`,\n    ENTITY_SAVED: `${displayName} Saved`,\n    SAVE_CHANGES: `Save changes to ${currentVersionName}`,\n    ENTITY_FINDER_POPOVER: entityFinderPopover,\n    ENTITY_FINDER_PROMPT: `Find ${pluralize(\n      itemName,\n    )} to add to the ${displayName}.`,\n    PRECONDITION_FAILED_MESSAGE: `Re-retrieve the ${displayName} to get the latest changes. Your current changes will be lost.`,\n    PRECONDITION_FAILED_TITLE: `${displayName} updated since last fetched`,\n    PRECONDITION_FAILED_ACTION: `Retrieve ${displayName}`,\n  }\n}\n\nexport type DatasetItemsEditorProps = {\n  /* The synId of the EntityRefCollectionView to modify */\n  entityId: string\n  /** Callback invoked when the editor changes state to contain un/saved changes. */\n  onUnsavedChangesChange?: (hasUnsavedChanges: boolean) => void\n  onSave?: () => void\n  onClose?: () => void\n}\n\nexport type DatasetItemsEditorTableData = EntityRef & {\n  isSelected: boolean\n  setSelected: (value: boolean) => void\n}\n\nconst ROW_HEIGHT = 42\nconst TABLE_HEIGHT = 350\n\nexport function DatasetItemsEditor(props: DatasetItemsEditorProps) {\n  const { entityId, onSave, onClose, onUnsavedChangesChange } = props\n  const [showEntityFinder, setShowEntityFinder] = useState<boolean>(false)\n  const [showWarningDialog, setShowWarningDialog] = useState<boolean>(false)\n  const [hasChangedSinceLastSave, setHasChangedSinceLastSave] = useState(false)\n  // Disable updating the entity after the initial fetch because we don't want to replace edits that the user makes.\n  const [datasetToUpdate, _setDatasetToUpdate] =\n    useState<RequiredProperties<EntityRefCollectionView, 'items'>>()\n  const [previousDatasetToUpdate, setPreviousDatasetToUpdate] =\n    useState<RequiredProperties<EntityRefCollectionView, 'items'>>()\n  const setDatasetToUpdate = (\n    dataset: React.SetStateAction<\n      RequiredProperties<EntityRefCollectionView, 'items'> | undefined\n    >,\n  ) => {\n    setHasChangedSinceLastSave(true)\n    _setDatasetToUpdate(dataset)\n  }\n\n  const { data: fetchedDataset, refetch } = useGetEntity<\n    RequiredProperties<EntityRefCollectionView, 'items'>\n  >(entityId, undefined, {\n    enabled: !datasetToUpdate,\n  })\n\n  const {\n    ADD_ITEMS,\n    ADD_ITEMS_TO,\n    REMOVE_ITEMS,\n    NO_ITEMS_IN_THIS_DATASET,\n    SAVE_TO_CONTINUE,\n    CREATE_VERSION_TO_FREEZE,\n    ENTITY_SAVED,\n    SAVE_CHANGES,\n    PRECONDITION_FAILED_TITLE,\n    PRECONDITION_FAILED_MESSAGE,\n    PRECONDITION_FAILED_ACTION,\n    ENTITY_FINDER_POPOVER,\n    ENTITY_FINDER_PROMPT,\n  } = useMemo(() => getCopy(fetchedDataset), [fetchedDataset])\n\n  useEffect(() => {\n    // Don't update when we already have datasetToUpdate\n    if (!datasetToUpdate && fetchedDataset) {\n      // SWC-5876: Dataset Items may be undefined. This has the same inherent meaning as the empty list, so we'll just change it to save us some null checks.\n      if (fetchedDataset.items == null) {\n        fetchedDataset.items = []\n      }\n      setDatasetToUpdate(fetchedDataset)\n      setHasChangedSinceLastSave(false)\n    }\n  }, [fetchedDataset, datasetToUpdate])\n\n  const {\n    set: selectedIds,\n    add: addSelectedId,\n    remove: removeSelectedId,\n    clear: clearSelectedIds,\n  } = useSet<string>()\n  const allItemsAreSelected = !!(\n    datasetToUpdate && datasetToUpdate.items.length === selectedIds.size\n  )\n\n  useEffect(() => {\n    if (onUnsavedChangesChange) {\n      onUnsavedChangesChange(hasChangedSinceLastSave)\n    }\n  }, [hasChangedSinceLastSave, onUnsavedChangesChange])\n\n  useEffect(() => {\n    if (\n      previousDatasetToUpdate &&\n      datasetToUpdate &&\n      !isEqual(previousDatasetToUpdate, datasetToUpdate)\n    ) {\n      const toastMessageTitle = getToastMessageTitle()\n      displayToast(SAVE_TO_CONTINUE, 'info', {\n        title: toastMessageTitle,\n        primaryButtonConfig: {\n          text: SAVE_CHANGES,\n          onClick: () => mutation.mutate(datasetToUpdate),\n        },\n      })\n    }\n    setPreviousDatasetToUpdate(datasetToUpdate)\n  }, [datasetToUpdate])\n\n  // We get the project ID to show the \"Current Project\" context in the Entity Finder.\n  const { data: path } = useGetEntityPath(entityId)\n  const projectId = path?.path[1]?.id\n\n  const mutation = useUpdateEntity<EntityRefCollectionView>({\n    onSuccess: () => {\n      setHasChangedSinceLastSave(false)\n      if (onSave) {\n        onSave()\n      } else {\n        // If onSave isn't specified, push a generic toast message.\n        displayToast(CREATE_VERSION_TO_FREEZE, 'success', {\n          title: ENTITY_SAVED,\n        })\n      }\n    },\n    onError: error => {\n      if (error.status === 412) {\n        displayToast(PRECONDITION_FAILED_MESSAGE, 'warning', {\n          title: PRECONDITION_FAILED_TITLE,\n          primaryButtonConfig: {\n            text: PRECONDITION_FAILED_ACTION,\n            onClick: () => {\n              refetch()\n            },\n          },\n        })\n      } else {\n        displayToast(error.reason, 'danger', {\n          title: 'An Error Occurred',\n        })\n      }\n    },\n  })\n\n  const tableData = datasetToUpdate?.items.map((item: EntityRef) => {\n    return {\n      ...item,\n      isSelected: selectedIds.has(item.entityId),\n      setSelected: (value: boolean) => {\n        return value\n          ? addSelectedId(item.entityId)\n          : removeSelectedId(item.entityId)\n      },\n    }\n  })\n\n  function getDataSetDifference(\n    oldDataSet: EntityRef[],\n    changedItems: EntityRef[],\n  ) {\n    const unchangedItems = oldDataSet.filter(\n      oldItem =>\n        !changedItems.find(newItem => newItem.entityId === oldItem.entityId),\n    )\n    const deletedItems = [...unchangedItems]\n    const { updatedItems, newItems } = changedItems.reduce(\n      (results, result) => {\n        const oldItem = oldDataSet.find(old => old.entityId === result.entityId)\n        if (oldItem) {\n          if (result.versionNumber !== oldItem.versionNumber) {\n            results['updatedItems'].push(result)\n          } else {\n            unchangedItems.push(result)\n          }\n        } else {\n          results['newItems'].push(result)\n        }\n        return results\n      },\n      { updatedItems: [], newItems: [] } as {\n        updatedItems: EntityRef[]\n        newItems: EntityRef[]\n      },\n    )\n\n    return { unchangedItems, updatedItems, newItems, deletedItems }\n  }\n\n  function getToastMessageTitle() {\n    const { updatedItems, newItems, deletedItems } = getDataSetDifference(\n      previousDatasetToUpdate?.items!,\n      datasetToUpdate?.items!,\n    )\n    let toastTitle = ''\n\n    // \"X items(s) deleted\"\n    if (deletedItems.length > 0) {\n      toastTitle += `${deletedItems.length} Item${\n        deletedItems.length === 1 ? '' : 's'\n      } removed`\n    } else {\n      // \"Y item(s) added\"\n      toastTitle += `${newItems.length} Item${\n        newItems.length === 1 ? '' : 's'\n      } added`\n\n      // \"and Z item(s) updated\", only shown if there are updated items\n      if (updatedItems.length > 0) {\n        toastTitle += ` and ${updatedItems.length} Item${\n          updatedItems.length === 1 ? '' : 's'\n        } updated`\n      }\n    }\n    return toastTitle\n  }\n\n  function addItemsToDataset(itemsToAdd: Reference[]) {\n    setDatasetToUpdate(datasetToUpdate => {\n      if (datasetToUpdate) {\n        const refToDatasetItem = itemsToAdd.map(item => ({\n          entityId: item.targetId,\n          versionNumber: item.targetVersionNumber!,\n        }))\n        const { unchangedItems, updatedItems, newItems } = getDataSetDifference(\n          datasetToUpdate.items,\n          refToDatasetItem,\n        )\n        const items = [...unchangedItems, ...updatedItems, ...newItems]\n\n        return {\n          ...datasetToUpdate,\n          items: items,\n        }\n      } else {\n        console.warn(\n          'Cannot add items to the Collection because it is undefined. The Collection may not have been fetched yet.',\n        )\n        return datasetToUpdate\n      }\n    })\n    clearSelectedIds()\n  }\n\n  function removeSelectedItemsFromDataset() {\n    setDatasetToUpdate(dataset => ({\n      ...dataset!,\n      items: dataset!.items.filter(\n        datasetItem => !selectedIds.has(datasetItem.entityId),\n      ),\n    }))\n    clearSelectedIds()\n  }\n\n  function changeVersionOnItem(entityId: string, newVersion: number) {\n    setDatasetToUpdate(dataset => ({\n      ...dataset!,\n      items: dataset!.items.map(datasetItem =>\n        datasetItem.entityId === entityId\n          ? { entityId: entityId, versionNumber: newVersion }\n          : datasetItem,\n      ),\n    }))\n  }\n\n  const DatasetItemVersionRenderer = (\n    props: CellRendererProps<DatasetItemsEditorTableData>,\n  ) => {\n    return (\n      <DatasetEditorVersionRenderer\n        {...props}\n        toggleSelection={datasetItem => {\n          changeVersionOnItem(datasetItem.entityId, datasetItem.versionNumber)\n        }}\n      />\n    )\n  }\n\n  type SelectAllCheckboxRendererProps = {\n    datasetToUpdate: RequiredProperties<EntityRefCollectionView, 'items'>\n    selectedIds: Omit<Set<string>, 'add' | 'delete' | 'clear'>\n    addSelectedId: (...items: string[]) => void\n    clearSelectedIds: () => void\n    allItemsAreSelected: boolean\n  }\n  const SelectAllCheckboxRenderer = (props: SelectAllCheckboxRendererProps) => {\n    const { datasetToUpdate, clearSelectedIds, addSelectedId } = props\n    const isChecked = allItemsAreSelected\n\n    return datasetToUpdate ? (\n      <div\n        data-testid=\"Select All\"\n        style={{ cursor: 'pointer' }}\n        onClick={() => {\n          if (isChecked) {\n            clearSelectedIds()\n          } else {\n            addSelectedId(...datasetToUpdate.items.map(item => item.entityId))\n          }\n        }}\n      >\n        <Checkbox\n          label=\"Select All\"\n          hideLabel={true}\n          className=\"SRC-pointer-events-none\"\n          checked={isChecked}\n          disabled={datasetToUpdate.items.length === 0}\n          onChange={() => {\n            // no-op\n          }}\n        />\n      </div>\n    ) : (\n      <></>\n    )\n  }\n\n  const renderedSelectAllCheckbox = datasetToUpdate ? (\n    <SelectAllCheckboxRenderer\n      datasetToUpdate={datasetToUpdate}\n      selectedIds={selectedIds}\n      clearSelectedIds={clearSelectedIds}\n      addSelectedId={addSelectedId}\n      allItemsAreSelected={allItemsAreSelected}\n    />\n  ) : (\n    <></>\n  )\n\n  const defaultColumns: ColumnShape<DatasetItemsEditorTableData>[] = [\n    {\n      key: 'errorState',\n      width: 30,\n      cellRenderer: EntityErrorRenderer,\n    },\n    {\n      key: 'isSelected',\n      width: 40,\n      dataKey: 'isSelected',\n      headerRenderer: renderedSelectAllCheckbox,\n      cellRenderer: DatasetEditorCheckboxRenderer,\n    },\n    {\n      key: 'name',\n      width: 350,\n      dataKey: 'entityId',\n      title: 'Name',\n      resizable: true,\n      cellRenderer: EntityNameRenderer,\n    },\n    {\n      key: 'status',\n      width: 80,\n      resizable: true,\n      cellRenderer: BadgeIconsRenderer,\n    },\n    {\n      key: 'id',\n      width: 140,\n      title: 'ID',\n      dataKey: 'entityId',\n      resizable: true,\n    },\n    {\n      key: 'version',\n      width: 150,\n      title: 'Version',\n      dataKey: 'entityId',\n      cellRenderer: DatasetItemVersionRenderer,\n    },\n    {\n      key: 'createdOn',\n      width: 200,\n      title: 'Created On',\n      dataKey: 'entityId',\n      resizable: true,\n      cellRenderer: CreatedOnRenderer,\n    },\n    {\n      key: 'modifiedOn',\n      width: 200,\n      title: 'Modified On',\n      dataKey: 'entityId',\n      resizable: true,\n\n      cellRenderer: ModifiedOnRenderer,\n    },\n    {\n      key: 'modifiedBy',\n      width: 250,\n      title: 'Modified By',\n      dataKey: 'entityId',\n      resizable: true,\n\n      cellRenderer: ModifiedByRenderer,\n    },\n    {\n      key: 'projectId',\n      width: 300,\n      title: 'Project',\n      dataKey: 'entityId',\n      resizable: true,\n\n      cellRenderer: ProjectRenderer,\n    },\n  ]\n\n  const totalColumnWidth = defaultColumns.reduce((totalWidth, column) => {\n    return totalWidth + column.width\n  }, 0)\n\n  function NoItemsPlaceholder() {\n    return (\n      <div className=\"NoItemsPlaceholder\">\n        <Typography variant={'headline3'}>\n          {NO_ITEMS_IN_THIS_DATASET}\n        </Typography>\n        <WideButton\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => setShowEntityFinder(true)}\n          startIcon={<AddCircleTwoToneIcon />}\n          sx={{ mt: 2 }}\n        >\n          {ADD_ITEMS}\n        </WideButton>\n      </div>\n    )\n  }\n\n  const selectableTypes: EntityType[] | undefined = useMemo(() => {\n    if (fetchedDataset) {\n      return getSelectableTypes(fetchedDataset)\n    } else {\n      return undefined\n    }\n  }, [fetchedDataset])\n\n  return (\n    <div className=\"DatasetEditor\">\n      <EntityFinderModal\n        configuration={{\n          projectId: projectId,\n          selectMultiple: true,\n          initialScope: FinderScope.CURRENT_PROJECT,\n          initialContainer: projectId ?? null,\n          selectableTypes: selectableTypes,\n          versionSelection: VersionSelectionType.REQUIRED,\n        }}\n        titleHelpPopoverProps={{\n          markdownText: ENTITY_FINDER_POPOVER,\n          helpUrl: 'https://help.synapse.org/docs/Datasets.2611281979.html',\n          placement: 'right',\n        }}\n        promptCopy={ENTITY_FINDER_PROMPT}\n        show={showEntityFinder}\n        title={ADD_ITEMS_TO}\n        confirmButtonCopy={ADD_ITEMS}\n        onConfirm={items => {\n          addItemsToDataset(items)\n          setShowEntityFinder(false)\n        }}\n        onCancel={() => setShowEntityFinder(false)}\n      />\n      <WarningDialog\n        title=\"Unsaved Changes\"\n        content=\"Any unsaved changes will be lost. Are you sure you want to close the editor?\"\n        confirmButtonText=\"Close Editor\"\n        onConfirm={() => {\n          if (onClose) {\n            setShowWarningDialog(false)\n            onUnsavedChangesChange && onUnsavedChangesChange(false)\n            onClose()\n          }\n        }}\n        open={showWarningDialog}\n        onConfirmCallbackArgs={[]}\n        onCancel={() => setShowWarningDialog(false)}\n      />\n\n      <div className=\"DatasetEditorTopBottomPanel\">\n        <BlockingLoader show={mutation.isLoading} />\n        <div className=\"ItemCount\">\n          {datasetToUpdate ? (\n            <Typography variant=\"headline3\">\n              {datasetToUpdate.items.length === 0\n                ? 'No'\n                : datasetToUpdate.items.length.toLocaleString()}{' '}\n              File\n              {datasetToUpdate.items.length !== 1 && 's'}\n            </Typography>\n          ) : (\n            <Skeleton variant=\"rectangular\" width={200} />\n          )}\n        </div>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={datasetToUpdate == null}\n          onClick={() => setShowEntityFinder(true)}\n        >\n          {ADD_ITEMS}\n        </Button>\n        <Button\n          disabled={selectedIds.size === 0}\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={removeSelectedItemsFromDataset}\n        >\n          {REMOVE_ITEMS}\n        </Button>\n      </div>\n      <div className=\"DatasetEditorTableContainer\">\n        {datasetToUpdate ? (\n          datasetToUpdate.items.length === 0 ? (\n            <NoItemsPlaceholder></NoItemsPlaceholder>\n          ) : (\n            <AutoResizer height={TABLE_HEIGHT}>\n              {({ height, width }: { height: number; width: number }) => (\n                <BaseTable\n                  classPrefix=\"DatasetEditorTable\"\n                  data={tableData}\n                  height={height}\n                  width={width > totalColumnWidth ? width : totalColumnWidth}\n                  rowHeight={ROW_HEIGHT}\n                  overscanRowCount={5}\n                  columns={defaultColumns}\n                  rowClassName={'DatasetEditorRow'}\n                  rowProps={({ rowData }) => {\n                    return {\n                      'aria-selected': rowData.isSelected,\n                    }\n                  }}\n                  headerCellProps={{\n                    role: 'columnheader',\n                  }}\n                ></BaseTable>\n              )}\n            </AutoResizer>\n          )\n        ) : (\n          <SkeletonTable\n            className=\"DatasetItemsEditorSkeleton\"\n            numRows={8}\n            numCols={6}\n            rowHeight={`${ROW_HEIGHT}px`}\n          />\n        )}\n      </div>\n      <div className=\"DatasetEditorTopBottomPanel\">\n        {hasChangedSinceLastSave && (\n          <Alert severity=\"warning\">You have unsaved changes</Alert>\n        )}\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={() => {\n            if (hasChangedSinceLastSave) {\n              setShowWarningDialog(true)\n            } else if (onClose) {\n              onClose()\n            }\n          }}\n        >\n          Cancel\n        </Button>\n\n        <Button\n          disabled={!datasetToUpdate}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => mutation.mutate(datasetToUpdate!)}\n        >\n          Save\n        </Button>\n      </div>\n    </div>\n  )\n}\n"],"names":["useSet","initialState","set","setSet","useState","add","items","newSet","item","remove","clear","getSelectableTypes","entity","isDataset","EntityType","isDatasetCollection","getCopy","displayName","entityTypeToFriendlyName","convertToEntityType","itemName","currentVersionName","entityFinderPopover","pluralize","upperFirst","ROW_HEIGHT","TABLE_HEIGHT","DatasetItemsEditor","props","entityId","onSave","onClose","onUnsavedChangesChange","showEntityFinder","setShowEntityFinder","showWarningDialog","setShowWarningDialog","hasChangedSinceLastSave","setHasChangedSinceLastSave","datasetToUpdate","_setDatasetToUpdate","previousDatasetToUpdate","setPreviousDatasetToUpdate","setDatasetToUpdate","dataset","fetchedDataset","refetch","useGetEntity","ADD_ITEMS","ADD_ITEMS_TO","REMOVE_ITEMS","NO_ITEMS_IN_THIS_DATASET","SAVE_TO_CONTINUE","CREATE_VERSION_TO_FREEZE","ENTITY_SAVED","SAVE_CHANGES","PRECONDITION_FAILED_TITLE","PRECONDITION_FAILED_MESSAGE","PRECONDITION_FAILED_ACTION","ENTITY_FINDER_POPOVER","ENTITY_FINDER_PROMPT","useMemo","useEffect","selectedIds","addSelectedId","removeSelectedId","clearSelectedIds","allItemsAreSelected","isEqual","toastMessageTitle","getToastMessageTitle","displayToast","mutation","path","useGetEntityPath","projectId","_a","useUpdateEntity","error","tableData","value","getDataSetDifference","oldDataSet","changedItems","unchangedItems","oldItem","newItem","deletedItems","updatedItems","newItems","results","result","old","toastTitle","addItemsToDataset","itemsToAdd","datasetToUpdate2","refToDatasetItem","removeSelectedItemsFromDataset","datasetItem","changeVersionOnItem","entityId2","newVersion","defaultColumns","EntityErrorRenderer","jsx","props2","clearSelectedIds2","addSelectedId2","isChecked","Checkbox","Fragment","DatasetEditorCheckboxRenderer","EntityNameRenderer","BadgeIconsRenderer","DatasetEditorVersionRenderer","CreatedOnRenderer","ModifiedOnRenderer","ModifiedByRenderer","ProjectRenderer","totalColumnWidth","totalWidth","column","NoItemsPlaceholder","jsxs","Typography","WideButton","AddCircleTwoToneIcon","selectableTypes","EntityFinderModal","FinderScope","VersionSelectionType","WarningDialog","BlockingLoader","Skeleton","Button","AutoResizer","height","width","BaseTable","rowData","SkeletonTable","Alert"],"mappings":"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"}