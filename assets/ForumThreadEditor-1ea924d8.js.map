{"version":3,"file":"ForumThreadEditor-1ea924d8.js","sources":["../../src/synapse-queries/forum/useReply.ts","../../src/components/Forum/ForumThreadEditor.tsx"],"sourcesContent":["import {\n  UseInfiniteQueryOptions,\n  useInfiniteQuery,\n  UseMutationOptions,\n  useQueryClient,\n  useMutation,\n  UseQueryOptions,\n  useQuery,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  CreateDiscussionReply,\n  DiscussionFilter,\n  DiscussionReplyBundle,\n  DiscussionReplyOrder,\n  UpdateDiscussionReply,\n} from '@sage-bionetworks/synapse-types'\nimport { PaginatedResults } from '@sage-bionetworks/synapse-types'\nimport { Match } from '@sage-bionetworks/synapse-types'\n\nexport function useGetRepliesInfinite(\n  threadId: string,\n  ascending: boolean,\n  limit: number,\n  sort?: DiscussionReplyOrder,\n  filter?: DiscussionFilter,\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<DiscussionReplyBundle>,\n    SynapseClientError\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<\n    PaginatedResults<DiscussionReplyBundle>,\n    SynapseClientError\n  >(\n    keyFactory.getRepliesQueryKey(threadId, ascending, limit, sort, filter),\n    async context => {\n      return SynapseClient.getReplies(\n        accessToken,\n        threadId,\n        limit,\n        context.pageParam,\n        sort,\n        ascending,\n        filter,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        const numberOfFetchedResults = pages.flatMap(\n          page => page.results,\n        ).length\n        if (lastPage.totalNumberOfResults! > numberOfFetchedResults) {\n          return numberOfFetchedResults\n        } else {\n          return undefined\n        }\n      },\n    },\n  )\n}\n\nexport function useGetReply(\n  reply: DiscussionReplyBundle,\n  options?: UseQueryOptions<string, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const queryFn = async () => {\n    const messageUrl = await SynapseClient.getReplyMessageUrl(\n      reply.messageKey,\n      accessToken,\n    )\n    const data = await fetch(messageUrl.messageUrl, {\n      method: 'GET',\n      headers: {\n        Accept: '*/*',\n        'Access-Control-Request-Headers': 'authorization',\n        'Content-Type': 'text/plain; charset=utf-8',\n      },\n    })\n    return data.text()\n  }\n  return useQuery<string, SynapseClientError>(\n    keyFactory.getReplyQueryKey(reply.threadId, reply.id, reply.messageKey),\n    queryFn,\n    options,\n  )\n}\n\nexport function usePostReply(\n  options?: UseMutationOptions<\n    DiscussionReplyBundle,\n    SynapseClientError,\n    CreateDiscussionReply\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useMutation<\n    DiscussionReplyBundle,\n    SynapseClientError,\n    CreateDiscussionReply\n  >(\n    (request: CreateDiscussionReply) =>\n      SynapseClient.postReply(request, accessToken),\n    {\n      ...options,\n      onSuccess: async (newReply, variables, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllRepliesQueryKey(newReply.threadId),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(newReply, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function usePutReply(\n  options?: UseMutationOptions<\n    DiscussionReplyBundle,\n    SynapseClientError,\n    UpdateDiscussionReply\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<\n    DiscussionReplyBundle,\n    SynapseClientError,\n    UpdateDiscussionReply\n  >(\n    (request: UpdateDiscussionReply) =>\n      SynapseClient.putReply(request, accessToken),\n    {\n      ...options,\n      onSuccess: async (newReply, variables, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllRepliesQueryKey(newReply.threadId),\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(newReply, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useDeleteReply(\n  options?: UseMutationOptions<void, SynapseClientError, Match>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, Match>(\n    (match: Match) => SynapseClient.deleteReply(accessToken, match.replyId),\n    {\n      ...options,\n      onSuccess: async (updatedReply, variables, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllRepliesQueryKey(variables.threadId),\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedReply, variables, ctx)\n        }\n      },\n    },\n  )\n}\n","import React, { useState } from 'react'\nimport { Box } from '@mui/material'\nimport { FormControl } from 'react-bootstrap'\nimport {\n  useCreateThread,\n  useUpdateThreadTitle,\n  useUpdateThreadMessage,\n} from '../../synapse-queries/forum/useThread'\nimport { usePostReply, usePutReply } from '../../synapse-queries/forum/useReply'\nimport { CreateDiscussionThread } from '@sage-bionetworks/synapse-types'\nimport { MarkdownEditor } from '../Markdown/MarkdownEditor'\nimport {\n  ConfirmationButtons,\n  ConfirmationDialog,\n} from '../ConfirmationDialog/ConfirmationDialog'\n\nexport type ForumThreadEditorProps = {\n  initialTitle?: string\n  initialText?: string\n  id: string\n  onClose: () => void\n  isReply: boolean\n} & (\n  | { isDialog: false; openDialog?: never }\n  | { isDialog: true; openDialog: boolean }\n)\n\nexport const ForumThreadEditor: React.FunctionComponent<\n  ForumThreadEditorProps\n> = props => {\n  const {\n    initialText,\n    initialTitle,\n    id,\n    onClose,\n    isReply,\n    isDialog,\n    openDialog,\n  } = props\n\n  const [title, setTitle] = useState<string>(initialTitle ?? '')\n  const [text, setText] = useState<string>(initialText ?? '')\n  const { mutate: updateTitle, isLoading: isLoadingTitle } =\n    useUpdateThreadTitle({\n      onSuccess: () => onClose(),\n    })\n  const { mutate: updateMessage, isLoading: isLoadingMessage } =\n    useUpdateThreadMessage({\n      onSuccess: () => onClose(),\n    })\n  const { mutate: createThread, isLoading: isLoadingThread } = useCreateThread({\n    onSuccess: () => onClose(),\n  })\n  const { mutate: createReply, isLoading: isLoadingReply } = usePostReply({\n    onSuccess: () => onClose(),\n  })\n  const { mutate: updateReply, isLoading: isLoadingReplyUpdate } = usePutReply({\n    onSuccess: () => onClose(),\n  })\n\n  const isLoading =\n    isLoadingMessage ||\n    isLoadingReply ||\n    isLoadingThread ||\n    isLoadingTitle ||\n    isLoadingReplyUpdate\n\n  const isExistingThread = !isReply && initialTitle\n\n  const onSave = (text: string, title: string) => {\n    if (isReply) {\n      if (initialText) {\n        // updating reply\n        updateReply({\n          replyId: id,\n          messageMarkdown: text,\n        })\n      } else {\n        // posting reply\n        createReply({\n          threadId: id,\n          messageMarkdown: text,\n        })\n      }\n    } else {\n      if (isExistingThread) {\n        // updating thread\n        updateTitle({\n          title: title,\n          threadId: id,\n        })\n        updateMessage({\n          messageMarkdown: text,\n          threadId: id,\n        })\n      } else {\n        // posting thread\n        const request: CreateDiscussionThread = {\n          forumId: id,\n          title: title,\n          messageMarkdown: text,\n        }\n        createThread(request)\n      }\n    }\n  }\n\n  const editorContent = (\n    <div className=\"bootstrap-4-backport\">\n      {!isReply && (\n        <FormControl\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={e => setTitle(e.target.value)}\n        />\n      )}\n      <MarkdownEditor text={text} setText={setText} />\n    </div>\n  )\n\n  const confirmButtonText = isLoading ? 'Saving' : 'Save'\n\n  return (\n    <>\n      {isDialog ? (\n        <ConfirmationDialog\n          maxWidth=\"md\"\n          open={openDialog}\n          onCancel={onClose}\n          title={\n            isReply\n              ? 'Edit Reply'\n              : isExistingThread\n              ? 'Edit Thread'\n              : 'New Thread'\n          }\n          content={editorContent}\n          onConfirm={() => onSave(text, title)}\n          confirmButtonProps={{ children: confirmButtonText }}\n        />\n      ) : (\n        <>\n          {editorContent}\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n            <ConfirmationButtons\n              onCancel={onClose}\n              onConfirm={() => onSave(text, title)}\n              confirmButtonProps={{ children: confirmButtonText }}\n            />\n          </Box>\n        </>\n      )}\n    </>\n  )\n}\n"],"names":["useGetRepliesInfinite","threadId","ascending","limit","sort","filter","options","accessToken","keyFactory","useSynapseContext","useInfiniteQuery","context","SynapseClient","lastPage","pages","numberOfFetchedResults","page","useGetReply","reply","queryFn","messageUrl","useQuery","usePostReply","queryClient","useQueryClient","useMutation","request","newReply","variables","ctx","usePutReply","useDeleteReply","match","updatedReply","ForumThreadEditor","props","initialText","initialTitle","id","onClose","isReply","isDialog","openDialog","title","setTitle","useState","text","setText","updateTitle","isLoadingTitle","useUpdateThreadTitle","updateMessage","isLoadingMessage","useUpdateThreadMessage","createThread","isLoadingThread","useCreateThread","createReply","isLoadingReply","updateReply","isLoadingReplyUpdate","isLoading","isExistingThread","onSave","text2","title2","editorContent","jsxs","jsx","FormControl","e","MarkdownEditor","confirmButtonText","Fragment","ConfirmationDialog","Box","ConfirmationButtons"],"mappings":"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"}