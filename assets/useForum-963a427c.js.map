{"version":3,"file":"useForum-963a427c.js","sources":["../../src/synapse-queries/forum/useForum.ts"],"sourcesContent":["import {\n  UseInfiniteQueryOptions,\n  useInfiniteQuery,\n  UseQueryOptions,\n  useQuery,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils'\nimport { Forum, PaginatedResults } from '@sage-bionetworks/synapse-types'\nimport {\n  DiscussionFilter,\n  DiscussionThreadBundle,\n  DiscussionThreadOrder,\n} from '@sage-bionetworks/synapse-types'\nimport { PaginatedIds } from '@sage-bionetworks/synapse-types'\n\nexport function useGetModerators(\n  forumId: string,\n  options?: UseQueryOptions<PaginatedIds, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<PaginatedIds, SynapseClientError>(\n    keyFactory.getForumModeratorsQueryKey(forumId),\n    () => SynapseClient.getModerators(accessToken, forumId),\n    options,\n  )\n}\n\nexport function useGetForumMetadata(\n  forumId: string,\n  options?: UseQueryOptions<Forum, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<Forum, SynapseClientError>(\n    keyFactory.getForumMetadataQueryKey(forumId),\n    () => SynapseClient.getForumMetadata(accessToken, forumId),\n    options,\n  )\n}\n\nexport function useGetForumInfinite(\n  forumId: string,\n  limit: number,\n  sort: DiscussionThreadOrder,\n  ascending: boolean,\n  filter?: DiscussionFilter,\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<DiscussionThreadBundle>,\n    SynapseClientError\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<\n    PaginatedResults<DiscussionThreadBundle>,\n    SynapseClientError\n  >(\n    keyFactory.getForumThreadsQueryKey(forumId, limit, sort, ascending, filter),\n    async context => {\n      return SynapseClient.getForumThread(\n        accessToken,\n        forumId,\n        context.pageParam,\n        limit,\n        sort,\n        ascending,\n        filter,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        const numberOfFetchedResults = pages.flatMap(\n          page => page.results,\n        ).length\n        if (lastPage.totalNumberOfResults! > numberOfFetchedResults) {\n          return numberOfFetchedResults\n        } else {\n          return undefined\n        }\n      },\n    },\n  )\n}\n"],"names":["useGetModerators","forumId","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient","useGetForumMetadata","useGetForumInfinite","limit","sort","ascending","filter","useInfiniteQuery","context","lastPage","pages","numberOfFetchedResults","page"],"mappings":"yPAiBgB,SAAAA,EACdC,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAC/C,OAAAC,EACLF,EAAW,2BAA2BH,CAAO,EAC7C,IAAMM,EAAc,cAAcJ,EAAaF,CAAO,EACtDC,CAAA,CAEJ,CAEgB,SAAAM,EACdP,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAC/C,OAAAC,EACLF,EAAW,yBAAyBH,CAAO,EAC3C,IAAMM,EAAc,iBAAiBJ,EAAaF,CAAO,EACzDC,CAAA,CAEJ,CAEO,SAASO,EACdR,EACAS,EACAC,EACAC,EACAC,EACAX,EAIA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAC/C,OAAAS,EAILV,EAAW,wBAAwBH,EAASS,EAAOC,EAAMC,EAAWC,CAAM,EAC1E,MAAME,GACGR,EAAc,eACnBJ,EACAF,EACAc,EAAQ,UACRL,EACAC,EACAC,EACAC,CAAA,EAGJ,CACE,GAAGX,EACH,iBAAkB,CAACc,EAAUC,IAAU,CACrC,MAAMC,EAAyBD,EAAM,WAC3BE,EAAK,OACb,EAAA,OACE,GAAAH,EAAS,qBAAwBE,EAC5B,OAAAA,CAIX,CACF,CAAA,CAEJ"}