{"version":3,"file":"EntityActionMenu-d3a776cb.js","sources":["../../src/components/entity/page/action_menu/EntityActionMenu.tsx"],"sourcesContent":["import React from 'react'\nimport { SxProps } from '@mui/material'\nimport { ComplexMenu, IconButtonConfiguration } from '../../../menu/ComplexMenu'\nimport IconSvg, { IconName } from '../../../IconSvg/IconSvg'\nimport { DropdownMenuItem, DropdownMenuProps } from '../../../menu/DropdownMenu'\n\n// Represents the two types of dropdown menus that will be displayed on the entity page\ntype EntityActionMenuDropdownMenuType = 'DOWNLOAD' | 'PRIMARY'\n\ntype EntityActionMenuDropdownMenuConfiguration = {\n  visible: boolean\n  tooltipText?: string\n  disabled?: boolean\n}\n\nexport type ActionConfiguration = {\n  visible: boolean\n  text: string\n  disabled?: boolean\n  tooltipText?: string\n  onClick?: (e: React.MouseEvent) => void\n  href?: string\n}\n\nexport type ActionConfigurationMap = Record<string, ActionConfiguration>\n\nexport type MenuConfigurationMap = Record<\n  EntityActionMenuDropdownMenuType,\n  EntityActionMenuDropdownMenuConfiguration\n>\n\nexport type ActionViewProps = {\n  action: string\n  icon?: IconName\n  textSx?: SxProps\n  iconSx?: SxProps\n}\n\nexport type EntityActionMenuLayout = {\n  buttonActions: ActionViewProps[]\n  downloadMenuActions: ActionViewProps[][]\n  primaryMenuActions: ActionViewProps[][]\n  primaryMenuText: string\n  primaryMenuEndIcon: IconName\n  menuButtonSx?: SxProps\n}\n\nexport type EntityActionMenuProps = {\n  /* Maps a unique action string to a dynamic configuration for that particular action */\n  actionConfiguration: ActionConfigurationMap\n  /* Maps each dropdown menu to a dynamic configuration for that particular menu */\n  menuConfiguration: MenuConfigurationMap\n  /* Defines the layout of the actions. Typically depends on just the entity type and area. */\n  layout: EntityActionMenuLayout\n}\n\n/*\n * All visible actions should be specified in the layout, but this is not guaranteed at compile time.\n * Find all visible actions in the action configuration that are not in the layout.\n */\nfunction getUnmappedActions(\n  actionConfiguration: ActionConfigurationMap,\n  layout: EntityActionMenuLayout,\n): ActionConfigurationMap {\n  return Object.fromEntries(\n    Object.entries(actionConfiguration).filter(([action, config]) => {\n      // We don't care about actions that are not configured or should not be visible\n      if (!config || !config.visible) {\n        return false\n      }\n\n      const allLayoutActions: ActionViewProps[] = [\n        ...layout.buttonActions,\n        ...layout.primaryMenuActions.flat(),\n        ...layout.downloadMenuActions.flat(),\n      ]\n      // Action is unmapped if it's visible and the layout doesn't have it\n      return !allLayoutActions.some(\n        layoutAction => layoutAction.action === action,\n      )\n    }),\n  )\n}\n\n/**\n * Given a group of dropdown menu items and an action configuration,\n * return a list of dropdown menu items with non-visible and non-configured actions removed.\n * @param group\n * @param actionConfiguration\n */\nfunction mapAndFilterItemsInMenuGroup(\n  group: ActionViewProps[],\n  actionConfiguration: ActionConfigurationMap,\n): DropdownMenuItem[] {\n  return group.reduce(\n    (itemAcc: DropdownMenuItem[], actionViewProps: ActionViewProps) => {\n      const configForAction = actionConfiguration[actionViewProps.action]\n      // Only show the item if it's configured + visible\n      if (configForAction && configForAction.visible) {\n        itemAcc.push({\n          text: configForAction.text ?? actionViewProps.action,\n          onClick: configForAction.onClick,\n          href: configForAction.href,\n          tooltipText: configForAction.tooltipText,\n          disabled: configForAction.disabled,\n          icon: actionViewProps.icon,\n          textSx: actionViewProps.textSx,\n          iconSx: actionViewProps.iconSx,\n        })\n      }\n      return itemAcc\n    },\n    [],\n  )\n}\n\n/**\n * Given a list of groups of dropdown menu actions, returns a list of dropdown menu item\n * groups where non-visible actions have been removed, and groups with no visible actions\n * have been removed.\n * @param menuActions\n * @param actionConfiguration\n */\nfunction mapAndFilterMenuGroups(\n  menuActions: ActionViewProps[][],\n  actionConfiguration: ActionConfigurationMap,\n): DropdownMenuItem[][] {\n  return menuActions.reduce(\n    (groupAcc: DropdownMenuItem[][], group: ActionViewProps[]) => {\n      const itemGroup = mapAndFilterItemsInMenuGroup(group, actionConfiguration)\n      // Only show the group if it contains visible items\n      if (itemGroup.length > 0) {\n        groupAcc.push(itemGroup)\n      }\n      return groupAcc\n    },\n    [],\n  )\n}\n\n/**\n * The EntityActionMenu renders a menu that displays the actions that can be invoked on an Entity page.\n */\nexport default function EntityActionMenu(props: EntityActionMenuProps) {\n  const { actionConfiguration, menuConfiguration, layout } = props\n\n  /*\n   * All actions should be specified in the layout, but this is not guaranteed at compile time.\n   * Find all visible actions in the action configuration that are not in the layout.\n   */\n  const unmappedActions = getUnmappedActions(actionConfiguration, layout)\n  // Warn if unmapped actions were found and push them on to the layout.\n  if (Object.entries(unmappedActions).length > 0) {\n    console.warn(\n      'Actions are visible but have not been configured in the layout:',\n      Object.entries(unmappedActions).map(entry => entry[0]),\n    )\n    // Modify the layout: put the unmapped actions in their own group at the top of the menu\n    layout.primaryMenuActions.unshift(\n      Object.entries(unmappedActions).map(\n        (entry): ActionViewProps => ({\n          action: entry[0],\n        }),\n      ),\n    )\n  }\n\n  // Map button actions to an IconButtonConfiguration and omit non-visible actions\n  const iconButtonConfigs: IconButtonConfiguration[] =\n    layout.buttonActions.reduce(\n      (acc: IconButtonConfiguration[], buttonViewProps: ActionViewProps) => {\n        const configForAction = actionConfiguration[buttonViewProps.action]\n        if (configForAction && configForAction.visible) {\n          let onClick = configForAction.onClick\n          if (onClick == null) {\n            console.warn(`No handler registered for ${buttonViewProps.action}`)\n            onClick = () => {\n              console.warn(\n                `No handler registered for ${buttonViewProps.action}`,\n              )\n            }\n          }\n          acc.push({\n            icon: buttonViewProps.icon as IconName,\n            onClick: onClick,\n            tooltipText: configForAction.text,\n            disabled: configForAction.disabled,\n          })\n        }\n        return acc\n      },\n      [],\n    )\n\n  const downloadMenuConfig: DropdownMenuProps = {\n    dropdownButtonText: 'Download Options',\n    convertSingleItemToButton: false,\n    renderMenuIfNoItems: false,\n    buttonTooltip: menuConfiguration.DOWNLOAD.tooltipText,\n    buttonProps: {\n      disabled: menuConfiguration.DOWNLOAD.disabled,\n      endIcon: <IconSvg icon={'download'} wrap={false} />,\n    },\n    items: mapAndFilterMenuGroups(\n      layout.downloadMenuActions,\n      actionConfiguration,\n    ),\n  }\n\n  const primaryMenuConfig: DropdownMenuProps = {\n    dropdownButtonText: layout.primaryMenuText,\n    convertSingleItemToButton: true,\n    renderMenuIfNoItems: false,\n    buttonProps: {\n      endIcon: <IconSvg icon={layout.primaryMenuEndIcon} wrap={false} />,\n    },\n    items: mapAndFilterMenuGroups(\n      layout.primaryMenuActions,\n      actionConfiguration,\n    ),\n  }\n\n  return (\n    <ComplexMenu\n      iconButtons={iconButtonConfigs}\n      dropdownMenus={[downloadMenuConfig, primaryMenuConfig]}\n    />\n  )\n}\n\nexport const EXPORTED_FOR_UNIT_TESTING = {\n  getUnmappedActions,\n  mapAndFilterItemsInMenuGroup,\n  mapAndFilterMenuGroups,\n}\n"],"names":["getUnmappedActions","actionConfiguration","layout","action","config","layoutAction","mapAndFilterItemsInMenuGroup","group","itemAcc","actionViewProps","configForAction","mapAndFilterMenuGroups","menuActions","groupAcc","itemGroup","EntityActionMenu","props","menuConfiguration","unmappedActions","entry","iconButtonConfigs","acc","buttonViewProps","onClick","downloadMenuConfig","jsx","IconSvg","primaryMenuConfig","ComplexMenu"],"mappings":"sIA4DA,SAAAA,EAAAC,EAAAC,EAAA,CAIE,OAAA,OAAA,YAAc,OAAA,QAAAD,CAAA,EAAA,OAAA,CAAA,CAAAE,EAAAC,CAAA,IAGV,CAAAA,GAAA,CAAAA,EAAA,QACE,GASF,CANA,CAA4C,GAAAF,EAAA,cAChC,GAAAA,EAAA,mBAAA,KAAA,EACwB,GAAAA,EAAA,oBAAA,KAAA,CACC,EAGrC,KAAyBG,GAAAA,EAAA,SAAAF,CACiB,CAC1C,CACD,CAEL,CAQA,SAAAG,EAAAC,EAAAN,EAAA,CAIE,OAAAM,EAAA,OAAa,CAAAC,EAAAC,IAAA,CAET,MAAAC,EAAAT,EAAAQ,EAAA,MAAA,EAEA,OAAAC,GAAAA,EAAA,SACEF,EAAA,KAAA,CAAa,KAAAE,EAAA,MAAAD,EAAA,OACmC,QAAAC,EAAA,QACrB,KAAAA,EAAA,KACH,YAAAA,EAAA,YACO,SAAAA,EAAA,SACH,KAAAD,EAAA,KACJ,OAAAA,EAAA,OACE,OAAAA,EAAA,MACA,CAAA,EAG5BD,CAAO,EACT,CAAA,CACC,CAEL,CASA,SAAAG,EAAAC,EAAAX,EAAA,CAIE,OAAAW,EAAA,OAAmB,CAAAC,EAAAN,IAAA,CAEf,MAAAO,EAAAR,EAAAC,EAAAN,CAAA,EAEA,OAAAa,EAAA,OAAA,GACED,EAAA,KAAAC,CAAA,EAEFD,CAAO,EACT,CAAA,CACC,CAEL,CAKA,SAAAE,EAAAC,EAAA,CACE,KAAA,CAAA,oBAAAf,EAAA,kBAAAgB,EAAA,OAAAf,CAAA,EAAAc,EAMAE,EAAAlB,EAAAC,EAAAC,CAAA,EAEA,OAAA,QAAAgB,CAAA,EAAA,OAAA,IACE,QAAA,KAAQ,kEACN,OAAA,QAAAA,CAAA,EAAA,IAAAC,GAAAA,EAAA,CAAA,CAAA,CACqD,EAGvDjB,EAAA,mBAAA,QAA0B,OAAA,QAAAgB,CAAA,EAAA,IACQC,IAAA,CACD,OAAAA,EAAA,CAAA,CACZ,EACjB,CACF,GAKJ,MAAAC,EAAAlB,EAAA,cAAA,OACuB,CAAAmB,EAAAC,IAAA,CAEjB,MAAAZ,EAAAT,EAAAqB,EAAA,MAAA,EACA,GAAAZ,GAAAA,EAAA,QAAA,CACE,IAAAa,EAAAb,EAAA,QACAa,GAAA,OACE,QAAA,KAAA,6BAAAD,EAAA,QAAA,EACAC,EAAA,IAAA,CACE,QAAA,KAAQ,6BAAAD,EAAA,QACuC,CAC/C,GAGJD,EAAA,KAAA,CAAS,KAAAC,EAAA,KACe,QAAAC,EACtB,YAAAb,EAAA,KAC6B,SAAAA,EAAA,QACH,CAAA,EAG9B,OAAAW,CAAO,EACT,CAAA,CACC,EAGLG,EAAA,CAA8C,mBAAA,mBACxB,0BAAA,GACO,oBAAA,GACN,cAAAP,EAAA,SAAA,YACqB,YAAA,CAC7B,SAAAA,EAAA,SAAA,SAC0B,QAAAQ,EAAAC,EAAA,CAAA,KAAA,WAAA,KAAA,GAAA,CACY,EACnD,MAAAf,EACOT,EAAA,oBACED,CACP,CACF,EAGF0B,EAAA,CAA6C,mBAAAzB,EAAA,gBAChB,0BAAA,GACA,oBAAA,GACN,YAAA,CACR,QAAAuB,EAAAC,EAAA,CAAA,KAAAxB,EAAA,mBAAA,KAAA,GAAA,CACqD,EAClE,MAAAS,EACOT,EAAA,mBACED,CACP,CACF,EAGF,OAAAwB,EACEG,EAAC,CAAA,YAAAR,EACc,cAAA,CAAAI,EAAAG,CAAA,CACwC,CAAA,CAG3D"}