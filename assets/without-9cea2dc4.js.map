{"version":3,"file":"without-9cea2dc4.js","sources":["../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayIncludes.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayIncludesWith.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseDifference.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/without.js"],"sourcesContent":["import baseIndexOf from './_baseIndexOf.js';\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nexport default arrayIncludes;\n","/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default arrayIncludesWith;\n","import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array excluding all given values using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * **Note:** Unlike `_.pull`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...*} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.difference, _.xor\n * @example\n *\n * _.without([2, 1, 2, 3], 1, 2);\n * // => [3]\n */\nvar without = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, values)\n    : [];\n});\n\nexport default without;\n"],"names":["arrayIncludes","array","value","length","baseIndexOf","arrayIncludesWith","comparator","index","LARGE_ARRAY_SIZE","baseDifference","values","iteratee","includes","isCommon","result","valuesLength","arrayMap","baseUnary","cacheHas","SetCache","outer","computed","valuesIndex","without","baseRest","isArrayLikeObject","without$1"],"mappings":"oRAWA,SAASA,EAAcC,EAAOC,EAAO,CACnC,IAAIC,EAASF,GAAS,KAAO,EAAIA,EAAM,OACvC,MAAO,CAAC,CAACE,GAAUC,EAAYH,EAAOC,EAAO,CAAC,EAAI,EACpD,CCLA,SAASG,EAAkBJ,EAAOC,EAAOI,EAAY,CAInD,QAHIC,EAAQ,GACRJ,EAASF,GAAS,KAAO,EAAIA,EAAM,OAEhC,EAAEM,EAAQJ,GACf,GAAIG,EAAWJ,EAAOD,EAAMM,CAAK,CAAC,EAChC,MAAO,GAGX,MAAO,EACT,CCXA,IAAIC,EAAmB,IAavB,SAASC,EAAeR,EAAOS,EAAQC,EAAUL,EAAY,CAC3D,IAAIC,EAAQ,GACRK,EAAWZ,EACXa,EAAW,GACXV,EAASF,EAAM,OACfa,EAAS,CAAE,EACXC,EAAeL,EAAO,OAE1B,GAAI,CAACP,EACH,OAAOW,EAELH,IACFD,EAASM,EAASN,EAAQO,EAAUN,CAAQ,CAAC,GAE3CL,GACFM,EAAWP,EACXQ,EAAW,IAEJH,EAAO,QAAUF,IACxBI,EAAWM,EACXL,EAAW,GACXH,EAAS,IAAIS,EAAST,CAAM,GAE9BU,EACA,KAAO,EAAEb,EAAQJ,GAAQ,CACvB,IAAID,EAAQD,EAAMM,CAAK,EACnBc,EAAWV,GAAY,KAAOT,EAAQS,EAAST,CAAK,EAGxD,GADAA,EAASI,GAAcJ,IAAU,EAAKA,EAAQ,EAC1CW,GAAYQ,IAAaA,EAAU,CAErC,QADIC,EAAcP,EACXO,KACL,GAAIZ,EAAOY,CAAW,IAAMD,EAC1B,SAASD,EAGbN,EAAO,KAAKZ,CAAK,CAClB,MACSU,EAASF,EAAQW,EAAUf,CAAU,GAC7CQ,EAAO,KAAKZ,CAAK,CAEpB,CACD,OAAOY,CACT,CCxCA,IAAIS,EAAUC,EAAS,SAASvB,EAAOS,EAAQ,CAC7C,OAAOe,EAAkBxB,CAAK,EAC1BQ,EAAeR,EAAOS,CAAM,EAC5B,EACN,CAAC,EAED,MAAAgB,EAAeH","x_google_ignoreList":[0,1,2,3]}