{"version":3,"file":"useAccessRequirements-812f67b3.js","sources":["../../../../node_modules/.pnpm/@mui+material@5.11.16_@emotion+react@11.10.6_@emotion+styled@11.10.6_@types+react@18.0.27_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/useMediaQuery/useMediaQuery.js","../../src/components/AccessRequirementList/AccessRequirementListUtils.ts","../../src/synapse-queries/dataaccess/useAccessRequirements.ts"],"sourcesContent":["import * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && matchMedia) {\n      return matchMedia(query).matches;\n    }\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    }\n\n    // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n    if (!matchMedia) {\n      return undefined;\n    }\n    const queryList = matchMedia(query);\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n    updateMatch();\n    // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia]);\n  return match;\n}\n\n// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\nconst maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (noSsr && matchMedia) {\n      return () => matchMedia(query).matches;\n    }\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n      mediaQueryList.addListener(notify);\n      return () => {\n        mediaQueryList.removeListener(notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    ssrMatchMedia = null,\n    noSsr = false\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n\n  // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n  return match;\n}","import { sortBy } from 'lodash-es'\nimport { getAccessRequirementStatus } from '../../synapse-client/SynapseClient'\nimport { useMediaQuery, useTheme } from '@mui/material'\n\n/**\n * Given an array of access requirement IDs, return the IDs sorted by the user's status, where\n * completed access requirements are shown first.\n * @param accessToken\n * @param requirementIds\n */\nexport const sortAccessRequirementsByCompletion = async (\n  accessToken: string | undefined,\n  requirementIds: string[],\n): Promise<string[]> => {\n  const statuses = requirementIds.map(id => {\n    return getAccessRequirementStatus(accessToken, id)\n  })\n  const accessRequirementStatuses = await Promise.all(statuses)\n\n  return sortBy(requirementIds, id => {\n    // if its true then it should come first, which means that it should be higher in the list\n    // which is sorted ascendingly\n    return (\n      -1 *\n      Number(\n        accessRequirementStatuses.find(\n          status => id === status.accessRequirementId,\n        )!.isApproved,\n      )\n    )\n  })\n}\n\n/**\n * Determines if we can show ManagedACTAccessRequirement wiki content alongside the forms using a media query.\n * See SWC-6432.\n */\nexport function useCanShowManagedACTWikiInWizard(): boolean {\n  const theme = useTheme()\n  const matchesBreakpoint = useMediaQuery(theme.breakpoints.up('md'))\n  return matchesBreakpoint\n}\n","import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  AccessApproval,\n  AccessControlList,\n  AccessRequirement,\n  AccessRequirementStatus,\n  ACTSubmissionStatus,\n  ManagedACTAccessRequirementStatus,\n  Renewal,\n  Request,\n  RestrictionInformationRequest,\n  RestrictionInformationResponse,\n  WikiPageKey,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  AccessRequirementSearchRequest,\n  AccessRequirementSearchResponse,\n} from '@sage-bionetworks/synapse-types'\nimport { ResearchProject } from '@sage-bionetworks/synapse-types'\nimport { sortAccessRequirementsByCompletion } from '../../components/AccessRequirementList/AccessRequirementListUtils'\n\nexport function useGetAccessRequirements<T extends AccessRequirement>(\n  accessRequirementId: string | number,\n  options?: UseQueryOptions<T, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<T, SynapseClientError>(\n    keyFactory.getAccessRequirementQueryKey(String(accessRequirementId)),\n    () =>\n      SynapseClient.getAccessRequirementById<T>(\n        accessToken,\n        accessRequirementId,\n      ),\n    options,\n  )\n}\n\nexport function useGetAccessRequirementsForEntity(\n  entityId: string,\n  options?: UseQueryOptions<AccessRequirement[], SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<AccessRequirement[], SynapseClientError>(\n    keyFactory.getEntityAccessRequirementsQueryKey(entityId),\n    () => SynapseClient.getAllAccessRequirements(accessToken, entityId),\n    options,\n  )\n}\n\nexport function useGetAccessRequirementsForTeam(\n  teamId: string,\n  options?: UseQueryOptions<AccessRequirement[], SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<AccessRequirement[], SynapseClientError>(\n    keyFactory.getTeamAccessRequirementsQueryKey(teamId),\n    () => SynapseClient.getTeamAccessRequirements(accessToken, teamId),\n    options,\n  )\n}\n\nexport function useGetAccessRequirementWikiPageKey(\n  accessRequirementId: string,\n  options?: UseQueryOptions<WikiPageKey, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<WikiPageKey, SynapseClientError>(\n    keyFactory.getAccessRequirementWikiPageKey(accessRequirementId),\n    () =>\n      SynapseClient.getWikiPageKeyForAccessRequirement(\n        accessToken,\n        accessRequirementId,\n      ),\n    options,\n  )\n}\n\nexport function useGetAccessRequirementACL(\n  accessRequirementId: string,\n  options?: UseQueryOptions<AccessControlList | null, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<AccessControlList | null, SynapseClientError>(\n    keyFactory.getAccessRequirementAclQueryKey(accessRequirementId),\n    () =>\n      SynapseClient.getAccessRequirementAcl(accessToken, accessRequirementId),\n    options,\n  )\n}\n\nexport function useSearchAccessRequirementsInfinite(\n  params: Omit<AccessRequirementSearchRequest, 'nextPageToken'>,\n  options?: UseInfiniteQueryOptions<\n    AccessRequirementSearchResponse,\n    SynapseClientError\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<AccessRequirementSearchResponse, SynapseClientError>(\n    keyFactory.searchAccessRequirementsQueryKey(params),\n    async context => {\n      return await SynapseClient.searchAccessRequirements(accessToken, {\n        ...params,\n        nextPageToken: context.pageParam,\n      })\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useGetRestrictionInformation(\n  request: RestrictionInformationRequest,\n  options?: UseQueryOptions<RestrictionInformationResponse, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<RestrictionInformationResponse, SynapseClientError>(\n    keyFactory.getAccessRequirementRestrictionInformationQueryKey(request),\n    () => SynapseClient.getRestrictionInformation(request, accessToken),\n    options,\n  )\n}\n\nexport function useCreateLockAccessRequirement(\n  options?: UseMutationOptions<AccessRequirement, SynapseClientError, string>,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<AccessRequirement, SynapseClientError, string>({\n    ...options,\n    mutationFn: (entityId: string) =>\n      SynapseClient.createLockAccessRequirement(entityId, accessToken),\n    mutationKey: ['createLockAccessRequirement'],\n    onSuccess: async (data, variables, ctx) => {\n      // Invalidate all access requirement queries\n      await queryClient.invalidateQueries(\n        keyFactory.getAccessRequirementQueryKey(),\n      )\n      // Invalidate all entity queries (not just the current entity because the new AR may apply to this entity's children)\n      await queryClient.invalidateQueries(keyFactory.getAllEntityDataQueryKey())\n      if (options?.onSuccess) {\n        return options.onSuccess(data, variables, ctx)\n      }\n    },\n  })\n}\n\nexport function useGetAccessRequirementStatus<\n  T extends\n    | AccessRequirementStatus\n    | ManagedACTAccessRequirementStatus = AccessRequirementStatus,\n>(\n  accessRequirementId: string,\n  options?: UseQueryOptions<T, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<T, SynapseClientError>(\n    keyFactory.getAccessRequirementStatusQueryKey(accessRequirementId),\n    () =>\n      SynapseClient.getAccessRequirementStatus<T>(\n        accessToken,\n        accessRequirementId,\n      ),\n    options,\n  )\n}\n\nexport function useSortAccessRequirementIdsByCompletion(\n  accessRequirementIds: string[],\n  options?: UseQueryOptions<string[], SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<string[], SynapseClientError>(\n    keyFactory.getSortedAccessRequirementsAndStatusQueryKey(\n      accessRequirementIds,\n    ),\n    () => sortAccessRequirementsByCompletion(accessToken, accessRequirementIds),\n    options,\n  )\n}\n\nexport function useGetResearchProject(\n  accessRequirementId: string,\n  options?: UseQueryOptions<ResearchProject, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<ResearchProject, SynapseClientError>(\n    keyFactory.getAccessRequirementResearchProjectQueryKey(accessRequirementId),\n    () => SynapseClient.getResearchProject(accessRequirementId, accessToken!),\n    options,\n  )\n}\n\nexport function useUpdateResearchProject(\n  options?: UseMutationOptions<\n    ResearchProject,\n    SynapseClientError,\n    ResearchProject\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<ResearchProject, SynapseClientError, ResearchProject>(\n    (researchProject: ResearchProject) =>\n      SynapseClient.updateResearchProject(researchProject, accessToken!),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate the research project query\n        await queryClient.invalidateQueries(\n          keyFactory.getAccessRequirementResearchProjectQueryKey(\n            data.accessRequirementId,\n          ),\n        )\n        if (options?.onSuccess) {\n          return options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetDataAccessRequestForUpdate(\n  accessRequirementId: string,\n  options?: UseQueryOptions<Request | Renewal, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<Request | Renewal, SynapseClientError>(\n    keyFactory.getDataAccessRequestForUpdateQueryKey(accessRequirementId),\n    () =>\n      SynapseClient.getDataAccessRequestForUpdate(\n        accessRequirementId,\n        accessToken!,\n      ),\n    options,\n  )\n}\n\nexport function useUpdateDataAccessRequest(\n  options?: UseMutationOptions<\n    Request | Renewal,\n    SynapseClientError,\n    Request | Renewal\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<Request | Renewal, SynapseClientError, Request | Renewal>(\n    (requestInterface: Request | Renewal) =>\n      SynapseClient.updateDataAccessRequest(requestInterface, accessToken!),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate the data access request query\n        await queryClient.invalidateQueries(\n          keyFactory.getDataAccessRequestForUpdateQueryKey(\n            data.accessRequirementId,\n          ),\n        )\n        if (options?.onSuccess) {\n          return options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useCreateAccessApproval(\n  options?: UseMutationOptions<\n    AccessApproval,\n    SynapseClientError,\n    AccessApproval\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<AccessApproval, SynapseClientError, AccessApproval>(\n    request => SynapseClient.createAccessApproval(accessToken, request),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate query for AR status\n        await queryClient.invalidateQueries(\n          keyFactory.getAccessRequirementStatusQueryKey(\n            String(variables.requirementId),\n          ),\n        )\n        if (options?.onSuccess) {\n          return options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useCancelDataAccessRequest(\n  options?: UseMutationOptions<\n    ACTSubmissionStatus,\n    SynapseClientError,\n    { submissionId: string; accessRequirementId: string }\n  >,\n) {\n  const { accessToken } = useSynapseContext()\n  const queryClient = useQueryClient()\n  const { keyFactory } = useSynapseContext()\n\n  return useMutation<\n    ACTSubmissionStatus,\n    SynapseClientError,\n    { submissionId: string; accessRequirementId: string }\n  >(\n    request =>\n      SynapseClient.cancelDataAccessRequest(request.submissionId, accessToken!),\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        // Invalidate query for AR status\n        await queryClient.invalidateQueries(\n          keyFactory.getAccessRequirementStatusQueryKey(\n            String(variables.accessRequirementId),\n          ),\n        )\n        if (options?.onSuccess) {\n          return options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n"],"names":["useMediaQueryOld","query","defaultMatches","matchMedia","ssrMatchMedia","noSsr","match","setMatch","React.useState","useEnhancedEffect","active","queryList","updateMatch","maybeReactUseSyncExternalStore","React","useMediaQueryNew","getDefaultSnapshot","React.useCallback","getServerSnapshot","React.useMemo","matches","getSnapshot","subscribe","mediaQueryList","notify","useMediaQuery","queryInput","options","theme","useTheme","supportMatchMedia","getThemeProps","sortAccessRequirementsByCompletion","accessToken","requirementIds","statuses","id","getAccessRequirementStatus","accessRequirementStatuses","sortBy","status","useCanShowManagedACTWikiInWizard","useGetAccessRequirements","accessRequirementId","keyFactory","useSynapseContext","useQuery","SynapseClient","useGetAccessRequirementsForEntity","entityId","useGetAccessRequirementsForTeam","teamId","useGetAccessRequirementWikiPageKey","useGetAccessRequirementACL","useSearchAccessRequirementsInfinite","params","useInfiniteQuery","context","page","useGetRestrictionInformation","request","useCreateLockAccessRequirement","queryClient","useQueryClient","useMutation","data","variables","ctx","useGetAccessRequirementStatus","useSortAccessRequirementIdsByCompletion","accessRequirementIds","useGetResearchProject","useUpdateResearchProject","researchProject","useGetDataAccessRequestForUpdate","useUpdateDataAccessRequest","requestInterface","useCreateAccessApproval","useCancelDataAccessRequest"],"mappings":"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","x_google_ignoreList":[0]}