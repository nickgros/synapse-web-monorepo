import{l as m}from"./index-8a3c600e.js";import{k as h,a8 as w,a9 as v,aa as M,ab as L,ac as D,ad as B,ae as O,af as A,ag as j}from"./SynapseClient-a57981a2.js";import{g as V,B as P}from"./getEndpoint-ac94413e.js";import{M as y,c as k}from"./mock_user_profile-4c1267b7.js";import{a as u,b as Y}from"./mock_file_handle-ac49ece2.js";import{m as K}from"./mockFileEntity-022cc6e0.js";import{M as R}from"./userProfileHandlers-0412dbcf.js";import{m as U}from"./mockSchema-94bf6f59.js";const I="syn60000",b="A Mocked Dataset",f={id:I,parentId:u.id,name:b,concreteType:"org.sagebionetworks.repo.model.table.Dataset",createdBy:y.toString(),modifiedBy:k.toString(),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",versionNumber:3,versionLabel:"in progress",versionComment:"in progress",isLatestVersion:!0,etag:"00000000-0000-0000-0000-000000000000",items:[],columnIds:[],isSearchEnabled:!1},H={id:I,type:"org.sagebionetworks.repo.model.table.Dataset",name:b,benefactorId:parseInt(u.id),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",createdBy:y.toString(),modifiedBy:y.toString(),versionNumber:3,versionLabel:"in progress",isLatestVersion:!0},N={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:u.name,id:u.id,type:"org.sagebionetworks.repo.model.Project"},{name:b,id:I,type:"org.sagebionetworks.repo.model.FileEntity"}]},Z={1:{...f,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1},2:{...f,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1}},F=[{id:I,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1,modifiedBy:y.toString(),modifiedByPrincipalId:y.toString(),modifiedOn:"2022-03-22T18:50:22.336Z"},{id:I,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1,modifiedBy:y.toString(),modifiedByPrincipalId:y.toString(),modifiedOn:"2022-03-22T18:47:34.797Z"}],J={entity:f,entityType:h.DATASET,path:N,permissions:{canView:!0,canEdit:!0,canMove:!0,canAddChild:!0,canCertifiedUserEdit:!0,canCertifiedUserAddChild:!0,isCertifiedUser:!0,canChangePermissions:!0,canChangeSettings:!0,canDelete:!0,canDownload:!0,canUpload:!0,canEnableInheritance:!0,ownerPrincipalId:3350396,canPublicRead:!0,canModerate:!0,isCertificationRequired:!0,isEntityOpenData:!1}},S={id:I,name:b,entity:f,entityHeader:H,path:N,bundle:J,versions:Z,versionInfo:F},T="syn70000",E="A Mocked Dataset Collection",G={id:T,parentId:u.id,name:E,concreteType:"org.sagebionetworks.repo.model.table.DatasetCollection",createdBy:y.toString(),modifiedBy:y.toString(),etag:"00000000-0000-0000-0000-000000000000",items:[{entityId:S.id,versionNumber:1}],columnIds:[],isSearchEnabled:!1},z={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:u.name,id:u.id,type:"org.sagebionetworks.repo.model.Project"},{name:E,id:T,type:"org.sagebionetworks.repo.model.FileEntity"}]},Q={id:T,name:E,entity:G,path:z},g="syn40000",_="my table name",C=u.id,p={id:g,versionNumber:1,versionLabel:"in progress",versionComment:"in progress",parentId:C,name:_,concreteType:"org.sagebionetworks.repo.model.table.TableEntity",createdBy:y.toString(),createdOn:"2022-02-03T12:44:35.457Z",modifiedOn:"2022-05-14T17:10:36.915Z",modifiedBy:k.toString(),etag:"00000000-0000-0000-0000-000000000000",columnIds:[],isSearchEnabled:!0,isLatestVersion:!0},W={name:p.name,id:g,type:"org.sagebionetworks.repo.model.table.TableEntity",versionNumber:p.versionNumber,versionLabel:p.versionLabel,benefactorId:C,createdOn:p.createdOn,modifiedOn:p.modifiedOn,createdBy:p.createdBy,modifiedBy:p.modifiedBy,isLatestVersion:p.isLatestVersion},X={id:g,name:_,entity:p,entityHeader:W},l=[K,...Y,S,Q,X],re=c=>[m.rest.post(`${c}${w}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(n.body)}`};if(n.body){const t=n.body,i=l.find(a=>a.name===t.name);i?(o=i.entity,s=200):t.name===R&&(o.reason="Invalid project name",s=403)}return r(e.status(s),e.json(o))}),m.rest.get(`${c}${v(":entityId")}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity with ID ${n.params.entityId}`};const t=l.find(i=>i.id===n.params.entityId);return t&&(o=t.entity,s=200),r(e.status(s),e.json(o))}),m.rest.get(`${c}${M(":entityId")}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find mock entity versions for ID ${n.params.entityId}`};const t=l.find(i=>i.id===n.params.entityId);return t&&t.versionInfo&&(o={results:t.versionInfo},s=200),r(e.status(s),e.json(o))}),m.rest.get(`${c}${L(":entityId",":versionNumber")}`,async(n,r,e)=>{let s=404;const o=n.params.entityId,t=n.params.versionNumber.toString(),i=parseInt(t);let a={reason:`Mock Service worker could not find a mock versioned entity with ID ${o}.${t}`};const d=l.find($=>$.id===n.params.entityId);return d&&d.versions&&d.versions[i]&&(a=d.versions[i],s=200),r(e.status(s),e.json(a))}),m.rest.post(`${c}${D(":entityId")}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=l.find(i=>i.id===n.params.entityId);return t!=null&&t.bundle&&(o=t.bundle,s=200),r(e.status(s),e.json(o))}),m.rest.post(`${c}${D(":entityId",":versionNumber")}`,async(n,r,e)=>{const s=n.params.entityId,o=parseInt(n.params.versionNumber);let t=404,i={reason:`Mock Service worker could not find a mock entity bundle with ID ${s}`};const a=l.find(d=>d.id===s);if(a){const d=a.bundle;a.versions&&a.versions[o]?i={...d,entity:a.versions[o]}:i=d,t=200}return r(e.status(t),e.json(i))}),m.rest.get(`${c}${B(":entityId")}`,async(n,r,e)=>r(e.status(200),e.json(U))),m.rest.get(`${c}${O(":entityId")}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=l.find(i=>i.id===n.params.entityId);return t!=null&&t.json&&(o=t.json,s=200),r(e.status(s),e.json(o))}),m.rest.post(`${c}${A}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=n.body,i=l.filter(a=>t.references.find(d=>d.targetId===a.id)).map(a=>a.entityHeader).filter(a=>!!a);return i&&(o={results:i},s=200),r(e.status(s),e.json(o))}),m.rest.get(`${c}${v(":entityId")}/path`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity path using ID ${n.params.entityId}`};const t=l.find(i=>n.params.entityId===i.id);return t&&t.path&&(o=t.path,s=200),r(e.status(s),e.json(o))}),m.rest.get(`${V(P.REPO_ENDPOINT)}/file/v1/entity/:id/uploadDestination`,async(n,r,e)=>{const s={banner:"",storageLocationId:1,uploadType:j.S3,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"};return r(e.status(200),e.json(s))})];export{re as g};
//# sourceMappingURL=entityHandlers-a0e91b52.js.map
