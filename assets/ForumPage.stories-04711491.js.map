{"version":3,"file":"ForumPage.stories-04711491.js","sources":["../../src/lib/utils/hooks/SynapseAPI/forum/useForum.ts","../../src/lib/containers/discussion_forum/ForumTable.tsx","../../src/lib/containers/discussion_forum/ForumPage.tsx"],"sourcesContent":["import {\n  UseInfiniteQueryOptions,\n  useInfiniteQuery,\n  UseQueryOptions,\n  useQuery,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { PaginatedResults } from '../../../synapseTypes'\nimport {\n  DiscussionFilter,\n  DiscussionThreadBundle,\n  DiscussionThreadOrder,\n} from '../../../synapseTypes/DiscussionBundle'\nimport { PaginatedIds } from '../../../synapseTypes/PaginatedIds'\n\nexport function useGetModerators(\n  forumId: string,\n  options?: UseQueryOptions<PaginatedIds, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<PaginatedIds, SynapseClientError>(\n    keyFactory.getForumModeratorsQueryKey(forumId),\n    () => SynapseClient.getModerators(accessToken, forumId),\n    options,\n  )\n}\n\nexport function useGetForumInfinite(\n  forumId: string,\n  limit: number,\n  sort: DiscussionThreadOrder,\n  ascending: boolean,\n  filter?: DiscussionFilter,\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<DiscussionThreadBundle>,\n    SynapseClientError\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<\n    PaginatedResults<DiscussionThreadBundle>,\n    SynapseClientError\n  >(\n    keyFactory.getForumThreadsQueryKey(forumId, limit, sort, ascending, filter),\n    async context => {\n      return SynapseClient.getForumThread(\n        accessToken,\n        forumId,\n        context.pageParam,\n        limit,\n        sort,\n        ascending,\n        filter,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        const numberOfFetchedResults = pages.flatMap(\n          page => page.results,\n        ).length\n        if (lastPage.totalNumberOfResults! > numberOfFetchedResults) {\n          return numberOfFetchedResults\n        } else {\n          return undefined\n        }\n      },\n    },\n  )\n}\n","import dayjs from 'dayjs'\nimport React, { useState } from 'react'\nimport { Button, Table } from 'react-bootstrap'\nimport SortIcon from '../../assets/icons/Sort'\nimport { useGetForumInfinite } from '../../utils/hooks/SynapseAPI/forum/useForum'\nimport { AVATAR, SMALL_USER_CARD } from '../../utils/SynapseConstants'\nimport { Direction } from '../../utils/synapseTypes'\nimport {\n  DiscussionFilter,\n  DiscussionThreadOrder,\n} from '../../utils/synapseTypes/DiscussionBundle'\nimport IconSvg from '../IconSvg'\nimport UserCard from '../UserCard'\n\nexport type ForumTableProps = {\n  forumId: string\n  limit: number\n  onClickLink: () => void\n  filter: DiscussionFilter\n}\n\nexport const ForumTable: React.FC<ForumTableProps> = ({\n  forumId,\n  limit,\n  filter,\n  onClickLink,\n}) => {\n  const [sort, setSort] = useState<DiscussionThreadOrder>(\n    DiscussionThreadOrder.PINNED_AND_LAST_ACTIVITY,\n  )\n  const [isAscending, setIsAscending] = useState(false)\n\n  const { data, hasNextPage, fetchNextPage } = useGetForumInfinite(\n    forumId,\n    limit,\n    sort,\n    isAscending,\n    filter,\n  )\n\n  const threads = data?.pages.flatMap(page => page.results) ?? []\n\n  const onSort = (field: DiscussionThreadOrder) => {\n    if (sort == field) {\n      setSort(field)\n      setIsAscending(!isAscending)\n    } else {\n      setSort(field)\n      setIsAscending(false)\n    }\n  }\n\n  return (\n    <div className=\"ForumTable bootstrap-4-backport\">\n      <Table>\n        <thead>\n          <tr>\n            <th>\n              <span className=\"SRC-split\">\n                <span>Topic</span>\n                <SortIcon\n                  role=\"button\"\n                  aria-label=\"Sort by Topic\"\n                  active={sort === DiscussionThreadOrder.THREAD_TITLE}\n                  direction={\n                    sort === 'THREAD_TITLE'\n                      ? isAscending === false\n                        ? Direction.DESC\n                        : Direction.ASC\n                      : Direction.DESC\n                  }\n                  onClick={() => onSort(DiscussionThreadOrder.THREAD_TITLE)}\n                />\n              </span>\n            </th>\n            <th>Author</th>\n            <th>Active Users</th>\n            <th>\n              <span className=\"SRC-split\">\n                <span>Replies</span>\n                <SortIcon\n                  role=\"button\"\n                  aria-label=\"Sort by Replies\"\n                  active={sort === DiscussionThreadOrder.NUMBER_OF_REPLIES}\n                  direction={\n                    sort === 'NUMBER_OF_REPLIES'\n                      ? isAscending === false\n                        ? Direction.DESC\n                        : Direction.ASC\n                      : Direction.DESC\n                  }\n                  onClick={() =>\n                    onSort(DiscussionThreadOrder.NUMBER_OF_REPLIES)\n                  }\n                />\n              </span>\n            </th>\n            <th>\n              <span className=\"SRC-split\">\n                <span>Views</span>\n                <SortIcon\n                  role=\"button\"\n                  aria-label=\"Sort by Views\"\n                  active={sort === DiscussionThreadOrder.NUMBER_OF_VIEWS}\n                  direction={\n                    sort === 'NUMBER_OF_VIEWS'\n                      ? isAscending === false\n                        ? Direction.DESC\n                        : Direction.ASC\n                      : Direction.DESC\n                  }\n                  onClick={() => onSort(DiscussionThreadOrder.NUMBER_OF_VIEWS)}\n                />\n              </span>\n            </th>\n            <th>\n              <span className=\"SRC-split\">\n                <span>Activity</span>\n                <SortIcon\n                  role=\"button\"\n                  aria-label=\"Sort by Last Activity\"\n                  active={\n                    sort === DiscussionThreadOrder.PINNED_AND_LAST_ACTIVITY\n                  }\n                  direction={\n                    sort === 'PINNED_AND_LAST_ACTIVITY'\n                      ? isAscending === false\n                        ? Direction.DESC\n                        : Direction.ASC\n                      : Direction.DESC\n                  }\n                  onClick={() =>\n                    onSort(DiscussionThreadOrder.PINNED_AND_LAST_ACTIVITY)\n                  }\n                />\n              </span>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {threads.map(item => {\n            return (\n              <tr key={item.id}>\n                <td>\n                  <a onClick={() => onClickLink()}>\n                    {item.isPinned ? <IconSvg icon=\"pushpin\" /> : <></>}\n                    {item.title}\n                  </a>\n                </td>\n                <td>\n                  <UserCard size={SMALL_USER_CARD} ownerId={item.createdBy} />\n                </td>\n                <td>\n                  {item.activeAuthors.map(user => (\n                    <div key={user} className=\"avatarContainer\">\n                      <UserCard\n                        showCardOnHover={true}\n                        className=\"ActiveUsers\"\n                        size={AVATAR}\n                        avatarSize={'MEDIUM'}\n                        ownerId={user}\n                      />\n                    </div>\n                  ))}\n                </td>\n                <td>{item.numberOfReplies}</td>\n                <td>{item.numberOfViews}</td>\n                <td>{dayjs(item.lastActivity).format('L')}</td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </Table>\n      {hasNextPage && (\n        <Button\n          variant=\"outline-primary\"\n          onClick={() => {\n            fetchNextPage()\n          }}\n        >\n          Show more results\n        </Button>\n      )}\n    </div>\n  )\n}\n","import { Typography } from '@mui/material'\nimport React, { useState } from 'react'\nimport { Button, Modal } from 'react-bootstrap'\nimport { useGetCurrentUserProfile } from '../../utils/hooks/SynapseAPI'\nimport { useGetModerators } from '../../utils/hooks/SynapseAPI/forum/useForum'\nimport { useSubscription } from '../../utils/hooks/SynapseAPI/subscription/useSubscription'\nimport { SRC_SIGN_IN_CLASS } from '../../utils/SynapseConstants'\nimport { DiscussionFilter } from '../../utils/synapseTypes/DiscussionBundle'\nimport { SubscriptionObjectType } from '../../utils/synapseTypes/Subscription'\nimport { displayToast } from '../ToastMessage'\nimport { ForumTable } from './ForumTable'\nimport { ForumThreadEditor } from './ForumThreadEditor'\nimport { SubscribersModal } from './SubscribersModal'\n\nexport type ForumPageProps = {\n  forumId: string\n  limit: number\n  onClickLink: () => void\n}\n\nconst SIGN_IN_TEXT = 'You will need to sign in for access to that resource'\n\nexport const ForumPage: React.FC<ForumPageProps> = ({\n  forumId,\n  limit,\n  onClickLink,\n}) => {\n  const [showThreadModal, setShowThreadModal] = useState(false)\n  const [showSignInModal, setShowSignInModal] = useState(false)\n  const [showDeletedThread, setShowDeletedThread] = useState(false)\n  const [showSubscriberModal, setShowSubscriberModal] = useState(false)\n  const { subscription, isLoading, toggleSubscribed } = useSubscription(\n    forumId,\n    SubscriptionObjectType.FORUM,\n  )\n\n  function handleFollowBtn() {\n    try {\n      toggleSubscribed()\n    } catch (err: any) {\n      displayToast(err.reason as string, 'danger')\n    }\n  }\n  const { data: moderatorList } = useGetModerators(forumId)\n  const { data: currentUserProfile } = useGetCurrentUserProfile()\n\n  const isCurrentUserModerator = moderatorList?.results.includes(\n    currentUserProfile?.ownerId ?? '',\n  )\n\n  const handleNewThreadBtn = () => {\n    if (currentUserProfile?.userName == 'anonymous') {\n      setShowSignInModal(true)\n    } else {\n      setShowThreadModal(true)\n    }\n  }\n\n  return (\n    <div className=\"ForumTable bootstrap-4-backport\">\n      <div className=\"ForumTable__top-level-control\">\n        <SubscribersModal\n          id={forumId}\n          objectType={SubscriptionObjectType.FORUM}\n          showModal={showSubscriberModal}\n          handleModal={setShowSubscriberModal}\n        />\n        <Button\n          variant={subscription ? 'outline-primary' : 'primary'}\n          onClick={() => handleFollowBtn()}\n          disabled={isLoading}\n        >\n          {subscription ? 'Unfollow' : 'Follow'}\n        </Button>\n        {\n          <Button variant=\"primary\" onClick={() => handleNewThreadBtn()}>\n            New Thread\n          </Button>\n        }\n        {isCurrentUserModerator && (\n          <Button onClick={() => setShowDeletedThread(!showDeletedThread)}>\n            {showDeletedThread\n              ? 'Hide Deleted Threads'\n              : 'Show Deleted Threads'}\n          </Button>\n        )}\n      </div>\n      {showDeletedThread && (\n        <>\n          <Typography variant=\"h4\">Deleted Threads</Typography>\n          <ForumTable\n            onClickLink={onClickLink}\n            forumId={forumId}\n            limit={limit}\n            filter={DiscussionFilter.DELETED_ONLY}\n          />\n        </>\n      )}\n      <ForumTable\n        onClickLink={onClickLink}\n        forumId={forumId}\n        limit={limit}\n        filter={DiscussionFilter.EXCLUDE_DELETED}\n      />\n      <Modal\n        size=\"lg\"\n        show={showThreadModal}\n        onHide={() => setShowThreadModal(false)}\n        animation={false}\n      >\n        <Modal.Header>\n          <Modal.Title>New Thread</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <ForumThreadEditor\n            isReply={false}\n            id={forumId}\n            onClose={() => setShowThreadModal(false)}\n          />\n        </Modal.Body>\n      </Modal>\n      <Modal\n        className=\"bootstrap-4-backport\"\n        show={showSignInModal}\n        onHide={() => setShowSignInModal(false)}\n        animation={false}\n      >\n        <Modal.Header closeButton />\n        <Modal.Body>{SIGN_IN_TEXT}</Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => setShowSignInModal(false)}\n            className={SRC_SIGN_IN_CLASS}\n          >\n            Sign In\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  )\n}\n"],"names":["useGetModerators","forumId","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient.getModerators","useGetForumInfinite","limit","sort","ascending","filter","useInfiniteQuery","context","SynapseClient.getForumThread","lastPage","pages","numberOfFetchedResults","page","ForumTable","onClickLink","setSort","useState","DiscussionThreadOrder","isAscending","setIsAscending","data","hasNextPage","fetchNextPage","threads","onSort","field","jsxs","Table","jsx","SortIcon","Direction","item","IconSvg","Fragment","UserCard","SMALL_USER_CARD","user","AVATAR","dayjs","Button","SIGN_IN_TEXT","ForumPage","showThreadModal","setShowThreadModal","showSignInModal","setShowSignInModal","showDeletedThread","setShowDeletedThread","showSubscriberModal","setShowSubscriberModal","subscription","isLoading","toggleSubscribed","useSubscription","SubscriptionObjectType","handleFollowBtn","err","displayToast","moderatorList","currentUserProfile","useGetCurrentUserProfile","isCurrentUserModerator","handleNewThreadBtn","SubscribersModal","Typography","DiscussionFilter","Modal","ForumThreadEditor","SRC_SIGN_IN_CLASS"],"mappings":"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"}