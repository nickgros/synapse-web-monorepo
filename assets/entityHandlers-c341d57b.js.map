{"version":3,"file":"entityHandlers-c341d57b.js","sources":["../../mocks/entity/mockDataset.ts","../../mocks/entity/mockDatasetCollection.ts","../../mocks/entity/mockTableEntity.ts","../../mocks/entity/index.ts","../../mocks/mockSchema.ts","../../mocks/msw/handlers/entityHandlers.ts"],"sourcesContent":["import {\n  Dataset,\n  EntityBundle,\n  EntityHeader,\n  EntityPath,\n  EntityType,\n} from '@sage-bionetworks/synapse-types'\nimport { VersionInfo } from '@sage-bionetworks/synapse-types'\nimport { MOCK_USER_ID, MOCK_USER_ID_2 } from '../user/mock_user_profile'\nimport { MockEntityData } from './MockEntityData'\nimport mockProjectEntityData from './mockProject'\n\nconst MOCK_DATASET_ENTITY_ID = 'syn234'\nconst MOCK_DATASET_NAME = 'A Mocked Dataset'\n\nexport const mockDatasetEntity: Dataset = {\n  id: MOCK_DATASET_ENTITY_ID,\n  parentId: mockProjectEntityData.id,\n  name: MOCK_DATASET_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.table.Dataset',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID_2.toString(),\n  createdOn: '2020-01-01T00:00:00.000Z',\n  modifiedOn: '2020-02-01T00:00:00.000Z',\n  versionNumber: 3,\n  versionLabel: 'in progress',\n  versionComment: 'in progress',\n  isLatestVersion: true,\n  etag: '00000000-0000-0000-0000-000000000000',\n  items: [],\n  columnIds: [],\n  isSearchEnabled: false,\n}\n\nconst mockHeader: EntityHeader = {\n  id: MOCK_DATASET_ENTITY_ID,\n  type: 'org.sagebionetworks.repo.model.table.Dataset',\n  name: MOCK_DATASET_NAME,\n  benefactorId: parseInt(mockProjectEntityData.id),\n  createdOn: '2020-01-01T00:00:00.000Z',\n  modifiedOn: '2020-02-01T00:00:00.000Z',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID.toString(),\n  versionNumber: 3,\n  versionLabel: 'in progress',\n  isLatestVersion: true,\n}\n\nconst path: EntityPath = {\n  path: [\n    {\n      name: 'root',\n      id: 'syn4489',\n      type: 'org.sagebionetworks.repo.model.Folder',\n    },\n    {\n      name: mockProjectEntityData.name,\n      id: mockProjectEntityData.id,\n      type: 'org.sagebionetworks.repo.model.Project',\n    },\n    {\n      name: MOCK_DATASET_NAME,\n      id: MOCK_DATASET_ENTITY_ID,\n      type: 'org.sagebionetworks.repo.model.FileEntity',\n    },\n  ],\n}\n\nconst versions: Record<number, Dataset> = {\n  1: {\n    ...mockDatasetEntity,\n    versionNumber: 1,\n    versionLabel: 'snapshot 1',\n    versionComment: '',\n    isLatestVersion: false,\n  },\n  2: {\n    ...mockDatasetEntity,\n    versionNumber: 2,\n    versionLabel: 'snapshot 2',\n    versionComment: '',\n    isLatestVersion: false,\n  },\n}\n\nconst versionInfo: VersionInfo[] = [\n  {\n    id: MOCK_DATASET_ENTITY_ID,\n    versionNumber: 2,\n    versionLabel: 'snapshot 2',\n    versionComment: '',\n    isLatestVersion: false,\n    modifiedBy: MOCK_USER_ID.toString(),\n    modifiedByPrincipalId: MOCK_USER_ID.toString(),\n    modifiedOn: '2022-03-22T18:50:22.336Z',\n  },\n  {\n    id: MOCK_DATASET_ENTITY_ID,\n    versionNumber: 1,\n    versionLabel: 'snapshot 1',\n    versionComment: '',\n    isLatestVersion: false,\n    modifiedBy: MOCK_USER_ID.toString(),\n    modifiedByPrincipalId: MOCK_USER_ID.toString(),\n    modifiedOn: '2022-03-22T18:47:34.797Z',\n  },\n]\n\nconst bundle: EntityBundle = {\n  entity: mockDatasetEntity,\n  entityType: EntityType.DATASET,\n  path: path,\n  permissions: {\n    canView: true,\n    canEdit: true,\n    canMove: true,\n    canAddChild: true,\n    canCertifiedUserEdit: true,\n    canCertifiedUserAddChild: true,\n    isCertifiedUser: true,\n    canChangePermissions: true,\n    canChangeSettings: true,\n    canDelete: true,\n    canDownload: true,\n    canUpload: true,\n    canEnableInheritance: true,\n    ownerPrincipalId: 3350396,\n    canPublicRead: true,\n    canModerate: true,\n    isCertificationRequired: true,\n    isEntityOpenData: false,\n  },\n}\n\nconst mockDatasetData: MockEntityData<Dataset> = {\n  id: MOCK_DATASET_ENTITY_ID,\n  name: MOCK_DATASET_NAME,\n  entity: mockDatasetEntity,\n  entityHeader: mockHeader,\n  path: path,\n  bundle: bundle,\n  versions: versions,\n  versionInfo: versionInfo,\n}\n\nexport default mockDatasetData\n","import { DatasetCollection, EntityPath } from '@sage-bionetworks/synapse-types'\nimport { MOCK_USER_ID } from '../user/mock_user_profile'\nimport mockDatasetData from './mockDataset'\nimport { MockEntityData } from './MockEntityData'\nimport mockProjectEntityData from './mockProject'\n\nconst MOCK_DATASET_COLLECTION_ENTITY_ID = 'syn654651'\nconst MOCK_DATASET_COLLECTION_NAME = 'A Mocked Dataset Collection'\n\nexport const mockDatasetCollectionEntity: DatasetCollection = {\n  id: MOCK_DATASET_COLLECTION_ENTITY_ID,\n  parentId: mockProjectEntityData.id,\n  name: MOCK_DATASET_COLLECTION_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.table.DatasetCollection',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID.toString(),\n  etag: '00000000-0000-0000-0000-000000000000',\n  items: [\n    {\n      entityId: mockDatasetData.id,\n      versionNumber: 1,\n    },\n  ],\n  columnIds: [],\n  isSearchEnabled: false,\n}\n\nconst path: EntityPath = {\n  path: [\n    {\n      name: 'root',\n      id: 'syn4489',\n      type: 'org.sagebionetworks.repo.model.Folder',\n    },\n    {\n      name: mockProjectEntityData.name,\n      id: mockProjectEntityData.id,\n      type: 'org.sagebionetworks.repo.model.Project',\n    },\n    {\n      name: MOCK_DATASET_COLLECTION_NAME,\n      id: MOCK_DATASET_COLLECTION_ENTITY_ID,\n      type: 'org.sagebionetworks.repo.model.FileEntity',\n    },\n  ],\n}\n\nconst mockDatasetCollectionData: MockEntityData<DatasetCollection> = {\n  id: MOCK_DATASET_COLLECTION_ENTITY_ID,\n  name: MOCK_DATASET_COLLECTION_NAME,\n  entity: mockDatasetCollectionEntity,\n  path: path,\n}\n\nexport default mockDatasetCollectionData\n","import { EntityHeader, TableEntity } from '@sage-bionetworks/synapse-types'\nimport { MOCK_USER_ID, MOCK_USER_ID_2 } from '../user/mock_user_profile'\nimport mockProject from './mockProject'\nimport { MockEntityData } from './MockEntityData'\n\nexport const MOCK_TABLE_ENTITY_ID = 'syn345'\nexport const MOCK_TABLE_ENTITY_NAME = 'my table name'\n\nconst parentId = mockProject.id\n\nexport const mockTableEntity: TableEntity = {\n  id: MOCK_TABLE_ENTITY_ID,\n  versionNumber: 1,\n  versionLabel: 'in progress',\n  versionComment: 'in progress',\n  parentId: parentId,\n  name: MOCK_TABLE_ENTITY_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.table.TableEntity',\n  createdBy: MOCK_USER_ID.toString(),\n  createdOn: '2022-02-03T12:44:35.457Z',\n  modifiedOn: '2022-05-14T17:10:36.915Z',\n  modifiedBy: MOCK_USER_ID_2.toString(),\n  etag: '00000000-0000-0000-0000-000000000000',\n  columnIds: [],\n  isSearchEnabled: true,\n  isLatestVersion: true,\n}\n\nconst mockTableEntityHeader: EntityHeader = {\n  name: mockTableEntity.name,\n  id: MOCK_TABLE_ENTITY_ID,\n  type: 'org.sagebionetworks.repo.model.table.TableEntity',\n  versionNumber: mockTableEntity.versionNumber,\n  versionLabel: mockTableEntity.versionLabel,\n  benefactorId: parentId,\n  createdOn: mockTableEntity.createdOn,\n  modifiedOn: mockTableEntity.modifiedOn,\n  createdBy: mockTableEntity.createdBy,\n  modifiedBy: mockTableEntity.modifiedBy,\n  isLatestVersion: mockTableEntity.isLatestVersion,\n}\n\nconst mockTableEntityData: MockEntityData<TableEntity> = {\n  id: MOCK_TABLE_ENTITY_ID,\n  name: MOCK_TABLE_ENTITY_NAME,\n  entity: mockTableEntity,\n  entityHeader: mockTableEntityHeader,\n}\n\nexport default mockTableEntityData\n","import mockDatasetData from './mockDataset'\nimport mockDatasetCollectionData from './mockDatasetCollection'\nimport { MockEntityData } from './MockEntityData'\nimport mockFileEntityData from './mockFileEntity'\nimport mockProjectEntityData from './mockProject'\nimport mockTableEntityData from './mockTableEntity'\n\nconst mockEntities: MockEntityData[] = [\n  mockFileEntityData,\n  mockProjectEntityData,\n  mockDatasetData,\n  mockDatasetCollectionData,\n  mockTableEntityData,\n]\n\nexport default mockEntities\n","import {\n  BoundObjectType,\n  JsonSchemaObjectBinding,\n} from '@sage-bionetworks/synapse-types'\nimport { ObjectType } from '@sage-bionetworks/synapse-types'\nimport { ValidationResults } from '@sage-bionetworks/synapse-types'\nimport mockFileEntityData from './entity/mockFileEntity'\nimport { JSONSchema7 } from 'json-schema'\n\nconst mockFileEntity = mockFileEntityData.entity\n\nexport const mockSchemaBinding: JsonSchemaObjectBinding = {\n  jsonSchemaVersionInfo: {\n    organizationId: '1',\n    organizationName: 'org.sagebionetworks',\n    schemaId: '1',\n    schemaName: 'Mock Schema',\n    versionId: '555',\n    $id: 'org.sagebionetworks-MockSchema',\n    jsonSHA256Hex:\n      '5f2cd73c0fe25b30cbee2f213b6d633951f1873ca1911f494d4654f702a69e95',\n    createdOn: '2021-04-01T08:00:00.000Z',\n    createdBy: '1',\n  },\n  objectId: 3333,\n  objectType: BoundObjectType.entity,\n  createdOn: '2021-04-01T08:00:00.000Z',\n  createdBy: '1',\n}\n\nexport const mockSchemaValidationResults: ValidationResults = {\n  objectId: mockFileEntity.id!,\n  objectType: ObjectType.entity,\n  objectEtag: mockFileEntity.etag!,\n  schema$id: `https://repo-prod.prod.sagebase.org/repo/v1/schema/type/registered/${mockSchemaBinding.jsonSchemaVersionInfo.$id}`,\n  isValid: true,\n  validatedOn: '2021-06-28T20:08:44.046Z',\n}\n\nexport const mockValidationSchema: JSONSchema7 = {\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  $id: `https://repo-prod.prod.sagebase.org/repo/v1/schema/type/registered/${mockSchemaBinding.jsonSchemaVersionInfo.$id}`,\n  type: 'object',\n  properties: {\n    country: {\n      enum: ['USA', 'CA'],\n      description: 'Test description for country property',\n    },\n    showStringArray: {\n      type: 'boolean',\n    },\n  },\n  required: ['country'],\n  allOf: [\n    {\n      if: {\n        properties: {\n          country: {\n            const: 'USA',\n          },\n        },\n        required: ['country'],\n      },\n      then: {\n        properties: {\n          state: {\n            type: 'string',\n          },\n        },\n        required: ['state'],\n      },\n    },\n    {\n      if: {\n        properties: {\n          country: {\n            const: 'CA',\n          },\n        },\n        required: ['country'],\n      },\n      then: {\n        properties: {\n          province: {\n            type: 'string',\n          },\n        },\n        required: ['province'],\n      },\n    },\n    {\n      if: {\n        properties: {\n          showStringArray: {\n            const: true,\n          },\n        },\n        required: ['showStringArray'],\n      },\n      then: {\n        properties: {\n          stringArray: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n        },\n      },\n    },\n  ],\n}\n","import { rest } from 'msw'\nimport {\n  ENTITY,\n  ENTITY_BUNDLE_V2,\n  ENTITY_HEADERS,\n  ENTITY_ID,\n  ENTITY_ID_VERSION,\n  ENTITY_ID_VERSIONS,\n  ENTITY_JSON,\n  ENTITY_SCHEMA_BINDING,\n} from '../../../src/utils/APIConstants'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../src/utils/functions/getEndpoint'\nimport {\n  Entity,\n  EntityBundle,\n  EntityHeader,\n  EntityJson,\n  EntityPath,\n  PaginatedResults,\n  Reference,\n  VersionableEntity,\n} from '@sage-bionetworks/synapse-types'\nimport { VersionInfo } from '@sage-bionetworks/synapse-types'\nimport mockEntities from '../../entity'\nimport { MOCK_INVALID_PROJECT_NAME } from '../../entity/mockEntity'\nimport { mockSchemaBinding } from '../../mockSchema'\nimport { SynapseApiResponse } from '../handlers'\nimport { UploadDestination, UploadType } from '@sage-bionetworks/synapse-types'\n\nexport const getEntityHandlers = (backendOrigin: string) => [\n  /**\n   * Create a new entity\n   */\n  rest.post(`${backendOrigin}${ENTITY}`, async (req, res, ctx) => {\n    let status = 404\n    let response: SynapseApiResponse<Entity> = {\n      reason: `Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(\n        req.body,\n      )}`,\n    }\n    if (req.body) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const requestBody = req.body as Entity\n\n      const entityData = mockEntities.find(\n        entity => entity.name === requestBody.name,\n      )\n      if (entityData) {\n        response = entityData.entity\n        status = 200\n      } else if (requestBody.name === MOCK_INVALID_PROJECT_NAME) {\n        response.reason = 'Invalid project name'\n        status = 403\n      }\n    }\n\n    return res(ctx.status(status), ctx.json(response))\n  }),\n\n  /**\n   * Get entity by ID\n   */\n  rest.get(\n    `${backendOrigin}${ENTITY_ID(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<Entity> = {\n        reason: `Mock Service worker could not find a mock entity with ID ${req.params.entityId}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData) {\n        response = entityData.entity\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID_VERSIONS(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<PaginatedResults<VersionInfo>> = {\n        reason: `Mock Service worker could not find mock entity versions for ID ${req.params.entityId}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData && entityData.versionInfo) {\n        response = { results: entityData.versionInfo }\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID_VERSION(':entityId', ':versionNumber')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      const entityId = req.params.entityId\n      const versionNumber = req.params.versionNumber.toString()\n      const requestedVersionNumber = parseInt(versionNumber)\n\n      let response: SynapseApiResponse<VersionableEntity> = {\n        reason: `Mock Service worker could not find a mock versioned entity with ID ${entityId}.${versionNumber}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (\n        entityData &&\n        entityData.versions &&\n        entityData.versions[requestedVersionNumber]\n      ) {\n        response = entityData.versions[\n          requestedVersionNumber\n        ] as VersionableEntity\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_BUNDLE_V2(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityBundle> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData?.bundle) {\n        response = entityData.bundle\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_BUNDLE_V2(':entityId', ':versionNumber')}`,\n    async (req, res, ctx) => {\n      const entityId = req.params.entityId\n      const versionNumber = parseInt(req.params.versionNumber as string)\n      let status = 404\n      let response: SynapseApiResponse<EntityBundle> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${entityId}`,\n      }\n      const entityData = mockEntities.find(entity => entity.id === entityId)\n      if (entityData) {\n        const bundle = entityData.bundle\n        if (entityData.versions && entityData.versions[versionNumber]) {\n          response = {\n            ...bundle,\n            entity: entityData.versions[versionNumber],\n          } as EntityBundle\n        } else {\n          response = bundle as EntityBundle\n        }\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ENTITY_SCHEMA_BINDING(':entityId')}`,\n    async (req, res, ctx) => {\n      return res(ctx.status(200), ctx.json(mockSchemaBinding))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ENTITY_JSON(':entityId')}`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityJson> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData?.json) {\n        response = entityData.json\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_HEADERS}`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<PaginatedResults<EntityHeader>> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n\n      const referenceList = req.body as { references: Reference[] }\n      const entityData = mockEntities\n        .filter(entity =>\n          referenceList.references.find(ref => ref.targetId === entity.id),\n        )\n        .map(entity => entity.entityHeader)\n        .filter((header): header is EntityHeader => !!header)\n\n      if (entityData) {\n        response = { results: entityData }\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID(':entityId')}/path`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityPath> = {\n        reason: `Mock Service worker could not find a mock entity path using ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(e => req.params.entityId === e.id)\n\n      if (entityData && entityData.path) {\n        response = entityData.path\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${getEndpoint(\n      BackendDestinationEnum.REPO_ENDPOINT,\n    )}/file/v1/entity/:id/uploadDestination`,\n    async (req, res, ctx) => {\n      const response: UploadDestination = {\n        banner: '',\n        storageLocationId: 1,\n        uploadType: UploadType.S3,\n        concreteType: 'org.sagebionetworks.repo.model.file.S3UploadDestination',\n      }\n      return res(ctx.status(200), ctx.json(response))\n    },\n  ),\n]\n"],"names":["MOCK_DATASET_ENTITY_ID","MOCK_DATASET_NAME","mockDatasetEntity","mockProjectEntityData","MOCK_USER_ID","MOCK_USER_ID_2","mockHeader","path","versions","versionInfo","bundle","EntityType","mockDatasetData","MOCK_DATASET_COLLECTION_ENTITY_ID","MOCK_DATASET_COLLECTION_NAME","mockDatasetCollectionEntity","mockDatasetCollectionData","MOCK_TABLE_ENTITY_ID","MOCK_TABLE_ENTITY_NAME","parentId","mockProject","mockTableEntity","mockTableEntityHeader","mockTableEntityData","mockEntities","mockFileEntityData","mockFileEntity","mockSchemaBinding","BoundObjectType","ObjectType","getEntityHandlers","backendOrigin","rest","ENTITY","req","res","ctx","status","response","requestBody","entityData","entity","MOCK_INVALID_PROJECT_NAME","ENTITY_ID","ENTITY_ID_VERSIONS","ENTITY_ID_VERSION","entityId","versionNumber","requestedVersionNumber","ENTITY_BUNDLE_V2","ENTITY_SCHEMA_BINDING","ENTITY_JSON","ENTITY_HEADERS","referenceList","ref","header","e","getEndpoint","BackendDestinationEnum","UploadType"],"mappings":"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"}