{"version":3,"file":"FavoritesPage.stories-c09f3e4b.js","sources":["../../src/components/favorites/FavoritesPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport * as ReactBootstrap from 'react-bootstrap'\nimport SortIcon from '../../assets/icons/Sort'\nimport { Direction, EntityHeader } from '@sage-bionetworks/synapse-types'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { SynapseSpinner } from '../LoadingScreen'\nimport {\n  useGetFavorites,\n  useRemoveFavorite,\n} from '../../synapse-queries/user/useFavorites'\nimport IconSvg from '../IconSvg/IconSvg'\nimport {\n  convertToEntityType,\n  entityTypeToFriendlyName,\n} from '../../utils/functions/EntityTypeUtils'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { EntityTypeIcon } from '../EntityIcon'\nimport { Form } from 'react-bootstrap'\nimport { ErrorBanner } from '../error/ErrorBanner'\nimport { Tooltip } from '@mui/material'\n\n// Local types used for client-side sorting\nexport type SortField = 'name' | 'type'\nexport type SortDirection = 'ASC' | 'DESC'\nexport type Sort = {\n  field: SortField\n  direction: SortDirection\n}\n\nexport default function FavoritesPage() {\n  const { accessToken } = useSynapseContext()\n  const [sort, setSort] = useState<Sort | undefined>(undefined)\n  const [searchText, setSearchText] = useState<string>('')\n  const [sortedData, setSortedData] = useState<EntityHeader[] | undefined>(\n    undefined,\n  )\n  const [error, setError] = useState<Error>()\n  const { data, isFetching, isError, error: newError } = useGetFavorites()\n\n  useEffect(() => {\n    if (isError && newError) {\n      setError(newError)\n    }\n  }, [isError, newError])\n\n  useEffect(() => {\n    if (!accessToken) {\n      setError(new Error('Please sign in to access your favorites.'))\n    } else {\n      setError(undefined)\n    }\n  }, [accessToken])\n\n  const filterEntityHeaders = (searchTerm: string, array: EntityHeader[]) => {\n    const searchTermLowercase = searchTerm.toLowerCase()\n    return array.filter(\n      item => item.name.toLowerCase().indexOf(searchTermLowercase) >= 0,\n    )\n  }\n\n  useEffect(() => {\n    if (data) {\n      let newData = [...data.results]\n      if (sort) {\n        newData.sort((a, b) => {\n          if (sort.direction == 'DESC') {\n            return a[sort.field].toLowerCase() > b[sort.field].toLowerCase()\n              ? 1\n              : -1\n          } else {\n            return a[sort.field].toLowerCase() < b[sort.field].toLowerCase()\n              ? 1\n              : -1\n          }\n        })\n      }\n      if (searchText) {\n        newData = filterEntityHeaders(searchText, newData)\n      }\n      setSortedData(newData)\n    }\n  }, [data, searchText, sort])\n\n  const { mutate: removeFavorite } = useRemoveFavorite()\n\n  const showInteractiveSortIcon = (columnSortBy: SortField) => {\n    return (\n      setSort && (\n        <SortIcon\n          role=\"button\"\n          style={{ height: '20px' }}\n          active={sort?.field === columnSortBy}\n          direction={\n            sort?.field === columnSortBy\n              ? sort.direction === 'DESC'\n                ? Direction.DESC\n                : Direction.ASC\n              : Direction.DESC\n          }\n          onClick={() => {\n            const direction =\n              columnSortBy === sort?.field\n                ? sort.direction === 'ASC'\n                  ? 'DESC'\n                  : 'ASC'\n                : 'DESC'\n            setSort({\n              field: columnSortBy,\n              direction,\n            })\n          }}\n        />\n      )\n    )\n  }\n\n  if (error) {\n    return <ErrorBanner error={error} />\n  }\n\n  return (\n    <div className=\"FavoritesPage\">\n      <div className=\"searchInputWithIcon\">\n        <IconSvg icon=\"searchOutlined\" />\n        <Form.Control\n          type=\"search\"\n          placeholder=\"Favorite Name\"\n          value={searchText}\n          onChange={event => {\n            setSearchText(event.target.value)\n          }}\n        />\n      </div>\n\n      {sortedData && sortedData.length > 0 && (\n        <div className=\"bootstrap-4-backport\">\n          <ReactBootstrap.Table\n            striped={true}\n            responsive={true}\n            className=\"FavoritesTable\"\n          >\n            <thead>\n              <tr>\n                {/* first column for the favorite icon */}\n                <th />\n                <th>\n                  Name\n                  <span>{showInteractiveSortIcon('name')}</span>\n                </th>\n                <th>\n                  Type\n                  <span>{showInteractiveSortIcon('type')}</span>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortedData.map((item: EntityHeader) => {\n                if (item) {\n                  const entityType = convertToEntityType(item.type)\n                  return (\n                    <tr key={item.id}>\n                      <td>\n                        <Tooltip\n                          title=\"Click the star to remove this item from your favorites\"\n                          enterNextDelay={300}\n                          placement=\"right\"\n                        >\n                          <a\n                            onClick={() => {\n                              removeFavorite(item.id)\n                            }}\n                            className=\"ignoreLink\"\n                          >\n                            <IconSvg icon=\"fav\" sx={{ color: '#EDC766' }} />\n                          </a>\n                        </Tooltip>\n                      </td>\n                      <td>\n                        <a\n                          rel=\"noopener noreferrer\"\n                          href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${item.id}`}\n                        >\n                          {item.name}\n                        </a>\n                      </td>\n                      <td>\n                        <EntityTypeIcon\n                          type={entityType}\n                          style={{ marginRight: '5px' }}\n                        />\n                        {entityTypeToFriendlyName(entityType)}\n                      </td>\n                    </tr>\n                  )\n                } else return false\n              })}\n            </tbody>\n          </ReactBootstrap.Table>\n        </div>\n      )}\n      {isFetching && (\n        <div className=\"placeholder\">\n          <SynapseSpinner size={30} />\n        </div>\n      )}\n    </div>\n  )\n}\n"],"names":["FavoritesPage","accessToken","useSynapseContext","sort","setSort","useState","searchText","setSearchText","sortedData","setSortedData","error","setError","data","isFetching","isError","newError","useGetFavorites","useEffect","filterEntityHeaders","searchTerm","array","searchTermLowercase","item","newData","a","b","removeFavorite","useRemoveFavorite","showInteractiveSortIcon","columnSortBy","jsx","SortIcon","Direction","direction","ErrorBanner","jsxs","IconSvg","Form","event","ReactBootstrap.Table","entityType","convertToEntityType","Tooltip","PRODUCTION_ENDPOINT_CONFIG","EntityTypeIcon","entityTypeToFriendlyName","SynapseSpinner"],"mappings":"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"}