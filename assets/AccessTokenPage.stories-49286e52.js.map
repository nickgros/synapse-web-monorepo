{"version":3,"file":"AccessTokenPage.stories-49286e52.js","sources":["../../src/lib/utils/hooks/SynapseAPI/user/usePersonalAccessToken.ts","../../src/lib/utils/synapseTypes/AccessToken/ScopeDescriptions.ts","../../src/lib/containers/personal_access_token/AccessTokenCard.tsx","../../src/lib/containers/personal_access_token/CreateAccessTokenModal.tsx","../../src/lib/containers/personal_access_token/AccessTokenPage.tsx"],"sourcesContent":["import {\n  UseInfiniteQueryOptions,\n  useInfiniteQuery,\n  QueryFunctionContext,\n  QueryKey,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { AccessTokenRecordList } from '../../../synapseTypes/AccessToken/AccessTokenRecord'\n\nexport function useGetPersonalAccessTokensInfinite(\n  options?: UseInfiniteQueryOptions<AccessTokenRecordList, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<AccessTokenRecordList, SynapseClientError>(\n    keyFactory.getPersonalAccessTokensQueryKey(),\n    async (context: QueryFunctionContext<QueryKey, string | undefined>) => {\n      return await SynapseClient.getPersonalAccessTokenRecords(\n        accessToken,\n        context.pageParam,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n","export const scopeDescriptions = {\n  openid: {\n    displayName: 'OpenID',\n    description: 'Access to your Synapse identity and certain user information',\n  },\n  view: {\n    displayName: 'View',\n    description: 'Permission to view the content which you can view',\n  },\n  modify: {\n    displayName: 'Modify',\n    description:\n      'Permission to modify the content which you can modify (create, change, delete)',\n  },\n  download: {\n    displayName: 'Download',\n    description: 'Permission to download the content which you can download',\n  },\n  authorize: {\n    displayName: 'Authorize',\n    description:\n      'Permission to authorize others to access the resources you control',\n  },\n  offline_access: {\n    displayName: 'Offline Access',\n    description:\n      'Permission to access the resources authorized here when you are not logged in, until you explicitly revoke access',\n  },\n}\n","import dayjs from 'dayjs'\nimport React, { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { SynapseClient } from '../../utils/'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { AccessTokenRecord } from '../../utils/synapseTypes/AccessToken/AccessTokenRecord'\nimport { scopeDescriptions } from '../../utils/synapseTypes/AccessToken/ScopeDescriptions'\nimport { Tooltip } from '@mui/material'\nimport IconSvg from '../IconSvg'\nimport WarningModal from '../synapse_form_wrapper/WarningModal'\nimport relativeTime from 'dayjs/plugin/relativeTime'\n\ndayjs.extend(relativeTime)\n\nexport type AccessTokenCardProps = {\n  /** Record referring to an access token, not a token itself */\n  accessToken: AccessTokenRecord\n  onDelete: (...args: any[]) => void\n}\n\nexport const AccessTokenCard: React.FunctionComponent<AccessTokenCardProps> = ({\n  accessToken,\n  onDelete,\n}: AccessTokenCardProps) => {\n  const { accessToken: authToken } = useSynapseContext()\n  const [showModal, setShowModal] = useState(false)\n  const handleError = useErrorHandler()\n\n  const isExpired = accessToken.state === 'EXPIRED'\n\n  return (\n    <div\n      className={\n        'cardContainer PersonalAccessTokenCard' +\n        (isExpired ? ' bg-warning' : '')\n      }\n    >\n      <WarningModal\n        title={'Confirm Deletion'}\n        modalBody={\n          <>\n            <p>\n              If you delete this token, any applications using it will stop\n              working. This action cannot be undone.\n            </p>\n            <p className=\"SRC-boldText\">\n              Are you sure you want to delete this token?\n            </p>\n          </>\n        }\n        confirmButtonText={'Delete Token'}\n        onCancel={() => setShowModal(false)}\n        onConfirm={(id: string) => {\n          SynapseClient.deletePersonalAccessToken(id, authToken)\n            .then(() => {\n              onDelete()\n              setShowModal(false)\n            })\n            .catch(error => {\n              handleError(error)\n            })\n        }}\n        confirmButtonVariant=\"danger\"\n        show={showModal}\n        onConfirmCallbackArgs={[accessToken.id, authToken]}\n      ></WarningModal>\n\n      <div className=\"SRC-cardContent\">\n        <div className=\"SRC-eqHeightRow SRC-userCardName\">\n          <span className={'SRC-blackText'}>{accessToken.name}</span>\n          {isExpired && (\n            <Tooltip\n              title=\"This token has expired. It no longer works and can only be deleted.\"\n              enterNextDelay={100}\n            >\n              <span aria-hidden=\"true\">\n                <IconSvg icon=\"warning\" />\n              </span>\n            </Tooltip>\n          )}\n        </div>\n\n        <div className=\"SRC-eqHeightRow\">\n          <span>Permissions: </span>\n          {accessToken.scopes.map(scope => {\n            return (\n              <span\n                className=\"PersonalAccessTokenCard__ScopeName SRC-primary-text-color SRC-primary-color-hover SRC-hand-cursor SRC-inlineFlex\"\n                data-tip={scopeDescriptions[scope].description}\n                key={scope}\n              >\n                {scopeDescriptions[scope].displayName}\n              </span>\n            )\n          })}\n        </div>\n        <div className=\"SRC-eqHeightRow\">\n          <span>Last used {dayjs(accessToken.lastUsed).fromNow()}</span>\n          <span className={'SRC-deemphasized-text'}>{' | '}</span>\n          <span>Created {dayjs(accessToken.createdOn).fromNow()}</span>\n        </div>\n      </div>\n      {/* Delete button */}\n      <div className=\"PersonalAccessTokenCard__DeleteButton\">\n        <Button\n          variant=\"default\"\n          aria-label=\"delete\"\n          onClick={() => {\n            if (isExpired) {\n              // token no longer works, no need for warning/confirmation\n              SynapseClient.deletePersonalAccessToken(accessToken.id, authToken)\n                .then(() => {\n                  onDelete()\n                })\n                .catch(error => {\n                  handleError(error)\n                })\n            } else {\n              setShowModal(true)\n            }\n          }}\n        >\n          <IconSvg icon=\"delete\" aria-hidden=\"true\" />\n        </Button>\n      </div>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport {\n  Button,\n  Form,\n  FormControl,\n  FormLabel,\n  Modal,\n  ModalBody,\n} from 'react-bootstrap'\nimport { SynapseClient } from '../../utils'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { AccessTokenGenerationRequest } from '../../utils/synapseTypes/AccessToken/AccessTokenGenerationRequest'\nimport { scopeDescriptions } from '../../utils/synapseTypes/AccessToken/ScopeDescriptions'\nimport { CopyToClipboardInput } from '../CopyToClipboardInput'\nimport { ErrorBanner } from '../error/ErrorBanner'\nimport loadingScreen from '../LoadingScreen'\nimport { Checkbox } from '../widgets/Checkbox'\n\nconst INVALID_INPUT_MSG =\n  'You must provide a token name and at least one permission.'\n\nexport type CreateAccessTokenModalProps = {\n  onClose: (...args: any[]) => void\n  onCreate: (...args: any[]) => void\n}\n\nexport const CreateAccessTokenModal: React.FunctionComponent<\n  CreateAccessTokenModalProps\n> = ({ onClose, onCreate }: CreateAccessTokenModalProps) => {\n  const { accessToken } = useSynapseContext()\n  const [tokenName, setTokenName] = React.useState('')\n  const [viewAccess, setViewAccess] = React.useState(true)\n  const [downloadAccess, setDownloadAccess] = React.useState(false)\n  const [modifyAccess, setModifyAccess] = React.useState(false)\n\n  const [isLoading, setIsLoading] = React.useState(false)\n\n  const [showCreatedToken, setShowCreatedToken] = React.useState(false)\n  const [createdToken, setCreatedToken] = React.useState('')\n\n  const [errorMessage, setErrorMessage] = React.useState('')\n  const [showErrorMessage, setShowErrorMessage] = React.useState(false)\n\n  const handleTokenNameChange = (event: React.ChangeEvent) => {\n    setTokenName((event.target as HTMLInputElement).value)\n  }\n\n  const validateInput = (tokenName: string, access: boolean[]): boolean => {\n    return !!tokenName && access.some(x => x)\n  }\n\n  const onSubmit = async (\n    clickEvent: React.MouseEvent<HTMLElement, MouseEvent>,\n  ): Promise<void> => {\n    clickEvent.preventDefault()\n    if (validateInput(tokenName, [viewAccess, downloadAccess, modifyAccess])) {\n      try {\n        const request: AccessTokenGenerationRequest = {\n          scope: [],\n          name: tokenName,\n        }\n        if (viewAccess) request.scope.push('view')\n        if (downloadAccess) request.scope.push('download')\n        if (modifyAccess) request.scope.push('modify')\n\n        setIsLoading(true)\n\n        const response = await SynapseClient.createPersonalAccessToken(\n          request,\n          accessToken,\n        )\n\n        setIsLoading(false)\n        setCreatedToken(response.token)\n        setShowCreatedToken(true)\n        onCreate()\n      } catch (err) {\n        setIsLoading(false)\n        setErrorMessage(err.reason)\n        setShowErrorMessage(true)\n      }\n    } else {\n      setErrorMessage(INVALID_INPUT_MSG)\n      setShowErrorMessage(true)\n    }\n  }\n\n  return (\n    <Modal\n      className={'bootstrap-4-backport AccessTokenModal'}\n      animation={false}\n      show={true}\n      onHide={onClose}\n      backdrop=\"static\"\n    >\n      <Form>\n        <Modal.Header closeButton>\n          <Modal.Title>Create New Personal Access Token</Modal.Title>\n        </Modal.Header>\n        <ModalBody>\n          {isLoading ? (\n            loadingScreen\n          ) : showCreatedToken ? (\n            <>\n              <span className=\"SRC-boldText\">\n                This token will not be able to be retrieved again.\n              </span>{' '}\n              <span>\n                If needed, generate a new personal access token, and delete this\n                one.\n              </span>\n              <div className=\"AccessTokenModal__CopyToClipboardContainer\">\n                <CopyToClipboardInput\n                  value={createdToken}\n                  inputWidth={'350px'}\n                />\n              </div>\n              <p>\n                This token grants access to your account functions and should be\n                treated like a password.\n              </p>\n            </>\n          ) : (\n            <div className=\"SRC-marginFive\">\n              <div className=\"SRC-marginBottomTen\">\n                <FormLabel className=\"SRC-boldText\">Token Name</FormLabel>\n                <FormControl\n                  autoFocus\n                  className=\"AccessTokenModal__TokenNameInput\"\n                  value={tokenName}\n                  onChange={handleTokenNameChange}\n                  type=\"text\"\n                  placeholder=\"e.g. Synapse command line access on my laptop\"\n                ></FormControl>\n              </div>\n              <div className=\"SRC-marginBottomTop\">\n                <FormLabel className=\"SRC-boldText\">\n                  Token Permissions\n                </FormLabel>\n                <Checkbox\n                  label={scopeDescriptions.view.displayName}\n                  checked={viewAccess}\n                  onChange={() => setViewAccess(!viewAccess)}\n                >\n                  <div className=\"AccessTokenModal__ScopeDescription\">\n                    {scopeDescriptions.view.description}. Required to use\n                    Synapse programmatic clients.\n                  </div>\n                </Checkbox>\n                <Checkbox\n                  label={scopeDescriptions.download.displayName}\n                  checked={downloadAccess}\n                  onChange={() => setDownloadAccess(!downloadAccess)}\n                >\n                  <div className=\"AccessTokenModal__ScopeDescription\">\n                    {scopeDescriptions.download.description}\n                  </div>\n                </Checkbox>\n                <Checkbox\n                  label={scopeDescriptions.modify.displayName}\n                  checked={modifyAccess}\n                  onChange={() => setModifyAccess(!modifyAccess)}\n                >\n                  <div className=\"AccessTokenModal__ScopeDescription\">\n                    {scopeDescriptions.modify.description}\n                  </div>\n                </Checkbox>\n              </div>\n              <div className=\"SRC-center-text\">\n                {showErrorMessage && (\n                  <ErrorBanner error={errorMessage}></ErrorBanner>\n                )}\n              </div>\n            </div>\n          )}\n        </ModalBody>\n        <Modal.Footer>\n          {showCreatedToken ? (\n            <Button variant=\"outline\" onClick={onClose}>\n              Close\n            </Button>\n          ) : (\n            <>\n              <Button variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"sds-primary\"\n                onClick={e => {\n                  onSubmit(e)\n                }}\n              >\n                Create Token\n              </Button>\n            </>\n          )}\n        </Modal.Footer>\n      </Form>\n    </Modal>\n  )\n}\n","import React, { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useGetPersonalAccessTokensInfinite } from '../../utils/hooks/SynapseAPI/user/usePersonalAccessToken'\nimport { ErrorBanner, SynapseErrorBoundary } from '../error/ErrorBanner'\nimport loadingScreen from '../LoadingScreen'\nimport { AccessTokenCard } from './AccessTokenCard'\nimport { CreateAccessTokenModal } from './CreateAccessTokenModal'\n\nexport type AccessTokenPageProps = {\n  title: string\n  body: string | JSX.Element\n}\n\nexport const AccessTokenPage: React.FunctionComponent<AccessTokenPageProps> = ({\n  title,\n  body,\n}: AccessTokenPageProps) => {\n  const [showCreateTokenModal, setShowCreateTokenModal] = useState(false)\n\n  const {\n    data: infiniteData,\n    isLoading,\n    error,\n    refetch,\n    fetchNextPage,\n    hasNextPage,\n  } = useGetPersonalAccessTokensInfinite()\n\n  // We rerender the list whenever a token is created or deleted to ensure we are up-to-date\n  const rerenderList = () => {\n    refetch()\n  }\n\n  const tokenRecords = infiniteData?.pages.flatMap(page => page.results) ?? []\n\n  return (\n    <div className=\"PersonalAccessTokenPage bootstrap-4-backport\">\n      <div className=\"PersonalAccessTokenPage__Header\">\n        <div className=\"PersonalAccessTokenPage__Header__CopyText\">\n          <h1>{title}</h1>\n          {body}\n        </div>\n        <div className=\"PersonalAccessTokenPage__Header__CreateButton\">\n          <Button\n            variant=\"sds-primary\"\n            onClick={() => setShowCreateTokenModal(true)}\n          >\n            Create New Token\n          </Button>\n        </div>\n      </div>\n      <SynapseErrorBoundary>\n        {showCreateTokenModal && (\n          <CreateAccessTokenModal\n            onClose={() => setShowCreateTokenModal(false)}\n            onCreate={rerenderList}\n          ></CreateAccessTokenModal>\n        )}\n\n        <div>\n          {!isLoading && tokenRecords.length === 0 && (\n            <div className=\"PersonalAccessTokenPage__NoTokensMessage SRC-text-title\">\n              You currently have no personal access tokens.\n            </div>\n          )}\n          <div className=\"PersonalAccessTokenPage__CardList\">\n            {tokenRecords.map(accessToken => {\n              return (\n                <AccessTokenCard\n                  key={accessToken.id}\n                  accessToken={accessToken}\n                  onDelete={rerenderList}\n                />\n              )\n            })}\n            {isLoading && loadingScreen}\n            {!isLoading && hasNextPage && !error && (\n              <div className=\"PersonalAccessTokenPage__CardList__LoadMore\">\n                <Button\n                  className=\"PersonalAccessTokenPage__CardList__LoadMore__Button\"\n                  variant=\"sds-primary\"\n                  onClick={() => {\n                    fetchNextPage()\n                  }}\n                >\n                  Load More\n                </Button>\n              </div>\n            )}\n          </div>\n          {error && <ErrorBanner error={error}></ErrorBanner>}\n        </div>\n      </SynapseErrorBoundary>\n    </div>\n  )\n}\n"],"names":["useGetPersonalAccessTokensInfinite","options","accessToken","keyFactory","useSynapseContext","useInfiniteQuery","context","SynapseClient.getPersonalAccessTokenRecords","page","scopeDescriptions","dayjs","relativeTime","AccessTokenCard","onDelete","authToken","showModal","setShowModal","useState","handleError","useErrorHandler","isExpired","jsxs","jsx","WarningModal","Fragment","id","SynapseClient.deletePersonalAccessToken","error","Tooltip","IconSvg","scope","Button","INVALID_INPUT_MSG","CreateAccessTokenModal","onClose","onCreate","tokenName","setTokenName","React.useState","viewAccess","setViewAccess","downloadAccess","setDownloadAccess","modifyAccess","setModifyAccess","isLoading","setIsLoading","showCreatedToken","setShowCreatedToken","createdToken","setCreatedToken","errorMessage","setErrorMessage","showErrorMessage","setShowErrorMessage","handleTokenNameChange","event","validateInput","tokenName2","access","x","onSubmit","clickEvent","request","response","SynapseClient.createPersonalAccessToken","err","Modal","Form","ModalBody","loadingScreen","CopyToClipboardInput","FormLabel","FormControl","Checkbox","ErrorBanner","e","AccessTokenPage","title","body","showCreateTokenModal","setShowCreateTokenModal","infiniteData","refetch","fetchNextPage","hasNextPage","rerenderList","tokenRecords","SynapseErrorBoundary"],"mappings":"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"}