{"version":3,"file":"QueryFilter-ab706eb8.js","sources":["../../src/lib/utils/synapseTypes/Table/QueryFilter.ts"],"sourcesContent":["import { isTypeViaConcreteTypeFactory } from '../../functions/TypeUtils'\n\nexport enum ColumnSingleValueFilterOperator {\n  /* The LIKE operation. Use wildcard '%' in value sting for prefix/suffix matching. */\n  LIKE = 'LIKE',\n  /* The EQUAL operation. */\n  EQUAL = 'EQUAL',\n  /* The IN operation */\n  IN = 'IN',\n}\nexport enum ColumnMultiValueFunction {\n  /* HAS function on multi-value columns, same as the predicate: 'columnName HAS ()' */\n  HAS = 'HAS',\n  /* HAS_LIKE function on multi-value columns, same as the predicate: 'columnName HAS_LIKE ()'. Can be used for pattern matching using wildcard %. */\n  HAS_LIKE = 'HAS_LIKE',\n}\n\nconst COLUMN_SINGLE_VALUE_QUERY_FILTER_CONCRETE_TYPE_VALUE =\n  'org.sagebionetworks.repo.model.table.ColumnSingleValueQueryFilter'\ntype COLUMN_SINGLE_VALUE_QUERY_FILTER_CONCRETE_TYPE =\n  typeof COLUMN_SINGLE_VALUE_QUERY_FILTER_CONCRETE_TYPE_VALUE\n\n// A filter using a single value against a column. Values within the values list have an OR relationship\nexport interface ColumnSingleValueQueryFilter extends QueryFilter {\n  concreteType: COLUMN_SINGLE_VALUE_QUERY_FILTER_CONCRETE_TYPE\n  columnName: string // name of the column to filter\n  operator: ColumnSingleValueFilterOperator // Determines the filter operation to perform\n  values: string[] // Values to used with the filter.\n}\n\nconst COLUMN_MULTI_VALUE_FUNCTION_QUERY_FILTER_CONCRETE_TYPE_VALUE =\n  'org.sagebionetworks.repo.model.table.ColumnMultiValueFunctionQueryFilter'\ntype COLUMN_MULTI_VALUE_FUNCTION_QUERY_FILTER_CONCRETE_TYPE =\n  typeof COLUMN_MULTI_VALUE_FUNCTION_QUERY_FILTER_CONCRETE_TYPE_VALUE\n\n// A filter that applies multi-value columns functions.\nexport interface ColumnMultiValueFunctionQueryFilter extends QueryFilter {\n  concreteType: COLUMN_MULTI_VALUE_FUNCTION_QUERY_FILTER_CONCRETE_TYPE\n  columnName: string // name of the column to filter\n  function: ColumnMultiValueFunction // Determines the filter operation to perform\n  values: string[] // Values to used with the filter.\n}\n\n// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/TextMatchesQueryFilter.html\nconst TEXT_MATCHES_QUERY_FILTER_CONCRETE_TYPE_VALUE =\n  'org.sagebionetworks.repo.model.table.TextMatchesQueryFilter'\ntype TEXT_MATCHES_QUERY_FILTER_CONCRETE_TYPE =\n  typeof TEXT_MATCHES_QUERY_FILTER_CONCRETE_TYPE_VALUE\nexport interface TextMatchesQueryFilter extends QueryFilter {\n  concreteType: TEXT_MATCHES_QUERY_FILTER_CONCRETE_TYPE\n  searchExpression: string\n}\n\nexport interface QueryFilter {\n  concreteType:\n    | TEXT_MATCHES_QUERY_FILTER_CONCRETE_TYPE\n    | COLUMN_SINGLE_VALUE_QUERY_FILTER_CONCRETE_TYPE\n    | COLUMN_MULTI_VALUE_FUNCTION_QUERY_FILTER_CONCRETE_TYPE\n}\n\nexport const isTextMatchesQueryFilter =\n  isTypeViaConcreteTypeFactory<TextMatchesQueryFilter>(\n    TEXT_MATCHES_QUERY_FILTER_CONCRETE_TYPE_VALUE,\n  )\n\nexport const isColumnSingleValueQueryFilter =\n  isTypeViaConcreteTypeFactory<ColumnSingleValueQueryFilter>(\n    COLUMN_SINGLE_VALUE_QUERY_FILTER_CONCRETE_TYPE_VALUE,\n  )\n\nexport const isColumnMultiValueFunctionQueryFilter =\n  isTypeViaConcreteTypeFactory<ColumnMultiValueFunctionQueryFilter>(\n    COLUMN_MULTI_VALUE_FUNCTION_QUERY_FILTER_CONCRETE_TYPE_VALUE,\n  )\n"],"names":["ColumnSingleValueFilterOperator","ColumnMultiValueFunction","COLUMN_SINGLE_VALUE_QUERY_FILTER_CONCRETE_TYPE_VALUE","COLUMN_MULTI_VALUE_FUNCTION_QUERY_FILTER_CONCRETE_TYPE_VALUE","TEXT_MATCHES_QUERY_FILTER_CONCRETE_TYPE_VALUE","isTextMatchesQueryFilter","isTypeViaConcreteTypeFactory","isColumnSingleValueQueryFilter","isColumnMultiValueFunctionQueryFilter"],"mappings":"kDAEY,IAAAA,GAAAA,IAEVA,EAAA,KAAO,OAEPA,EAAA,MAAQ,QAERA,EAAA,GAAK,KANKA,IAAAA,GAAA,CAAA,CAAA,EAQAC,GAAAA,IAEVA,EAAA,IAAM,MAENA,EAAA,SAAW,WAJDA,IAAAA,GAAA,CAAA,CAAA,EAOZ,MAAMC,EACJ,oEAYIC,EACJ,2EAaIC,EACJ,8DAeWC,EACXC,EACEF,CACF,EAEWG,EACXD,EACEJ,CACF,EAEWM,EACXF,EACEH,CACF"}