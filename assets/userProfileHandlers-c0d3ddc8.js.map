{"version":3,"file":"userProfileHandlers-c0d3ddc8.js","sources":["../../mocks/entity/mockFileEntity.ts","../../mocks/entity/mockEntity.ts","../../mocks/msw/handlers/userProfileHandlers.ts"],"sourcesContent":["import {\n  ACCESS_TYPE,\n  AnnotationsValueType,\n  EntityBundle,\n  EntityHeader,\n  EntityJson,\n  EntityPath,\n  EntityType,\n  FileEntity,\n  RestrictionLevel,\n} from '@sage-bionetworks/synapse-types'\nimport { VersionInfo } from '@sage-bionetworks/synapse-types'\nimport {\n  MOCK_FILE_HANDLE_ID,\n  mockFileHandle,\n  mockPreviewFileHandle,\n} from '../mock_file_handle'\nimport { MOCK_USER_ID, MOCK_USER_ID_2 } from '../user/mock_user_profile'\nimport { MockEntityData } from './MockEntityData'\nimport mockProject from './mockProject'\n\nconst parentId = mockProject.id\nconst projectName = mockProject.name\n\nexport const MOCK_FILE_ENTITY_ID = 'syn123'\nconst MOCK_FILE_NAME = 'My mock file entity'\n\n// TODO: Create a mock wiki\nconst MOCK_WIKI_ID = '45745485'\n\nconst mockFileEntity: FileEntity = {\n  id: MOCK_FILE_ENTITY_ID,\n  parentId: parentId,\n  dataFileHandleId: MOCK_FILE_HANDLE_ID,\n  name: MOCK_FILE_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID_2.toString(),\n  etag: '00000000-0000-0000-0000-000000000000',\n  versionNumber: 3,\n  versionLabel: 'a label for version 3',\n  isLatestVersion: true,\n  createdOn: '2021-03-02T15:05:34.973Z',\n  modifiedOn: '2021-03-05T11:31:24.521Z',\n}\n\nconst mockFileEntityVersionInfo: VersionInfo[] = [\n  {\n    id: MOCK_FILE_ENTITY_ID,\n    modifiedBy: MOCK_USER_ID.toString(),\n    versionNumber: 1,\n    versionLabel: 'a label for version 1',\n    versionComment: 'a comment',\n    contentSize: '100',\n    contentMd5: 'd836adae5632872014783b05cd2f76d7',\n    modifiedByPrincipalId: MOCK_USER_ID.toString(),\n    modifiedOn: '2021-03-02T15:05:34.973Z',\n    isLatestVersion: false,\n  },\n  {\n    id: MOCK_FILE_ENTITY_ID,\n    modifiedBy: MOCK_USER_ID.toString(),\n    versionNumber: 3,\n    versionLabel: 'a label for version 3',\n    versionComment: 'a comment about version 3',\n    contentSize: '100',\n    contentMd5: 'bc91a4a16ccb21944fcee55275dc4574',\n    modifiedByPrincipalId: MOCK_USER_ID.toString(),\n    modifiedOn: '2021-03-05T11:31:24.521Z',\n    isLatestVersion: true,\n  },\n]\n\nconst mockFileEntityVersions: Record<number, FileEntity> = {\n  3: {\n    id: MOCK_FILE_ENTITY_ID,\n    parentId: parentId,\n    dataFileHandleId: MOCK_FILE_HANDLE_ID,\n    name: MOCK_FILE_NAME,\n    concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n    createdBy: MOCK_USER_ID.toString(),\n    modifiedBy: MOCK_USER_ID.toString(),\n    etag: '00000000-0000-0000-0000-000000000000',\n    versionNumber: 3,\n    versionLabel: 'a label for version 3',\n    isLatestVersion: true,\n  },\n  1: {\n    id: MOCK_FILE_ENTITY_ID,\n    parentId: parentId,\n    dataFileHandleId: MOCK_FILE_HANDLE_ID,\n    name: MOCK_FILE_NAME,\n    concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n    createdBy: MOCK_USER_ID.toString(),\n    modifiedBy: MOCK_USER_ID.toString(),\n    etag: '00000000-0000-0000-0000-000000000000',\n    versionNumber: 1,\n    versionLabel: 'a label for version 1',\n    isLatestVersion: false,\n  },\n}\n\nconst filePath: EntityPath = {\n  path: [\n    {\n      name: 'root',\n      id: 'syn4489',\n      type: 'org.sagebionetworks.repo.model.Folder',\n    },\n    {\n      name: projectName,\n      id: parentId,\n      type: 'org.sagebionetworks.repo.model.Project',\n    },\n    {\n      name: MOCK_FILE_NAME,\n      id: MOCK_FILE_ENTITY_ID,\n      type: 'org.sagebionetworks.repo.model.FileEntity',\n    },\n  ],\n}\n\nconst mockFileEntityBundle: EntityBundle = {\n  entity: mockFileEntity,\n  entityType: EntityType.FILE,\n  fileHandles: [mockFileHandle, mockPreviewFileHandle],\n  annotations: {\n    id: MOCK_FILE_ENTITY_ID,\n    etag: '00000000-0000-0000-0000-000000000000',\n    annotations: {\n      myStringKey: {\n        type: AnnotationsValueType.STRING,\n        value: ['myValue'],\n      },\n      myIntegerKey: {\n        type: AnnotationsValueType.LONG,\n        value: [4325435345213, 4321],\n      },\n      myFloatKey: {\n        type: AnnotationsValueType.LONG,\n        value: [1.5, 17 / 13],\n      },\n    },\n  },\n  rootWikiId: MOCK_WIKI_ID,\n  fileName: mockFileEntity.name,\n  benefactorAcl: {\n    id: parentId,\n    creationDate: '2020-11-18T20:05:06.540Z',\n    etag: 'f143bbfd-ba09-4a42-b1e9-f9368777ad9b',\n    resourceAccess: [\n      {\n        principalId: MOCK_USER_ID,\n        accessType: [\n          ACCESS_TYPE.DELETE,\n          ACCESS_TYPE.CHANGE_SETTINGS,\n          ACCESS_TYPE.MODERATE,\n          ACCESS_TYPE.CHANGE_PERMISSIONS,\n          ACCESS_TYPE.UPDATE,\n          ACCESS_TYPE.READ,\n          ACCESS_TYPE.DOWNLOAD,\n          ACCESS_TYPE.CREATE,\n        ],\n      },\n      {\n        principalId: 273948,\n        accessType: [ACCESS_TYPE.READ],\n      },\n      {\n        principalId: 273949,\n        accessType: [ACCESS_TYPE.READ],\n      },\n    ],\n  },\n  permissions: {\n    canView: true,\n    canEdit: true,\n    canMove: true,\n    canAddChild: true,\n    canCertifiedUserEdit: true,\n    canCertifiedUserAddChild: true,\n    isCertifiedUser: true,\n    canChangePermissions: true,\n    canChangeSettings: true,\n    canDelete: true,\n    canDownload: true,\n    canUpload: true,\n    canEnableInheritance: true,\n    ownerPrincipalId: 3350396,\n    canPublicRead: true,\n    canModerate: true,\n    isCertificationRequired: true,\n    isEntityOpenData: false,\n  },\n  threadCount: 5,\n  path: filePath,\n  restrictionInformation: {\n    restrictionLevel: RestrictionLevel.OPEN,\n    hasUnmetAccessRequirement: false,\n  },\n}\n\nconst mockFileEntityJson: EntityJson = {\n  id: mockFileEntity.id!,\n  name: mockFileEntity.name,\n  etag: mockFileEntity.etag!,\n  createdOn: mockFileEntity.createdOn!,\n  modifiedOn: mockFileEntity.modifiedOn!,\n  createdBy: mockFileEntity.createdBy!,\n  modifiedBy: mockFileEntity.modifiedBy!,\n  parentId: 'syn4489',\n  concreteType: 'org.sagebionetworks.repo.model.Project',\n  myStringKey: 'myValue',\n  myIntegerKey: [4325435345213, 4321],\n  myFloatKey: [1.5, 17 / 13],\n}\n\nconst mockFileEntityHeader: EntityHeader = {\n  id: mockFileEntity.id!,\n  name: mockFileEntity.name,\n  type: mockFileEntity.concreteType,\n  versionNumber: 3,\n  versionLabel: 'a label for version 3',\n  benefactorId: 123,\n  createdOn: mockFileEntity.createdOn!,\n  modifiedOn: mockFileEntity.modifiedOn!,\n  createdBy: MOCK_USER_ID.toString(), // TODO: Replace with a valid mock user ID\n  modifiedBy: MOCK_USER_ID_2.toString(),\n  isLatestVersion: true,\n}\n\nconst mockFileEntityData: MockEntityData<FileEntity> = {\n  id: MOCK_FILE_ENTITY_ID,\n  name: MOCK_FILE_NAME,\n  entity: mockFileEntity,\n  bundle: mockFileEntityBundle,\n  json: mockFileEntityJson,\n  versions: mockFileEntityVersions,\n  versionInfo: mockFileEntityVersionInfo,\n  entityHeader: mockFileEntityHeader,\n  path: filePath,\n}\n\nexport default mockFileEntityData\n","import {\n  Entity,\n  ENTITY_VIEW_TYPE_MASK_FILE,\n  ENTITY_VIEW_TYPE_MASK_PROJECT,\n  EntityHeader,\n  EntityView,\n  PaginatedResults,\n  ProjectHeader,\n} from '@sage-bionetworks/synapse-types'\nimport { MOCK_USER_ID } from '../user/mock_user_profile'\nimport mockFile from './mockFileEntity'\nimport mockProject from './mockProject'\n\nconst MOCK_PROJECT_ID = mockProject.id\nconst mockProjectEntity = mockProject.entity\nconst MOCK_FILE_NAME = mockFile.name\nconst mockFileEntityHeader = mockFile.entityHeader\n\nexport const MOCK_FOLDER_ID = 'syn1234'\nexport const MOCK_INVALID_PROJECT_NAME = 'A $@*#$% terribly named Project'\nexport const MOCK_FILE_VIEW_ENTITY_ID = 'syn456'\nexport const MOCK_PROJECT_VIEW_ENTITY_ID = 'syn567'\n\nexport const mockFolderEntity: Entity = {\n  id: MOCK_FOLDER_ID,\n  parentId: MOCK_PROJECT_ID,\n  name: 'my folder name',\n  concreteType: 'org.sagebionetworks.repo.model.Folder',\n}\n\nexport const mockFolderEntityHeader: EntityHeader = {\n  id: mockFolderEntity.id!,\n  name: mockFolderEntity.name,\n  type: mockFolderEntity.concreteType,\n  versionNumber: 1,\n  versionLabel: 'Version label',\n  benefactorId: 1234,\n  createdOn: '',\n  modifiedOn: '',\n  createdBy: '', // TODO: Replace with a valid mock user ID\n  modifiedBy: '',\n}\n\nexport const mockPaginatedEntityHeaders: PaginatedResults<EntityHeader> = {\n  totalNumberOfResults: 2,\n  results: [mockFileEntityHeader, mockFolderEntityHeader],\n}\n\nexport const mockProjectHeader: ProjectHeader = {\n  id: mockProjectEntity.id!,\n  name: mockProjectEntity.name,\n  lastActivity: '2022-02-03T12:44:35.457Z',\n  modifiedOn: mockProjectEntity.modifiedOn!,\n  modifiedBy: MOCK_USER_ID,\n}\n\nexport const mockFileViewEntity: EntityView = {\n  id: MOCK_FILE_VIEW_ENTITY_ID,\n  parentId: MOCK_PROJECT_ID,\n  name: MOCK_FILE_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.table.EntityView',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID.toString(),\n  etag: '00000000-0000-0000-0000-000000000000',\n  columnIds: [],\n  viewTypeMask: ENTITY_VIEW_TYPE_MASK_FILE,\n  scopeIds: [MOCK_PROJECT_ID],\n}\n\nexport const mockProjectViewEntity: EntityView = {\n  id: MOCK_PROJECT_VIEW_ENTITY_ID,\n  parentId: MOCK_PROJECT_ID,\n  name: MOCK_FILE_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.table.EntityView',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID.toString(),\n  etag: '00000000-0000-0000-0000-000000000000',\n  columnIds: [],\n  viewTypeMask: ENTITY_VIEW_TYPE_MASK_PROJECT,\n  scopeIds: [MOCK_PROJECT_ID],\n}\n","import { rest } from 'msw'\nimport {\n  FAVORITES,\n  NOTIFICATION_EMAIL,\n  PROFILE_IMAGE_PREVIEW,\n  USER_BUNDLE,\n  USER_GROUP_HEADERS,\n  USER_GROUP_HEADERS_BATCH,\n  USER_ID_BUNDLE,\n  USER_PROFILE,\n  USER_PROFILE_ID,\n} from '../../../src/utils/APIConstants'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n  MOCK_REPO_ORIGIN,\n} from '../../../src/utils/functions/getEndpoint'\nimport {\n  TYPE_FILTER,\n  UserBundle,\n  UserGroupHeaderResponsePage,\n  UserProfile,\n} from '@sage-bionetworks/synapse-types'\nimport { mockPaginatedEntityHeaders } from '../../entity/mockEntity'\nimport {\n  mockUserBundle,\n  mockUserData,\n  mockUserProfileData,\n} from '../../user/mock_user_profile'\nimport { SynapseApiResponse } from '../handlers'\nimport { UserProfileList } from '../../../src/synapse-client/SynapseClient'\nimport { TwoFactorAuthStatus } from '@sage-bionetworks/synapse-types'\n\nexport const getUserProfileHandlers = (backendOrigin: string) => [\n  /**\n   * Get User Profile by ID\n   */\n  rest.get(\n    `${backendOrigin}${USER_PROFILE_ID(':id')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<UserProfile> = {\n        reason: `Mock Service worker could not find a user profile with ID ${req.params.id}`,\n      }\n      const match = mockUserData.find(\n        userData => userData.id.toString() === req.params.id,\n      )\n      if (match && match.userProfile) {\n        response = match.userProfile\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  /**\n   * Get the caller's user profile\n   */\n  rest.get(`${backendOrigin}${USER_PROFILE}`, async (req, res, ctx) => {\n    // default return a mock UserProfile.\n    const response: UserProfile = mockUserProfileData\n    const status = 200\n    return res(ctx.status(status), ctx.json(response))\n  }),\n\n  /**\n   * Get the caller's user bundle\n   */\n  rest.get(\n    `${getEndpoint(BackendDestinationEnum.REPO_ENDPOINT)}${USER_BUNDLE}`,\n    async (req, res, ctx) => {\n      const result: UserBundle = mockUserBundle\n      return res(ctx.status(200), ctx.json(result))\n    },\n  ),\n\n  /**\n   * Get a user bundle by ID\n   */\n  rest.get(\n    `${backendOrigin}${USER_ID_BUNDLE(':id')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<UserBundle> = {\n        reason: `Mock Service worker could not find a user bundle with ID ${req.params.id}`,\n      }\n      const match = mockUserData.find(\n        userData => userData.id.toString() === req.params.id,\n      )\n      if (match && match.userBundle) {\n        response = match.userBundle\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  /**\n   * Get the caller's favorites\n   */\n  rest.get(`${backendOrigin}${FAVORITES}`, async (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json(mockPaginatedEntityHeaders))\n  }),\n\n  /**\n   * Get a batch of user group headers\n   */\n  rest.get(\n    `${backendOrigin}${USER_GROUP_HEADERS_BATCH}`,\n    async (req, res, ctx) => {\n      const ids = req.url.searchParams.get('ids')!.split(',')\n      const responsePage: UserGroupHeaderResponsePage = {\n        children: mockUserData\n          .filter(userData => ids.includes(userData.id.toString()))\n          .map(userData => userData.userGroupHeader),\n      }\n      return res(ctx.status(200), ctx.json(responsePage))\n    },\n  ),\n\n  /**\n   * Get a batch of user profiles\n   */\n  rest.post(`${backendOrigin}${USER_PROFILE}`, async (req, res, ctx) => {\n    const requestedList = (await req.json()).list as string[]\n    const responsePage: UserProfileList = {\n      list: mockUserData\n        .filter(userData => requestedList.includes(userData.id.toString()))\n        .map(userData => userData.userProfile)\n        .filter(\n          (userProfile): userProfile is UserProfile => userProfile != null,\n        ),\n    }\n    return res(ctx.status(200), ctx.json(responsePage))\n  }),\n\n  /**\n   * Get userGroupHeaders by prefix\n   */\n  rest.get(`${backendOrigin}${USER_GROUP_HEADERS}`, async (req, res, ctx) => {\n    const prefix = (\n      req.url.searchParams.get('prefix') ?? ''\n    ).toLowerCase() as string\n    const typeFilter = req.url.searchParams.get('typeFilter') as TYPE_FILTER\n    const responsePage: UserGroupHeaderResponsePage = {\n      children: mockUserData\n        .filter(userData => {\n          if (!typeFilter || typeFilter === TYPE_FILTER.ALL) {\n            return true\n          } else if (typeFilter === TYPE_FILTER.USERS_ONLY) {\n            return userData.userGroupHeader.isIndividual\n          } else {\n            return !userData.userGroupHeader.isIndividual\n          }\n        })\n        .filter(\n          userData =>\n            userData.userGroupHeader.userName\n              .toLowerCase()\n              .startsWith(prefix) ||\n            (userData.userGroupHeader.firstName || '')\n              .toLowerCase()\n              .startsWith(prefix) ||\n            userData.userGroupHeader.displayName\n              .toLowerCase()\n              .startsWith(prefix) ||\n            (userData.userGroupHeader.lastName || '')\n              .toLowerCase()\n              .startsWith(prefix),\n        )\n        .map(userData => userData.userGroupHeader),\n    }\n    return res(ctx.status(200), ctx.json(responsePage))\n  }),\n\n  /**\n   * Return a 404 when fetching the profile image\n   */\n  rest.get(\n    `${backendOrigin}${PROFILE_IMAGE_PREVIEW(':userId')}`,\n    async (req, res, ctx) => {\n      return res(\n        ctx.status(404),\n        ctx.json({ reason: 'user has no profile image' }),\n      )\n    },\n  ),\n\n  rest.get(`${backendOrigin}${NOTIFICATION_EMAIL}`, async (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({ email: mockUserBundle.userProfile?.email }),\n    )\n  }),\n\n  rest.get(`${backendOrigin}/auth/v1/2fa`, async (req, res, ctx) => {\n    const response: TwoFactorAuthStatus = {\n      status: 'ENABLED',\n    }\n    return res(ctx.status(200), ctx.json(response))\n  }),\n]\n\nexport function getCurrentUserCertifiedValidatedHandler(\n  backendOrigin: string,\n  isCertified: boolean,\n  isValidated: boolean,\n) {\n  return rest.get(`${backendOrigin}${USER_BUNDLE}`, async (req, res, ctx) => {\n    let status = 200\n    let response: UserBundle = {\n      ...mockUserBundle,\n      isCertified: isCertified,\n      isVerified: isValidated,\n    }\n    return res(ctx.status(status), ctx.json(response))\n  })\n}\n"],"names":["parentId","mockProject","projectName","MOCK_FILE_ENTITY_ID","MOCK_FILE_NAME","MOCK_WIKI_ID","mockFileEntity","MOCK_FILE_HANDLE_ID","MOCK_USER_ID","MOCK_USER_ID_2","mockFileEntityVersionInfo","mockFileEntityVersions","filePath","mockFileEntityBundle","EntityType","mockFileHandle","mockPreviewFileHandle","AnnotationsValueType","ACCESS_TYPE","RestrictionLevel","mockFileEntityJson","mockFileEntityHeader","mockFileEntityData","MOCK_PROJECT_ID","mockProjectEntity","mockFile","MOCK_FOLDER_ID","MOCK_INVALID_PROJECT_NAME","mockFolderEntity","mockFolderEntityHeader","mockPaginatedEntityHeaders","getUserProfileHandlers","backendOrigin","rest","USER_PROFILE_ID","req","res","ctx","status","response","match","mockUserData","userData","USER_PROFILE","mockUserProfileData","getEndpoint","BackendDestinationEnum","USER_BUNDLE","result","mockUserBundle","USER_ID_BUNDLE","FAVORITES","USER_GROUP_HEADERS_BATCH","ids","responsePage","requestedList","userProfile","USER_GROUP_HEADERS","prefix","typeFilter","TYPE_FILTER","PROFILE_IMAGE_PREVIEW","NOTIFICATION_EMAIL","_a","getCurrentUserCertifiedValidatedHandler","isCertified","isValidated"],"mappings":"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"}