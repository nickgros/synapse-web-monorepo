{"version":3,"file":"TimelinePlot-829d376d.js","sources":["../../src/components/TimelinePlot/phasesQueryResponseData.ts","../../src/components/TimelinePlot/TimelinePhase.tsx","../../src/components/TimelinePlot/TimelineLegendItem.tsx","../../src/components/TimelinePlot/TimelinePlotSpeciesSelector.tsx","../../src/utils/hooks/useRefDimensions.ts","../../src/components/TimelinePlot/TimelinePlot.tsx"],"sourcesContent":["import { QueryResultBundle } from '@sage-bionetworks/synapse-types'\n\nconst SPECIES_COLUMN_NAME = 'species'\nconst OBSERVATION_PHASE_COLUMN_NAME = 'observationphase'\n\nconst hardcodedPhasesQueryResponseData: QueryResultBundle = {\n  concreteType: 'org.sagebionetworks.repo.model.table.QueryResultBundle',\n  queryResult: {\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryResult',\n    queryResults: {\n      concreteType: 'org.sagebionetworks.repo.model.table.RowSet',\n      tableId: 'syn52408661',\n      etag: 'a3270cb2-4373-4e12-9981-e12326e54ad1',\n      headers: [\n        {\n          name: 'species',\n          columnType: 'STRING',\n          id: '152514',\n        },\n        {\n          name: 'observationPhase',\n          columnType: 'STRING',\n          id: '197976',\n        },\n        {\n          name: 'observationPhaseOrder',\n          columnType: 'INTEGER',\n          id: '198102',\n        },\n        {\n          name: 'observationTimeMax',\n          columnType: 'INTEGER',\n          id: '198103',\n        },\n        {\n          name: 'observationTimeUnits',\n          columnType: 'STRING',\n          id: '198101',\n        },\n      ],\n      rows: [\n        {\n          rowId: 9,\n          versionNumber: 4,\n          values: ['Danio rerio', 'embryo', '1', '7', 'days'],\n        },\n        {\n          rowId: 10,\n          versionNumber: 4,\n          values: ['Danio rerio', 'larval', '2', '3', 'months'],\n        },\n        {\n          rowId: 11,\n          versionNumber: 4,\n          values: ['Danio rerio', 'juvenile', '3', '6', 'months'],\n        },\n        {\n          rowId: 12,\n          versionNumber: 4,\n          values: ['Danio rerio', 'adult', '4', '12', 'months'],\n        },\n        {\n          rowId: 16,\n          versionNumber: 4,\n          values: ['Drosophila', 'embryo', '1', '24', 'hours'],\n        },\n        {\n          rowId: 17,\n          versionNumber: 4,\n          values: ['Drosophila', 'larval', '2', '5', 'days'],\n        },\n        {\n          rowId: 18,\n          versionNumber: 4,\n          values: ['Drosophila', 'pupal', '3', '12', 'days'],\n        },\n        {\n          rowId: 19,\n          versionNumber: 4,\n          values: ['Drosophila', 'adult', '4', '5', 'weeks'],\n        },\n        {\n          rowId: 1,\n          versionNumber: 4,\n          values: ['Mus musculus', 'prenatal', '1', '21', 'days'],\n        },\n        {\n          rowId: 2,\n          versionNumber: 4,\n          values: ['Mus musculus', 'postnatal', '2', '6', 'months'],\n        },\n        {\n          rowId: 20,\n          versionNumber: 4,\n          values: ['Rattus norvegicus', 'prenatal', '1', '23', 'days'],\n        },\n        {\n          rowId: 21,\n          versionNumber: 4,\n          values: ['Rattus norvegicus', 'neonatal', '2', '4', 'weeks'],\n        },\n        {\n          rowId: 22,\n          versionNumber: 4,\n          values: ['Rattus norvegicus', 'weanling', '3', '2', 'months'],\n        },\n        {\n          rowId: 23,\n          versionNumber: 4,\n          values: ['Rattus norvegicus', 'juvenile', '4', '3', 'months'],\n        },\n        {\n          rowId: 24,\n          versionNumber: 4,\n          values: ['Rattus norvegicus', 'adolescent', '5', '6', 'months'],\n        },\n        {\n          rowId: 25,\n          versionNumber: 4,\n          values: ['Rattus norvegicus', 'adult', '6', '12', 'months'],\n        },\n        {\n          rowId: 13,\n          versionNumber: 4,\n          values: ['Saccharomyces', 'log phase', '1', '7', 'days'],\n        },\n        {\n          rowId: 14,\n          versionNumber: 4,\n          values: ['Saccharomyces', 'stationary phase', '2', '2', 'weeks'],\n        },\n        {\n          rowId: 15,\n          versionNumber: 4,\n          values: ['Saccharomyces', 'death phase', '3', '3', 'weeks'],\n        },\n        {\n          rowId: 3,\n          versionNumber: 4,\n          values: ['Sus scrofa', 'prenatal', '1', '115', 'days'],\n        },\n        {\n          rowId: 4,\n          versionNumber: 4,\n          values: ['Sus scrofa', 'neonatal', '2', '3', 'months'],\n        },\n        {\n          rowId: 5,\n          versionNumber: 4,\n          values: ['Sus scrofa', 'weanling', '3', '6', 'months'],\n        },\n        {\n          rowId: 6,\n          versionNumber: 4,\n          values: ['Sus scrofa', 'juvenile', '4', '12', 'months'],\n        },\n        {\n          rowId: 7,\n          versionNumber: 4,\n          values: ['Sus scrofa', 'adolescent', '5', '2', 'years'],\n        },\n        {\n          rowId: 8,\n          versionNumber: 4,\n          values: ['Sus scrofa', 'adult', '6', '3', 'years'],\n        },\n      ],\n    },\n  },\n}\n\nexport const phaseSpeciesIndex =\n  hardcodedPhasesQueryResponseData.queryResult?.queryResults.headers.findIndex(\n    header => header.name.toLowerCase() === SPECIES_COLUMN_NAME,\n  )!\nexport const phaseObservationIndex =\n  hardcodedPhasesQueryResponseData.queryResult?.queryResults.headers.findIndex(\n    header => header.name.toLowerCase() === OBSERVATION_PHASE_COLUMN_NAME,\n  )!\n\nexport default hardcodedPhasesQueryResponseData\n","import React, { useMemo, useRef, useState } from 'react'\nimport Plotly, { Layout, PlotData } from 'plotly.js-basic-dist'\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport dayjs, { ManipulateType } from 'dayjs'\nimport { Dialog } from '@mui/material'\nimport {\n  ObservationCard,\n  ObservationCardSchema,\n} from '../row_renderers/ObservationCard'\nimport { Row } from '@sage-bionetworks/synapse-types'\n\nconst Plot = createPlotlyComponent(Plotly)\n\ntype TimepointData = {\n  timepoints: dayjs.Dayjs[]\n  hoverOverIndex: number\n}\n\nconst getTimepointData = (\n  start: dayjs.Dayjs,\n  rowData: Row[],\n  schema: ObservationCardSchema,\n  hoverEventRowId?: number, //if supplied, will return the index of this row\n): TimepointData => {\n  let hoverOverIndex = -1\n  const timepoints = rowData.map((row, index) => {\n    const time = parseFloat(row.values[schema.observationTime]!)\n    const timeUnit = row.values[schema.observationTimeUnits]\n    if (row.rowId == hoverEventRowId) {\n      hoverOverIndex = index\n    }\n    return start.add(time, timeUnit as ManipulateType)\n  })\n  return {\n    timepoints,\n    hoverOverIndex,\n  }\n}\n\nexport const getMaxDate = (timepoints: dayjs.Dayjs[]) => {\n  if (timepoints.length == 0) {\n    return dayjs().add(1, 'days')\n  }\n  return timepoints.reduce(\n    (maxDateItem: dayjs.Dayjs, currentDateItem: dayjs.Dayjs) => {\n      if (!maxDateItem || currentDateItem.isAfter(maxDateItem)) {\n        return currentDateItem\n      }\n      return maxDateItem\n    },\n  )\n}\n\nconst getTimelineData = (timepointData: TimepointData, rowData: Row[]) => {\n  // If this phase has no data, return an empty data line\n  if (\n    timepointData.timepoints == undefined ||\n    timepointData.timepoints.length == 0\n  ) {\n    return [\n      {\n        x: [dayjs().format()],\n        y: [0.5],\n        mode: 'lines',\n        line: {\n          color: 'blue',\n          width: 2,\n        },\n        customdata: [],\n        hoverinfo: 'none',\n      },\n    ]\n  }\n\n  // first combine all of the Rows that share the same timepoint\n  const combinedData: Record<string, Row[]> = timepointData.timepoints.reduce(\n    (result, currentTimepoint, index) => {\n      const resultRecord = result as Record<string, Row[]>\n      if (!resultRecord[currentTimepoint.format()]) {\n        resultRecord[currentTimepoint.format()] = []\n      }\n      resultRecord[currentTimepoint.format()].push(rowData[index])\n      return result\n    },\n    {},\n  )\n\n  const data = timepointData.timepoints.map((timepoint, index) => {\n    const utcFormattedTimepoint = timepoint.format()\n    const isHoveredOver = index == timepointData.hoverOverIndex\n    const rows = combinedData[utcFormattedTimepoint]\n    const rowIds = rows.map(row => {\n      return row.rowId\n    })\n    return {\n      x: [utcFormattedTimepoint, utcFormattedTimepoint, utcFormattedTimepoint],\n      y: [0, 0.5, 1],\n      mode: 'lines',\n      line: {\n        color: isHoveredOver ? 'black' : 'gray',\n        width: isHoveredOver ? 2 : 1,\n      },\n      // Add event into in the customdata\n      customdata: [rowIds, rowIds, rowIds],\n      // but tell Plotly that we do not want it to show a hover tooltip (we're going to handle this)\n      hoverinfo: 'none',\n    }\n  })\n  return data\n}\n\nconst getLayout = (\n  start: dayjs.Dayjs,\n  end: dayjs.Dayjs,\n  color: string,\n  timelineData: Plotly.Data[],\n  rowData: Row[],\n  schema: ObservationCardSchema,\n): Partial<Layout> => {\n  const xTickVals = timelineData.map(value => {\n    // return the utcFormattedTimepoint\n    return (value as PlotData).x[0]\n  })\n  const xTickText = timelineData.map(value => {\n    const rowIds = (value as PlotData).customdata[0] as number[] | undefined\n    if (rowIds && rowIds.length > 0) {\n      const count = rowIds.length\n      const rows = rowData?.filter(row => {\n        return rowIds[0] == row.rowId\n      })\n      if (rows && rows.length > 0) {\n        const row = rows[0]\n        const time = parseFloat(row.values[schema.observationTime]!)\n        const timeUnits = row.values[\n          schema.observationTimeUnits\n        ] as ManipulateType\n        const countString = count > 1 ? `(${count})` : ''\n        return `${time} ${timeUnits} ${countString}`\n      }\n    }\n    return ''\n  })\n\n  return {\n    hovermode: 'closest',\n    dragmode: false, //disallow interaction\n    showlegend: false,\n    xaxis: {\n      showgrid: false,\n      showticklabels: true,\n      showline: false,\n      zeroline: false,\n      tickvals: xTickVals,\n      ticktext: xTickText,\n      tickangle: -45,\n    },\n\n    yaxis: {\n      range: [0, 1.25],\n      showgrid: false,\n      zeroline: false,\n      showline: false,\n      showticklabels: false,\n    },\n    // Each phase has a shape\n    shapes: [\n      {\n        type: 'rect',\n        x0: start.subtract(end.diff(start) / 10).format(), // add 10% to the left side of the graph\n        x1: end.add(end.diff(start) / 3).format(), // add 33% to right side of the graph\n        y0: 0.25,\n        y1: 0.75,\n        fillcolor: color,\n        opacity: 0.8,\n        line: {\n          width: 0,\n        },\n      },\n    ],\n    margin: {\n      l: 0,\n      r: 0,\n      t: 60,\n      b: 60,\n    },\n    // autosize: false,\n  }\n}\n\ntype TimelinePhaseProps = {\n  name: string\n  color: string\n  rowData: Row[]\n  schema: ObservationCardSchema\n  widthPx: number\n}\n\nconst TimelinePhase = ({\n  color,\n  rowData,\n  schema,\n  widthPx,\n}: TimelinePhaseProps) => {\n  const [clickEvent, setClickEvent] = useState<Plotly.PlotMouseEvent>()\n  const [hoverEvent, setHoverEvent] = useState<Plotly.PlotHoverEvent>()\n  const [plotKey, setPlotKey] = useState(1)\n  const start = dayjs()\n\n  // hide the hover UI if we detect that the user moves the mouse outside of this component boundary\n  const componentRef = useRef<HTMLDivElement>(null)\n  const rowIds = clickEvent?.points[0].customdata as unknown as (\n    | number\n    | undefined\n  )[]\n  const selectedRows = rowData?.filter(row => {\n    return rowIds?.includes(row.rowId)\n  })\n  const hoverEventRowIds = hoverEvent?.points[0].customdata as unknown as (\n    | number\n    | undefined\n  )[]\n\n  const timepointData = useMemo(() => {\n    return getTimepointData(\n      start,\n      rowData,\n      schema,\n      hoverEventRowIds?.length > 0 ? hoverEventRowIds[0] : undefined,\n    )\n  }, [hoverEventRowIds, rowData, schema, start])\n\n  const end = getMaxDate(timepointData.timepoints)\n\n  const timelineData = useMemo(() => {\n    return getTimelineData(timepointData, rowData)\n  }, [timepointData, rowData])\n\n  return (\n    <div ref={componentRef} style={{ width: widthPx }}>\n      <Plot\n        key={`Plot-${color}-${plotKey}`}\n        style={{ width: widthPx, height: '220px' }}\n        data={timelineData}\n        layout={getLayout(start, end, color, timelineData, rowData, schema)}\n        config={{ displayModeBar: false }}\n        useResizeHandler={true}\n        onClick={eventData => {\n          setClickEvent(eventData)\n          setHoverEvent(undefined)\n        }}\n        // PORTALS-2861: To avoid the plot handling the double-click, change the key so the Plotly graph (gd) associated\n        // to the click event is invalid.\n        onDoubleClick={() => {\n          setPlotKey(plotKey + 1)\n        }}\n        onHover={eventData => {\n          setHoverEvent(eventData)\n        }}\n        onUnhover={() => {\n          setHoverEvent(undefined)\n        }}\n      />\n      {selectedRows && (\n        <Dialog\n          onClose={() => setClickEvent(undefined)}\n          open={!!selectedRows && selectedRows.length > 0}\n        >\n          {selectedRows.map(row => {\n            return (\n              <ObservationCard\n                key={row.rowId}\n                data={row.values}\n                schema={schema}\n                includePortalCardClass={false}\n              />\n            )\n          })}\n        </Dialog>\n      )}\n    </div>\n  )\n}\n\nexport default TimelinePhase\n","import React from 'react'\nimport { Box } from '@mui/system'\nimport { Typography } from '@mui/material'\n\ntype TimelineLegendItemProps = {\n  color: string\n  phaseName: string | null\n}\nconst TimelineLegendItem = ({ color, phaseName }: TimelineLegendItemProps) => {\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: '7px' }}>\n      <Box\n        sx={{\n          backgroundColor: color,\n          width: '20px',\n          height: '20px',\n        }}\n      />\n      <Typography variant=\"body1\">{phaseName?.toUpperCase()}</Typography>\n    </Box>\n  )\n}\n\nexport default TimelineLegendItem\n","import React from 'react'\nimport { useGetFullTableQueryResults } from '../../synapse-queries'\nimport { BUNDLE_MASK_QUERY_RESULTS } from '../../utils/SynapseConstants'\nimport { Box } from '@mui/system'\nimport { parseEntityIdFromSqlStatement } from '../../utils/functions'\nimport { InputLabel, Select, MenuItem } from '@mui/material'\nimport { StyledFormControl } from '../styled'\nimport { QueryFilter } from '@sage-bionetworks/synapse-types'\n\nexport type TimelinePlotSpeciesSelectorProps = {\n  sql: string\n  additionalFilters?: QueryFilter[]\n  species?: string | null\n  setSpecies: React.Dispatch<React.SetStateAction<string | null | undefined>>\n}\nexport const TimelinePlotSpeciesSelector = ({\n  sql,\n  additionalFilters = [],\n  species,\n  setSpecies,\n}: TimelinePlotSpeciesSelectorProps) => {\n  const eventsTableId = parseEntityIdFromSqlStatement(sql)\n  // Fetch the species\n  const eventTableQuery = useGetFullTableQueryResults({\n    entityId: eventsTableId,\n    query: {\n      sql: `SELECT distinct unnest(species) FROM ${eventsTableId} WHERE species IS NOT NULL AND observationTime IS NOT NULL GROUP BY species`,\n      additionalFilters: additionalFilters,\n    },\n    partMask: BUNDLE_MASK_QUERY_RESULTS,\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n  })\n\n  const { data: speciesData, isLoading } = eventTableQuery\n  const rows = speciesData?.queryResult?.queryResults?.rows\n  const defaultSpecies = rows && rows.length > 0 ? rows[0].values[0] : undefined\n  if (species == undefined && defaultSpecies != undefined) {\n    setSpecies(defaultSpecies)\n  }\n  // Hide if loading, there are no rows, or there's only 1 species option\n  if (isLoading || !rows || rows.length < 2) {\n    return <></>\n  }\n\n  return (\n    <Box>\n      <StyledFormControl>\n        <InputLabel>Species</InputLabel>\n        <Select\n          sx={{ marginLeft: '2px', marginBottom: '2px' }}\n          value={species}\n          label=\"Species\"\n          onChange={event => {\n            setSpecies(event.target.value)\n          }}\n        >\n          {rows?.map(row => {\n            const species = row.values[0]!\n            return (\n              <MenuItem key={species} value={species}>\n                {species}\n              </MenuItem>\n            )\n          })}\n        </Select>\n      </StyledFormControl>\n    </Box>\n  )\n}\nexport default TimelinePlotSpeciesSelector\n","import { RefObject, useEffect, useState } from 'react'\n\n/**\n * How to use:\n   const divRef = createRef()\n   const dimensions = useRefDimensions(divRef)\n  ...\n  return (\n    <div style={{ height: '100vh', width: '100vw' }}>\n      <div\n        ref={divRef}\n      >\n        Dimensions: {dimensions.width}w {dimensions.height}h\n      </div>\n    </div>\n  )\n */\n\nconst useRefDimensions = (ref: RefObject<Element>) => {\n  const [dimensions, setDimensions] = useState({ width: 1, height: 2 })\n  useEffect(() => {\n    const handleResize = () => {\n      if (ref.current) {\n        const boundingRect = ref.current.getBoundingClientRect()\n        const { width, height } = boundingRect\n        const newWidth = Math.round(width)\n        const newHeight = Math.round(height)\n        if (dimensions.width != newWidth || dimensions.height != newHeight)\n          setDimensions({ width: newWidth, height: newHeight })\n      }\n    }\n\n    // Call the updateWidth function initially to set the initial width.\n    handleResize()\n\n    // Add an event listener for window resize events.\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [dimensions.height, dimensions.width, ref])\n  return dimensions\n}\n\nexport default useRefDimensions\n","import React, { createRef, useMemo, useState } from 'react'\nimport { useGetFullTableQueryResults } from '../../synapse-queries'\nimport { BUNDLE_MASK_QUERY_RESULTS } from '../../utils/SynapseConstants'\nimport hardcodedPhasesQueryResponseData, {\n  phaseObservationIndex,\n  phaseSpeciesIndex,\n} from './phasesQueryResponseData'\nimport TimelinePhase from './TimelinePhase'\nimport getColorPalette from '../ColorGradient/ColorGradient'\nimport { Box } from '@mui/system'\nimport { ObservationCardSchema } from '../row_renderers/ObservationCard'\nimport {\n  SQLOperator,\n  getAdditionalFilters,\n  parseEntityIdFromSqlStatement,\n} from '../../utils/functions'\nimport TimelineLegendItem from './TimelineLegendItem'\nimport { Skeleton, Typography } from '@mui/material'\nimport TimelinePlotSpeciesSelector from './TimelinePlotSpeciesSelector'\nimport { getHeaderIndex } from '../../utils/functions/queryUtils'\nimport useRefDimensions from '../../utils/hooks/useRefDimensions'\nimport { ColumnMultiValueFunctionQueryFilter } from '@sage-bionetworks/synapse-types'\nimport { ColumnMultiValueFunction } from '@sage-bionetworks/synapse-types'\n\nconst OBSERVATION_PHASE_COLUMN_NAME = 'observationphase'\nconst OBSERVATION_TIME_COLUMN_NAME = 'observationtime'\nconst OBSERVATION_TIME_UNITS_COLUMN_NAME = 'observationtimeunits'\nconst OBSERVATION_SUBMITTER_NAME_COLUMN_NAME = 'observationsubmittername'\nconst OBSERVATION_TEXT_COLUMN_NAME = 'observationtext'\nconst OBSERVATION_TYPE_COLUMN_NAME = 'observationtype'\nconst OBSERVATION_SUBMITTER_USER_ID_COLUMN_NAME = 'synapseid'\nconst OBSERVATION_DOI_COLUMN_NAME = 'doi'\n\nexport type TimelinePlotProps = {\n  sql: string\n  searchParams?: Record<string, string>\n  sqlOperator?: SQLOperator\n  title?: string\n  subTitle?: string\n  defaultSpecies?: string //for test\n}\nexport const TimelinePlot = ({\n  sql,\n  searchParams,\n  sqlOperator,\n  defaultSpecies,\n  title,\n  subTitle,\n}: TimelinePlotProps) => {\n  // Fetch the table data\n  const eventsTableId = parseEntityIdFromSqlStatement(sql)\n  const [species, setSpecies] = useState<string | undefined | null>(\n    defaultSpecies,\n  )\n  const plotContainerRef = createRef<HTMLDivElement>()\n  const dimensions = useRefDimensions(plotContainerRef)\n  const queryFilters =\n    getAdditionalFilters(undefined, searchParams, sqlOperator) ?? []\n  const speciesFilter: ColumnMultiValueFunctionQueryFilter | undefined = species\n    ? {\n        columnName: 'species',\n        concreteType:\n          'org.sagebionetworks.repo.model.table.ColumnMultiValueFunctionQueryFilter',\n        values: [species],\n        function: ColumnMultiValueFunction.HAS,\n      }\n    : undefined\n  const additionalFilters = [...queryFilters]\n  if (speciesFilter) {\n    additionalFilters.push(speciesFilter)\n  }\n  const eventTableQuery = useGetFullTableQueryResults(\n    {\n      entityId: eventsTableId,\n      query: {\n        sql: `${sql} WHERE observationTime IS NOT NULL`,\n        sort: [\n          {\n            column: 'observationTime',\n            direction: 'ASC',\n          },\n        ],\n        additionalFilters: additionalFilters,\n      },\n\n      partMask: BUNDLE_MASK_QUERY_RESULTS,\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    },\n    {\n      enabled: !!species,\n    },\n  )\n\n  const { data: eventsData, isLoading } = eventTableQuery\n\n  // filter the phases query response data to the specific species\n  const phaseData = useMemo(() => {\n    if (species) {\n      const phasesForTargetSpecies =\n        hardcodedPhasesQueryResponseData.queryResult?.queryResults.rows.filter(\n          row => {\n            return row.values[phaseSpeciesIndex] == species\n          },\n        )\n      return phasesForTargetSpecies\n    } else return undefined\n  }, [species])\n\n  if (isLoading) {\n    return <LoadingTimelinePlot />\n  }\n  const observationPhaseIndex = getHeaderIndex(\n    OBSERVATION_PHASE_COLUMN_NAME,\n    eventsData,\n  )\n  const observationTimeIndex = getHeaderIndex(\n    OBSERVATION_TIME_COLUMN_NAME,\n    eventsData,\n  )\n  const observationTimeUnitIndex = getHeaderIndex(\n    OBSERVATION_TIME_UNITS_COLUMN_NAME,\n    eventsData,\n  )\n  const observationSubmitterNameIndex = getHeaderIndex(\n    OBSERVATION_SUBMITTER_NAME_COLUMN_NAME,\n    eventsData,\n  )\n  const observationTextIndex = getHeaderIndex(\n    OBSERVATION_TEXT_COLUMN_NAME,\n    eventsData,\n  )\n  const observationDoiIndex = getHeaderIndex(\n    OBSERVATION_DOI_COLUMN_NAME,\n    eventsData,\n  )\n\n  const observationTypeIndex = getHeaderIndex(\n    OBSERVATION_TYPE_COLUMN_NAME,\n    eventsData,\n  )\n  const submitterUserIdIndex = getHeaderIndex(\n    OBSERVATION_SUBMITTER_USER_ID_COLUMN_NAME,\n    eventsData,\n  )\n\n  const schema: ObservationCardSchema = {\n    observationSubmitterName: observationSubmitterNameIndex,\n    synapseId: submitterUserIdIndex,\n    observationType: observationTypeIndex,\n    observationText: observationTextIndex,\n    observationTime: observationTimeIndex,\n    observationTimeUnits: observationTimeUnitIndex,\n    doi: observationDoiIndex,\n  }\n\n  const widthPx =\n    dimensions.width && phaseData ? dimensions.width / phaseData.length : 0\n  const gridTemplateColumns = phaseData?.map(() => 'auto').join(' ')\n\n  return (\n    <>\n      {species && (\n        <>\n          {title && <Typography variant=\"h2\">{title}</Typography>}\n          {subTitle && (\n            <Typography variant=\"body1Italic\" sx={{ margin: '10px 0px' }}>\n              {subTitle}\n            </Typography>\n          )}\n        </>\n      )}\n      <Box>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n          {/* Species selector */}\n          <Box>\n            {!defaultSpecies && (\n              <TimelinePlotSpeciesSelector\n                setSpecies={setSpecies}\n                species={species}\n                sql={sql}\n                additionalFilters={queryFilters}\n              />\n            )}\n          </Box>\n          {/* Legend */}\n          {phaseData && (\n            <Box\n              sx={{ display: 'flex', justifyContent: 'flex-end', gap: '25px' }}\n            >\n              {phaseData.map((phaseRow, index) => {\n                const { colorPalette } = getColorPalette(index, 1)\n                return (\n                  <TimelineLegendItem\n                    key={phaseRow.rowId}\n                    color={colorPalette[0]}\n                    phaseName={phaseRow.values[phaseObservationIndex]}\n                  />\n                )\n              })}\n            </Box>\n          )}\n        </Box>\n        {/* Phase plots */}\n        {species && phaseData && (\n          <div ref={plotContainerRef}>\n            <Box\n              sx={{\n                display: 'inline-grid',\n                gridTemplateColumns,\n                minWidth: dimensions.width,\n                maxWidth: dimensions.width,\n              }}\n              className=\"forcePlotlyDefaultCursor\"\n            >\n              {phaseData.map((phaseRow, index) => {\n                const { colorPalette } = getColorPalette(index, 1)\n                const phaseEventRows =\n                  eventsData?.queryResult?.queryResults.rows.filter(row => {\n                    return (\n                      row.values[observationPhaseIndex] ==\n                      phaseRow.values[phaseObservationIndex]\n                    )\n                  })\n\n                return phaseEventRows ? (\n                  <TimelinePhase\n                    key={phaseRow.rowId}\n                    name={phaseRow.values[phaseObservationIndex]!}\n                    color={colorPalette[0]}\n                    rowData={phaseEventRows}\n                    schema={schema}\n                    widthPx={widthPx}\n                  />\n                ) : (\n                  <></>\n                )\n              })}\n            </Box>\n          </div>\n        )}\n      </Box>\n    </>\n  )\n}\n\nexport const LoadingTimelinePlot = () => {\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\n        <Skeleton height=\"45px\" width=\"80px\" />\n        <Skeleton height=\"45px\" width=\"80px\" />\n      </Box>\n      <Box sx={{ display: 'flex' }}>\n        <Skeleton height=\"150px\" width=\"100%\" />\n      </Box>\n    </Box>\n  )\n}\n\nexport default TimelinePlot\n"],"names":["SPECIES_COLUMN_NAME","OBSERVATION_PHASE_COLUMN_NAME","hardcodedPhasesQueryResponseData","phaseSpeciesIndex","_a","header","phaseObservationIndex","Plot","createPlotlyComponent","Plotly","getTimepointData","start","rowData","schema","hoverEventRowId","hoverOverIndex","row","index","time","timeUnit","getMaxDate","timepoints","dayjs","maxDateItem","currentDateItem","getTimelineData","timepointData","combinedData","result","currentTimepoint","resultRecord","timepoint","utcFormattedTimepoint","isHoveredOver","rowIds","getLayout","end","color","timelineData","xTickVals","value","xTickText","count","rows","timeUnits","countString","TimelinePhase","widthPx","clickEvent","setClickEvent","useState","hoverEvent","setHoverEvent","plotKey","setPlotKey","componentRef","useRef","selectedRows","hoverEventRowIds","useMemo","jsxs","jsx","eventData","Dialog","ObservationCard","TimelineLegendItem","phaseName","Box","Typography","TimelinePlotSpeciesSelector","sql","additionalFilters","species","setSpecies","eventsTableId","parseEntityIdFromSqlStatement","eventTableQuery","useGetFullTableQueryResults","BUNDLE_MASK_QUERY_RESULTS","speciesData","isLoading","_b","defaultSpecies","Fragment","StyledFormControl","InputLabel","Select","event","species2","MenuItem","useRefDimensions","ref","dimensions","setDimensions","useEffect","handleResize","boundingRect","width","height","newWidth","newHeight","OBSERVATION_TIME_COLUMN_NAME","OBSERVATION_TIME_UNITS_COLUMN_NAME","OBSERVATION_SUBMITTER_NAME_COLUMN_NAME","OBSERVATION_TEXT_COLUMN_NAME","OBSERVATION_TYPE_COLUMN_NAME","OBSERVATION_SUBMITTER_USER_ID_COLUMN_NAME","OBSERVATION_DOI_COLUMN_NAME","TimelinePlot","searchParams","sqlOperator","title","subTitle","plotContainerRef","createRef","queryFilters","getAdditionalFilters","speciesFilter","ColumnMultiValueFunction","eventsData","phaseData","LoadingTimelinePlot","observationPhaseIndex","getHeaderIndex","observationTimeIndex","observationTimeUnitIndex","observationSubmitterNameIndex","observationTextIndex","observationDoiIndex","observationTypeIndex","submitterUserIdIndex","gridTemplateColumns","phaseRow","colorPalette","getColorPalette","phaseEventRows","Skeleton"],"mappings":"ojCAEA,MAAMA,GAAsB,UACtBC,GAAgC,mBAEhCC,EAAsD,CAC1D,aAAc,yDACd,YAAa,CACX,aAAc,mDACd,aAAc,CACZ,aAAc,8CACd,QAAS,cACT,KAAM,uCACN,QAAS,CACP,CACE,KAAM,UACN,WAAY,SACZ,GAAI,QACN,EACA,CACE,KAAM,mBACN,WAAY,SACZ,GAAI,QACN,EACA,CACE,KAAM,wBACN,WAAY,UACZ,GAAI,QACN,EACA,CACE,KAAM,qBACN,WAAY,UACZ,GAAI,QACN,EACA,CACE,KAAM,uBACN,WAAY,SACZ,GAAI,QACN,CACF,EACA,KAAM,CACJ,CACE,MAAO,EACP,cAAe,EACf,OAAQ,CAAC,cAAe,SAAU,IAAK,IAAK,MAAM,CACpD,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,cAAe,SAAU,IAAK,IAAK,QAAQ,CACtD,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,cAAe,WAAY,IAAK,IAAK,QAAQ,CACxD,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,cAAe,QAAS,IAAK,KAAM,QAAQ,CACtD,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,aAAc,SAAU,IAAK,KAAM,OAAO,CACrD,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,aAAc,SAAU,IAAK,IAAK,MAAM,CACnD,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,aAAc,QAAS,IAAK,KAAM,MAAM,CACnD,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,aAAc,QAAS,IAAK,IAAK,OAAO,CACnD,EACA,CACE,MAAO,EACP,cAAe,EACf,OAAQ,CAAC,eAAgB,WAAY,IAAK,KAAM,MAAM,CACxD,EACA,CACE,MAAO,EACP,cAAe,EACf,OAAQ,CAAC,eAAgB,YAAa,IAAK,IAAK,QAAQ,CAC1D,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,oBAAqB,WAAY,IAAK,KAAM,MAAM,CAC7D,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,oBAAqB,WAAY,IAAK,IAAK,OAAO,CAC7D,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,oBAAqB,WAAY,IAAK,IAAK,QAAQ,CAC9D,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,oBAAqB,WAAY,IAAK,IAAK,QAAQ,CAC9D,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,oBAAqB,aAAc,IAAK,IAAK,QAAQ,CAChE,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,oBAAqB,QAAS,IAAK,KAAM,QAAQ,CAC5D,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,gBAAiB,YAAa,IAAK,IAAK,MAAM,CACzD,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,gBAAiB,mBAAoB,IAAK,IAAK,OAAO,CACjE,EACA,CACE,MAAO,GACP,cAAe,EACf,OAAQ,CAAC,gBAAiB,cAAe,IAAK,IAAK,OAAO,CAC5D,EACA,CACE,MAAO,EACP,cAAe,EACf,OAAQ,CAAC,aAAc,WAAY,IAAK,MAAO,MAAM,CACvD,EACA,CACE,MAAO,EACP,cAAe,EACf,OAAQ,CAAC,aAAc,WAAY,IAAK,IAAK,QAAQ,CACvD,EACA,CACE,MAAO,EACP,cAAe,EACf,OAAQ,CAAC,aAAc,WAAY,IAAK,IAAK,QAAQ,CACvD,EACA,CACE,MAAO,EACP,cAAe,EACf,OAAQ,CAAC,aAAc,WAAY,IAAK,KAAM,QAAQ,CACxD,EACA,CACE,MAAO,EACP,cAAe,EACf,OAAQ,CAAC,aAAc,aAAc,IAAK,IAAK,OAAO,CACxD,EACA,CACE,MAAO,EACP,cAAe,EACf,OAAQ,CAAC,aAAc,QAAS,IAAK,IAAK,OAAO,CACnD,CACF,CACF,CACF,CACF,QAEO,MAAMC,IACXC,EAAAF,EAAiC,cAAjC,YAAAE,EAA8C,aAAa,QAAQ,UACvDC,GAAAA,EAAO,KAAK,YAAkB,IAAAL,UAErC,MAAMM,GACXF,EAAAF,EAAiC,cAAjC,YAAAE,EAA8C,aAAa,QAAQ,UACvDC,GAAAA,EAAO,KAAK,YAAkB,IAAAJ,ICtK5CM,GAAAC,GAAAC,EAAA,EAOAC,GAAA,CAAAC,EAAAC,EAAAC,EAAAC,IAAA,CAME,IAAAC,EAAA,GASA,MAAA,CAAO,WARPH,EAAA,IAAA,CAAAI,EAAAC,IAAA,CACE,MAAAC,EAAA,WAAAF,EAAA,OAAAH,EAAA,eAAA,CAAA,EACAM,EAAAH,EAAA,OAAAH,EAAA,oBAAA,EACA,OAAAG,EAAA,OAAAF,IACEC,EAAAE,GAEFN,EAAA,IAAAO,EAAAC,CAAA,CAAiD,CAAA,EAGjD,eAAAJ,CACA,CAEJ,EAEOK,EAAAC,GACLA,EAAA,QAAA,EACEC,EAAA,EAAA,IAAA,EAAA,MAAA,EAEFD,EAAA,OAAkB,CAAAE,EAAAC,IAEd,CAAAD,GAAAC,EAAA,QAAAD,CAAA,EACEC,EAEFD,CACF,EAIJE,GAAA,CAAAC,EAAAd,IAAA,CAEE,GAAAc,EAAA,YAAA,MAAAA,EAAA,WAAA,QAAA,EAIE,MAAA,CAAO,CACL,EAAA,CAAAJ,IAAA,QAAA,EACsB,EAAA,CAAA,EAAA,EACb,KAAA,QACD,KAAA,CACA,MAAA,OACG,MAAA,CACA,EACT,WAAA,CAAA,EACa,UAAA,MACF,CACb,EAKJ,MAAAK,EAAAD,EAAA,WAAA,OAAqE,CAAAE,EAAAC,EAAAZ,IAAA,CAEjE,MAAAa,EAAAF,EACA,OAAAE,EAAAD,EAAA,OAAA,CAAA,IACEC,EAAAD,EAAA,OAAA,CAAA,EAAA,CAAA,GAEFC,EAAAD,EAAA,OAAA,CAAA,EAAA,KAAAjB,EAAAK,CAAA,CAAA,EACAW,CAAO,EACT,CAAA,CACC,EAwBH,OArBAF,EAAA,WAAA,IAAA,CAAAK,EAAAd,IAAA,CACE,MAAAe,EAAAD,EAAA,SACAE,EAAAhB,GAAAS,EAAA,eAEAQ,EADAP,EAAAK,CAAA,EACA,IAAAhB,GACEA,EAAA,KAAW,EAEb,MAAA,CAAO,EAAA,CAAAgB,EAAAA,EAAAA,CAAA,EACkE,EAAA,CAAA,EAAA,GAAA,CAAA,EAC1D,KAAA,QACP,KAAA,CACA,MAAAC,EAAA,QAAA,OAC6B,MAAAA,EAAA,EAAA,CACN,EAC7B,WAAA,CAAAC,EAAAA,EAAAA,CAAA,EAEmC,UAAA,MAExB,CACb,CAAA,CAGJ,EAEAC,GAAA,CAAAxB,EAAAyB,EAAAC,EAAAC,EAAA1B,EAAAC,IAAA,CAQE,MAAA0B,EAAAD,EAAA,IAAAE,GAEEA,EAAA,EAAA,CAAA,CAA8B,EAEhCC,EAAAH,EAAA,IAAAE,GAAA,CACE,MAAAN,EAAAM,EAAA,WAAA,CAAA,EACA,GAAAN,GAAAA,EAAA,OAAA,EAAA,CACE,MAAAQ,EAAAR,EAAA,OACAS,EAAA/B,GAAA,YAAAA,EAAA,OAAAI,GACEkB,EAAA,CAAA,GAAAlB,EAAA,OAEF,GAAA2B,GAAAA,EAAA,OAAA,EAAA,CACE,MAAA3B,EAAA2B,EAAA,CAAA,EACAzB,EAAA,WAAAF,EAAA,OAAAH,EAAA,eAAA,CAAA,EACA+B,EAAA5B,EAAA,OAAAH,EAAA,oBAAA,EAGAgC,EAAAH,EAAA,EAAA,IAAAA,CAAA,IAAA,GACA,MAAA,GAAAxB,CAAA,IAAA0B,CAAA,IAAAC,CAAA,EAA0C,CAC5C,CAEF,MAAA,EAAO,CAAA,EAGT,MAAA,CAAO,UAAA,UACM,SAAA,GACD,WAAA,GACE,MAAA,CACL,SAAA,GACK,eAAA,GACM,SAAA,GACN,SAAA,GACA,SAAAN,EACA,SAAAE,EACA,UAAA,GACC,EACb,MAAA,CAEO,MAAA,CAAA,EAAA,IAAA,EACU,SAAA,GACL,SAAA,GACA,SAAA,GACA,eAAA,EACM,EAClB,OAAA,CAEQ,CACN,KAAA,OACQ,GAAA9B,EAAA,SAAAyB,EAAA,KAAAzB,CAAA,EAAA,EAAA,EAAA,OAAA,EAC0C,GAAAyB,EAAA,IAAAA,EAAA,KAAAzB,CAAA,EAAA,CAAA,EAAA,OAAA,EACR,GAAA,IACpC,GAAA,IACA,UAAA0B,EACO,QAAA,GACF,KAAA,CACH,MAAA,CACG,CACT,CACF,EACF,OAAA,CACQ,EAAA,EACH,EAAA,EACA,EAAA,GACA,EAAA,EACA,CACL,CAGJ,EAUAS,EAAA,CAAA,CAAuB,MAAAT,EACrB,QAAAzB,EACA,OAAAC,EACA,QAAAkC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EACA,CAAAG,EAAAC,CAAA,EAAAJ,EAAA,SAAA,CAAA,EACAvC,EAAAW,IAGAiC,EAAAC,SAAA,IAAA,EACAtB,EAAAc,GAAA,YAAAA,EAAA,OAAA,GAAA,WAIAS,EAAA7C,GAAA,YAAAA,EAAA,OAAAI,GACEkB,GAAA,YAAAA,EAAA,SAAAlB,EAAA,QAEF0C,EAAAP,GAAA,YAAAA,EAAA,OAAA,GAAA,WAKAzB,EAAAiC,EAAAA,QAAA,IACEjD,GAAOC,EACLC,EACAC,GACA6C,GAAA,YAAAA,EAAA,QAAA,EAAAA,EAAA,CAAA,EAAA,MACqD,EACvD,CAAAA,EAAA9C,EAAAC,EAAAF,CAAA,CAAA,EAGFyB,EAAAhB,EAAAM,EAAA,UAAA,EAEAY,EAAAqB,EAAAA,QAAA,IACElC,GAAAC,EAAAd,CAAA,EAA6C,CAAAc,EAAAd,CAAA,CAAA,EAG/C,OAAAgD,EAAA,MAAA,CAAA,IAAAL,EAAA,MAAA,CAAA,MAAAR,CAAA,EAAA,SAAA,CAEIc,EAAAtD,GAAC,CAAA,MAAA,CAAA,MAAAwC,EAAA,OAAA,OAAA,EAE0C,KAAAT,EACnC,OAAAH,GAAAxB,EAAAyB,EAAAC,EAAAC,EAAA1B,EAAAC,CAAA,EAC4D,OAAA,CAAA,eAAA,EAAA,EAClC,iBAAA,GACd,QAAAiD,GAAA,CAEhBb,EAAAa,CAAA,EACAV,EAAA,MAAA,CAAuB,EACzB,cAAA,IAAA,CAIEE,EAAAD,EAAA,CAAA,CAAsB,EACxB,QAAAS,GAAA,CAEEV,EAAAU,CAAA,CAAuB,EACzB,UAAA,IAAA,CAEEV,EAAA,MAAA,CAAuB,CACzB,EAAA,QAAAf,CAAA,IAAAgB,CAAA,EApB6B,EAqB/BI,GAAAI,EAEEE,GAAC,CAAA,QAAA,IAAAd,EAAA,MAAA,EACuC,KAAA,CAAA,CAAAQ,GAAAA,EAAA,OAAA,EACQ,SAAAA,EAAA,IAAAzC,GAG5C6C,EACEG,GAAC,CAAA,KAAAhD,EAAA,OAEW,OAAAH,EACV,uBAAA,EACwB,EAAAG,EAAA,KAHf,CAIX,CAEH,CAAA,CACH,CAAA,CAAA,CAIR,gqBCjRA,MAAAiD,EAAA,CAAA,CAAA,MAAA5B,EAAA,UAAA6B,KACEN,EAAAO,EAAA,CAAA,GAAA,CAAA,QAAA,OAAA,WAAA,SAAA,IAAA,KAAA,EAAA,SAAA,CAEIN,EAAAM,EAAC,CAAA,GAAA,CACK,gBAAA9B,EACe,MAAA,OACV,OAAA,MACC,CACV,CAAA,EACFwB,EAAAO,EAAA,CAAA,QAAA,QAAA,SAAAF,GAAA,YAAAA,EAAA,cAAA,CACsD,CAAA,CAAA,sTCHrD,MAAAG,EAAA,CAAA,CAAqC,IAAAC,EAC1C,kBAAAC,EAAA,CAAA,EACqB,QAAAC,EACrB,WAAAC,CAEF,IAAA,SACE,MAAAC,EAAAC,EAAAL,CAAA,EAEAM,EAAAC,EAAA,CAAoD,SAAAH,EACxC,MAAA,CACH,IAAA,wCAAAA,CAAA,8EACqD,kBAAAH,CAC1D,EACF,SAAAO,EACU,aAAA,yDACI,CAAA,EAGhB,CAAA,KAAAC,EAAA,UAAAC,CAAA,EAAAJ,EACAjC,GAAAsC,GAAA7E,EAAA2E,GAAA,YAAAA,EAAA,cAAA,YAAA3E,EAAA,eAAA,YAAA6E,EAAA,KACAC,EAAAvC,GAAAA,EAAA,OAAA,EAAAA,EAAA,CAAA,EAAA,OAAA,CAAA,EAAA,OAKA,OAJA6B,GAAA,MAAAU,GAAA,MACET,EAAAS,CAAA,EAGFF,GAAA,CAAArC,GAAAA,EAAA,OAAA,EACEkB,EAAAsB,EAAA,CAAA,CAAA,EAGFtB,EAAAM,EAAA,CAAA,SAAAP,EAAAwB,GAAA,CAAA,SAAA,CAGMvB,EAAAwB,GAAA,CAAA,SAAA,SAAA,CAAA,EAAmBxB,EACnByB,GAAC,CAAA,GAAA,CAAA,WAAA,MAAA,aAAA,KAAA,EAC8C,MAAAd,EACtC,MAAA,UACD,SAAAe,GAAA,CAEJd,EAAAc,EAAA,OAAA,KAAA,CAA6B,EAC/B,SAAA5C,GAAA,YAAAA,EAAA,IAAA3B,GAAA,CAGE,MAAAwE,EAAAxE,EAAA,OAAA,CAAA,EACA,OAAA6C,EAAA4B,GAAA,CAAA,MAAAD,EAAA,SAAAA,GAAAA,CAAA,CAGE,EAEH,CAAA,CACH,CAAA,CAAA,CAAA,CAAA,CAIR,4kBClDA,MAAME,GAAoBC,GAA4B,CAC9C,KAAA,CAACC,EAAYC,CAAa,EAAI3C,EAAA,SAAS,CAAE,MAAO,EAAG,OAAQ,CAAA,CAAG,EACpE4C,OAAAA,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAe,IAAM,CACzB,GAAIJ,EAAI,QAAS,CACT,MAAAK,EAAeL,EAAI,QAAQ,sBAAsB,EACjD,CAAE,MAAAM,EAAO,OAAAC,CAAW,EAAAF,EACpBG,EAAW,KAAK,MAAMF,CAAK,EAC3BG,EAAY,KAAK,MAAMF,CAAM,GAC/BN,EAAW,OAASO,GAAYP,EAAW,QAAUQ,IACvDP,EAAc,CAAE,MAAOM,EAAU,OAAQC,CAAW,CAAA,CACxD,CAAA,EAIW,OAAAL,IAGN,OAAA,iBAAiB,SAAUA,CAAY,EAEvC,IAAM,CACJ,OAAA,oBAAoB,SAAUA,CAAY,CAAA,CACnD,EACC,CAACH,EAAW,OAAQA,EAAW,MAAOD,CAAG,CAAC,EACtCC,CACT,ECnBA3F,GAAA,mBACAoG,GAAA,kBACAC,GAAA,uBACAC,GAAA,2BACAC,GAAA,kBACAC,GAAA,kBACAC,GAAA,YACAC,GAAA,MAUOC,EAAA,CAAA,CAAsB,IAAAtC,EAC3B,aAAAuC,EACA,YAAAC,EACA,eAAA5B,EACA,MAAA6B,EACA,SAAAC,CAEF,IAAA,CAEE,MAAAtC,EAAAC,EAAAL,CAAA,EACA,CAAAE,EAAAC,CAAA,EAAAvB,EAAA,SAA8BgC,CAC5B,EAEF+B,EAAAC,EAAAA,YACAtB,EAAAF,GAAAuB,CAAA,EACAE,EAAAC,GAAA,OAAAP,EAAAC,CAAA,GAAA,GAEAO,EAAA7C,EAAA,CACI,WAAA,UACc,aAAA,2EAEV,OAAA,CAAAA,CAAA,EACc,SAAA8C,GAAA,GACmB,EAAA,OAGzC/C,EAAA,CAAA,GAAA4C,CAAA,EACAE,GACE9C,EAAA,KAAA8C,CAAA,EAEF,MAAAzC,EAAAC,EAAwB,CACtB,SAAAH,EACY,MAAA,CACH,IAAA,GAAAJ,CAAA,qCACM,KAAA,CACL,CACJ,OAAA,kBACU,UAAA,KACG,CACb,EACF,kBAAAC,CACA,EACF,SAAAO,EAEU,aAAA,yDACI,EAChB,CACA,QAAA,CAAA,CAAAN,CACa,CACb,EAGF,CAAA,KAAA+C,EAAA,UAAAvC,CAAA,EAAAJ,EAGA4C,EAAA7D,EAAAA,QAAA,IAAA,OACE,GAAAa,EAOE,OANApE,EAAAF,EAAA,cAAA,YAAAE,EAAA,aAAA,KAAA,OACkEY,GAE5DA,EAAA,OAAAb,EAAA,GAAAqE,EAIM,EAAA,CAAAA,CAAA,CAAA,EAGhB,GAAAQ,EACE,OAAAnB,EAAA4D,GAAA,CAAA,CAAA,EAEF,MAAAC,EAAAC,EAA8B1H,GAC5BsH,CACA,EAEFK,EAAAD,EAA6BtB,GAC3BkB,CACA,EAEFM,EAAAF,EAAiCrB,GAC/BiB,CACA,EAEFO,EAAAH,EAAsCpB,GACpCgB,CACA,EAEFQ,EAAAJ,EAA6BnB,GAC3Be,CACA,EAEFS,EAAAL,EAA4BhB,GAC1BY,CACA,EAGFU,EAAAN,EAA6BlB,GAC3Bc,CACA,EAEFW,EAAAP,EAA6BjB,GAC3Ba,CACA,EAGF1G,EAAA,CAAsC,yBAAAiH,EACV,UAAAI,EACf,gBAAAD,EACM,gBAAAF,EACA,gBAAAH,EACA,qBAAAC,EACK,IAAAG,CACjB,EAGPjF,GAAA6C,EAAA,OAAA4B,EAAA5B,EAAA,MAAA4B,EAAA,OAAA,EAEAW,GAAAX,GAAA,YAAAA,EAAA,IAAA,IAAA,QAAA,KAAA,KAEA,OAAA5D,EAAAuB,EAAA,CAAA,SAAA,CAEKX,GAAAZ,EAAAuB,EAAA,CAAA,SAAA,CAEI4B,GAAAlD,EAAAO,EAAA,CAAA,QAAA,KAAA,SAAA2C,EAAA,EAAyCC,GAAAnD,EAAAO,EAAA,CAAA,QAAA,cAAA,GAAA,CAAA,OAAA,UAAA,EAAA,SAAA4C,CAAA,CAAA,CAIxC,EAAA,EAEJpD,EAAAO,EAAA,CAAA,SAAA,CAGAP,EAAAO,EAAA,CAAA,GAAA,CAAA,QAAA,OAAA,eAAA,eAAA,EAAA,SAAA,CAEEN,EAAAM,EAAA,CAAA,SAAA,CAAAe,GAAArB,EAEIQ,EAAC,CAAA,WAAAI,EACC,QAAAD,EACA,IAAAF,EACA,kBAAA6C,CACmB,CAAA,EAAA,EAGzBK,GAAA3D,EAGEM,EAAC,CAAA,GAAA,CAAA,QAAA,OAAA,eAAA,WAAA,IAAA,MAAA,EACgE,SAAAqD,EAAA,IAAA,CAAAY,EAAAnH,IAAA,CAG7D,KAAA,CAAA,aAAAoH,CAAA,EAAAC,EAAArH,EAAA,CAAA,EACA,OAAA4C,EACEI,EAAC,CAAA,MAAAoE,EAAA,CAAA,EAEsB,UAAAD,EAAA,OAAA9H,CAAA,CAC2B,EAAA8H,EAAA,KAFlC,CAGhB,CAAA,CAEH,CAAA,CACH,EAAA,EAEJ5D,GAAAgD,GAAA3D,EAAA,MAAA,CAAA,IAAAoD,EAAA,SAAApD,EAIIM,EAAC,CAAA,GAAA,CACK,QAAA,cACO,oBAAAgE,GACT,SAAAvC,EAAA,MACqB,SAAAA,EAAA,KACA,EACvB,UAAA,2BACU,SAAA4B,EAAA,IAAA,CAAAY,EAAAnH,IAAA,OAGR,KAAA,CAAA,aAAAoH,CAAA,EAAAC,EAAArH,EAAA,CAAA,EACAsH,GAAAnI,EAAAmH,GAAA,YAAAA,EAAA,cAAA,YAAAnH,EAAA,aAAA,KAAA,OAAAY,IAEIA,GAAA,OAAA0G,CAAA,GAAAU,EAAA,OAAA9H,CAAA,GAMJ,OAAAiI,EAAA1E,EACEf,EAAC,CAAA,KAAAsF,EAAA,OAAA9H,CAAA,EAE4C,MAAA+H,EAAA,CAAA,EACtB,QAAAE,EACZ,OAAA1H,EACT,QAAAkC,EACA,EAAAqF,EAAA,KALc,EAAAvE,EAAAsB,EAAA,CAAA,CAAA,CAQd,CAAA,CAEL,CAAA,EAAA,CAEL,EAAA,CAEJ,CAAA,CAAA,CAGN,EAEOsC,GAAA,IACL7D,EAAAO,EAAA,CAAA,SAAA,CAEIP,EAAAO,EAAA,CAAA,GAAA,CAAA,QAAA,OAAA,eAAA,WAAA,IAAA,MAAA,EAAA,SAAA,CACEN,EAAA2E,EAAA,CAAA,OAAA,OAAA,MAAA,OAAA,EAAqC3E,EAAA2E,EAAA,CAAA,OAAA,OAAA,MAAA,OAAA,CACA,EAAA,EACvC3E,EAAAM,EAAA,CAAA,GAAA,CAAA,QAAA,MAAA,EAAA,SAAAN,EAAA2E,EAAA,CAAA,OAAA,QAAA,MAAA,MAAA,CAAA,EAAA,CAGA,CAAA,CAAA"}