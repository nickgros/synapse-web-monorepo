{"version":3,"file":"useEntity-87581b86.js","sources":["../../../../node_modules/.pnpm/react-query@3.39.3_react-dom@18.2.0_react@18.2.0/node_modules/react-query/es/core/queriesObserver.js","../../../../node_modules/.pnpm/react-query@3.39.3_react-dom@18.2.0_react@18.2.0/node_modules/react-query/es/react/useQueries.js","../../src/utils/functions/IsEqualTreatUndefinedAsMissing.ts","../../src/utils/functions/TableColumnSchemaUtils.ts","../../src/synapse-queries/QueryClientUtils.ts","../../src/synapse-queries/entity/useEntity.ts"],"sourcesContent":["import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { difference, replaceAt } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { QueryObserver } from './queryObserver';\nimport { Subscribable } from './subscribable';\nexport var QueriesObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueriesObserver, _Subscribable);\n\n  function QueriesObserver(client, queries) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.queries = [];\n    _this.result = [];\n    _this.observers = [];\n    _this.observersMap = {};\n\n    if (queries) {\n      _this.setQueries(queries);\n    }\n\n    return _this;\n  }\n\n  var _proto = QueriesObserver.prototype;\n\n  _proto.onSubscribe = function onSubscribe() {\n    var _this2 = this;\n\n    if (this.listeners.length === 1) {\n      this.observers.forEach(function (observer) {\n        observer.subscribe(function (result) {\n          _this2.onUpdate(observer, result);\n        });\n      });\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.observers.forEach(function (observer) {\n      observer.destroy();\n    });\n  };\n\n  _proto.setQueries = function setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    this.updateObservers(notifyOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.result;\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(function (match) {\n      return match.observer.getOptimisticResult(match.defaultedQueryOptions);\n    });\n  };\n\n  _proto.findMatchingObservers = function findMatchingObservers(queries) {\n    var _this3 = this;\n\n    var prevObservers = this.observers;\n    var defaultedQueryOptions = queries.map(function (options) {\n      return _this3.client.defaultQueryObserverOptions(options);\n    });\n    var matchingObservers = defaultedQueryOptions.flatMap(function (defaultedOptions) {\n      var match = prevObservers.find(function (observer) {\n        return observer.options.queryHash === defaultedOptions.queryHash;\n      });\n\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n\n      return [];\n    });\n    var matchedQueryHashes = matchingObservers.map(function (match) {\n      return match.defaultedQueryOptions.queryHash;\n    });\n    var unmatchedQueries = defaultedQueryOptions.filter(function (defaultedOptions) {\n      return !matchedQueryHashes.includes(defaultedOptions.queryHash);\n    });\n    var unmatchedObservers = prevObservers.filter(function (prevObserver) {\n      return !matchingObservers.some(function (match) {\n        return match.observer === prevObserver;\n      });\n    });\n    var newOrReusedObservers = unmatchedQueries.map(function (options, index) {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        var previouslyUsedObserver = unmatchedObservers[index];\n\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n\n      return {\n        defaultedQueryOptions: options,\n        observer: _this3.getObserver(options)\n      };\n    });\n\n    var sortMatchesByOrderOfQueries = function sortMatchesByOrderOfQueries(a, b) {\n      return defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n    };\n\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  };\n\n  _proto.getObserver = function getObserver(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var currentObserver = this.observersMap[defaultedOptions.queryHash];\n    return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n  };\n\n  _proto.updateObservers = function updateObservers(notifyOptions) {\n    var _this4 = this;\n\n    notifyManager.batch(function () {\n      var prevObservers = _this4.observers;\n\n      var newObserverMatches = _this4.findMatchingObservers(_this4.queries); // set options for the new observers to notify of changes\n\n\n      newObserverMatches.forEach(function (match) {\n        return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n      });\n      var newObservers = newObserverMatches.map(function (match) {\n        return match.observer;\n      });\n      var newObserversMap = Object.fromEntries(newObservers.map(function (observer) {\n        return [observer.options.queryHash, observer];\n      }));\n      var newResult = newObservers.map(function (observer) {\n        return observer.getCurrentResult();\n      });\n      var hasIndexChange = newObservers.some(function (observer, index) {\n        return observer !== prevObservers[index];\n      });\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n\n      _this4.observers = newObservers;\n      _this4.observersMap = newObserversMap;\n      _this4.result = newResult;\n\n      if (!_this4.hasListeners()) {\n        return;\n      }\n\n      difference(prevObservers, newObservers).forEach(function (observer) {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(function (observer) {\n        observer.subscribe(function (result) {\n          _this4.onUpdate(observer, result);\n        });\n      });\n\n      _this4.notify();\n    });\n  };\n\n  _proto.onUpdate = function onUpdate(observer, result) {\n    var index = this.observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  };\n\n  _proto.notify = function notify() {\n    var _this5 = this;\n\n    notifyManager.batch(function () {\n      _this5.listeners.forEach(function (listener) {\n        listener(_this5.result);\n      });\n    });\n  };\n\n  return QueriesObserver;\n}(Subscribable);","import React, { useMemo } from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { QueriesObserver } from '../core/queriesObserver';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useQueries(queries) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var defaultedQueries = useMemo(function () {\n    return queries.map(function (options) {\n      var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n      defaultedOptions.optimisticResults = true;\n      return defaultedOptions;\n    });\n  }, [queries, queryClient]);\n\n  var _React$useState2 = React.useState(function () {\n    return new QueriesObserver(queryClient, defaultedQueries);\n  }),\n      observer = _React$useState2[0];\n\n  var result = observer.getOptimisticResult(defaultedQueries);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [observer]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries, observer]);\n  return result;\n}","/* eslint-disable @typescript-eslint/no-explicit-any */\n// `any` is safe for these comparison functions\nimport { isArray, isObject, includes, isEqualWith, omitBy } from 'lodash-es'\n\nconst comparisonFunc = (a: any, b: any): boolean | undefined => {\n  if (isArray(a) || isArray(b)) return\n  if (!isObject(a) || !isObject(b)) return\n\n  if (!includes<any>(a, undefined) && !includes<any>(b, undefined)) return\n\n  // Call recursively, after filtering all undefined properties\n  return isEqualWith(\n    omitBy(a, value => value === undefined),\n    omitBy(b, value => value === undefined),\n    comparisonFunc,\n  )\n}\n\n/**\n * A version of lodash's isEqual that treats undefined and missing as equal.\n *\n * Note: `null` and missing/undefined are not considered equal in this implementation\n */\nexport function isEqualTreatUndefinedAsMissing(a: any, b: any): boolean {\n  /* implementation lifted from https://stackoverflow.com/a/57894104 */\n  return isEqualWith(a, b, comparisonFunc)\n}\n","import {\n  ColumnChange,\n  ColumnModel,\n  TableUpdateTransactionRequest,\n} from '@sage-bionetworks/synapse-types'\nimport { SetOptional } from 'type-fest'\nimport { createColumnModels } from '../../synapse-client'\nimport { isEqualTreatUndefinedAsMissing } from './IsEqualTreatUndefinedAsMissing'\n\nfunction validateProposedSchema(\n  oldSchema: ColumnModel[],\n  proposedSchema: SetOptional<ColumnModel, 'id'>[],\n): void {\n  // If the proposed schema contains any IDs that are not in the old schema, throw an error\n  // We do this so we can accurately track updates to existing columns by using the ID that is already present\n  const oldColumnModelIds: Set<string> = new Set()\n  for (const columnModel of oldSchema) {\n    oldColumnModelIds.add(columnModel.id)\n  }\n  for (const columnModel of proposedSchema) {\n    if (columnModel.id != null && !oldColumnModelIds.has(columnModel.id)) {\n      throw new Error(\n        `Proposed schema contains a new column model with ID ${columnModel.id} that is not in the old schema.`,\n      )\n    }\n  }\n}\n\n/**\n * Creates the column models for a change request and returns the change request to be passed to the Synapse backend.\n *\n * Note that to update a column model and preserve table data, the ID of the column in the oldSchema should be the same as the column ID in the proposedSchema.\n * @param accessToken the Synapse access token\n * @param tableId the ID of the table to change\n * @param oldSchema the current schema of the table\n * @param proposedSchema the proposed schema of the table. For TableEntities, the IDs should be preserved for columns\n *                       that should maintain their data, even if the column model has changed\n */\nexport async function createTableUpdateTransactionRequest(\n  accessToken: string,\n  tableId: string,\n  oldSchema: ColumnModel[],\n  proposedSchema: SetOptional<ColumnModel, 'id'>[],\n): Promise<TableUpdateTransactionRequest> {\n  validateProposedSchema(oldSchema, proposedSchema)\n\n  // Keep track of the old column models by ID\n  const oldColumnModelId2Model: Map<string, ColumnModel> = new Map()\n  for (const columnModel of oldSchema) {\n    oldColumnModelId2Model.set(columnModel.id, columnModel)\n  }\n\n  // Create the new column models.\n  // The newSchema will match the proposed schema, but column models that have been changed will end up getting a new ID\n  let newSchema: SetOptional<ColumnModel, 'id'>[] = []\n  for (const m of proposedSchema) {\n    const copy: SetOptional<ColumnModel, 'id'> = {\n      ...m,\n    }\n    if (copy.id != null) {\n      // If there are any changes to the existing column model, remove the ID before we create the new one\n      const oldColumnModel: ColumnModel | undefined =\n        oldColumnModelId2Model.get(copy.id)\n      if (\n        oldColumnModel != undefined &&\n        !isEqualTreatUndefinedAsMissing(oldColumnModel, copy)\n      ) {\n        delete copy.id\n      }\n    }\n    newSchema.push(copy)\n  }\n  const createdColumnModels = (await createColumnModels(accessToken, newSchema))\n    .list\n\n  // now that all columns have been created, figure out the column changes (create, update, and no-op)\n  const changes: ColumnChange[] = []\n  // We have to provide the backend with the set of columns to remove from the table schema.\n  // Keep track of the column IDs that were modified or added to make it easier to determine this set.\n  const columnIdsThatShouldNotBeRemovedFromSchema: Set<string> = new Set()\n  for (let i = 0; i < proposedSchema.length; i++) {\n    const columnIdInProposedSchema: string | null = proposedSchema[i].id ?? null\n    const newColumnId: string = createdColumnModels[i].id\n    if (columnIdInProposedSchema != null) {\n      // This column was modified, so it should not be removed from the schema\n      columnIdsThatShouldNotBeRemovedFromSchema.add(columnIdInProposedSchema)\n    }\n    columnIdsThatShouldNotBeRemovedFromSchema.add(newColumnId)\n    if (\n      columnIdInProposedSchema != null &&\n      columnIdInProposedSchema !== newColumnId\n    ) {\n      // The column has changed\n      changes.push({ oldColumnId: columnIdInProposedSchema, newColumnId })\n    } else if (columnIdInProposedSchema == null) {\n      // the column is new to the table\n      changes.push({ oldColumnId: null, newColumnId })\n    }\n    // Otherwise, the column was in the old schema and was not modified. No change is needed.\n  }\n\n  // delete columns that were not updated, added, or unchanged in the table schema\n  for (const oldColumnModel of oldSchema) {\n    const oldColumnId: string | null = oldColumnModel.id\n    if (!columnIdsThatShouldNotBeRemovedFromSchema.has(oldColumnId)) {\n      changes.push({ oldColumnId, newColumnId: null })\n    }\n  }\n\n  return {\n    concreteType:\n      'org.sagebionetworks.repo.model.table.TableUpdateTransactionRequest',\n    entityId: tableId,\n    changes: [\n      {\n        concreteType:\n          'org.sagebionetworks.repo.model.table.TableSchemaChangeRequest',\n        entityId: tableId,\n        changes: changes,\n        orderedColumnIds: createdColumnModels.map(cm => cm.id),\n      },\n    ],\n  }\n}\n","import { QueryClient } from 'react-query'\nimport { KeyFactory } from './KeyFactory'\n\n/**\n * Invalidate all queries for the given entity.\n * @param queryClient\n * @param keyFactory\n * @param id\n */\nexport function invalidateAllQueriesForEntity(\n  queryClient: QueryClient,\n  keyFactory: KeyFactory,\n  id: string,\n) {\n  // TODO: Figure out how to handle cases where the change can affect other entities.\n  // Some examples:\n  //  - deleting an entity should invalidate the parent's children\n  //  - moving an entity should invalidate the old and new parent's children\n  return queryClient.invalidateQueries(keyFactory.getEntityQueryKey(id))\n}\n","/*\n * Hooks to access Entity Services in Synapse\n */\n\nimport { omit, pick } from 'lodash-es'\nimport { useMemo } from 'react'\nimport {\n  QueryFunctionContext,\n  QueryKey,\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQueries,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { entityJsonKeys } from '../../utils/functions/EntityTypeUtils'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  AccessControlList,\n  ColumnModel,\n  Entity,\n  EntityHeader,\n  EntityId,\n  EntityJson,\n  EntityPath,\n  Evaluation,\n  GetEvaluationParameters,\n  PaginatedResults,\n  UserEntityPermissions,\n  VersionInfo,\n} from '@sage-bionetworks/synapse-types'\nimport { invalidateAllQueriesForEntity } from '../QueryClientUtils'\nimport { createTableUpdateTransactionRequest } from '../../utils'\nimport { SetOptional } from 'type-fest'\nimport { getNextPageParamForPaginatedResults } from '../InfiniteQueryUtils'\n\nexport function useGetEntity<T extends Entity>(\n  entityId: string,\n  versionNumber?: string | number,\n  options?: UseQueryOptions<T, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<T, SynapseClientError>(\n    keyFactory.getEntityVersionQueryKey(entityId, versionNumber),\n    () =>\n      SynapseClient.getEntity<T>(\n        accessToken,\n        entityId,\n        versionNumber?.toString(),\n      ),\n    options,\n  )\n}\n\nexport function useGetEntities(\n  entityHeaders: Pick<EntityHeader, 'id' | 'versionNumber'>[],\n  options?: UseQueryOptions<Entity[], SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const headerIds = entityHeaders.map(header => header.id).join()\n  const queries = useMemo(\n    () =>\n      entityHeaders.map(header => {\n        return {\n          queryKey: keyFactory.getEntityVersionQueryKey(\n            header.id,\n            header.versionNumber,\n          ),\n          queryFn: () =>\n            SynapseClient.getEntity(\n              accessToken,\n              header.id,\n              header.versionNumber,\n            ),\n        }\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [headerIds],\n  )\n  const results = useQueries(queries)\n  const isLoading = results.some(result => result.isLoading)\n  const entities: Entity[] = results\n    .filter(query => query.data !== undefined)\n    .map(query => query.data!)\n  return useMemo(() => {\n    // @ts-ignore\n    if (!isLoading && options?.onSuccess) options.onSuccess(entities)\n    return { isLoading, data: entities }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isLoading, headerIds])\n}\n\nexport function useCreateEntity(\n  options?: UseMutationOptions<\n    Entity,\n    SynapseClientError,\n    Pick<Entity, 'name' | 'description' | 'parentId' | 'concreteType'>\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<\n    Entity,\n    SynapseClientError,\n    Pick<Entity, 'name' | 'description' | 'parentId' | 'concreteType'>\n  >((entity: Entity) => SynapseClient.createEntity(entity, accessToken), {\n    onSuccess: async (newEntity, variables, ctx) => {\n      await invalidateAllQueriesForEntity(\n        queryClient,\n        keyFactory,\n        newEntity.id!,\n      )\n      queryClient.setQueryData(\n        keyFactory.getEntityQueryKey(newEntity.id!),\n        newEntity,\n      )\n\n      if (options?.onSuccess) {\n        await options.onSuccess(newEntity, variables, ctx)\n      }\n    },\n  })\n}\n\nexport function useUpdateEntity<T extends Entity>(\n  options?: UseMutationOptions<T, SynapseClientError, T>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<T, SynapseClientError, T>(\n    (entity: T) => SynapseClient.updateEntity<T>(entity, accessToken),\n    {\n      ...options,\n      onSuccess: async (updatedEntity, variables, ctx) => {\n        await invalidateAllQueriesForEntity(\n          queryClient,\n          keyFactory,\n          updatedEntity.id!,\n        )\n        queryClient.setQueryData(\n          keyFactory.getEntityQueryKey(updatedEntity.id!),\n          updatedEntity,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedEntity, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useDeleteEntity(\n  options?: UseMutationOptions<void, SynapseClientError, string>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, string>(\n    (entityId: string) => SynapseClient.deleteEntity(accessToken, entityId),\n    {\n      ...options,\n      onSuccess: async (voidReturn, entityId, ctx) => {\n        await invalidateAllQueriesForEntity(queryClient, keyFactory, entityId)\n        if (options?.onSuccess) {\n          await options.onSuccess(voidReturn, entityId, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetVersions(\n  entityId: string,\n  offset: number = 0,\n  limit: number = 200,\n  options?: UseQueryOptions<PaginatedResults<VersionInfo>, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<PaginatedResults<VersionInfo>, SynapseClientError>(\n    keyFactory.getPaginatedEntityVersionsQueryKey(entityId, limit, offset),\n    () => SynapseClient.getEntityVersions(entityId, accessToken, offset, limit),\n    options,\n  )\n}\n\nexport function useGetVersionsInfinite(\n  entityId: string,\n  options: UseInfiniteQueryOptions<\n    PaginatedResults<VersionInfo>,\n    SynapseClientError\n  >,\n) {\n  const LIMIT = 200\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<PaginatedResults<VersionInfo>, SynapseClientError>(\n    keyFactory.getEntityVersionsQueryKey(entityId),\n    async (context: QueryFunctionContext<QueryKey, number>) => {\n      return await SynapseClient.getEntityVersions(\n        entityId,\n        accessToken,\n        context.pageParam,\n        LIMIT,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: getNextPageParamForPaginatedResults,\n    },\n  )\n}\n\nexport function getStandardEntityFields(json: EntityJson): EntityJson {\n  return pick(json, entityJsonKeys[json.concreteType]) as EntityJson\n}\n\nexport function removeStandardEntityFields(\n  json: EntityJson,\n): Record<\n  string,\n  string | number | boolean | string[] | number[] | boolean[] | undefined\n> {\n  return omit(json, entityJsonKeys[json.concreteType])\n}\n\n/**\n * In addition to the standard objects returned by {@link useQuery}, this hook also returns the following objects:\n * - `entityMetadata`: the standard entity fields contained in the JSON response\n * - `annotations`: the annotations contained in the JSON response\n *\n * The union of these objects would be equal in value to the `data` object.\n */\nexport function useGetJson(\n  entityId: string,\n  includeDerivedAnnotations: boolean,\n  options?: UseQueryOptions<EntityJson, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const query = useQuery<EntityJson, SynapseClientError>(\n    keyFactory.getEntityJsonQueryKey(entityId, includeDerivedAnnotations),\n    () =>\n      SynapseClient.getEntityJson(\n        entityId,\n        includeDerivedAnnotations,\n        accessToken,\n      ),\n    options,\n  )\n\n  // Separate the standard fields and annotations.\n  const entityMetadata = useMemo(\n    () =>\n      query?.data == undefined\n        ? undefined\n        : getStandardEntityFields(query.data),\n    [query.data],\n  )\n\n  const annotations = useMemo(\n    () =>\n      query?.data == undefined\n        ? undefined\n        : removeStandardEntityFields(query.data),\n    [query.data],\n  )\n\n  return {\n    ...query,\n    entityMetadata,\n    annotations,\n  }\n}\n\nexport function useUpdateViaJson(\n  options?: UseMutationOptions<EntityJson, SynapseClientError, EntityJson>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useMutation<EntityJson, SynapseClientError, EntityJson>(\n    (json: EntityJson) => {\n      const entityId = json.id\n      return SynapseClient.updateEntityJson(entityId, json, accessToken)\n    },\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        const entityId = data.id\n\n        await invalidateAllQueriesForEntity(queryClient, keyFactory, entityId)\n        queryClient.setQueryData(\n          // This annotation data will never include derived annotations, which are calculated by the backend asynchronously\n          keyFactory.getEntityJsonQueryKey(entityId, false),\n          data,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetEntityPath(\n  entityId: string,\n  options?: UseQueryOptions<EntityPath, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<EntityPath, SynapseClientError>(\n    keyFactory.getEntityPathQueryKey(entityId),\n    () => SynapseClient.getEntityPath(entityId, accessToken),\n    options,\n  )\n}\n\nexport function useGetEntityACL(\n  entityId: string,\n  options?: UseQueryOptions<AccessControlList, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<AccessControlList, SynapseClientError>(\n    keyFactory.getEntityPathQueryKey(entityId),\n    () => SynapseClient.getEntityACL(entityId, accessToken),\n    options,\n  )\n}\n\nexport function useGetEntityAlias(\n  alias: string,\n  options?: UseQueryOptions<EntityId | null, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<EntityId | null, SynapseClientError>(\n    keyFactory.getEntityAliasQueryKey(alias),\n    () => SynapseClient.getEntityAlias(alias, accessToken),\n    options,\n  )\n}\n\nexport function useGetEntityEvaluations(\n  entityId: string,\n  params?: GetEvaluationParameters,\n  options?: UseQueryOptions<Evaluation[] | null, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<Evaluation[] | null, SynapseClientError>(\n    keyFactory.getEntityEvaluationsQueryKey(entityId),\n    () => SynapseClient.getAllEntityEvaluations(entityId, params, accessToken),\n    options,\n  )\n}\n\nexport function useGetEntityPermissions(\n  entityId: string,\n  options?: UseQueryOptions<UserEntityPermissions | null, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<UserEntityPermissions | null, SynapseClientError>(\n    keyFactory.getEntityAliasQueryKey(entityId),\n    () => SynapseClient.getEntityPermissions(entityId, accessToken),\n    options,\n  )\n}\n\nexport function useUpdateEntityACL(\n  options?: UseMutationOptions<\n    AccessControlList,\n    SynapseClientError,\n    AccessControlList\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<AccessControlList, SynapseClientError, AccessControlList>(\n    (acl: AccessControlList) => SynapseClient.updateEntityACL(acl, accessToken),\n    {\n      ...options,\n      onSuccess: async (updatedACL: AccessControlList, variables, ctx) => {\n        await invalidateAllQueriesForEntity(\n          queryClient,\n          keyFactory,\n          updatedACL.id,\n        )\n        queryClient.setQueryData(\n          keyFactory.getEntityACLQueryKey(updatedACL.id),\n          updatedACL,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedACL, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\ntype UpdateTableMutationRequest = {\n  entityId: string\n  originalColumnModels: ColumnModel[]\n  newColumnModels: SetOptional<ColumnModel, 'id'>[]\n}\n\nexport function useUpdateTableColumns(\n  options?: UseMutationOptions<\n    unknown,\n    SynapseClientError,\n    UpdateTableMutationRequest\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<unknown, SynapseClientError, UpdateTableMutationRequest>(\n    async (request: UpdateTableMutationRequest) => {\n      // This call will create new column models as appropriate\n      const transactionRequest = await createTableUpdateTransactionRequest(\n        accessToken!,\n        request.entityId,\n        request.originalColumnModels,\n        request.newColumnModels,\n      )\n\n      return SynapseClient.updateTable(transactionRequest, accessToken)\n    },\n    {\n      ...options,\n      onSuccess: async (response, variables, ctx) => {\n        await invalidateAllQueriesForEntity(\n          queryClient,\n          keyFactory,\n          variables.entityId,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(response, variables, ctx)\n        }\n      },\n    },\n  )\n}\n"],"names":["QueriesObserver","_Subscribable","_inheritsLoose","client","queries","_this","_proto","_this2","observer","result","notifyOptions","match","_this3","prevObservers","defaultedQueryOptions","options","matchingObservers","defaultedOptions","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","newOrReusedObservers","index","previouslyUsedObserver","sortMatchesByOrderOfQueries","a","b","currentObserver","QueryObserver","_this4","notifyManager","newObserverMatches","newObservers","newObserversMap","newResult","hasIndexChange","difference","replaceAt","_this5","listener","Subscribable","useQueries","mountedRef","React","_React$useState","forceUpdate","queryClient","useQueryClient","defaultedQueries","useMemo","_React$useState2","unsubscribe","x","comparisonFunc","isArray","isObject","includes","isEqualWith","omitBy","value","isEqualTreatUndefinedAsMissing","validateProposedSchema","oldSchema","proposedSchema","oldColumnModelIds","columnModel","createTableUpdateTransactionRequest","accessToken","tableId","oldColumnModelId2Model","newSchema","m","copy","oldColumnModel","createdColumnModels","createColumnModels","changes","columnIdsThatShouldNotBeRemovedFromSchema","columnIdInProposedSchema","newColumnId","oldColumnId","cm","invalidateAllQueriesForEntity","keyFactory","id","useGetEntity","entityId","versionNumber","useSynapseContext","useQuery","SynapseClient","useGetEntities","entityHeaders","headerIds","header","results","isLoading","entities","query","useCreateEntity","useMutation","entity","newEntity","variables","ctx","useUpdateEntity","updatedEntity","useDeleteEntity","voidReturn","useGetVersionsInfinite","useInfiniteQuery","context","getNextPageParamForPaginatedResults","getStandardEntityFields","json","pick","entityJsonKeys","removeStandardEntityFields","omit","useGetJson","includeDerivedAnnotations","entityMetadata","annotations","useUpdateViaJson","data","useGetEntityPath","useGetEntityACL","useGetEntityAlias","alias","useGetEntityEvaluations","params","useGetEntityPermissions","useUpdateEntityACL","acl","updatedACL","useUpdateTableColumns","request","transactionRequest","response"],"mappings":"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","x_google_ignoreList":[0,1]}