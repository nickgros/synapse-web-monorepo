{"version":3,"file":"UserSearchBoxV2-222fa30d.js","sources":["../../src/lib/containers/UserSearchBoxV2.tsx"],"sourcesContent":["import { Skeleton } from '@mui/material'\nimport React, { useMemo, useState } from 'react'\nimport Select, {\n  components,\n  GroupBase,\n  SelectComponentsConfig,\n} from 'react-select'\nimport { useSearchUserGroupHeaders } from '../utils/hooks/SynapseAPI'\nimport { useDebouncedEffect } from '../utils/hooks/useDebouncedEffect'\nimport useGetInfoFromIds from '../utils/hooks/useGetInfoFromIds'\nimport { UserGroupHeader } from '../utils/synapseTypes'\nimport { TYPE_FILTER } from '../utils/synapseTypes/UserGroupHeader'\nimport UserOrTeamBadge from './UserOrTeamBadge'\n\nexport type UserSearchBoxProps = {\n  /* id for the input tag */\n  inputId?: string\n  /* The initial principal ID */\n  defaultValue?: string\n  onChange?: (\n    principalId: string | null,\n    header: UserGroupHeader | null,\n  ) => void\n  typeFilter?: TYPE_FILTER\n  filterPredicate?: (item: UserGroupHeader) => boolean\n  placeholder?: string\n  focusOnSelect?: boolean\n}\n\nconst customSelectComponents: Partial<\n  SelectComponentsConfig<\n    {\n      id: string\n      value: string\n      label: string\n      header: UserGroupHeader\n    },\n    false,\n    GroupBase<{\n      id: string\n      value: string\n      label: string\n      header: UserGroupHeader\n    }>\n  >\n> = {\n  Control: props => {\n    return (\n      <components.Control\n        {...props}\n        className={`form-control ${props.className ?? ''}`}\n      />\n    )\n  },\n  SingleValue: props => {\n    const { data } = props\n    return (\n      <components.SingleValue {...props} key={data.id}>\n        <UserOrTeamBadge\n          key={data.header.ownerId}\n          userGroupHeader={data.header}\n          disableHref={true}\n          showFullName={true}\n        />\n      </components.SingleValue>\n    )\n  },\n  Option: props => {\n    const { data } = props\n    return (\n      <components.Option {...props} key={data.id}>\n        <UserOrTeamBadge\n          userGroupHeader={data.header}\n          disableHref={true}\n          showFullName={true}\n        />\n      </components.Option>\n    )\n  },\n}\n\nconst UserSearchBoxV2: React.FC<UserSearchBoxProps> = props => {\n  const {\n    inputId,\n    defaultValue = null,\n    onChange,\n    filterPredicate,\n    typeFilter,\n    placeholder,\n    focusOnSelect = false,\n  } = props\n  const [inputValue, setInputValue] = useState('')\n  const [debouncedInput, setDebouncedInput] = useState('')\n  useDebouncedEffect(\n    () => {\n      setDebouncedInput(inputValue)\n    },\n    [inputValue],\n    500,\n  )\n\n  const [defaultUserGroupHeader = undefined] =\n    useGetInfoFromIds<UserGroupHeader>({\n      ids: defaultValue ? [defaultValue] : [],\n      type: 'USER_PROFILE',\n    })\n\n  const { data, isLoading } = useSearchUserGroupHeaders(\n    debouncedInput,\n    typeFilter,\n  )\n\n  const selectRef = React.useRef<any>(null)\n  React.useEffect(() => {\n    if (focusOnSelect) {\n      selectRef.current && selectRef.current.focus()\n    }\n  })\n\n  const noOptionsMessage = useMemo(\n    () =>\n      isLoading || inputValue !== debouncedInput ? () => 'Loadingâ€¦' : undefined,\n    [isLoading, debouncedInput, inputValue],\n  )\n\n  const options = (data ?? [])\n    .filter(filterPredicate ?? (() => true))\n    // Map each user to an options object for the select input component\n    .map(item => ({\n      id: item.ownerId.toString(),\n      value: item.ownerId.toString(),\n      label: item.userName,\n      header: item,\n    }))\n\n  if (defaultValue && defaultUserGroupHeader == null) {\n    return <Skeleton width=\"100%\" />\n  }\n\n  return (\n    <Select\n      className=\"bootstrap-4-backport UserSearchBoxV2\"\n      ref={selectRef}\n      inputValue={inputValue}\n      onInputChange={setInputValue}\n      filterOption={() => true}\n      isLoading={isLoading}\n      options={(!isLoading && options) || []}\n      noOptionsMessage={noOptionsMessage}\n      defaultValue={\n        defaultValue\n          ? {\n              id: defaultValue,\n              value: defaultValue,\n              label: defaultUserGroupHeader!.userName,\n              header: defaultUserGroupHeader!,\n            }\n          : undefined\n      }\n      inputId={inputId}\n      isClearable\n      styles={{\n        // Bootstrap's form-control class overrides the display value, manually set to flex (the default without Bootstrap)\n        control: styles => ({ ...styles, display: 'flex !important' }),\n        input: provided => ({\n          ...provided,\n          // SWC-6327 - Adjust the input style so a right-click focuses on the input field\n          input: {\n            gridArea: '1 / 2 / 4 / 4 !important',\n          },\n        }),\n      }}\n      components={customSelectComponents}\n      onChange={option => {\n        if (onChange) {\n          onChange(option?.id ?? null, option?.header ?? null)\n        }\n      }}\n      placeholder={placeholder}\n    />\n  )\n}\n\nexport default UserSearchBoxV2\n"],"names":["customSelectComponents","props","jsx","components","data","createElement","UserOrTeamBadge","UserSearchBoxV2","inputId","defaultValue","onChange","filterPredicate","typeFilter","placeholder","focusOnSelect","inputValue","setInputValue","useState","debouncedInput","setDebouncedInput","useDebouncedEffect","defaultUserGroupHeader","useGetInfoFromIds","isLoading","useSearchUserGroupHeaders","selectRef","React","noOptionsMessage","useMemo","options","item","Skeleton","Select","styles","provided","option"],"mappings":"wbA6BA,MAAAA,EAAA,CAgBI,QAAAC,GAEAC,EACEC,EAAA,QAAY,CAAX,GAAAF,EACK,UAAA,gBAAAA,EAAA,WAAA,IAC0C,CAAA,EAGpD,YAAAA,GAAA,CAEE,KAAA,CAAA,KAAAG,CAAA,EAAAH,EACA,OAAAI,EAAA,cAAAF,EAAA,YAAA,CAAA,GAAAF,EAAA,IAAAG,EAAA,EAAA,EAAAF,EAEII,EAAC,CAAA,gBAAAF,EAAA,OAEuB,YAAA,GACT,aAAA,EACC,EAAAA,EAAA,OAAA,OAHG,CAAA,CAKrB,EAEJ,OAAAH,GAAA,CAEE,KAAA,CAAA,KAAAG,CAAA,EAAAH,EACA,OAAAI,EAAA,cAAAF,EAAA,OAAA,CAAA,GAAAF,EAAA,IAAAG,EAAA,EAAA,EAAAF,EAEII,EAAC,CAAA,gBAAAF,EAAA,OACuB,YAAA,GACT,aAAA,EACC,CAAA,CAAA,CAElB,CAGN,EAEAG,EAAAN,GAAA,CACE,KAAA,CAAM,QAAAO,EACJ,aAAAC,EAAA,KACe,SAAAC,EACf,gBAAAC,EACA,WAAAC,EACA,YAAAC,EACA,cAAAC,EAAA,EACgB,EAAAb,EAElB,CAAAc,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EACAG,EAAA,IAAA,CAEID,EAAAJ,CAAA,CAA4B,EAC9B,CAAAA,CAAA,EACW,GACX,EAGF,KAAA,CAAAM,EAAA,MAAA,EAAAC,EAAA,CACqC,IAAAb,EAAA,CAAAA,CAAA,EAAA,CAAA,EACK,KAAA,cAChC,CAAA,EAGV,CAAA,KAAAL,EAAA,UAAAmB,CAAA,EAAAC,EAA4BN,EAC1BN,CACA,EAGFa,EAAAC,EAAA,OAAA,IAAA,EACAA,EAAA,UAAA,IAAA,CACEZ,GACEW,EAAA,SAAAA,EAAA,QAAA,MAAA,CACF,CAAA,EAGF,MAAAE,EAAAC,EAAA,QAAyB,IAAAL,GAAAR,IAAAG,EAAA,IAAA,WAAA,OAE2C,CAAAK,EAAAL,EAAAH,CAAA,CAC5B,EAGxCc,GAAAzB,GAAA,CAAA,GAAA,OAAAO,IAAA,IAAA,GAAA,EAAA,IAAAmB,IAAA,CAGgB,GAAAA,EAAA,QAAA,SAAA,EACc,MAAAA,EAAA,QAAA,SAAA,EACG,MAAAA,EAAA,SACjB,OAAAA,CACJ,EAAA,EAGZ,OAAArB,GAAAY,GAAA,KACEnB,EAAA6B,EAAA,CAAA,MAAA,MAAA,CAAA,EAGF7B,EACE8B,EAAC,CAAA,UAAA,uCACW,IAAAP,EACL,WAAAV,EACL,cAAAC,EACe,aAAA,IAAA,GACK,UAAAO,EACpB,QAAA,CAAAA,GAAAM,GAAA,CAAA,EACqC,iBAAAF,EACrC,aAAAlB,EAAA,CAGM,GAAAA,EACM,MAAAA,EACG,MAAAY,EAAA,SACwB,OAAAA,CACvB,EAAA,OAEV,QAAAb,EAEN,YAAA,GACW,OAAA,CACH,QAAAyB,IAAA,CAAA,GAAAA,EAAA,QAAA,oBAEsD,MAAAC,IAAA,CACxC,GAAAA,EACf,MAAA,CAEI,SAAA,0BACK,CACZ,EACF,EACF,WAAAlC,EACY,SAAAmC,GAAA,CAEVzB,GACEA,GAAAyB,GAAA,YAAAA,EAAA,KAAA,MAAAA,GAAA,YAAAA,EAAA,SAAA,IAAA,CACF,EACF,YAAAtB,CACA,CAAA,CAGN"}