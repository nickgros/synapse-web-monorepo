{"version":3,"file":"useGetUserTeams-b305c6fd.js","sources":["../../src/synapse-queries/user/useGetUserTeams.ts"],"sourcesContent":["import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useQuery,\n  UseQueryOptions,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { PaginatedIds, PaginatedResults } from '@sage-bionetworks/synapse-types'\nimport { Team } from '@sage-bionetworks/synapse-types'\n\nexport function useGetUserSubmissionTeamsInfinite(\n  challengeId: string,\n  limit?: number,\n  options?: UseQueryOptions<PaginatedIds, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<PaginatedIds, SynapseClientError>(\n    keyFactory.getSubmissionTeamsQueryKey(challengeId),\n    async context => {\n      return SynapseClient.getSubmissionTeams(\n        accessToken,\n        challengeId,\n        context.pageParam, // pass the context.pageParam for the new offset,\n        limit ?? 10,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        if (lastPage.results.length > 0) return pages.length * (limit ?? 10)\n        //set the new offset to (page * limit)\n        else return undefined\n      },\n    },\n  )\n}\n\nexport function useGetUserTeamsInfinite(\n  userId: string,\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<Team>,\n    SynapseClientError,\n    PaginatedResults<Team>\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useInfiniteQuery<PaginatedResults<Team>, SynapseClientError>(\n    keyFactory.getUserTeamsQueryKey(userId),\n    async context => {\n      return SynapseClient.getUserTeamList(\n        accessToken,\n        userId,\n        context.pageParam, // pass the context.pageParam for the new offset\n        10, // limit\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        if (lastPage.results.length > 0)\n          return pages.length * 10 //set the new offset to (page * limit)\n        else return undefined\n      },\n    },\n  )\n}\n"],"names":["useGetUserSubmissionTeamsInfinite","challengeId","limit","options","accessToken","keyFactory","useSynapseContext","useQuery","context","SynapseClient","lastPage","pages","useGetUserTeamsInfinite","userId","useInfiniteQuery"],"mappings":"4GAYgB,SAAAA,EACdC,EACAC,EACAC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAC,EACLF,EAAW,2BAA2BJ,CAAW,EACjD,MAAMO,GACGC,EAAc,mBACnBL,EACAH,EACAO,EAAQ,UACRN,GAAS,EAAA,EAGb,CACE,GAAGC,EACH,iBAAkB,CAACO,EAAUC,IAAU,CACjC,GAAAD,EAAS,QAAQ,OAAS,EAAU,OAAAC,EAAM,QAAUT,GAAS,GAGnE,CACF,CAAA,CAEJ,CAEgB,SAAAU,EACdC,EACAV,EAKA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAE/C,OAAAQ,EACLT,EAAW,qBAAqBQ,CAAM,EACtC,MAAML,GACGC,EAAc,gBACnBL,EACAS,EACAL,EAAQ,UACR,EAAA,EAGJ,CACE,GAAGL,EACH,iBAAkB,CAACO,EAAUC,IAAU,CACjC,GAAAD,EAAS,QAAQ,OAAS,EAC5B,OAAOC,EAAM,OAAS,EAE1B,CACF,CAAA,CAEJ"}