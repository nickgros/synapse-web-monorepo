{"version":3,"file":"usePrevious-9f30f8c7.js","sources":["../../../../node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/querySelectorAll.js","../../../../node_modules/.pnpm/@restart+hooks@0.4.8_react@18.2.0/node_modules/@restart/hooks/esm/usePrevious.js"],"sourcesContent":["var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);\n/**\n * Runs `querySelectorAll` on a given element.\n * \n * @param element the element\n * @param selector the selector\n */\n\nexport default function qsa(element, selector) {\n  return toArray(element.querySelectorAll(selector));\n}","import { useEffect, useRef } from 'react';\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\n\nexport default function usePrevious(value) {\n  var ref = useRef(null);\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}"],"names":["toArray","qsa","element","selector","usePrevious","value","ref","useRef","useEffect"],"mappings":"wCAAA,IAAIA,EAAU,SAAS,UAAU,KAAK,KAAK,SAAS,UAAU,KAAM,GAAG,KAAK,EAQ7D,SAASC,EAAIC,EAASC,EAAU,CAC7C,OAAOH,EAAQE,EAAQ,iBAAiBC,CAAQ,CAAC,CACnD,CCSe,SAASC,EAAYC,EAAO,CACzC,IAAIC,EAAMC,SAAO,IAAI,EACrBC,OAAAA,EAAAA,UAAU,UAAY,CACpBF,EAAI,QAAUD,CAClB,CAAG,EACMC,EAAI,OACb"}