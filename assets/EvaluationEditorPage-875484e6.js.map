{"version":3,"file":"EvaluationEditorPage-875484e6.js","sources":["../../src/utils/hooks/useListState.ts","../../../../node_modules/.pnpm/@mui+icons-material@5.11.16_@mui+material@5.11.16_@types+react@18.0.27_react@18.2.0/node_modules/@mui/icons-material/esm/AddBox.js","../../src/components/Evaluation/EvaluationEditor.tsx","../../src/components/Evaluation/round_limits/EvaluationRoundLimitOptions.tsx","../../src/components/Evaluation/round_limits/EvaluationRoundLimitOptionsList.tsx","../../../../node_modules/.pnpm/shortid@2.2.16/node_modules/shortid/lib/random/random-from-seed.js","../../../../node_modules/.pnpm/shortid@2.2.16/node_modules/shortid/lib/alphabet.js","../../../../node_modules/.pnpm/shortid@2.2.16/node_modules/shortid/lib/random/random-byte-browser.js","../../../../node_modules/.pnpm/nanoid@2.1.11/node_modules/nanoid/format.browser.js","../../../../node_modules/.pnpm/shortid@2.2.16/node_modules/shortid/lib/generate.js","../../../../node_modules/.pnpm/shortid@2.2.16/node_modules/shortid/lib/build.js","../../../../node_modules/.pnpm/shortid@2.2.16/node_modules/shortid/lib/is-valid.js","../../../../node_modules/.pnpm/shortid@2.2.16/node_modules/shortid/lib/index.js","../../../../node_modules/.pnpm/shortid@2.2.16/node_modules/shortid/index.js","../../src/components/Evaluation/input_models/models.ts","../../src/components/Evaluation/EvaluationRoundEditorDropdown.tsx","../../../../node_modules/.pnpm/dayjs@1.11.7/node_modules/dayjs/plugin/isSameOrAfter.js","../../src/components/Evaluation/EvaluationRoundEditor.tsx","../../src/components/Evaluation/EvaluationRoundEditorList.tsx","../../src/components/Evaluation/EvaluationEditorPage.tsx"],"sourcesContent":["import { Dispatch, SetStateAction, useState } from 'react'\n\nexport interface ListStateReturn<T> {\n  // initial state of the list\n  list: T[]\n  // generates a function to update a specific index of the list\n  handleListChange: (index: number) => (changedValue: T) => void\n  // generates a function to remove a index from the list\n  handleListRemove: (index: number) => () => void\n  // generates a function to append to the end of the list\n  appendToList: (...newItem: T[]) => void\n  //changes the entire list state\n  setList: Dispatch<SetStateAction<T[]>>\n}\n/**\n * This is used when a component's state uses a List<T> and has child components\n * that are responsible for creating, updating, deleting the objects within the List.\n *\n *\n * This should be used in conjunction with list.map() to generate child elements.\n *\n * The handle*() functions will generate a callback function for\n * the child to use to perform an item change, or removal on the list.\n *\n * Generally, appending items to the list will be handled by the parent\n * so appendToList() is just a regular function instead of a function generator\n * For Example:\n *\n * ```\n * export const ParentComponent: React.FunctionComponent<ParentComponentProps> = ({\n *  prop1,\n *  prop2,\n * }) => {\n *    const {list: myList,\n *           handleListChange: handleMyListChange,\n *           handleListRemove: handleMyListPush,\n *           appendToList: handleMyListRemove} = useListState<string>(['asdf','qwerty'])\n *\n *    return (\n *      <div>\n *        myList.map((item, index) => {\n            return <ChildComponent\n              value={item}\n              onChange={handleMyListChange(index)}\n              onRemove={handleMyListRemove(index)}\n            />\n          })\n          <button onClick={(event) => {appendToList(\"some new value\")} }> >Add Child</button>\n *      </div>\n *    )\n *\n * }\n * ```\n *\n *\n * @param initialState The initial value of the array\n * @returns an ListStateReturn object containing the useState value and additonal change/remove/push hnndlers. Use object destructuring\n */\nexport const useListState = <T>(initialState: T[]): ListStateReturn<T> => {\n  const [list, setList] = useState<T[]>(initialState)\n\n  const handleListChange =\n    (index: number) =>\n    (changedValue: T): void => {\n      const modifiedList = [...list]\n      modifiedList[index] = changedValue\n      setList(modifiedList)\n    }\n\n  const handleListRemove = (index: number) => (): void => {\n    const modifiedList = list.filter((value, arr_index) => index !== arr_index)\n    setList(modifiedList)\n  }\n\n  const appendToList = (...newItem: T[]): void => {\n    const modifiedList = [...list]\n    modifiedList.push(...newItem)\n    setList(modifiedList)\n  }\n  return { list, handleListChange, handleListRemove, appendToList, setList }\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n}), 'AddBox');","import { Alert, Button } from '@mui/material'\nimport { Col, Dropdown, Form, Row } from 'react-bootstrap'\nimport React, { useEffect, useState } from 'react'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { ErrorBanner } from '../error/ErrorBanner'\nimport { Evaluation } from '@sage-bionetworks/synapse-types'\nimport { CreatedOnByUserDiv } from './CreatedOnByUserDiv'\nimport WarningDialog from '../SynapseForm/WarningDialog'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport IconSvg from '../IconSvg/IconSvg'\n\nexport type EvaluationEditorProps = {\n  /** Use if UPDATING an existing Evaluation. Id of the evaluation to edit */\n  readonly evaluationId?: string\n  /** Use if CREATING a new Evaluation. Id of the Entity that will be associated with the Evaluation */\n  readonly entityId?: string\n  /** Callback after successful deletion of the Evaluation */\n  readonly onDeleteSuccess: () => void\n  /** Callback after successful save of the Evaluation */\n  readonly onSaveSuccess?: (evaluationId: string) => void\n}\n\n/**\n * Edits basic properties of an Evaluation\n */\nexport const EvaluationEditor: React.FunctionComponent<\n  EvaluationEditorProps\n> = ({\n  evaluationId,\n  entityId,\n  onDeleteSuccess,\n  onSaveSuccess,\n}: EvaluationEditorProps) => {\n  if (evaluationId && entityId) {\n    throw new Error('please use either evaluationId or entityId but not both')\n  }\n  const { accessToken } = useSynapseContext()\n  const [error, setError] = useState<SynapseClientError>()\n  const [showSaveSuccess, setShowSaveSuccess] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (error) {\n      setShowSaveSuccess(false)\n    }\n  }, [error])\n\n  const [name, setName] = useState<string>('')\n  const [description, setDescription] = useState<string>('')\n  const [submissionInstructionsMessage, setSubmissionInstructionsMessage] =\n    useState<string>('')\n  const [submissionReceiptMessage, setSubmissionReceiptMessage] =\n    useState<string>('')\n\n  const [evaluation, setEvaluation] = useState<Evaluation>({\n    contentSource: entityId,\n  })\n\n  useEffect(() => {\n    setName(evaluation.name ?? '')\n    setDescription(evaluation.description ?? '')\n    setSubmissionInstructionsMessage(\n      evaluation.submissionInstructionsMessage ?? '',\n    )\n    setSubmissionReceiptMessage(evaluation.submissionReceiptMessage ?? '')\n  }, [evaluation])\n\n  useEffect(() => {\n    // if we initially passed in a update the we retrieve a new Evaluation\n    if (evaluationId) {\n      //clear error\n      setError(undefined)\n      SynapseClient.getEvaluation(evaluationId, accessToken)\n        .then(retrievedEvaluation => {\n          setEvaluation(retrievedEvaluation)\n        })\n        .catch(error => setError(error))\n    }\n  }, [evaluationId, accessToken])\n\n  const onSave = () => {\n    // clear out error\n    setError(undefined)\n    setShowSaveSuccess(false)\n    const newOrUpdatedEvaluation: Evaluation = {\n      ...evaluation,\n      name,\n      description,\n      submissionInstructionsMessage,\n      submissionReceiptMessage,\n    }\n\n    const promise = newOrUpdatedEvaluation.id\n      ? SynapseClient.updateEvaluation(newOrUpdatedEvaluation, accessToken)\n      : SynapseClient.createEvaluation(newOrUpdatedEvaluation, accessToken)\n\n    promise\n      .then(evaluation => {\n        setEvaluation(evaluation)\n        setShowSaveSuccess(true)\n        if (onSaveSuccess) {\n          onSaveSuccess(evaluation.id!)\n        }\n      })\n      .catch(error => setError(error))\n  }\n\n  // create delete callback if the evaluation has id\n  const onDelete = evaluation?.id\n    ? () => {\n        setError(undefined)\n        SynapseClient.deleteEvaluation(evaluation.id!, accessToken)\n          .then(onDeleteSuccess)\n          .catch(error => setError(error))\n      }\n    : undefined\n\n  return (\n    <div className=\"bootstrap-4-backport\">\n      <div className=\"evaluation-editor\">\n        <Row>\n          <Col>\n            <h4>{evaluation.id ? 'Edit' : 'Create'} Evaluation Queue</h4>\n          </Col>\n          <Col>\n            <EvaluationEditorDropdown onClick={onSave} onDelete={onDelete} />\n          </Col>\n        </Row>\n        <Form>\n          <Form.Group>\n            <Form.Label htmlFor=\"evaluation-name\">Name</Form.Label>\n            <Form.Control\n              id=\"evaluation-name\"\n              type=\"text\"\n              value={name}\n              onChange={event => setName(event.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label htmlFor=\"evaluation-description\">\n              Description\n            </Form.Label>\n            <Form.Control\n              id=\"evaluation-description\"\n              as=\"textarea\"\n              value={description}\n              rows={2}\n              onChange={event => setDescription(event.target.value)}\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor=\"evaluation-submissioninstructions\">\n              Submission Instructions\n            </Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              id=\"evaluation-submissioninstructions\"\n              value={submissionInstructionsMessage}\n              rows={2}\n              onChange={event =>\n                setSubmissionInstructionsMessage(event.target.value)\n              }\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor=\"evaluation-receiptmessage\">\n              Submission Receipt Message\n            </Form.Label>\n            <Form.Control\n              id=\"evaluation-receiptmessage\"\n              type=\"text\"\n              value={submissionReceiptMessage}\n              onChange={event =>\n                setSubmissionReceiptMessage(event.target.value)\n              }\n            />\n          </Form.Group>\n          {evaluation?.createdOn && (\n            <CreatedOnByUserDiv\n              userId={evaluation.ownerId!}\n              date={new Date(evaluation.createdOn)}\n            />\n          )}\n          {error && <ErrorBanner error={error} />}\n          {showSaveSuccess && (\n            <Alert\n              className=\"save-success-alert\"\n              severity=\"success\"\n              onClose={() => setShowSaveSuccess(false)}\n              sx={{ marginBottom: '20px' }}\n            >\n              Successfully saved.\n            </Alert>\n          )}\n          <div className=\"d-flex justify-content-end\">\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\"save-button\"\n              onClick={onSave}\n            >\n              Save\n            </Button>\n          </div>\n        </Form>\n      </div>\n    </div>\n  )\n}\n\ntype EvaluationEditorDropdownProps = {\n  onClick: () => void\n  onDelete?: () => void\n}\n\nconst EvaluationEditorDropdown: React.FunctionComponent<\n  EvaluationEditorDropdownProps\n> = ({ onClick, onDelete }) => {\n  const [deleteWarningShow, setDeleteWarningShow] = useState<boolean>(false)\n\n  return (\n    <>\n      {onDelete && (\n        <WarningDialog\n          title=\"Delete Evaluation Queue\"\n          content=\"Are you sure you want to delete this Evaluation Queue?\"\n          open={deleteWarningShow}\n          confirmButtonText=\"Delete\"\n          onConfirm={() => {\n            onDelete()\n            setDeleteWarningShow(false)\n          }}\n          onConfirmCallbackArgs={[]}\n          onCancel={() => {\n            setDeleteWarningShow(false)\n          }}\n          confirmButtonColor=\"error\"\n        />\n      )}\n      <Dropdown className=\"float-right\">\n        <Dropdown.Toggle variant=\"link\" className=\"dropdown-no-caret\">\n          <IconSvg icon=\"verticalEllipsis\" />\n        </Dropdown.Toggle>\n        <Dropdown.Menu alignRight={true}>\n          <Dropdown.Item role=\"menuitem\" onClick={onClick}>\n            Save\n          </Dropdown.Item>\n          {onDelete && (\n            <>\n              <Dropdown.Divider />\n              <Dropdown.Item\n                role=\"menuitem\"\n                onClick={() => setDeleteWarningShow(true)}\n              >\n                Delete\n              </Dropdown.Item>\n            </>\n          )}\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  )\n}\n","import { EvaluationRoundLimitType } from '@sage-bionetworks/synapse-types'\nimport React from 'react'\nimport { FormControl, FormGroup } from 'react-bootstrap'\nimport { EvaluationRoundLimitInput } from '../input_models/models'\n\nexport type EvaluationRoundLimitOptionsProps = {\n  limitInput: EvaluationRoundLimitInput\n  //all types for which an EvaluationRoundLimitOptions was already created\n  allSelectedTypes: Set<EvaluationRoundLimitType>\n  onChange: (limitInput: EvaluationRoundLimitInput) => void\n}\n\nexport const LIMIT_TYPE_DISPLAY_NAME: Partial<\n  Record<EvaluationRoundLimitType, string>\n> = {\n  // EvaluationRoundLimitType.TOTAL is purposely omitted because an <input> in the parent handles it\n  DAILY: 'Daily Limit',\n  WEEKLY: 'Weekly Limit',\n  MONTHLY: 'Monthly Limit',\n}\n\nexport const EvaluationRoundLimitOptions: React.FunctionComponent<\n  EvaluationRoundLimitOptionsProps\n> = ({ limitInput, allSelectedTypes, onChange }) => {\n  return (\n    <React.Fragment>\n      <FormGroup className=\"limit-type\">\n        <label>Limit Type</label>\n        <FormControl\n          as=\"select\"\n          custom\n          value={limitInput.type}\n          onChange={event => {\n            onChange({\n              type: event.target.value as EvaluationRoundLimitType,\n              maxSubmissionString: limitInput.maxSubmissionString,\n            })\n          }}\n        >\n          {Object.entries(LIMIT_TYPE_DISPLAY_NAME).map(\n            ([displayLimitType, displayName]) => (\n              <option\n                key={displayLimitType}\n                value={displayLimitType}\n                disabled={\n                  allSelectedTypes.has(\n                    displayLimitType as EvaluationRoundLimitType,\n                  ) && displayLimitType !== limitInput.type\n                }\n              >\n                {displayName}\n              </option>\n            ),\n          )}\n        </FormControl>\n      </FormGroup>\n\n      <FormGroup className=\"limit-input\">\n        <label>Maximum Submissions</label>\n        <FormControl\n          type=\"text\"\n          pattern=\"[0-9]*\"\n          value={limitInput.maxSubmissionString}\n          onChange={event => {\n            onChange({\n              type: limitInput.type,\n              maxSubmissionString: event.target.value,\n            })\n          }}\n        />\n      </FormGroup>\n    </React.Fragment>\n  )\n}\n","import React, { useCallback, useEffect } from 'react'\nimport { IconButton } from '@mui/material'\nimport { CloseTwoTone, AddBox } from '@mui/icons-material'\nimport { EvaluationRoundLimitType } from '@sage-bionetworks/synapse-types'\nimport { EvaluationRoundLimitInput } from '../input_models/models'\nimport {\n  EvaluationRoundLimitOptions,\n  LIMIT_TYPE_DISPLAY_NAME,\n} from './EvaluationRoundLimitOptions'\n\nconst AVAILABLE_LIMIT_TYPES = Object.keys(LIMIT_TYPE_DISPLAY_NAME)\n\nexport type EvaluationRoundLimitOptionsListProps = {\n  limitInputs: EvaluationRoundLimitInput[]\n  handleChange: (\n    index: number,\n  ) => (limitInput: EvaluationRoundLimitInput) => void\n\n  handleDeleteLimit: (index: number) => () => void\n\n  onAddNewLimit: (limit: EvaluationRoundLimitInput) => void\n}\n\nconst selectUnusedType = (\n  selectedTypes: Set<EvaluationRoundLimitType>,\n): EvaluationRoundLimitType => {\n  return AVAILABLE_LIMIT_TYPES.find(\n    key => !selectedTypes.has(key as EvaluationRoundLimitType),\n  ) as EvaluationRoundLimitType\n}\n\nexport const EvaluationRoundLimitOptionsList: React.FunctionComponent<\n  EvaluationRoundLimitOptionsListProps\n> = ({ limitInputs, handleChange, handleDeleteLimit, onAddNewLimit }) => {\n  // all types that are currently being used\n  const selectedTypes: Set<EvaluationRoundLimitType> = new Set(\n    limitInputs.map(limit => limit.type),\n  )\n\n  const addNewLimit = useCallback(() => {\n    onAddNewLimit({\n      type: selectUnusedType(selectedTypes),\n      maxSubmissionString: '',\n    })\n  }, [onAddNewLimit, selectedTypes])\n\n  //display some input even if no limits currently exist\n  useEffect(() => {\n    if (limitInputs.length === 0) {\n      addNewLimit()\n    }\n  }, [limitInputs, addNewLimit])\n\n  return (\n    <div\n      data-testid=\"EvaluationRoundLimitOptionsList\"\n      className=\"advanced-limits-grid\"\n    >\n      {limitInputs.map((limit, index) => {\n        return (\n          <React.Fragment key={limit.type}>\n            <EvaluationRoundLimitOptions\n              limitInput={limit}\n              allSelectedTypes={selectedTypes}\n              onChange={handleChange(index)}\n            />\n\n            {/*remove button for the EvaluationRoundLimitOptions*/}\n            <IconButton\n              color=\"primary\"\n              aria-label=\"Remove\"\n              className=\"remove-button\"\n              onClick={handleDeleteLimit(index)}\n            >\n              <CloseTwoTone />\n            </IconButton>\n\n            {/*conditionally create a \"add\" button*/}\n            {\n              // if last element\n              index === limitInputs.length - 1 &&\n                // if the are unused limit types\n                limitInputs.length < AVAILABLE_LIMIT_TYPES.length && (\n                  <IconButton\n                    color=\"primary\"\n                    aria-label=\"Add\"\n                    onClick={addNewLimit}\n                    className=\"add-button\"\n                  >\n                    <AddBox />\n                  </IconButton>\n                )\n            }\n          </React.Fragment>\n        )\n      })}\n    </div>\n  )\n}\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nmodule.exports = require('./lib/index');\n","import {\n  EvaluationRound,\n  EvaluationRoundLimit,\n  EvaluationRoundLimitType,\n} from '@sage-bionetworks/synapse-types'\nimport shortid from 'shortid'\n\nexport type EvaluationRoundLimitInput = {\n  readonly type: EvaluationRoundLimitType\n  readonly maxSubmissionString: string\n}\nexport type EvaluationRoundInput = {\n  // must be present\n  evaluationId: string\n\n  //used for React's \"key\" identifier when used inside a list.\n  reactListKey: string\n\n  //may not exist if newly crated\n  id?: string\n  etag?: string\n\n  //may be empty string, but not undefined\n  roundStart: string\n  roundEnd: string\n  totalSubmissionLimit: string\n\n  //may be an empty list, but not undefined\n  otherLimits: EvaluationRoundLimitInput[]\n}\n\nexport const convertEvaluationRoundToInput = (\n  evaluationRound: EvaluationRound,\n  reactListKey?: string,\n): EvaluationRoundInput => {\n  return {\n    reactListKey: reactListKey ?? shortid.generate(),\n    evaluationId: evaluationRound.evaluationId,\n    id: evaluationRound.id,\n    etag: evaluationRound.etag,\n    roundStart: evaluationRound.roundStart,\n    roundEnd: evaluationRound.roundEnd,\n    totalSubmissionLimit: extractTotalLimit(evaluationRound.limits),\n    otherLimits: convertRoundLimitsToInput(evaluationRound.limits),\n  }\n}\n\nconst extractTotalLimit = (\n  limits: EvaluationRoundLimit[] | undefined,\n): string =>\n  (limits || [])\n    .filter(evaluationLimit => evaluationLimit.limitType === 'TOTAL')\n    .reduce((ignorePrevValue, evaluationLimit) => {\n      //after filtering there should exist at most one evaluationLimit\n      return evaluationLimit.maximumSubmissions.toString()\n    }, '')\n\nconst convertRoundLimitsToInput = (\n  evaluationRoundLimits: EvaluationRoundLimit[] | undefined,\n): EvaluationRoundLimitInput[] => {\n  return (evaluationRoundLimits || [])\n    .filter(evaluationLimit => evaluationLimit.limitType !== 'TOTAL')\n    .reduce<EvaluationRoundLimitInput[]>((limitInputList, evaluationLimit) => {\n      limitInputList.push({\n        type: evaluationLimit.limitType,\n        maxSubmissionString: evaluationLimit.maximumSubmissions.toString(),\n      })\n      //after filtering there should exist at most one evaluationLimit\n      return limitInputList\n    }, [])\n}\n","import { Dropdown } from 'react-bootstrap'\nimport React, { useState } from 'react'\nimport WarningDialog from '../SynapseForm/WarningDialog'\nimport IconSvg from '../IconSvg/IconSvg'\n\nexport type EvaluationRoundEditorDropdownProps = {\n  onDelete: () => void\n  onSave: () => void\n}\n\nexport const EvaluationRoundEditorDropdown: React.FunctionComponent<\n  EvaluationRoundEditorDropdownProps\n> = ({ onSave, onDelete }) => {\n  const [deleteWarningShow, setDeleteWarningShow] = useState<boolean>(false)\n\n  return (\n    <>\n      <WarningDialog\n        title=\"Delete Evaluation Round\"\n        content=\"Are you sure you want to delete this Evaluation Round?\"\n        open={deleteWarningShow}\n        confirmButtonText=\"Delete\"\n        onConfirm={() => {\n          onDelete()\n          setDeleteWarningShow(false)\n        }}\n        onConfirmCallbackArgs={[]}\n        onCancel={() => {\n          setDeleteWarningShow(false)\n        }}\n        confirmButtonColor=\"error\"\n      />\n\n      <Dropdown className=\"float-right\">\n        <Dropdown.Toggle\n          aria-label=\"Round Options\"\n          variant=\"link\"\n          className=\"dropdown-no-caret evaluation-round-editor-dropdown\"\n        >\n          <IconSvg icon=\"verticalEllipsis\" />\n        </Dropdown.Toggle>\n        <Dropdown.Menu alignRight={true}>\n          <Dropdown.Item onClick={onSave}>Save</Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item onClick={() => setDeleteWarningShow(true)}>\n            Delete\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  )\n}\n","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_isSameOrAfter=t()}(this,(function(){\"use strict\";return function(e,t){t.prototype.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)}}}));","import {\n  EvaluationRound,\n  EvaluationRoundLimit,\n} from '@sage-bionetworks/synapse-types'\nimport React, { useEffect, useState } from 'react'\nimport { Alert, Button } from '@mui/material'\nimport { Card, Col, Form, FormControl, FormGroup, Row } from 'react-bootstrap'\nimport dayjs, { Dayjs } from 'dayjs'\nimport { CalendarWithIconFormGroup } from './CalendarWithIconFormGroup'\nimport { EvaluationRoundLimitOptionsList } from './round_limits/EvaluationRoundLimitOptionsList'\nimport { useListState } from '../../utils/hooks/useListState'\nimport {\n  convertEvaluationRoundToInput,\n  EvaluationRoundInput,\n  EvaluationRoundLimitInput,\n} from './input_models/models'\nimport {\n  updateEvaluationRound,\n  createEvaluationRound,\n  deleteEvaluationRound,\n} from '../../synapse-client/SynapseClient'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { EvaluationRoundEditorDropdown } from './EvaluationRoundEditorDropdown'\nimport { ErrorBanner } from '../error/ErrorBanner'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport IconSvg, { IconSvgProps } from '../IconSvg/IconSvg'\nimport utc from 'dayjs/plugin/utc'\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter'\ndayjs.extend(utc)\ndayjs.extend(isSameOrAfter)\n\nexport type EvaluationRoundEditorProps = {\n  evaluationRoundInput: EvaluationRoundInput\n  onDelete: () => void\n  onSave: (evaluationRound: EvaluationRoundInput) => void\n}\n\nconst disallowCalendarDateBefore = (date: Dayjs) => {\n  const startOfDay = date.startOf('day')\n  return (currentDate: Dayjs) => currentDate.isSameOrAfter(startOfDay)\n}\n\nconst determineRoundStatus = (\n  roundStart: Dayjs | string,\n  roundEnd: Dayjs | string,\n) => {\n  let className: string\n  let iconProps: IconSvgProps | undefined\n  let status: string\n  const now = dayjs()\n  // based off of start/end datetime from props so that users making\n  // unsaved changes to the start/end dates do not change the status\n  if (now.isSameOrAfter(roundStart)) {\n    if (now.isBefore(roundEnd)) {\n      className = 'status-in-progress'\n      iconProps = { icon: 'sync' }\n      status = 'IN PROGRESS'\n    } else {\n      className = 'status-completed'\n      iconProps = { icon: 'clipboardCheck' }\n      status = 'COMPLETED'\n    }\n  } else {\n    className = 'status-not-yet-started'\n    iconProps = undefined\n    status = 'NOT YET STARTED'\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"status\">\n        {iconProps && <IconSvg {...iconProps} />}\n        <span>{status}</span>\n      </div>\n    </div>\n  )\n}\n\nconst convertInputsToEvaluationRound = (\n  evaluationRoundInputProp: EvaluationRoundInput,\n  startDate: string | Dayjs | null,\n  endDate: string | Dayjs | null,\n  totalSubmissionLimit: string,\n  advancedLimits: EvaluationRoundLimitInput[],\n): EvaluationRound => {\n  const limits: EvaluationRoundLimit[] = []\n  if (totalSubmissionLimit) {\n    const totalSubmissionLimitInt = Number(totalSubmissionLimit)\n    if (Number.isNaN(totalSubmissionLimitInt)) {\n      throw TypeError('Total Submission is not an integer')\n    }\n    limits.push({\n      limitType: 'TOTAL',\n      maximumSubmissions: totalSubmissionLimitInt,\n    })\n  }\n  advancedLimits.forEach(limitInput => {\n    if (limitInput.maxSubmissionString) {\n      const maxSubmissionInt = Number(limitInput.maxSubmissionString)\n      if (Number.isNaN(maxSubmissionInt)) {\n        throw TypeError(limitInput.type + ' Limit is not an integer')\n      }\n      limits.push({\n        limitType: limitInput.type,\n        maximumSubmissions: maxSubmissionInt,\n      })\n    }\n  })\n\n  return {\n    id: evaluationRoundInputProp.id,\n    etag: evaluationRoundInputProp.etag,\n    evaluationId: evaluationRoundInputProp.evaluationId,\n    roundStart: dayjs.utc(startDate).toJSON(),\n    roundEnd: dayjs.utc(endDate).toJSON(),\n    limits: limits,\n  }\n}\n\nexport const EvaluationRoundEditor: React.FunctionComponent<\n  EvaluationRoundEditorProps\n> = ({ evaluationRoundInput, onSave, onDelete }) => {\n  const { accessToken } = useSynapseContext()\n  const [error, setError] = useState<string | SynapseClientError | undefined>()\n  const [showSaveSuccess, setShowSaveSuccess] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (error) {\n      setShowSaveSuccess(false)\n    }\n  }, [error])\n\n  const [startDate, setStartDate] = useState<string | Dayjs | null>(\n    dayjs(evaluationRoundInput.roundStart),\n  )\n  const [endDate, setEndDate] = useState<string | Dayjs | null>(\n    dayjs(evaluationRoundInput.roundEnd),\n  )\n\n  const [totalSubmissionLimit, setTotalSubmissionLimit] = useState<string>(\n    evaluationRoundInput.totalSubmissionLimit,\n  )\n\n  const [advancedMode, setAdvancedMode] = useState<boolean>(false)\n\n  const {\n    list: advancedLimits,\n    handleListRemove,\n    handleListChange: handleAdvancedLimitsChange,\n    appendToList: addAdvancedLimit,\n  } = useListState<EvaluationRoundLimitInput>(evaluationRoundInput.otherLimits)\n\n  // if we remove the last advanced limit, hide the advanced limits\n  const handleAdvancedLimitsRemove = (index: number) => {\n    const generatedRemoveFunc = handleListRemove(index)\n    return () => {\n      //we are deleting the last advanced limit\n\n      generatedRemoveFunc()\n      if (advancedLimits.length === 1) {\n        // NOTE: we dont check for length == 0 because we don't modify the original list,\n        // instead the generated function will setState() with a NEW empty list\n        // so the original list we reference still has 1 element\n        setAdvancedMode(false)\n      }\n    }\n  }\n\n  const onSaveButtonClick = () => {\n    setShowSaveSuccess(false)\n    let evaluationRound\n    try {\n      evaluationRound = convertInputsToEvaluationRound(\n        evaluationRoundInput,\n        startDate,\n        endDate,\n        totalSubmissionLimit,\n        advancedLimits,\n      )\n    } catch (err) {\n      // error thrown if number\n      setError(err)\n    }\n    if (evaluationRound) {\n      const promise = evaluationRound.id\n        ? updateEvaluationRound(evaluationRound, accessToken)\n        : createEvaluationRound(evaluationRound, accessToken)\n\n      promise\n        .then(createdOrUpdatedRound => {\n          const newInput = convertEvaluationRoundToInput(\n            createdOrUpdatedRound,\n            evaluationRoundInput.reactListKey,\n          )\n          //clear out previous error if any\n          setError(undefined)\n          setShowSaveSuccess(true)\n          onSave(newInput)\n        })\n        .catch(error => setError(error))\n    }\n  }\n\n  const onDeleteButtonClick = () => {\n    if (evaluationRoundInput.id) {\n      deleteEvaluationRound(\n        evaluationRoundInput.evaluationId,\n        evaluationRoundInput.id,\n        accessToken,\n      )\n        .then(() => onDelete())\n        .catch(error => setError(error))\n    } else {\n      onDelete()\n    }\n  }\n\n  const disallowDatesBeforeNow = disallowCalendarDateBefore(dayjs())\n\n  // https://react-bootstrap.github.io/components/forms/#forms-validation-native\n  return (\n    <div className=\"evaluation-round-editor\">\n      <Card>\n        <Card.Body>\n          <Form role=\"form\">\n            <Row>\n              <Col>\n                <h5>\n                  ROUND STATUS\n                  {evaluationRoundInput.id &&\n                    ' (' + evaluationRoundInput.id + ')'}\n                </h5>\n              </Col>\n              <Col>\n                <EvaluationRoundEditorDropdown\n                  onDelete={onDeleteButtonClick}\n                  onSave={onSaveButtonClick}\n                />\n              </Col>\n            </Row>\n\n            <Row className=\"mb-3\">\n              <Col>\n                <div className=\"round-status\">\n                  {determineRoundStatus(\n                    evaluationRoundInput.roundStart,\n                    evaluationRoundInput.roundEnd,\n                  )}\n                </div>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <h5>DURATION</h5>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                <CalendarWithIconFormGroup\n                  value={startDate}\n                  setterCallback={setStartDate}\n                  label=\"Round Start\"\n                  isValidDate={disallowDatesBeforeNow}\n                  disabled={dayjs().isSameOrAfter(\n                    evaluationRoundInput.roundStart,\n                  )}\n                />\n              </Col>\n              <Col>\n                <CalendarWithIconFormGroup\n                  value={endDate}\n                  label=\"Round End\"\n                  setterCallback={setEndDate}\n                  isValidDate={disallowDatesBeforeNow}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <h5>SUBMISSION LIMITS</h5>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                <FormGroup>\n                  <label>Total Submissions / Round</label>\n                  <FormControl\n                    value={totalSubmissionLimit}\n                    type=\"text\"\n                    pattern=\"[0-9]*\"\n                    onChange={event =>\n                      setTotalSubmissionLimit(event.target.value)\n                    }\n                    // Chrome for some reason decides to autofill this input box with email address, so we must disable autofill\n                    // this is a hacky, but consistent way to disable autofill because Chrome does not respect the spec :(\n                    // https://bugs.chromium.org/p/chromium/issues/detail?id=914451\n                    autoComplete=\"new-password\"\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n            <Row className=\"mb-3\">\n              <Col>\n                <Button\n                  variant=\"text\"\n                  color=\"primary\"\n                  sx={{ fontSize: '16px !important' }}\n                  className=\"advanced-limits-link\"\n                  onClick={() => setAdvancedMode(!advancedMode)}\n                >\n                  Advanced Limits\n                </Button>\n              </Col>\n            </Row>\n\n            {advancedMode && (\n              <EvaluationRoundLimitOptionsList\n                limitInputs={advancedLimits}\n                handleChange={handleAdvancedLimitsChange}\n                handleDeleteLimit={handleAdvancedLimitsRemove}\n                onAddNewLimit={addAdvancedLimit}\n              />\n            )}\n\n            {error && (\n              <Row className=\"my-3\">\n                <Col>\n                  <ErrorBanner error={error} />\n                </Col>\n              </Row>\n            )}\n\n            {showSaveSuccess && (\n              <Row className=\"my-3\">\n                <Col>\n                  <Alert\n                    className=\"save-success-alert\"\n                    severity=\"success\"\n                    onClose={() => setShowSaveSuccess(false)}\n                    sx={{ mb: '20px' }}\n                  >\n                    Successfully saved.\n                  </Alert>\n                </Col>\n              </Row>\n            )}\n\n            <Row className=\"mt-3\">\n              <Col>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className=\"save-button float-right border-0\"\n                  onClick={onSaveButtonClick}\n                >\n                  Save\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </Card.Body>\n      </Card>\n    </div>\n  )\n}\n\nexport const HelpersToTest = {\n  disallowCalendarDateBefore,\n  determineRoundStatus,\n  convertInputsToEvaluationRound,\n}\n","import React, { useEffect, useState } from 'react'\nimport { useListState } from '../../utils/hooks/useListState'\nimport { EvaluationRoundEditor } from './EvaluationRoundEditor'\nimport { Button } from '@mui/material'\nimport {\n  convertEvaluationRoundToInput,\n  EvaluationRoundInput,\n} from './input_models/models'\nimport { getEvaluationRoundsList } from '../../synapse-client/SynapseClient'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport shortid from 'shortid'\nimport { EvaluationRoundListResponse } from '@sage-bionetworks/synapse-types'\nimport { ErrorBanner } from '../error/ErrorBanner'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\n\nexport type EvaluationRoundEditorListProps = {\n  /** id of the Evaluation containing EvaluationRounds to edit*/\n  evaluationId: string\n}\n\nconst fetchEvaluationList = (\n  evaluationId: string,\n  accessToken: string,\n  setListCallback: (items: EvaluationRoundInput[]) => void,\n  errorHandleCallback: (error: string | SynapseClientError | undefined) => void,\n): void => {\n  const allEvaluationRoundInputList: EvaluationRoundInput[] = []\n\n  const getEvaluationRounds = (nextPageToken?: string) => {\n    getEvaluationRoundsList(\n      evaluationId,\n      { nextPageToken: nextPageToken },\n      accessToken,\n    )\n      .then((response: EvaluationRoundListResponse) => {\n        const convertedToInput: EvaluationRoundInput[] = response.page.map(\n          evaluationRound => convertEvaluationRoundToInput(evaluationRound),\n        )\n\n        allEvaluationRoundInputList.push(...convertedToInput)\n        errorHandleCallback(undefined)\n\n        if (response.nextPageToken) {\n          getEvaluationRounds(response.nextPageToken)\n        } else {\n          // no more pages left. we can set the list\n          setListCallback(allEvaluationRoundInputList)\n        }\n      })\n      .catch(error => {\n        errorHandleCallback(error)\n      })\n  }\n\n  //initially no next page token\n  getEvaluationRounds(undefined)\n}\n\n/**\n * Edits EvaluationsRounds for an Evaluation.\n */\nexport const EvaluationRoundEditorList: React.FunctionComponent<\n  EvaluationRoundEditorListProps\n> = ({ evaluationId }: EvaluationRoundEditorListProps) => {\n  const { accessToken } = useSynapseContext()\n  const [error, setError] = useState<string | SynapseClientError | undefined>()\n\n  const {\n    list: evaluationRoundInputList,\n    appendToList: appendToEvaluationRoundInputList,\n    handleListChange: handleEvaluationRoundInputListChange,\n    handleListRemove: handleEvaluationRoundInputListRemove,\n    setList: setEvaluationRoundInputList,\n  } = useListState<EvaluationRoundInput>([])\n\n  //run only once\n  useEffect(\n    () => {\n      fetchEvaluationList(\n        evaluationId,\n        accessToken!,\n        setEvaluationRoundInputList,\n        setError,\n      )\n    },\n    // we explicitly dont want to list setEvaluationRoundInputList nor setError as a dependency\n    // if we do, the fetchEvaluationList will re-fetch from the backend on every new render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [accessToken, evaluationId],\n  )\n\n  if (error) {\n    return <ErrorBanner error={error} />\n  }\n\n  return (\n    <div className=\"evaluation-round-editor-list bootstrap-4-backport\">\n      <div className=\"evaluation-rounds\">\n        {evaluationRoundInputList.map((evaluationRoundInput, index) => {\n          return (\n            <EvaluationRoundEditor\n              key={evaluationRoundInput.reactListKey}\n              evaluationRoundInput={evaluationRoundInput}\n              onSave={handleEvaluationRoundInputListChange(index)}\n              onDelete={handleEvaluationRoundInputListRemove(index)}\n            />\n          )\n        })}\n      </div>\n\n      <div>\n        <Button\n          className=\"add-round-button\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            appendToEvaluationRoundInputList({\n              reactListKey: shortid(),\n              evaluationId: evaluationId,\n              roundStart: '',\n              roundEnd: '',\n              totalSubmissionLimit: '',\n              otherLimits: [],\n            })\n          }}\n        >\n          Add Round\n        </Button>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { EvaluationEditor } from './EvaluationEditor'\nimport { EvaluationRoundEditorList } from './EvaluationRoundEditorList'\nimport { Alert, Button } from '@mui/material'\n\nexport type EvaluationEditorPageProps = {\n  /** Use if UPDATING an existing Evaluation. Id of the evaluation to edit */\n  readonly evaluationId?: string\n  /** Use if CREATING a new Evaluation. Id of the Entity that will be associated with the Evaluation */\n  readonly entityId?: string\n  /** Callback after successful deletion of the Evaluation */\n  readonly onDeleteSuccess: () => void\n}\n\n/**\n * Combined editor that allows editing an Evaluation's data and also it's associated rounds (once the Evaluation exists on Synapse)\n */\nexport const EvaluationEditorPage: React.FunctionComponent<\n  EvaluationEditorPageProps\n> = ({\n  evaluationId,\n  entityId,\n  onDeleteSuccess,\n}: EvaluationEditorPageProps) => {\n  const [savedEvaluationId, setSavedEvaluationId] = useState<\n    string | undefined\n  >(evaluationId)\n  return (\n    <div className=\"bootstrap-4-backport\">\n      <EvaluationEditor\n        evaluationId={savedEvaluationId}\n        //do not use entityId if we already have the evaluation Id\n        entityId={savedEvaluationId ? undefined : entityId}\n        onDeleteSuccess={onDeleteSuccess}\n        onSaveSuccess={setSavedEvaluationId}\n      />\n\n      <div className=\"mt-4\">\n        {savedEvaluationId ? (\n          <EvaluationRoundEditorList evaluationId={savedEvaluationId} />\n        ) : (\n          // shows an alert informing user to first create an Evaluation if they\n          // click the \"Add Round\" button\n          <FakeEvaluationRoundEditorList />\n        )}\n      </div>\n    </div>\n  )\n}\n\n/**\n * special case handling when the evaluation has not been created yet (i.e. does not exist)\n * in this case, we show a fake \"add round\" button that when clicked, will\n * display an alert telling the user to first create an Evaluation\n *\n * Note: an alternative would be to modify the existing EvaluationRoundEditorList\n * to accept a nullable evaluationId (i.e. `string?` instead of `string`)\n * so that we can move this fake Alert functionality into it.\n *\n * Since the \"uncreated Evaluation\" edge case is currently only specific to the EvaluationEditorPage,\n * I believe adopting this alternative would add unnecessary complexity,\n * forcing EvaluationRoundEditorList to handle undefined `evaluationId`.\n */\nconst FakeEvaluationRoundEditorList: React.FunctionComponent = () => {\n  const [showEvaluationNotExistAlert, setShowEvaluationNotExistAlert] =\n    useState<boolean>(false)\n\n  return (\n    <div data-testid=\"FakeEvaluationRoundEditorList\">\n      {showEvaluationNotExistAlert ? (\n        <Alert severity={'info'}>\n          Evaluation Rounds can be edited once the Evaluation has been created.\n        </Alert>\n      ) : (\n        <Button\n          className=\"add-round-button\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            setShowEvaluationNotExistAlert(true)\n          }}\n        >\n          Add Round\n        </Button>\n      )}\n    </div>\n  )\n}\n\nexport const HelpersToTest = {\n  FakeEvaluationRoundEditorList,\n}\n"],"names":["useListState","initialState","list","setList","useState","index","changedValue","modifiedList","value","arr_index","newItem","AddBox","createSvgIcon","_jsx","EvaluationEditor","evaluationId","entityId","onDeleteSuccess","onSaveSuccess","accessToken","useSynapseContext","error","setError","showSaveSuccess","setShowSaveSuccess","useEffect","name","setName","description","setDescription","submissionInstructionsMessage","setSubmissionInstructionsMessage","submissionReceiptMessage","setSubmissionReceiptMessage","evaluation","setEvaluation","SynapseClient","retrievedEvaluation","error2","onSave","newOrUpdatedEvaluation","evaluation2","onDelete","jsx","jsxs","Row","Col","EvaluationEditorDropdown","Form","event","CreatedOnByUserDiv","ErrorBanner","Alert","Button","onClick","deleteWarningShow","setDeleteWarningShow","Fragment","WarningDialog","Dropdown","IconSvg","LIMIT_TYPE_DISPLAY_NAME","EvaluationRoundLimitOptions","limitInput","allSelectedTypes","onChange","React","FormGroup","FormControl","displayLimitType","displayName","AVAILABLE_LIMIT_TYPES","selectUnusedType","selectedTypes","key","EvaluationRoundLimitOptionsList","limitInputs","handleChange","handleDeleteLimit","onAddNewLimit","limit","addNewLimit","useCallback","IconButton","CloseTwoTone","seed","getNextValue","setSeed","_seed_","randomFromSeed","require$$0","ORIGINAL","alphabet","previousSeed","shuffled","reset","setCharacters","_alphabet_","unique","item","ind","arr","characters","shuffle","sourceArray","targetArray","r","characterIndex","getShuffled","lookup","alphabetShuffled","get","alphabet_1","crypto","randomByte","size","bytes","randomByteBrowser","format_browser","random","mask","step","id","i","require$$1","format","require$$2","generate","number","loopCounter","done","str","generate_1","REDUCE_TIME","version","counter","previousSeconds","build","clusterWorkerId","seconds","build_1","isShortId","nonAlphabetic","isValid","seedValue","module","worker","workerId","newCharacters","shortid","convertEvaluationRoundToInput","evaluationRound","reactListKey","extractTotalLimit","convertRoundLimitsToInput","limits","evaluationLimit","ignorePrevValue","evaluationRoundLimits","limitInputList","EvaluationRoundEditorDropdown","e","t","this","dayjs","utc","isSameOrAfter","disallowCalendarDateBefore","date","startOfDay","currentDate","determineRoundStatus","roundStart","roundEnd","className","iconProps","status","now","convertInputsToEvaluationRound","evaluationRoundInputProp","startDate","endDate","totalSubmissionLimit","advancedLimits","totalSubmissionLimitInt","maxSubmissionInt","EvaluationRoundEditor","evaluationRoundInput","setStartDate","setEndDate","setTotalSubmissionLimit","advancedMode","setAdvancedMode","handleListRemove","handleAdvancedLimitsChange","addAdvancedLimit","handleAdvancedLimitsRemove","generatedRemoveFunc","onSaveButtonClick","err","updateEvaluationRound","createEvaluationRound","createdOrUpdatedRound","newInput","onDeleteButtonClick","deleteEvaluationRound","disallowDatesBeforeNow","Card","CalendarWithIconFormGroup","fetchEvaluationList","setListCallback","errorHandleCallback","allEvaluationRoundInputList","getEvaluationRounds","nextPageToken","getEvaluationRoundsList","response","convertedToInput","EvaluationRoundEditorList","evaluationRoundInputList","appendToEvaluationRoundInputList","handleEvaluationRoundInputListChange","handleEvaluationRoundInputListRemove","setEvaluationRoundInputList","EvaluationEditorPage","savedEvaluationId","setSavedEvaluationId","FakeEvaluationRoundEditorList","showEvaluationNotExistAlert","setShowEvaluationNotExistAlert"],"mappings":"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","x_google_ignoreList":[1,5,6,7,8,9,10,11,12,13,16]}