{"version":3,"file":"StorybookComponentWrapper-fb6d2a4c.js","sources":["../../../../node_modules/.pnpm/react-query@3.39.1_react-dom@18.2.0_react@18.2.0/node_modules/react-query/devtools/index.js","../../src/components/StorybookComponentWrapper.tsx"],"sourcesContent":["if (process.env.NODE_ENV !== 'development') {\n  module.exports = {\n    ReactQueryDevtools: function () {\n      return null\n    },\n    ReactQueryDevtoolsPanel: function () {\n      return null\n    },\n  }\n} else {\n  module.exports = require('./development')\n}\n","import React, { useEffect, useMemo } from 'react'\nimport { MemoryRouter } from 'react-router-dom'\nimport { SynapseContextType } from '../utils/context/SynapseContext'\nimport { QueryClient } from 'react-query'\nimport SynapseClient from '../synapse-client'\nimport { SynapseToastContainer } from './ToastMessage/ToastMessage'\nimport { ReactQueryDevtools } from 'react-query/devtools'\nimport dayjs from 'dayjs'\nimport {\n  getAccessTokenFromCookie,\n  getAuthenticatedOn,\n  getUserProfile,\n  signOut,\n} from '../synapse-client/SynapseClient'\nimport { SynapseClientError } from '../utils/SynapseClientError'\nimport { STACK_MAP, SynapseStack } from '../utils/functions/getEndpoint'\nimport defaultMuiThemeOptions from '../theme/DefaultTheme'\nimport {\n  adKnowledgePortalPalette,\n  arkPortalPalette,\n  bsmnPortalPalette,\n  cancerComplexityPortalPalette,\n  crcResearcherPortalPalette,\n  digitalHealthPortalPalette,\n  elPortalPalette,\n  mtbPalette,\n  nfPortalPalette,\n  palette,\n  psychEncodePortalPalette,\n  sageBionetworksPalette,\n  stopAdPortalPalette,\n} from '../theme/palette/Palettes'\nimport useDetectSSOCode from '../utils/hooks/useDetectSSOCode'\nimport {\n  defaultQueryClientConfig,\n  FullContextProvider,\n} from '../utils/context/FullContextProvider'\nimport { createTheme } from '@mui/material/styles'\n\nexport async function sessionChangeHandler() {\n  let accessToken: string | undefined = await getAccessTokenFromCookie()\n  let profile\n  try {\n    profile = await getUserProfile(accessToken)\n  } catch (err) {\n    if (err instanceof SynapseClientError && err.status === 401) {\n      console.error(\n        'Encountered error fetching profile: ',\n        err,\n        'Signing out...',\n      )\n      await signOut()\n      accessToken = undefined\n    }\n    // Otherwise rethrow\n    throw err\n  }\n  let date\n  if (accessToken) {\n    getAuthenticatedOn(accessToken).then(authenticatedOn => {\n      date = dayjs(authenticatedOn.authenticatedOn).format('L LT')\n    })\n  }\n  return { accessToken, profile, authenticatedOn: date }\n}\n\nconst storybookQueryClient = new QueryClient(defaultQueryClientConfig)\n\nfunction overrideEndpoint(stack: SynapseStack) {\n  const endpointConfig = STACK_MAP[stack]\n  ;(window as any)['SRC'] = {\n    OVERRIDE_ENDPOINT_CONFIG: endpointConfig,\n  }\n  storybookQueryClient.resetQueries()\n}\n\nconst paletteMap = {\n  default: palette,\n  sageBionetworks: sageBionetworksPalette,\n  mtb: mtbPalette,\n  arkPortal: arkPortalPalette,\n  adKnowledgePortal: adKnowledgePortalPalette,\n  nfPortal: nfPortalPalette,\n  bsmnPortal: bsmnPortalPalette,\n  psychEncodePortal: psychEncodePortalPalette,\n  stopAdPortal: stopAdPortalPalette,\n  digitalHealthPortal: digitalHealthPortalPalette,\n  crcResearcherPortal: crcResearcherPortalPalette,\n  cancerComplexityPortal: cancerComplexityPortalPalette,\n  elPortal: elPortalPalette,\n}\n\n/**\n * Wraps storybook story components to ensure that all components receive required context.\n * @param props\n * @returns\n */\nexport function StorybookComponentWrapper(props: {\n  children: React.ReactNode\n  /* This will match the `globalTypes` object in preview.jsx. */\n  storybookContext: {\n    globals: {\n      stack?: SynapseStack\n      palette: keyof typeof paletteMap\n      showReactQueryDevtools?: boolean\n    }\n    parameters: {\n      stack?: SynapseStack\n    }\n  }\n}) {\n  const { storybookContext } = props\n\n  useEffect(() => {\n    overrideEndpoint(\n      (storybookContext.globals.stack as SynapseStack) ||\n        (storybookContext.parameters.stack as SynapseStack),\n    )\n  }, [storybookContext.globals.stack])\n\n  const [accessToken, setAccessToken] = React.useState<string | undefined>(\n    undefined,\n  )\n\n  useDetectSSOCode()\n\n  useEffect(() => {\n    sessionChangeHandler().then(data => {\n      setAccessToken(data.accessToken)\n    })\n  })\n\n  useEffect(() => {\n    async function resetCache() {\n      await storybookQueryClient.cancelQueries()\n      storybookQueryClient.removeQueries()\n      await storybookQueryClient.invalidateQueries()\n    }\n\n    resetCache()\n  }, [accessToken])\n\n  const synapseContext: Partial<SynapseContextType> = useMemo(\n    () => ({\n      accessToken: accessToken,\n      isInExperimentalMode: SynapseClient.isInSynapseExperimentalMode(),\n      utcTime: SynapseClient.getUseUtcTimeFromCookie(),\n      withErrorBoundary: true,\n      downloadCartPageUrl: '/?path=/story/download-downloadcartpage--demo',\n    }),\n    [accessToken],\n  )\n\n  const theme = createTheme(defaultMuiThemeOptions, {\n    palette: paletteMap[storybookContext.globals.palette],\n  })\n\n  return (\n    <FullContextProvider\n      queryClient={storybookQueryClient}\n      key={accessToken}\n      synapseContext={synapseContext}\n      theme={theme}\n    >\n      {storybookContext.globals.showReactQueryDevtools && (\n        <ReactQueryDevtools />\n      )}\n      <MemoryRouter>\n        <SynapseToastContainer />\n        <main>{props.children}</main>\n      </MemoryRouter>\n    </FullContextProvider>\n  )\n}\n\nexport default StorybookComponentWrapper\n"],"names":["devtoolsModule","sessionChangeHandler","accessToken","getAccessTokenFromCookie","profile","getUserProfile","err","SynapseClientError","signOut","date","getAuthenticatedOn","authenticatedOn","dayjs","storybookQueryClient","QueryClient","defaultQueryClientConfig","overrideEndpoint","stack","endpointConfig","STACK_MAP","paletteMap","palette","sageBionetworksPalette","mtbPalette","arkPortalPalette","adKnowledgePortalPalette","nfPortalPalette","bsmnPortalPalette","psychEncodePortalPalette","stopAdPortalPalette","digitalHealthPortalPalette","crcResearcherPortalPalette","cancerComplexityPortalPalette","elPortalPalette","StorybookComponentWrapper","props","storybookContext","useEffect","setAccessToken","React","useDetectSSOCode","data","resetCache","synapseContext","useMemo","SynapseClient","theme","createTheme","defaultMuiThemeOptions","jsxs","FullContextProvider","jsx","ReactQueryDevtools","MemoryRouter","SynapseToastContainer"],"mappings":"igBACEA,UAAiB,CACf,mBAAoB,UAAY,CAC9B,OAAO,IACR,EACD,wBAAyB,UAAY,CACnC,OAAO,IACR,CACF,kBC+BH,eAAAC,GAAA,CACE,IAAAC,EAAA,MAAAC,IACAC,EACA,GAAA,CACEA,EAAA,MAAAC,EAAAH,CAAA,CAA0C,OAAAI,EAAA,CAE1C,MAAAA,aAAAC,GAAAD,EAAA,SAAA,MACE,QAAA,MAAQ,uCACNA,EACA,gBACA,EAEF,MAAAE,EAAA,EACAN,EAAA,QAGFI,CAAM,CAER,IAAAG,EACA,OAAAP,GACEQ,EAAAR,CAAA,EAAA,KAAAS,GAAA,CACEF,EAAAG,EAAAD,EAAA,eAAA,EAAA,OAAA,MAAA,CAA2D,CAAA,EAG/D,CAAA,YAAAT,EAAA,QAAAE,EAAA,gBAAAK,CAAA,CACF,CAEA,MAAAI,EAAA,IAAAC,EAAAC,CAAA,EAEA,SAAAC,EAAAC,EAAA,CACE,MAAAC,EAAAC,EAAAF,CAAA,EACC,OAAA,IAAA,CAAyB,yBAAAC,CACE,EAE5BL,EAAA,aAAA,CACF,CAEA,MAAAO,EAAA,CAAmB,QAAAC,EACR,gBAAAC,EACQ,IAAAC,EACZ,UAAAC,EACM,kBAAAC,EACQ,SAAAC,EACT,WAAAC,EACE,kBAAAC,EACO,aAAAC,EACL,oBAAAC,EACO,oBAAAC,EACA,uBAAAC,EACG,SAAAC,CAE1B,EAOO,SAAAC,EAAAC,EAAA,CAcL,KAAA,CAAA,iBAAAC,CAAA,EAAAD,EAEAE,EAAAA,UAAA,IAAA,CACErB,EAAAoB,EAAA,QAAA,OAAAA,EAAA,WAAA,KAEiC,CACjC,EAAA,CAAAA,EAAA,QAAA,KAAA,CAAA,EAGF,KAAA,CAAAlC,EAAAoC,CAAA,EAAAC,EAAA,SAA4C,MAC1C,EAGFC,IAEAH,EAAAA,UAAA,IAAA,CACEpC,EAAA,EAAA,KAAAwC,GAAA,CACEH,EAAAG,EAAA,WAAA,CAA+B,CAAA,CAChC,CAAA,EAGHJ,EAAAA,UAAA,IAAA,CACE,eAAAK,GAAA,CACE,MAAA7B,EAAA,gBACAA,EAAA,cAAA,EACA,MAAAA,EAAA,mBAA6C,CAG/C6B,GAAW,EAAA,CAAAxC,CAAA,CAAA,EAGb,MAAAyC,EAAAC,EAAA,QAAoD,KAAA,CAC3C,YAAA1C,EACL,qBAAA2C,EAAA,4BAAA,EACgE,QAAAA,EAAA,wBAAA,EACjB,kBAAA,GAC5B,oBAAA,+CACE,GACvB,CAAA3C,CAAA,CACY,EAGd4C,EAAAC,EAAAC,EAAA,CAAkD,QAAA5B,EAAAgB,EAAA,QAAA,OAAA,CACI,CAAA,EAGtD,OAAAa,EACEC,EAAC,CAAA,YAAArC,EACc,eAAA8B,EAEb,MAAAG,EACA,SAAA,CAECV,EAAA,QAAA,wBAAAe,EAAAC,EAAAA,mBAAA,CAAA,CAAA,EACqBH,EAAAI,EAAA,CAAA,SAAA,CAGpBF,EAAAG,EAAA,EAAA,EAAuBH,EAAA,OAAA,CAAA,SAAAhB,EAAA,QAAA,CAAA,CACD,EAAA,CACxB,CAAA,EAAAjC,CAVK,CAaX","x_google_ignoreList":[0]}