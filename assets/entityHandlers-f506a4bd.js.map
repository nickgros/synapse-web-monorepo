{"version":3,"file":"entityHandlers-f506a4bd.js","sources":["../../src/mocks/mock_upload_destination.ts","../../src/mocks/msw/handlers/entityHandlers.ts"],"sourcesContent":["import {\n  ExternalGoogleCloudUploadDestination,\n  ExternalObjectStoreUploadDestination,\n  ExternalS3UploadDestination,\n  ExternalUploadDestination,\n  S3UploadDestination,\n  UploadDestination,\n  UploadType,\n} from '@sage-bionetworks/synapse-types'\nimport { SYNAPSE_STORAGE_LOCATION_ID } from '../synapse-client'\n\nexport const MOCK_EXTERNAL_S3_STORAGE_LOCATION_ID = 1111\nexport const MOCK_EXTERNAL_GOOGLE_CLOUD_STORAGE_LOCATION_ID = 2222\nexport const MOCK_EXTERNAL_STORAGE_LOCATION_ID = 3333\nexport const MOCK_EXTERNAL_OBJECT_STORE_STORAGE_LOCATION_ID = 4444\n\nconst baseUploadDestination: UploadDestination = {\n  storageLocationId: SYNAPSE_STORAGE_LOCATION_ID,\n  uploadType: UploadType.S3,\n  banner: '',\n  concreteType: 'org.sagebionetworks.repo.model.file.S3UploadDestination',\n}\n\nexport const mockS3UploadDestination: S3UploadDestination = {\n  ...baseUploadDestination,\n  baseKey: 'exampleS3BaseKey',\n  stsEnabled: true,\n  concreteType: 'org.sagebionetworks.repo.model.file.S3UploadDestination',\n}\n\nexport const mockExternalS3UploadDestination: ExternalS3UploadDestination = {\n  ...mockS3UploadDestination,\n  storageLocationId: MOCK_EXTERNAL_S3_STORAGE_LOCATION_ID,\n  endpointUrl: 'https://my-endpoint.fake',\n  bucket: 'myExternalS3Bucket',\n  concreteType:\n    'org.sagebionetworks.repo.model.file.ExternalS3UploadDestination',\n}\n\nexport const mockExternalGoogleCloudUploadDestination: ExternalGoogleCloudUploadDestination =\n  {\n    ...baseUploadDestination,\n    baseKey: 'exampleGCPBaseKey',\n    storageLocationId: MOCK_EXTERNAL_GOOGLE_CLOUD_STORAGE_LOCATION_ID,\n    uploadType: UploadType.GOOGLECLOUDSTORAGE,\n    bucket: 'myExternalGCPBucket',\n    concreteType:\n      'org.sagebionetworks.repo.model.file.ExternalGoogleCloudUploadDestination',\n  }\n\nexport const mockExternalUploadDestination: ExternalUploadDestination = {\n  ...baseUploadDestination,\n  storageLocationId: MOCK_EXTERNAL_STORAGE_LOCATION_ID,\n  uploadType: UploadType.HTTPS,\n  url: 'https://myurl.fake',\n  concreteType: 'org.sagebionetworks.repo.model.file.ExternalUploadDestination',\n}\n\nexport const mockExternalObjectStoreUploadDestination: ExternalObjectStoreUploadDestination =\n  {\n    ...baseUploadDestination,\n    storageLocationId: MOCK_EXTERNAL_OBJECT_STORE_STORAGE_LOCATION_ID,\n    uploadType: UploadType.HTTPS,\n    endpointUrl: 'https://my-endpoint.fake',\n    bucket: 'myExternalObjectStoreBucket',\n    keyPrefixUUID: 'uuidKeyPrefix',\n    concreteType:\n      'org.sagebionetworks.repo.model.file.ExternalObjectStoreUploadDestination',\n  }\n\nexport const mockUploadDestinations = [\n  mockS3UploadDestination,\n  mockExternalS3UploadDestination,\n  mockExternalGoogleCloudUploadDestination,\n  mockExternalUploadDestination,\n  mockExternalObjectStoreUploadDestination,\n]\n","import { rest } from 'msw'\nimport {\n  ENTITY,\n  ENTITY_BUNDLE_V2,\n  ENTITY_HEADERS,\n  ENTITY_ID,\n  ENTITY_ID_VERSION,\n  ENTITY_ID_VERSIONS,\n  ENTITY_JSON,\n  ENTITY_SCHEMA_BINDING,\n} from '../../../utils/APIConstants'\nimport {\n  Entity,\n  EntityBundle,\n  EntityHeader,\n  EntityJson,\n  EntityPath,\n  PaginatedResults,\n  ProjectHeaderList,\n  Reference,\n  VersionableEntity,\n} from '@sage-bionetworks/synapse-types'\nimport { VersionInfo } from '@sage-bionetworks/synapse-types'\nimport mockEntities from '../../entity'\nimport { MOCK_INVALID_PROJECT_NAME } from '../../entity/mockEntity'\nimport { mockSchemaBinding } from '../../mockSchema'\nimport { SynapseApiResponse } from '../handlers'\nimport { UploadDestination, UploadType } from '@sage-bionetworks/synapse-types'\nimport { uniqueId } from 'lodash-es'\nimport { mockProjectsEntityData } from '../../entity/mockProject'\nimport { mockUploadDestinations } from '../../mock_upload_destination'\n\nexport const getEntityHandlers = (backendOrigin: string) => [\n  /**\n   * Create a new entity\n   */\n  rest.post(`${backendOrigin}${ENTITY}`, async (req, res, ctx) => {\n    let status = 200\n    const requestBody = await req.json<Entity>()\n    let response: SynapseApiResponse<Entity> = { reason: '...' }\n    if (!requestBody) {\n      status = 400\n      response = {\n        reason: `Mock service worker received the following malformed body for PUT ${ENTITY} : ${JSON.stringify(\n          requestBody,\n        )}`,\n      }\n    } else {\n      if (requestBody.name === MOCK_INVALID_PROJECT_NAME) {\n        response.reason = 'Invalid project name'\n        status = 403\n      } else {\n        response = { id: uniqueId('syn'), ...requestBody }\n      }\n    }\n\n    return res(ctx.status(status), ctx.json(response))\n  }),\n\n  /**\n   * Get entity by ID\n   */\n  rest.get(\n    `${backendOrigin}${ENTITY_ID(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<Entity> = {\n        reason: `Mock Service worker could not find a mock entity with ID ${req.params.entityId}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData) {\n        response = entityData.entity\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID_VERSIONS(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<PaginatedResults<VersionInfo>> = {\n        reason: `Mock Service worker could not find mock entity versions for ID ${req.params.entityId}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData && entityData.versionInfo) {\n        response = { results: entityData.versionInfo }\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID_VERSION(':entityId', ':versionNumber')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      const entityId = req.params.entityId\n      const versionNumber = req.params.versionNumber.toString()\n      const requestedVersionNumber = parseInt(versionNumber)\n\n      let response: SynapseApiResponse<VersionableEntity> = {\n        reason: `Mock Service worker could not find a mock versioned entity with ID ${entityId}.${versionNumber}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (\n        entityData &&\n        entityData.versions &&\n        entityData.versions[requestedVersionNumber]\n      ) {\n        response = entityData.versions[\n          requestedVersionNumber\n        ] as VersionableEntity\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_BUNDLE_V2(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityBundle> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData?.bundle) {\n        response = entityData.bundle\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_BUNDLE_V2(':entityId', ':versionNumber')}`,\n    async (req, res, ctx) => {\n      const entityId = req.params.entityId\n      const versionNumber = parseInt(req.params.versionNumber as string)\n      let status = 404\n      let response: SynapseApiResponse<EntityBundle> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${entityId}`,\n      }\n      const entityData = mockEntities.find(entity => entity.id === entityId)\n      if (entityData) {\n        const bundle = entityData.bundle\n        if (entityData.versions && entityData.versions[versionNumber]) {\n          response = {\n            ...bundle,\n            entity: entityData.versions[versionNumber],\n          } as EntityBundle\n        } else {\n          response = bundle as EntityBundle\n        }\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ENTITY_SCHEMA_BINDING(':entityId')}`,\n    async (req, res, ctx) => {\n      return res(ctx.status(200), ctx.json(mockSchemaBinding))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ENTITY_JSON(':entityId')}`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityJson> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData?.json) {\n        response = entityData.json\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_HEADERS}`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<PaginatedResults<EntityHeader>> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n\n      const referenceList = req.body as { references: Reference[] }\n      const entityData = mockEntities\n        .filter(entity =>\n          referenceList.references.find(ref => ref.targetId === entity.id),\n        )\n        .map(entity => entity.entityHeader)\n        .filter((header): header is EntityHeader => !!header)\n\n      if (entityData) {\n        response = { results: entityData }\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID(':entityId')}/path`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityPath> = {\n        reason: `Mock Service worker could not find a mock entity path using ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(e => req.params.entityId === e.id)\n\n      if (entityData && entityData.path) {\n        response = entityData.path\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}/file/v1/entity/:id/uploadDestination`,\n    async (req, res, ctx) => {\n      const response: UploadDestination = {\n        banner: '',\n        storageLocationId: 1,\n        uploadType: UploadType.S3,\n        concreteType: 'org.sagebionetworks.repo.model.file.S3UploadDestination',\n      }\n      return res(ctx.status(200), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}/file/v1/entity/:id/uploadDestination/:storageLocationId`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<UploadDestination> = {\n        reason: `Mock Service worker could not find an uploadDestination using storageLocationId ${req.params.storageLocationId}`,\n      }\n      const uploadDestination = mockUploadDestinations.find(\n        e => Number(req.params.storageLocationId) === e.storageLocationId,\n      )\n\n      if (uploadDestination) {\n        response = uploadDestination\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(`${backendOrigin}/repo/v1/projects`, async (req, res, ctx) => {\n    const response: ProjectHeaderList = {\n      results: mockProjectsEntityData.map(p => ({\n        name: p.name,\n        id: p.id,\n        lastActivity: '2024-01-04T21:11:59.000Z',\n        modifiedBy: parseInt(p.entity.modifiedBy!),\n        modifiedOn: p.entity.modifiedOn!,\n      })),\n    }\n    return res(ctx.status(200), ctx.json(response))\n  }),\n]\n"],"names":["MOCK_EXTERNAL_S3_STORAGE_LOCATION_ID","MOCK_EXTERNAL_GOOGLE_CLOUD_STORAGE_LOCATION_ID","MOCK_EXTERNAL_STORAGE_LOCATION_ID","MOCK_EXTERNAL_OBJECT_STORE_STORAGE_LOCATION_ID","baseUploadDestination","SYNAPSE_STORAGE_LOCATION_ID","UploadType","mockS3UploadDestination","mockExternalS3UploadDestination","mockExternalGoogleCloudUploadDestination","mockExternalUploadDestination","mockExternalObjectStoreUploadDestination","mockUploadDestinations","getEntityHandlers","backendOrigin","rest","ENTITY","req","res","ctx","status","requestBody","response","MOCK_INVALID_PROJECT_NAME","uniqueId","ENTITY_ID","entityData","mockEntities","entity","ENTITY_ID_VERSIONS","ENTITY_ID_VERSION","entityId","versionNumber","requestedVersionNumber","ENTITY_BUNDLE_V2","bundle","ENTITY_SCHEMA_BINDING","mockSchemaBinding","ENTITY_JSON","ENTITY_HEADERS","referenceList","ref","header","e","uploadDestination","mockProjectsEntityData","p"],"mappings":"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"}