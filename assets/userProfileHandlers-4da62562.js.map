{"version":3,"file":"userProfileHandlers-4da62562.js","sources":["../../src/mocks/msw/handlers/userProfileHandlers.ts"],"sourcesContent":["import { rest } from 'msw'\nimport {\n  FAVORITES,\n  NOTIFICATION_EMAIL,\n  PROFILE_IMAGE_PREVIEW,\n  USER_BUNDLE,\n  USER_GROUP_HEADERS,\n  USER_GROUP_HEADERS_BATCH,\n  USER_ID_BUNDLE,\n  USER_PROFILE,\n  USER_PROFILE_ID,\n} from '../../../utils/APIConstants'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport {\n  TwoFactorAuthStatus,\n  TYPE_FILTER,\n  UserBundle,\n  UserGroupHeaderResponsePage,\n  UserProfile,\n} from '@sage-bionetworks/synapse-types'\nimport { mockPaginatedEntityHeaders } from '../../entity/mockEntity'\nimport {\n  mockUserBundle,\n  mockUserData,\n  mockUserProfileData,\n} from '../../user/mock_user_profile'\nimport { SynapseApiResponse } from '../handlers'\nimport { UserProfileList } from '../../../synapse-client/SynapseClient'\n\nexport const getUserProfileHandlers = (backendOrigin: string) => [\n  /**\n   * Get User Profile by ID\n   */\n  rest.get(\n    `${backendOrigin}${USER_PROFILE_ID(':id')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<UserProfile> = {\n        reason: `Mock Service worker could not find a user profile with ID ${req.params.id}`,\n      }\n      const match = mockUserData.find(\n        userData => userData.id.toString() === req.params.id,\n      )\n      if (match && match.userProfile) {\n        response = match.userProfile\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  /**\n   * Get the caller's user profile\n   */\n  rest.get(`${backendOrigin}${USER_PROFILE}`, async (req, res, ctx) => {\n    // default return a mock UserProfile.\n    const response: UserProfile = mockUserProfileData\n    const status = 200\n    return res(ctx.status(status), ctx.json(response))\n  }),\n\n  /**\n   * Get the caller's user bundle\n   */\n  rest.get(\n    `${getEndpoint(BackendDestinationEnum.REPO_ENDPOINT)}${USER_BUNDLE}`,\n    async (req, res, ctx) => {\n      const result: UserBundle = mockUserBundle\n      return res(ctx.status(200), ctx.json(result))\n    },\n  ),\n\n  /**\n   * Get a user bundle by ID\n   */\n  rest.get(\n    `${backendOrigin}${USER_ID_BUNDLE(':id')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<UserBundle> = {\n        reason: `Mock Service worker could not find a user bundle with ID ${req.params.id}`,\n      }\n      const match = mockUserData.find(\n        userData => userData.id.toString() === req.params.id,\n      )\n      if (match && match.userBundle) {\n        response = match.userBundle\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  /**\n   * Get the caller's favorites\n   */\n  rest.get(`${backendOrigin}${FAVORITES}`, async (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json(mockPaginatedEntityHeaders))\n  }),\n\n  /**\n   * Get a batch of user group headers\n   */\n  rest.get(\n    `${backendOrigin}${USER_GROUP_HEADERS_BATCH}`,\n    async (req, res, ctx) => {\n      const ids = req.url.searchParams.get('ids')!.split(',')\n      const responsePage: UserGroupHeaderResponsePage = {\n        children: mockUserData\n          .filter(userData => ids.includes(userData.id.toString()))\n          .map(userData => userData.userGroupHeader),\n      }\n      return res(ctx.status(200), ctx.json(responsePage))\n    },\n  ),\n\n  /**\n   * Get a batch of user profiles\n   */\n  rest.post(`${backendOrigin}${USER_PROFILE}`, async (req, res, ctx) => {\n    const requestedList = (await req.json()).list as string[]\n    const responsePage: UserProfileList = {\n      list: mockUserData\n        .filter(userData => requestedList.includes(userData.id.toString()))\n        .map(userData => userData.userProfile)\n        .filter(\n          (userProfile): userProfile is UserProfile => userProfile != null,\n        ),\n    }\n    return res(ctx.status(200), ctx.json(responsePage))\n  }),\n\n  /**\n   * Get userGroupHeaders by prefix\n   */\n  rest.get(`${backendOrigin}${USER_GROUP_HEADERS}`, async (req, res, ctx) => {\n    const prefix = (req.url.searchParams.get('prefix') ?? '').toLowerCase()\n    const typeFilter = req.url.searchParams.get('typeFilter') as TYPE_FILTER\n    const responsePage: UserGroupHeaderResponsePage = {\n      children: mockUserData\n        .filter(userData => {\n          if (!typeFilter || typeFilter === TYPE_FILTER.ALL) {\n            return true\n          } else if (typeFilter === TYPE_FILTER.USERS_ONLY) {\n            return userData.userGroupHeader.isIndividual\n          } else {\n            return !userData.userGroupHeader.isIndividual\n          }\n        })\n        .filter(\n          userData =>\n            userData.userGroupHeader.userName\n              .toLowerCase()\n              .startsWith(prefix) ||\n            (userData.userGroupHeader.firstName || '')\n              .toLowerCase()\n              .startsWith(prefix) ||\n            (userData.userGroupHeader.displayName || '')\n              .toLowerCase()\n              .startsWith(prefix) ||\n            (userData.userGroupHeader.lastName || '')\n              .toLowerCase()\n              .startsWith(prefix),\n        )\n        .map(userData => userData.userGroupHeader),\n    }\n    return res(ctx.status(200), ctx.json(responsePage))\n  }),\n\n  /**\n   * Return a 404 when fetching the profile image\n   */\n  rest.get(\n    `${backendOrigin}${PROFILE_IMAGE_PREVIEW(':userId')}`,\n    async (req, res, ctx) => {\n      return res(\n        ctx.status(404),\n        ctx.json({ reason: 'user has no profile image' }),\n      )\n    },\n  ),\n\n  rest.get(`${backendOrigin}${NOTIFICATION_EMAIL}`, async (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({ email: mockUserBundle.userProfile?.email }),\n    )\n  }),\n\n  rest.get(`${backendOrigin}/auth/v1/2fa`, async (req, res, ctx) => {\n    const response: TwoFactorAuthStatus = {\n      status: 'ENABLED',\n    }\n    return res(ctx.status(200), ctx.json(response))\n  }),\n]\n\nexport function getCurrentUserCertifiedValidatedHandler(\n  backendOrigin: string,\n  isCertified: boolean,\n  isValidated: boolean,\n) {\n  return rest.get(`${backendOrigin}${USER_BUNDLE}`, async (req, res, ctx) => {\n    const status = 200\n    const response: UserBundle = {\n      ...mockUserBundle,\n      isCertified: isCertified,\n      isVerified: isValidated,\n    }\n    return res(ctx.status(status), ctx.json(response))\n  })\n}\n"],"names":["getUserProfileHandlers","backendOrigin","rest","USER_PROFILE_ID","req","res","ctx","status","response","match","mockUserData","userData","USER_PROFILE","mockUserProfileData","getEndpoint","BackendDestinationEnum","USER_BUNDLE","result","mockUserBundle","USER_ID_BUNDLE","FAVORITES","mockPaginatedEntityHeaders","USER_GROUP_HEADERS_BATCH","ids","responsePage","requestedList","userProfile","USER_GROUP_HEADERS","prefix","typeFilter","TYPE_FILTER","PROFILE_IMAGE_PREVIEW","NOTIFICATION_EMAIL","_a","getCurrentUserCertifiedValidatedHandler","isCertified","isValidated"],"mappings":"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"}