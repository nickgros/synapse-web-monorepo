{"version":3,"file":"ChallengeTeamWizard-a061991b.js","sources":["../../../../node_modules/.pnpm/@mui+system@5.14.17_@emotion+react@11.11.1_@emotion+styled@11.11.0_@types+react@18.0.27_react@18.2.0/node_modules/@mui/system/esm/Stack/Stack.js","../../src/components/ChallengeTeamWizard/CreateChallengeTeam.tsx","../../../../node_modules/.pnpm/@mui+icons-material@5.14.16_@mui+material@5.14.17_@types+react@18.0.27_react@18.2.0/node_modules/@mui/icons-material/ControlPoint.js","../../src/components/ChallengeTeamWizard/ChallengeTeamSearch.tsx","../../src/synapse-queries/team/useTeamList.ts","../../src/components/ChallengeTeamWizard/ChallengeTeamTable.tsx","../../src/components/ChallengeTeamWizard/SelectChallengeTeam.tsx","../../src/components/ChallengeTeamWizard/RegistrationSuccessful.tsx","../../src/components/ChallengeTeamWizard/JoinRequestForm.tsx","../../src/components/ChallengeTeamWizard/ChallengeTeamWizard.tsx"],"sourcesContent":["'use client';\n\nimport PropTypes from 'prop-types';\nimport createStack from './createStack';\n/**\n *\n * Demos:\n *\n * - [Stack (Joy UI)](https://mui.com/joy-ui/react-stack/)\n * - [Stack (Material UI)](https://mui.com/material-ui/react-stack/)\n * - [Stack (MUI System)](https://mui.com/system/react-stack/)\n *\n * API:\n *\n * - [Stack API](https://mui.com/system/api/stack/)\n */\nconst Stack = createStack();\nprocess.env.NODE_ENV !== \"production\" ? Stack.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'column'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n  /**\n   * Add an element between each child.\n   */\n  divider: PropTypes.node,\n  /**\n   * Defines the space between immediate children.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The system prop, which allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.\n   *\n   * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),\n   * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.\n   *\n   * To enable this flag globally, follow the theme's default props configuration.\n   * @default false\n   */\n  useFlexGap: PropTypes.bool\n} : void 0;\nexport default Stack;","import React, { useState } from 'react'\nimport { Box, Typography } from '@mui/material'\nimport TextField from '../TextField'\n\ntype CreateChallengeTeamProps = {\n  onChangeTeamInfo: (update: CreateTeamRequest) => void\n  onError?: (msg: string) => void\n}\n\nexport type CreateTeamRequest = {\n  name: string\n  description: string\n  message: string\n  invitees: string\n}\n\nexport const CreateChallengeTeam = ({\n  onChangeTeamInfo,\n  onError,\n}: CreateChallengeTeamProps) => {\n  const [team, setTeam] = useState<CreateTeamRequest>({\n    name: '',\n    description: '',\n    message: '',\n    invitees: '',\n  })\n\n  const handleTeamUpdate = (update: Record<string, string>) => {\n    const updatedTeam: CreateTeamRequest = { ...team, ...update }\n    setTeam(updatedTeam)\n    onChangeTeamInfo(updatedTeam)\n  }\n\n  const handleInviteesUpdate = (inviteeString: string) => {\n    const invitees = inviteeString.split(',')\n    if (invitees.length > 3) {\n      if (onError)\n        return onError(\n          'Please limit the initial number of invited members to three. You may add additional members after the team has been created.',\n        )\n    }\n    handleTeamUpdate({ invitees: inviteeString })\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"body1\" sx={{ lineHeight: '20px' }}>\n        Create a new team for this Challenge!\n      </Typography>\n      <TextField\n        id=\"name\"\n        label=\"Team Name\"\n        value={team.name}\n        fullWidth\n        autoFocus\n        required\n        onChange={event => handleTeamUpdate({ name: event.target.value })}\n      />\n      <Box display=\"flex\">\n        <TextField\n          id=\"description\"\n          label={\n            <Box display=\"flex\" gap={2}>\n              <Box>Team Description</Box>\n            </Box>\n          }\n          value={team.description}\n          fullWidth\n          multiline\n          rows={4}\n          onChange={event =>\n            handleTeamUpdate({ description: event.target.value })\n          }\n        />\n      </Box>\n      <Box display=\"flex\">\n        <TextField\n          id=\"message\"\n          label={\n            <Box display=\"flex\" gap={2}>\n              <Box>Recruitment Message</Box>\n            </Box>\n          }\n          value={team.message}\n          fullWidth\n          multiline\n          rows={4}\n          onChange={event => handleTeamUpdate({ message: event.target.value })}\n        />\n      </Box>\n      <TextField\n        id=\"invitees\"\n        label=\"Emails of Additional Members to Invite (max 3)\"\n        placeholder=\"Enter emails separated by comma\"\n        value={team.invitees}\n        fullWidth\n        onChange={event => handleInviteesUpdate(event.target.value)}\n      />\n    </Box>\n  )\n}\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.49 2 2 6.49 2 12s4.49 10 10 10 10-4.49 10-10S17.51 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"\n}), 'ControlPoint');\nexports.default = _default;","import React, { ChangeEvent } from 'react'\nimport InputBase from '@mui/material/InputBase'\nimport SearchIcon from '@mui/icons-material/Search'\nimport { Box } from '@mui/system'\n\nexport interface ChallengeTeamSearchProps {\n  rowCount: number\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const ChallengeTeamSearch = ({\n  rowCount,\n  onChange,\n}: ChallengeTeamSearchProps) => {\n  const width = rowCount > 5 ? 'calc(100% - 8px)' : '100%'\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        p: '4px 4px',\n        display: 'flex',\n        flexGrow: 1,\n        width,\n        border: '1px solid #F2F2F2',\n        '& .Mui-focused': {\n          border: 'none',\n          boxShadow: 'none',\n        },\n      }}\n    >\n      <Box sx={{ margin: '0px 0 -4px 8px' }} aria-label=\"search\">\n        <SearchIcon sx={{ color: '#878E95' }} />\n      </Box>\n      <InputBase\n        onChange={onChange}\n        sx={{\n          '& .MuiInputBase-input': { p: '1px 8px' },\n          ml: 1,\n          flex: 1,\n          backgroundColor: 'white',\n        }}\n        placeholder=\"Search all teams\"\n        inputProps={{ 'aria-label': 'search all teams' }}\n      />\n    </Box>\n  )\n}\n","import { useQuery, UseQueryOptions } from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  ChallengeTeam,\n  ListWrapper,\n  Team,\n} from '@sage-bionetworks/synapse-types'\n\nexport function useGetTeamList(\n  teamIds: string[] | number[],\n  options?: UseQueryOptions<ListWrapper<Team>, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<ListWrapper<Team>, SynapseClientError>(\n    keyFactory.getTeamListQueryKey(teamIds.sort().join()),\n    () => SynapseClient.getTeamList(teamIds, accessToken),\n    options,\n  )\n}\n\nexport function useGetChallengeTeamList(\n  challengeId: string,\n  options?: UseQueryOptions<ChallengeTeam[], SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<ChallengeTeam[], SynapseClientError>(\n    keyFactory.getChallengeTeamListQueryKey(challengeId),\n    () => SynapseClient.getAllChallengeTeams(accessToken, challengeId),\n    options,\n  )\n}\n","import React, { ChangeEvent, useEffect, useState } from 'react'\nimport { DataGrid, GridCellParams, GridColDef } from '@mui/x-data-grid'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport dayjs from 'dayjs'\nimport { RadioOption } from '../widgets/RadioGroup'\nimport { ChallengeTeamSearch } from './ChallengeTeamSearch'\nimport { SkeletonTable } from '../Skeleton'\nimport { Team } from '@sage-bionetworks/synapse-types'\nimport {\n  useGetChallengeTeamList,\n  useGetTeamList,\n} from '../../synapse-queries/team/useTeamList'\nimport { Box } from '@mui/material'\nimport { Link } from 'react-router-dom'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../utils/functions/getEndpoint'\n\nexport type ChallengeTeamTableProps = {\n  challengeId: string\n  onSelectTeam: (team: Team) => void\n}\n\ntype ChallengeTeamRow = {\n  id: string\n  name: string\n  created: string\n  description: string\n}\n\nexport default function ChallengeTeamTable({\n  challengeId,\n  onSelectTeam,\n}: ChallengeTeamTableProps) {\n  const [allRows, setAllRows] = useState<ChallengeTeamRow[]>([])\n  const [teamIdList, setTeamIdList] = useState<string[]>([])\n  const [teamsById, setTeamsById] = useState<Record<string, Team>>({})\n  const { data: regTeams } = useGetChallengeTeamList(challengeId)\n\n  const [selectedTeam, setSelectedTeam] = useState<\n    string | number | undefined\n  >()\n\n  const { data: teamsList, isLoading } = useGetTeamList(teamIdList, {\n    enabled: !!teamIdList.length,\n  })\n\n  const teamChangeHandler = (value: string | number) => {\n    setSelectedTeam(value)\n    onSelectTeam(teamsById[value])\n  }\n\n  const getTeamRow = (team: Team): ChallengeTeamRow => {\n    return {\n      id: team.id,\n      name: team.name,\n      created: formatDate(dayjs(team.createdOn), 'MM/DD/YY'),\n      description: team.description,\n    }\n  }\n\n  useEffect(() => {\n    const ids = regTeams?.map(team => team.teamId) ?? []\n    setTeamIdList(ids)\n  }, [regTeams])\n\n  useEffect(() => {\n    const teams =\n      teamsList?.list.filter(team => team.canRequestMembership !== false) ?? []\n    const row: ChallengeTeamRow[] = []\n    const teamRecords: Record<string, Team> = {}\n    teams.forEach(team => {\n      row.push(getTeamRow(team))\n      teamRecords[team.id] = team\n    })\n    setAllRows(row)\n    setTeamsById(teamRecords)\n  }, [teamsList])\n\n  const searchHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    const term = event.target.value.toLowerCase()\n    const teams =\n      teamsList?.list.filter(team => team.canRequestMembership !== false) ?? []\n    let filtered = teams\n\n    if (term.length) {\n      filtered = teams.filter(team => {\n        return (\n          team.name.toLowerCase().includes(term) ||\n          team.description?.toLowerCase().includes(term)\n        )\n      })\n    }\n    setAllRows(filtered.map(team => getTeamRow(team)))\n  }\n\n  const columns: GridColDef[] = [\n    {\n      field: 'radiobutton',\n      headerName: '',\n      width: 25,\n      sortable: false,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n      renderCell: params => {\n        return (\n          <RadioOption\n            value={params.id}\n            currentValue={selectedTeam}\n            onChange={teamChangeHandler}\n            label=\"\"\n            style={{ marginBottom: '16px' }}\n          />\n        )\n      },\n    },\n    {\n      field: 'name',\n      headerName: 'Team Name',\n      flex: 1,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n      renderCell: (params: GridCellParams<Team, ChallengeTeamRow>) => (\n        <Link\n          to={{\n            pathname: `${getEndpoint(\n              BackendDestinationEnum.PORTAL_ENDPOINT,\n            )}/#!Team:${params.row.id}`,\n          }}\n          target=\"_blank\"\n        >\n          {params.row.name}\n        </Link>\n      ),\n    },\n    {\n      field: 'created',\n      headerName: 'Created On',\n      width: 100,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n    },\n    {\n      field: 'description',\n      headerName: 'Description',\n      flex: 1,\n      filterable: false,\n      hideable: false,\n      disableColumnMenu: true,\n    },\n  ]\n  return (\n    <Box sx={{ height: 220 }}>\n      {!isLoading && (\n        <>\n          <ChallengeTeamSearch\n            onChange={searchHandler}\n            rowCount={allRows.length}\n          />\n          <DataGrid\n            rows={allRows}\n            columns={columns}\n            rowCount={5}\n            hideFooter\n            density=\"compact\"\n            sx={{\n              border: 'none',\n              height: '100%',\n              '& .MuiDataGrid-columnHeader': {\n                backgroundColor: '#F1F3F5',\n              },\n              '& .Mui-odd': {\n                backgroundColor: '#FBFBFC',\n              },\n              '.MuiDataGrid-columnHeaderTitleContainer': {\n                justifyContent: 'space-between',\n              },\n            }}\n            getRowClassName={params =>\n              params.indexRelativeToCurrentPage % 2 === 0\n                ? 'Mui-even'\n                : 'Mui-odd'\n            }\n          />\n        </>\n      )}\n      {isLoading && <SkeletonTable numRows={10} numCols={1} />}\n    </Box>\n  )\n}\n","import { Box, Button, Typography } from '@mui/material'\nimport React from 'react'\nimport ControlPointIcon from '@mui/icons-material/ControlPoint'\nimport ChallengeTeamTable from './ChallengeTeamTable'\nimport { Stack } from '@mui/system'\nimport { Team } from '@sage-bionetworks/synapse-types'\n\ntype SelectChallengeTeamProps = {\n  challengeId: string\n  onCreateTeam: () => void\n  onSelectTeam: (team: Team) => void\n}\n\nexport const SelectChallengeTeam = ({\n  challengeId,\n  onCreateTeam,\n  onSelectTeam,\n}: SelectChallengeTeamProps) => {\n  const PARTICIPATION_CRITERIA =\n    'To participate in a challenge, you need to create a new Team or join an existing one. \\\n    By default, the participant who creates a team is the \"Team Captain\" and has the ability to invite and remove members. \\\n    All team members will need a Synapse account so that they can login and accept the team invitation.'\n  return (\n    <Stack spacing={1}>\n      <Typography variant=\"body1\" sx={{ lineHeight: '20px' }}>\n        {PARTICIPATION_CRITERIA}\n      </Typography>\n      <Box sx={{ height: 270 }}>\n        <ChallengeTeamTable\n          challengeId={challengeId}\n          onSelectTeam={onSelectTeam}\n        />\n      </Box>\n      <Box>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={onCreateTeam}\n          startIcon={<ControlPointIcon />}\n          // sx={{ marginTop: '50px', padding: '6px 18px' }}\n        >\n          Create New Team\n        </Button>\n      </Box>\n    </Stack>\n  )\n}\n","import { Typography } from '@mui/material'\nimport { Box } from '@mui/material'\nimport React from 'react'\n\ntype RegistrationSuccessfulProps = {\n  createdNewTeam: boolean\n  teamName: string | undefined\n}\n\nexport const RegistrationSuccessful = ({\n  createdNewTeam,\n  teamName,\n}: RegistrationSuccessfulProps) => {\n  if (!teamName) return null\n\n  return (\n    <>\n      <Typography variant=\"body1\" sx={{ lineHeight: '20px' }}>\n        You have successfully {createdNewTeam ? 'created' : 'joined'} team{' '}\n        <b>{teamName}</b> and have been added to this challenge.\n      </Typography>\n      {createdNewTeam && (\n        <Box>\n          Invited team members will be automatically registered for the\n          challenge as soon as they accept the team member invitation.\n        </Box>\n      )}\n    </>\n  )\n}\n","import React, { ChangeEvent, useState } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\nimport { Team } from '@sage-bionetworks/synapse-types'\n\ntype JoinRequestFormProps = {\n  team: Team | undefined\n  joinMessageChange: (msg: string) => void\n}\n\nexport const JoinRequestForm = ({\n  team,\n  joinMessageChange,\n}: JoinRequestFormProps) => {\n  const [message, setMessage] = useState<string>('')\n  if (!team) return null\n\n  const handleMessageChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const value = event.target.value\n    setMessage(value)\n    joinMessageChange(value)\n  }\n\n  return (\n    <>\n      <Typography variant=\"body1\" sx={{ lineHeight: '20px' }}>\n        The following message will be sent to the Team Manager(s) of the{' '}\n        <strong>{team.name}</strong> team.\n      </Typography>\n      <Box>\n        <strong>Your Message to Team Managers(s)</strong>\n      </Box>\n      <Box>\n        <TextField\n          id=\"membershipRequestMessage\"\n          value={message}\n          fullWidth\n          multiline\n          rows={4}\n          autoFocus\n          onChange={handleMessageChange}\n        />\n      </Box>\n    </>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport StepperDialog, { Step } from '../StepperDialog/StepperDialog'\n\nimport {\n  ErrorResponse,\n  Team,\n  TeamMembershipStatus,\n} from '@sage-bionetworks/synapse-types'\nimport { CreateChallengeTeam, CreateTeamRequest } from './CreateChallengeTeam'\nimport { SelectChallengeTeam } from './SelectChallengeTeam'\nimport { RegistrationSuccessful } from './RegistrationSuccessful'\nimport { JoinRequestForm } from './JoinRequestForm'\nimport { useSynapseContext } from '../../utils'\nimport {\n  addTeamMemberAsAuthenticatedUserOrAdmin,\n  createMembershipInvitation,\n  createMembershipRequest,\n  createTeam,\n  registerChallengeTeam,\n} from '../../synapse-client'\nimport {\n  useGetCurrentUserProfile,\n  useGetEntityChallenge,\n  useGetUserSubmissionTeamsInfinite,\n} from '../../synapse-queries'\nimport { ANONYMOUS_PRINCIPAL_ID } from '../../utils/SynapseConstants'\nimport { useGetMembershipStatus } from '../../synapse-queries/team/useTeamMembers'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\n\nimport { Typography } from '@mui/material'\nimport { useQueryClient } from 'react-query'\n\nenum StepsEnum {\n  SELECT_YOUR_CHALLENGE_TEAM = 'SELECT_YOUR_CHALLENGE_TEAM',\n  JOIN_REQUEST_FORM = 'JOIN_REQUEST_FORM',\n  JOIN_REQUEST_SENT = 'JOIN_REQUEST_SENT',\n  CREATE_NEW_TEAM = 'CREATE_NEW_TEAM',\n  REGISTRATION_SUCCESSFUL = 'REGISTRATION_SUCCESSFUL',\n}\ntype StepKey = keyof typeof StepsEnum\ntype StepList = {\n  [key in StepKey]: Step\n}\n\nconst steps: StepList = {\n  SELECT_YOUR_CHALLENGE_TEAM: {\n    id: StepsEnum.SELECT_YOUR_CHALLENGE_TEAM,\n    title: 'Select Your Challenge Team',\n    nextStep: StepsEnum.JOIN_REQUEST_FORM,\n    nextEnabled: false,\n  },\n  JOIN_REQUEST_FORM: {\n    id: StepsEnum.JOIN_REQUEST_FORM,\n    title: 'Request Team Membership',\n    previousStep: StepsEnum.SELECT_YOUR_CHALLENGE_TEAM,\n    confirmStep: StepsEnum.JOIN_REQUEST_SENT,\n    confirmButtonText: 'Send Request',\n    confirmEnabled: true,\n  },\n  JOIN_REQUEST_SENT: {\n    id: StepsEnum.JOIN_REQUEST_SENT,\n    title: 'Request Sent',\n    confirmButtonText: 'Close',\n    confirmEnabled: true,\n  },\n  CREATE_NEW_TEAM: {\n    id: StepsEnum.CREATE_NEW_TEAM,\n    title: 'Create Team',\n    confirmStep: StepsEnum.REGISTRATION_SUCCESSFUL,\n    confirmButtonText: 'Finish Registration',\n    confirmEnabled: false,\n    previousStep: StepsEnum.SELECT_YOUR_CHALLENGE_TEAM,\n  },\n  REGISTRATION_SUCCESSFUL: {\n    id: StepsEnum.REGISTRATION_SUCCESSFUL,\n    title: 'Registration Successful!',\n  },\n}\n\nexport type ChallengeTeamWizardProps = {\n  projectId: string\n  isShowingModal?: boolean\n  onClose: () => void\n}\n\nconst EMPTY_ID = ''\n\nconst ChallengeTeamWizard: React.FunctionComponent<\n  ChallengeTeamWizardProps\n> = ({ projectId, isShowingModal = false, onClose }) => {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const [loading, setLoading] = useState<boolean>(true)\n  const [step, setStep] = useState<Step>(steps.SELECT_YOUR_CHALLENGE_TEAM)\n  const [errorMessage, setErrorMessage] = useState<string>()\n  const [selectedTeam, setSelectedTeam] = useState<Team | undefined>()\n  const [createdNewTeam, setCreatedNewTeam] = useState<boolean>(false)\n  const [confirming, setConfirming] = useState<boolean>(false)\n  const [hasSubmissionTeam, setHasSubmissionTeam] = useState<boolean>(false)\n  const queryClient = useQueryClient()\n  // membershipStatus is {teamId:TeamMembershipStatus}\n  const [membershipStatus, setMembershipStatus] = useState<\n    Record<string, TeamMembershipStatus>\n  >({})\n  const [inviteMembersSuccess, setInviteMembersSuccess] =\n    useState<boolean>(false)\n  const [registerChallengeSuccess, setRegisterChallengeSuccess] =\n    useState<boolean>(false)\n  const [newTeam, setNewTeam] = useState<CreateTeamRequest>({\n    name: '',\n    description: '',\n    message: '',\n    invitees: '',\n  })\n  const [joinMessage, setJoinMessage] = useState<string>('')\n\n  /************************\n   * Data population hooks\n   ***********************/\n\n  // Use the existing accessToken if present to get the current user's profile / userId\n  const { data: userProfile } = useGetCurrentUserProfile()\n  // Retrieve the challenge associated with the projectId passed through props\n  const { data: challenge } = useGetEntityChallenge(projectId)\n  const participantTeamId: string = challenge\n    ? challenge.participantTeamId\n    : EMPTY_ID\n  const userId = userProfile ? userProfile.ownerId : EMPTY_ID\n\n  // Verify that user is a member of the participant team\n  const { data: challengeTeamMembershipStatus } = useGetMembershipStatus(\n    participantTeamId,\n    userId,\n  )\n  useEffect(() => {\n    if (\n      challengeTeamMembershipStatus &&\n      !challengeTeamMembershipStatus?.isMember &&\n      accessToken\n    ) {\n      addTeamMemberAsAuthenticatedUserOrAdmin(\n        participantTeamId,\n        userId,\n        accessToken,\n      )\n        .then(() => {\n          queryClient.invalidateQueries(\n            keyFactory.getMembershipStatusQueryKey(participantTeamId, userId),\n          )\n          queryClient.invalidateQueries(\n            keyFactory.getIsUserMemberOfTeamQueryKey(participantTeamId, userId),\n          )\n        })\n        .catch(error => {\n          setErrorMessage(error.reason)\n        })\n    }\n  }, [\n    accessToken,\n    participantTeamId,\n    userId,\n    challengeTeamMembershipStatus,\n    queryClient,\n    keyFactory,\n  ])\n\n  // Determine whether or not the given user belongs to any submission teams\n  const { data: userSubmissionTeams, error: userSubmissionTeamError } =\n    useGetUserSubmissionTeamsInfinite(challenge?.id ?? EMPTY_ID, 1)\n  useEffect(() => {\n    if (userSubmissionTeams) {\n      const isReg = userSubmissionTeams.results.length > 0\n      if (isReg) {\n        setErrorMessage(\n          'Error: You are already a member of a registered submission team for this Challenge.',\n        )\n        setHasSubmissionTeam(isReg)\n      }\n      setLoading(false)\n    }\n    if (userSubmissionTeamError) {\n      setErrorMessage(\n        `Error: Could not determine if you are already registered for this Challenge.`,\n      )\n      setLoading(false)\n    }\n  }, [userSubmissionTeams, userSubmissionTeamError])\n\n  useGetMembershipStatus(\n    selectedTeam?.id ?? EMPTY_ID,\n    userProfile?.ownerId ?? EMPTY_ID,\n    {\n      enabled: !!selectedTeam && !!userProfile,\n      onSettled: (\n        data: TeamMembershipStatus | undefined,\n        error: SynapseClientError | null,\n      ) => {\n        // console.log('useGetMembershipStatus', data, error)\n        if (data) {\n          setMembershipStatus({ ...membershipStatus, [data.teamId]: data })\n        }\n        if (error) {\n          setErrorMessage(error.reason)\n        }\n      },\n    },\n  )\n\n  /*************************\n   * React to state changes\n   ************************/\n\n  const canUserJoinTeam = () => {\n    if (selectedTeam && selectedTeam.id in membershipStatus) {\n      const {\n        canJoin,\n        membershipApprovalRequired,\n        isMember,\n        hasOpenInvitation,\n        hasOpenRequest,\n      } = membershipStatus[selectedTeam.id]\n\n      if (isMember) {\n        // User cannot join this team, disable Next button\n        return {\n          canJoin: false,\n          errorMessage: 'You are already a member of this team.',\n        }\n      }\n\n      if (hasOpenRequest) {\n        // User already has an open request to join this team, disable Next button to avoid request spamming\n        return {\n          canJoin: false,\n          errorMessage:\n            'Your previous request to join this team is pending review.',\n        }\n      }\n\n      if (hasOpenInvitation || canJoin || membershipApprovalRequired) {\n        /**\n         * User has an open invitation, or the team is public, or\n         * user may request to join. Enable Next button.\n         */\n        return {\n          canJoin: true,\n          needsApproval: membershipApprovalRequired,\n          errorMessage: undefined,\n        }\n      }\n    }\n    return {\n      canJoin: false,\n    }\n  }\n\n  // Determine the login status of the user, and whether or not we can request the given projectId challenge.\n  useEffect(() => {\n    /**\n     * A user is not necessarily logged out just because they are not logged in...\n     * for example, the request for their userProfile may be pending.\n     */\n    const isLoggedOut =\n      !!userProfile && userProfile.ownerId === ANONYMOUS_PRINCIPAL_ID.toString()\n\n    if (isLoggedOut) {\n      setLoading(false)\n      setErrorMessage('Please login to continue.')\n    }\n  }, [accessToken, userProfile, projectId, challenge])\n\n  /**\n   * When creating a new team, wait for the team to be registered to the challenge\n   * and for invited members to be invited before proceeding to confirmation view.\n   */\n  useEffect(() => {\n    if (inviteMembersSuccess && registerChallengeSuccess) {\n      setConfirming(false)\n      handleStepChange(step.confirmStep as StepsEnum)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [registerChallengeSuccess, inviteMembersSuccess, step])\n\n  // Determine the user's eligibility to join the selected team\n  useEffect(() => {\n    if (\n      selectedTeam &&\n      selectedTeam.id in membershipStatus &&\n      step.id === StepsEnum.SELECT_YOUR_CHALLENGE_TEAM\n    ) {\n      const { canJoin, errorMessage } = canUserJoinTeam()\n      if (canJoin) {\n        if (!step.nextEnabled) setStep({ ...step, nextEnabled: true })\n        return\n      }\n      if (step.nextEnabled) setStep({ ...step, nextEnabled: false })\n      if (errorMessage) setErrorMessage(errorMessage)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [membershipStatus, selectedTeam, step])\n\n  /************************\n   * Form update handlers\n   * *********************/\n\n  // SELECT_YOUR_CHALLENGE_TEAM: user has selected an existing challenge team from the table\n  const handleSelectTeam = (team: Team) => {\n    if (team) {\n      // Setting selectedTeam will trigger the useMembershipStatus hook\n      setErrorMessage(undefined)\n      setSelectedTeam(team)\n    }\n  }\n\n  // CREATE_NEW_TEAM: form change handler\n  const handleChangeTeamInfo = (updatedTeam: CreateTeamRequest) => {\n    setNewTeam(updatedTeam)\n    const confirmEnabled = updatedTeam.name.length > 1\n    setStep({ ...step, confirmEnabled })\n  }\n\n  /************************\n   * Step confirm handlers\n   * *********************/\n\n  // JOIN_REQUEST_FORM: Add user to an existing public team or a team the user has an open invitation to\n  const addUserToTeam = (teamId = selectedTeam?.id) => {\n    if (!teamId || !userProfile || !accessToken) return\n    setConfirming(true)\n    setErrorMessage(undefined)\n    addTeamMemberAsAuthenticatedUserOrAdmin(\n      teamId,\n      userProfile.ownerId,\n      accessToken,\n    )\n      .then(() => {\n        // invalidate submissions team membership status to update the ChallengeRegisterButton\n        if (challenge) {\n          queryClient.invalidateQueries(\n            keyFactory.getSubmissionTeamsQueryKey(challenge?.id),\n          )\n        }\n        handleStepChange(StepsEnum.REGISTRATION_SUCCESSFUL)\n      })\n      .catch((err: ErrorResponse) => {\n        setErrorMessage(`Error joining team: ${err.reason}`)\n      })\n      .finally(() => {\n        setConfirming(false)\n      })\n  }\n\n  // JOIN_REQUEST_FORM: User is requesting to join an existing non-public challenge team\n  const handleRequestMembership = async () => {\n    if (userProfile && selectedTeam) {\n      setConfirming(true)\n      setStep({ ...step, nextEnabled: false })\n      setErrorMessage(undefined)\n      await createMembershipRequest(\n        selectedTeam.id,\n        userProfile.ownerId,\n        joinMessage,\n        undefined,\n        accessToken,\n      )\n        .then(() => {\n          // console.log({ response })\n          // request successful, advance to next step\n          setStep(steps[StepsEnum.JOIN_REQUEST_SENT])\n        })\n        .catch((err: ErrorResponse) => {\n          console.error({ err })\n          setErrorMessage(`Error requesting membership: ${err.reason}`)\n        })\n        .finally(() => {\n          setConfirming(false)\n        })\n    }\n  }\n\n  // CREATE_NEW_TEAM: Add newly created team to the challenge\n  const handleRegisterChallengeTeam = async (teamId: string | number) => {\n    const msg = 'Error registering challenge team'\n    // console.log({ teamId, challenge })\n    if (teamId && challenge) {\n      setErrorMessage(undefined)\n      setRegisterChallengeSuccess(false)\n      await registerChallengeTeam(accessToken, challenge.id, teamId)\n        .then(() => {\n          setRegisterChallengeSuccess(true)\n        })\n        .catch((err: ErrorResponse) => {\n          setErrorMessage(`${msg}: ${err.reason}`)\n          setConfirming(false)\n        })\n    } else {\n      setErrorMessage(`${msg}: Invalid team.`)\n      setConfirming(false)\n    }\n  }\n\n  // CREATE_NEW_TEAM: Invite a comma-delimited list of emails to join the team\n  const handleInviteTeamMembers = async (\n    teamId: string | number,\n    invitees: string,\n  ) => {\n    if (!invitees.length) {\n      setInviteMembersSuccess(true)\n      return\n    }\n    const msg = 'Error inviting members'\n    if (teamId) {\n      setErrorMessage(undefined)\n      setInviteMembersSuccess(false)\n      const emails = invitees.split(',')\n      const errors: string[] = []\n      for (const inviteeEmail of emails) {\n        await createMembershipInvitation(\n          accessToken,\n          teamId,\n          inviteeEmail.trim(),\n        ).catch(() => {\n          errors.push(inviteeEmail.trim())\n        })\n      }\n\n      if (errors.length) {\n        setErrorMessage(`${msg}: ${errors.join(', ')}`)\n        setConfirming(false)\n      } else {\n        setInviteMembersSuccess(true)\n      }\n    } else {\n      setErrorMessage(`${msg}: Invalid team.`)\n      setConfirming(false)\n    }\n  }\n\n  // CREATE_NEW_TEAM: Create a new team to join the challenge\n  const handleCreateTeam = async () => {\n    if (newTeam && newTeam.name && newTeam.name.length > 1) {\n      setStep({ ...step, confirmEnabled: false })\n      setConfirming(true)\n      setErrorMessage(undefined)\n      await createTeam(accessToken, newTeam.name, newTeam.description)\n        .then(response => {\n          setCreatedNewTeam(true)\n          setSelectedTeam(response)\n          // Add newly created team to challenge\n          handleRegisterChallengeTeam(response.id)\n          // Invite emails to new team\n          handleInviteTeamMembers(response.id, newTeam.invitees)\n        })\n        .catch((err: ErrorResponse) => {\n          setConfirming(false)\n          setErrorMessage(`Error creating team: ${err.reason}`)\n          setStep({ ...step, confirmEnabled: true })\n        })\n    }\n  }\n\n  const hide = () => {\n    setErrorMessage(undefined)\n    setCreatedNewTeam(false)\n    setSelectedTeam(undefined)\n    setStep({ ...step, nextEnabled: false })\n    onClose()\n  }\n\n  const onConfirmHandlerMap: Record<\n    string,\n    (() => Promise<void>) | (() => undefined)\n  > | void = {\n    CREATE_NEW_TEAM: handleCreateTeam,\n    JOIN_REQUEST_FORM: handleRequestMembership,\n    JOIN_REQUEST_SENT: () => {\n      hide()\n      return undefined\n    },\n  }\n\n  // Determine modal content based on step.id\n  const createContent = () => {\n    switch (step.id) {\n      case StepsEnum.SELECT_YOUR_CHALLENGE_TEAM:\n        return accessToken && challenge && !hasSubmissionTeam ? (\n          <SelectChallengeTeam\n            challengeId={challenge.id}\n            onCreateTeam={() => handleStepChange(StepsEnum.CREATE_NEW_TEAM)}\n            onSelectTeam={handleSelectTeam}\n          />\n        ) : (\n          <></>\n        )\n      case StepsEnum.JOIN_REQUEST_FORM:\n        return (\n          <JoinRequestForm\n            team={selectedTeam}\n            joinMessageChange={setJoinMessage}\n          />\n        )\n\n      case StepsEnum.JOIN_REQUEST_SENT:\n        return (\n          <Typography variant=\"body1\" sx={{ lineHeight: '20px' }}>\n            Team Manager(s) have received your request. Check your Synapse email\n            address for status of your request.\n          </Typography>\n        )\n      case StepsEnum.REGISTRATION_SUCCESSFUL:\n        return (\n          <RegistrationSuccessful\n            createdNewTeam={createdNewTeam}\n            teamName={selectedTeam?.name}\n          />\n        )\n      case StepsEnum.CREATE_NEW_TEAM:\n        return (\n          <CreateChallengeTeam\n            onChangeTeamInfo={handleChangeTeamInfo}\n            onError={setErrorMessage}\n          />\n        )\n      default:\n        return <></>\n    }\n  }\n\n  // React to change in step\n  function handleStepChange(value?: StepsEnum) {\n    if (!value || !steps[value]) return\n    setErrorMessage(undefined)\n\n    const { canJoin, errorMessage, needsApproval } = canUserJoinTeam()\n    // console.log('handleStepChange', value)\n    switch (value) {\n      case StepsEnum.SELECT_YOUR_CHALLENGE_TEAM:\n        setCreatedNewTeam(false)\n        break\n      case StepsEnum.JOIN_REQUEST_FORM:\n        // If the team is public, or the user has an open invitation, add them to the team immediately\n        if (canJoin) {\n          if (!needsApproval) {\n            return addUserToTeam()\n          }\n        } else {\n          return setErrorMessage(errorMessage)\n        }\n        break\n    }\n    setStep(steps[value])\n  }\n\n  const onConfirmHandler = onConfirmHandlerMap[step.id]\n    ? onConfirmHandlerMap[step.id]\n    : () => undefined\n\n  return (\n    <StepperDialog\n      errorMessage={errorMessage}\n      onCancel={hide}\n      onStepChange={handleStepChange as (arg: string) => void}\n      open={isShowingModal}\n      onConfirm={onConfirmHandler}\n      confirming={confirming}\n      step={step}\n      content={createContent()}\n      loading={loading}\n    />\n  )\n}\n\nexport default ChallengeTeamWizard\n"],"names":["Stack","createStack","Stack$1","CreateChallengeTeam","onChangeTeamInfo","onError","team","setTeam","useState","handleTeamUpdate","update","updatedTeam","handleInviteesUpdate","inviteeString","jsxs","Box","jsx","Typography","TextField","event","_interopRequireDefault","require$$0","ControlPoint","default_1","_createSvgIcon","require$$1","_jsxRuntime","require$$2","_default","ChallengeTeamSearch","rowCount","onChange","width","SearchIcon","InputBase","useGetTeamList","teamIds","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient","useGetChallengeTeamList","challengeId","ChallengeTeamTable","onSelectTeam","allRows","setAllRows","teamIdList","setTeamIdList","teamsById","setTeamsById","regTeams","selectedTeam","setSelectedTeam","teamsList","isLoading","teamChangeHandler","value","getTeamRow","formatDate","dayjs","useEffect","ids","teams","row","teamRecords","searchHandler","term","filtered","_a","columns","params","RadioOption","Link","getEndpoint","BackendDestinationEnum","Fragment","DataGrid","SkeletonTable","SelectChallengeTeam","onCreateTeam","Button","ControlPointIcon","RegistrationSuccessful","createdNewTeam","teamName","JoinRequestForm","joinMessageChange","message","setMessage","handleMessageChange","steps","EMPTY_ID","ChallengeTeamWizard","projectId","isShowingModal","onClose","loading","setLoading","step","setStep","errorMessage","setErrorMessage","setCreatedNewTeam","confirming","setConfirming","hasSubmissionTeam","setHasSubmissionTeam","queryClient","useQueryClient","membershipStatus","setMembershipStatus","inviteMembersSuccess","setInviteMembersSuccess","registerChallengeSuccess","setRegisterChallengeSuccess","newTeam","setNewTeam","joinMessage","setJoinMessage","userProfile","useGetCurrentUserProfile","challenge","useGetEntityChallenge","participantTeamId","userId","challengeTeamMembershipStatus","useGetMembershipStatus","addTeamMemberAsAuthenticatedUserOrAdmin","error","userSubmissionTeams","userSubmissionTeamError","useGetUserSubmissionTeamsInfinite","isReg","data","canUserJoinTeam","canJoin","membershipApprovalRequired","isMember","hasOpenInvitation","hasOpenRequest","ANONYMOUS_PRINCIPAL_ID","handleStepChange","errorMessage2","handleSelectTeam","handleChangeTeamInfo","confirmEnabled","addUserToTeam","teamId","err","handleRequestMembership","createMembershipRequest","handleRegisterChallengeTeam","msg","registerChallengeTeam","handleInviteTeamMembers","invitees","emails","errors","inviteeEmail","createMembershipInvitation","handleCreateTeam","createTeam","response","hide","onConfirmHandlerMap","createContent","needsApproval","onConfirmHandler","StepperDialog"],"mappings":"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","x_google_ignoreList":[0,2]}