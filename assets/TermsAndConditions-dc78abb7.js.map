{"version":3,"file":"TermsAndConditions-dc78abb7.js","sources":["../../src/assets/icons/terms/CheckIcon.tsx","../../src/components/TermsAndConditions/TermsAndConditionsItem.tsx","../../src/components/TermsAndConditions/TermsAndConditions.tsx"],"sourcesContent":["import React from 'react'\nimport SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon'\n\nexport const CheckIcon = (props: SvgIconProps) => {\n  return (\n    <SvgIcon {...props} height={15} viewBox=\"0 0 19 15\">\n      <path\n        d=\"M18.7184 1.81746L6.05903 14.6667L0.256836 8.77744L1.74431 7.26766L6.05903 11.6364L17.2309 0.307678L18.7184 1.81746Z\"\n        fill=\"white\"\n      />\n    </SvgIcon>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { CheckIcon } from '../../assets/icons/terms/CheckIcon'\nimport { FileHandleAssociateType } from '@sage-bionetworks/synapse-types'\nimport { Link, Skeleton } from '@mui/material'\nimport { SkeletonParagraph } from '../Skeleton'\nimport { times } from 'lodash-es'\nimport { useGetPresignedUrlContentFromFHA } from '../../synapse-queries/file/useFiles'\nimport { MarkdownSynapse } from '../Markdown'\n\nexport type tcItem = {\n  iconFileHandleId: string\n  label: string\n  description: string\n}\n\nexport type TermsAndConditionsItemProps = {\n  id: number\n  enabled: boolean\n  checked: boolean\n  item: tcItem\n  termsAndConditionsTableID: string\n  onChange: (id: number) => void\n}\n\nconst TermsAndConditionsItem: React.FunctionComponent<\n  TermsAndConditionsItemProps\n> = props => {\n  const { id, item, enabled, checked, onChange, termsAndConditionsTableID } =\n    props\n  const { iconFileHandleId, label, description } = item\n  const { data: iconFileContent } = useGetPresignedUrlContentFromFHA(\n    {\n      associateObjectId: termsAndConditionsTableID,\n      associateObjectType: FileHandleAssociateType.TableEntity,\n      fileHandleId: iconFileHandleId,\n    },\n    true, // force this query to be run as the anonymous user (without an access token)\n  )\n\n  const [showDesc, setShowDes] = useState<boolean>(false)\n  const [isChecked, setIsChecked] = useState<boolean>(false)\n  let mounted = true\n\n  useEffect(() => {\n    if (mounted) {\n      setIsChecked(checked)\n    }\n    return () => {\n      mounted = false\n    }\n  }, [enabled, checked])\n\n  const handleShowDescLink = (e: React.MouseEvent) => {\n    e.preventDefault()\n    if (enabled) {\n      setShowDes(!showDesc)\n    }\n  }\n\n  const handleCheckboxClick = (e: React.MouseEvent) => {\n    if (enabled) {\n      onChange(id)\n    }\n  }\n\n  return (\n    <li className={enabled ? 'terms-enabled' : ''}>\n      <span\n        className=\"terms-icon\"\n        dangerouslySetInnerHTML={{ __html: iconFileContent ?? '' }}\n      />\n      <span className=\"terms-desc\">\n        <label id={`toc-item-${id}`}>\n          <MarkdownSynapse markdown={label} />\n        </label>\n        {showDesc && description && (\n          <div className=\"terms-desc-content\">\n            <MarkdownSynapse markdown={description} />\n          </div>\n        )}\n        {description && (\n          <div>\n            <Link\n              className=\"terms-show-desc highlight-link\"\n              href=\"\"\n              onClick={handleShowDescLink}\n            >\n              {showDesc ? 'Show Less' : 'Show More'}\n            </Link>\n          </div>\n        )}\n      </span>\n      <span className=\"terms-checkbox\">\n        <span\n          role=\"checkbox\"\n          aria-labelledby={`toc-item-${id}`}\n          className={isChecked ? 'terms-circle terms-checked' : 'terms-circle'}\n          onClick={handleCheckboxClick}\n        >\n          <CheckIcon />\n        </span>\n        I agree\n      </span>\n    </li>\n  )\n}\n\nexport function LoadingItem(props: { numLoadingItems: number }) {\n  const { numLoadingItems } = props\n  return (\n    <>\n      {times(numLoadingItems).map(index => {\n        return (\n          <li\n            key={index}\n            aria-busy=\"true\"\n            aria-live=\"polite\"\n            data-testid=\"loading-terms-and-conditions\"\n          >\n            <span className=\"terms-icon\">\n              <Skeleton\n                variant=\"rectangular\"\n                height=\"30px\"\n                width=\"30px\"\n                sx={{ margin: 'auto' }}\n              />\n            </span>\n            <span className=\"terms-desc\">\n              <SkeletonParagraph numRows={5} />\n            </span>\n            <span className=\"terms-checkbox\">\n              <Skeleton\n                variant=\"circular\"\n                height=\"40px\"\n                width=\"40px\"\n                sx={{ margin: 'auto' }}\n              />\n            </span>\n          </li>\n        )\n      })}\n    </>\n  )\n}\n\nexport default TermsAndConditionsItem\n","import React, { useEffect, useState } from 'react'\nimport { LoadingItem, tcItem } from './TermsAndConditionsItem'\nimport TermsAndConditionsItem from './TermsAndConditionsItem'\nimport { Button, Link } from '@mui/material'\nimport {\n  BUNDLE_MASK_QUERY_RESULTS,\n  URL_TERMS_CONDITIONS_AGREEMENT,\n} from '../../utils/SynapseConstants'\nimport { useGetFullTableQueryResults } from '../../synapse-queries'\n\nexport type TermsAndConditionsProps = {\n  onFormChange: (formComplete: boolean) => void\n  termsAndConditionsTableID?: string\n  termsAndConditionsTableVersion?: string\n  hideLinkToFullTC?: boolean\n}\n\nconst TermsAndConditions: React.FunctionComponent<TermsAndConditionsProps> = ({\n  termsAndConditionsTableID = 'syn51718002',\n  termsAndConditionsTableVersion = '4',\n  onFormChange,\n  hideLinkToFullTC = false,\n}) => {\n  const [tcList, setTcList] = useState<tcItem[]>([])\n  // Fetch the table data\n  const { data, isLoading } = useGetFullTableQueryResults(\n    {\n      entityId: termsAndConditionsTableID,\n      query: {\n        sql: `SELECT * FROM ${termsAndConditionsTableID}.${termsAndConditionsTableVersion} ORDER BY order asc`,\n      },\n      partMask: BUNDLE_MASK_QUERY_RESULTS,\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    },\n    { staleTime: Infinity },\n    true, // force this query to be run as the anonymous user (without an access token)\n  )\n\n  // update tcList when data changes (transform)\n  useEffect(() => {\n    if (data && data.queryResult && data.queryResult.queryResults) {\n      const { rows, headers } = data.queryResult.queryResults\n      const iconColIndex = headers.findIndex(col => col.name === 'icon')\n      const labelColIndex = headers.findIndex(col => col.name === 'label')\n      const descriptionColIndex = headers.findIndex(\n        col => col.name === 'description',\n      )\n      const newTcList: tcItem[] = []\n      rows.forEach(row => {\n        const { values } = row\n        const item: tcItem = {\n          iconFileHandleId: values[iconColIndex] ?? '',\n          label: values[labelColIndex] ?? '',\n          description: values[descriptionColIndex] ?? '',\n        }\n        newTcList.push(item)\n      })\n      setTcList(newTcList)\n      const checkboxCount = newTcList.length\n      setCheckboxChecked(getInitialCheckboxState(checkboxCount))\n      // disabled all checkbox except the first one\n      setCheckboxEnabled(\n        getInitialCheckboxState(checkboxCount).fill(true, 0, 1),\n      )\n    }\n  }, [data])\n\n  const governancePolicy =\n    'https://help.synapse.org/docs/Synapse-Governance.2004255211.html'\n  const getInitialCheckboxState = (checkboxCount: number) =>\n    Array.from(Array(checkboxCount).fill(false))\n  let mounted = true\n\n  // State variables\n  const [checkboxChecked, setCheckboxChecked] = useState<boolean[]>([])\n  const [checkboxEnabled, setCheckboxEnabled] = useState<boolean[]>([])\n\n  useEffect(() => {\n    if (mounted) {\n      checkFormCompleted()\n    }\n    return () => {\n      mounted = false\n    }\n  }, [checkboxEnabled, checkboxChecked])\n\n  // Placeholder function to check if all checkboxes are checked and agreement is signed\n  const checkFormCompleted = () => {\n    const allCheckboxChecked =\n      checkboxChecked.length > 0 && !checkboxChecked.includes(false)\n    onFormChange(allCheckboxChecked)\n  }\n\n  const updateCheckboxState = (id: number) => {\n    const newState = !checkboxChecked[id]\n    const checkboxCount = checkboxChecked.length\n    if (newState) {\n      // if the checkbox is checked (i.e. newState is true)\n      setCheckboxChecked(\n        getInitialCheckboxState(checkboxCount).fill(true, 0, id + 1),\n      )\n      if (id + 2 <= tcList.length) {\n        setCheckboxEnabled(\n          getInitialCheckboxState(checkboxCount).fill(true, 0, id + 2),\n        )\n      }\n    } else {\n      setCheckboxChecked(\n        getInitialCheckboxState(checkboxCount).fill(true, 0, id),\n      )\n      setCheckboxEnabled(\n        getInitialCheckboxState(checkboxCount).fill(true, 0, id + 1),\n      )\n    }\n  }\n\n  return (\n    <section className=\"terms-conditions\">\n      <h3 className=\"page-header\">Synapse Pledge</h3>\n      <form>\n        <label>\n          I affirm my commitment to all{' '}\n          <Link target=\"_blank\" href={governancePolicy}>\n            Sage Governance policies\n          </Link>{' '}\n          for responsible research and data handling (linked below), including:\n        </label>\n        <ul className=\"term-list\">\n          {isLoading && <LoadingItem numLoadingItems={6} />}\n          {tcList.length > 0 &&\n            tcList.map((item, i) => {\n              return (\n                <TermsAndConditionsItem\n                  key={`tc-item-${i}`}\n                  item={item}\n                  id={i}\n                  checked={checkboxChecked[i]}\n                  enabled={checkboxEnabled[i]}\n                  termsAndConditionsTableID={termsAndConditionsTableID}\n                  onChange={updateCheckboxState}\n                />\n              )\n            })}\n        </ul>\n        {!hideLinkToFullTC && (\n          <div className=\"view-terms\">\n            <Button\n              variant={'contained'}\n              href={URL_TERMS_CONDITIONS_AGREEMENT}\n              target=\"_blank\"\n            >\n              View Complete Terms and Conditions for Use\n            </Button>\n          </div>\n        )}\n      </form>\n    </section>\n  )\n}\n\nexport default TermsAndConditions\n"],"names":["CheckIcon","props","jsx","SvgIcon","TermsAndConditionsItem","id","item","enabled","checked","onChange","termsAndConditionsTableID","iconFileHandleId","label","description","iconFileContent","useGetPresignedUrlContentFromFHA","FileHandleAssociateType","showDesc","setShowDes","useState","isChecked","setIsChecked","mounted","useEffect","handleShowDescLink","e","handleCheckboxClick","jsxs","MarkdownSynapse","Link","LoadingItem","numLoadingItems","Fragment","times","index","Skeleton","SkeletonParagraph","TermsAndConditions","termsAndConditionsTableVersion","onFormChange","hideLinkToFullTC","tcList","setTcList","data","isLoading","useGetFullTableQueryResults","BUNDLE_MASK_QUERY_RESULTS","rows","headers","iconColIndex","col","labelColIndex","descriptionColIndex","newTcList","row","values","checkboxCount","setCheckboxChecked","getInitialCheckboxState","setCheckboxEnabled","governancePolicy","checkboxChecked","checkboxEnabled","checkFormCompleted","allCheckboxChecked","updateCheckboxState","newState","i","Button","URL_TERMS_CONDITIONS_AGREEMENT"],"mappings":"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"}