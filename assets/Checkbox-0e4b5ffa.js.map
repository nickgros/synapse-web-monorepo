{"version":3,"file":"Checkbox-0e4b5ffa.js","sources":["../../src/components/widgets/Checkbox.tsx"],"sourcesContent":["import Typography from '@mui/material/Typography'\nimport { uniqueId as _uniqueId } from 'lodash-es'\nimport React, { useState } from 'react'\n\nexport type CheckboxProps = React.PropsWithChildren<\n  {\n    hideLabel?: boolean\n    checked?: boolean\n    className?: string\n    onChange: (newValue: boolean) => void\n    isSelectAll?: boolean\n    onClick?: (event: React.SyntheticEvent<HTMLDivElement>) => void\n    disabled?: boolean\n    'data-testid'?: string\n    'aria-label'?: string\n  } & (\n    | {\n        label?: React.ReactNode\n        /* If the label is not a string, then we require an aria-label */\n        'aria-label': string\n      }\n    | { label: string }\n  )\n>\n\nexport const Checkbox: React.FunctionComponent<CheckboxProps> = (\n  props: CheckboxProps,\n) => {\n  const {\n    checked = false,\n    hideLabel = false,\n    isSelectAll = false,\n    disabled = false,\n    onChange,\n  } = props\n  const [uniqueId] = useState(_uniqueId('src-checkbox-'))\n\n  const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (isSelectAll && event.target.checked === false) {\n      /* \n         You can click the all checkbox from off -> on\n         but clicking it off is a no-op\n      */\n      onChange(true)\n    } else {\n      onChange(event.target.checked)\n    }\n  }\n\n  let className = 'checkbox'\n  if (props.className) {\n    className += ` ${props.className}`\n  }\n\n  return (\n    <div className={className} onClick={props.onClick}>\n      <input\n        aria-label={'aria-label' in props ? props['aria-label'] : props.label}\n        type=\"checkbox\"\n        checked={checked}\n        id={uniqueId}\n        onChange={handleCheckboxChange}\n        disabled={disabled}\n        data-testid={props['data-testid']}\n      />\n      <Typography component={'label'} variant={'smallText1'} htmlFor={uniqueId}>\n        {/* Note: the `label` element MUST be rendered for our checkbox CSS to work! */}\n        {hideLabel ? <></> : props.label}\n      </Typography>\n      {props.children ?? <></>}\n    </div>\n  )\n}\n"],"names":["Checkbox","props","checked","hideLabel","isSelectAll","disabled","onChange","uniqueId","useState","_uniqueId","handleCheckboxChange","event","className","jsxs","jsx","Typography","Fragment"],"mappings":"4LAyBO,MAAAA,EAAAC,GAAA,CAGL,KAAA,CAAM,QAAAC,EAAA,GACM,UAAAC,EAAA,GACE,YAAAC,EAAA,GACE,SAAAC,EAAA,GACH,SAAAC,CACX,EAAAL,EAEF,CAAAM,CAAA,EAAAC,EAAAA,SAAAC,EAAA,eAAA,CAAA,EAEAC,EAAAC,GAAA,CACEP,GAAAO,EAAA,OAAA,UAAA,GAKEL,EAAA,EAAA,EAEAA,EAAAK,EAAA,OAAA,OAAA,CACF,EAGF,IAAAC,EAAA,WACA,OAAAX,EAAA,YACEW,GAAA,IAAAX,EAAA,SAAA,IAGFY,EAAA,MAAA,CAAA,UAAAD,EAAA,QAAAX,EAAA,QAAA,SAAA,CAEIa,EAAA,QAAC,CAAA,aAAA,eAAAb,EAAAA,EAAA,YAAA,EAAAA,EAAA,MACiE,KAAA,WAC3D,QAAAC,EACL,GAAAK,EACI,SAAAG,EACM,SAAAL,EACV,cAAAJ,EAAA,aAAA,CACgC,CAAA,EAClCa,EAAAC,EAAA,CAAA,UAAA,QAAA,QAAA,aAAA,QAAAR,EAAA,SAAAJ,EAAAW,EAAAE,EAAA,CAAA,CAAA,EAAAf,EAAA,MAAA,EAIAA,EAAA,UAAAa,EAAAE,EAAA,CAAA,CAAA,CACqB,CAAA,CAAA,CAG3B"}