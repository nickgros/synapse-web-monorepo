{"version":3,"file":"CreatedByModifiedBy.stories-503d774b.js","sources":["../../src/components/entity/page/CreatedByModifiedBy.tsx"],"sourcesContent":["import React from 'react'\nimport {\n  Box,\n  Breadcrumbs,\n  Skeleton,\n  SxProps,\n  Tooltip,\n  Typography,\n} from '@mui/material'\nimport {\n  BUNDLE_MASK_LAST_UPDATED_ON,\n  SMALL_USER_CARD,\n} from '../../../utils/SynapseConstants'\nimport {\n  useGetEntity,\n  useGetQueryResultBundleWithAsyncStatus,\n} from '../../../synapse-queries'\nimport {\n  convertToEntityType,\n  entityTypeToFriendlyName,\n  isDataset,\n  isTable,\n} from '../../../utils/functions/EntityTypeUtils'\nimport UserCard from '../../UserCard/UserCard'\nimport { formatDate } from '../../../utils/functions/DateFormatter'\nimport ConditionalWrapper from '../../utils/ConditionalWrapper'\nimport dayjs from 'dayjs'\nimport { InfoTwoTone } from '@mui/icons-material'\n\nexport type CreatedByModifiedByProps = {\n  entityId: string\n  versionNumber?: number\n}\n\nfunction Separator() {\n  return (\n    <Typography variant={'breadcrumb1'} sx={{ color: 'grey.700' }}>\n      /\n    </Typography>\n  )\n}\n\nexport function CreatedByModifiedBy(props: CreatedByModifiedByProps) {\n  const { entityId, versionNumber } = props\n  const entityIdWithVersion = `${entityId}${\n    versionNumber ? `.${versionNumber}` : ''\n  }`\n\n  const { data: entity } = useGetEntity(entityId, versionNumber)\n\n  const { data: tableQueryResult } = useGetQueryResultBundleWithAsyncStatus(\n    {\n      entityId,\n      query: {\n        sql: `SELECT * FROM ${entityIdWithVersion} LIMIT 0`,\n      },\n      partMask: BUNDLE_MASK_LAST_UPDATED_ON,\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    },\n    { enabled: !!(entity && isTable(entity)) },\n  )\n\n  const tableLastRebuilt = tableQueryResult?.responseBody?.lastUpdatedOn\n  const friendlyName = entity\n    ? entityTypeToFriendlyName(convertToEntityType(entity.concreteType))\n    : ''\n\n  const datasetCreatedByTooltipText =\n    'This is the user who created this Dataset. ' +\n    'This may not be the same person who generated the files in this Dataset, or who originally uploaded these files to Synapse.'\n\n  const tableModifiedOnTooltipText = (\n    <>\n      <p>\n        This is when the configuration of this {friendlyName} was last changed.\n      </p>\n      <p>Configuration changes may be triggered by (for example):</p>\n      <ul>\n        <li>Editing the name of the {friendlyName}</li>\n        <li>Updating the schema used by the {friendlyName}</li>\n      </ul>\n      <p>\n        This does NOT reflect changes to the data displayed in the the{' '}\n        {friendlyName}.\n      </p>\n    </>\n  )\n  /*\n   If the tooltip text is a string, MUI automatically applies it to aria-label which is more accessible and testable.\n    Since this tooltip text is a ReactNode, let's manually create a short string to use for the aria-label.\n   */\n  const tableModifiedOnAccessibleLabel = `This is when the configuration of this ${friendlyName} was last changed.`\n\n  const tableLastUpdatedTooltipText =\n    `When data changes, the ${friendlyName} is rebuilt to reflect those changes. ` +\n    `This is the last time changes were made to the data.`\n\n  const createdByTooltipId = `${entityIdWithVersion}-createdByTooltip`\n  const modifiedByTooltipId = `${entityIdWithVersion}-modifiedByTooltip`\n  const lastUpdatedTooltipId = `${entityIdWithVersion}-lastUpdatedTooltip`\n\n  const iconSx: SxProps = {\n    width: '16px',\n    height: '16px',\n    ml: '4px',\n    verticalAlign: 'text-bottom',\n  }\n\n  return (\n    <Box sx={{ bgcolor: 'grey.100', py: '10px' }}>\n      <Breadcrumbs\n        separator={<Separator />}\n        sx={{\n          '& .MuiBreadcrumbs-ol': {\n            justifyContent: 'center',\n          },\n        }}\n      >\n        <ConditionalWrapper condition={!entity} wrapper={Skeleton}>\n          <Typography\n            sx={{ color: 'grey.700' }}\n            variant={'breadcrumb1'}\n            aria-describedby={createdByTooltipId}\n          >\n            {friendlyName} created by{' '}\n            <UserCard ownerId={entity?.createdBy} size={SMALL_USER_CARD} /> on{' '}\n            {formatDate(dayjs(entity?.createdOn))}\n            {entity && isDataset(entity) && (\n              <Tooltip\n                id={createdByTooltipId}\n                title={datasetCreatedByTooltipText}\n              >\n                <InfoTwoTone sx={iconSx} />\n              </Tooltip>\n            )}\n          </Typography>\n        </ConditionalWrapper>\n        <ConditionalWrapper condition={!entity} wrapper={Skeleton}>\n          <Typography\n            sx={{ color: 'grey.700' }}\n            variant={'breadcrumb1'}\n            aria-describedby={modifiedByTooltipId}\n          >\n            {entity && isTable(entity) ? 'Configuration' : friendlyName} last\n            modified by{' '}\n            <UserCard ownerId={entity?.modifiedBy} size={SMALL_USER_CARD} /> on{' '}\n            {formatDate(dayjs(entity?.modifiedOn))}\n            {entity && isTable(entity) && (\n              <Tooltip\n                id={modifiedByTooltipId}\n                title={tableModifiedOnTooltipText}\n                aria-label={tableModifiedOnAccessibleLabel}\n              >\n                <InfoTwoTone sx={iconSx} />\n              </Tooltip>\n            )}\n          </Typography>\n        </ConditionalWrapper>\n        {tableLastRebuilt && (\n          <Typography\n            sx={{ color: 'grey.700' }}\n            variant={'breadcrumb1'}\n            aria-describedby={lastUpdatedTooltipId}\n          >\n            {friendlyName} last rebuilt on {formatDate(dayjs(tableLastRebuilt))}\n            <Tooltip\n              title={tableLastUpdatedTooltipText}\n              id={lastUpdatedTooltipId}\n            >\n              <InfoTwoTone sx={iconSx} />\n            </Tooltip>\n          </Typography>\n        )}\n      </Breadcrumbs>\n    </Box>\n  )\n}\n"],"names":["Separator","jsx","Typography","CreatedByModifiedBy","props","entityId","versionNumber","entityIdWithVersion","entity","useGetEntity","tableQueryResult","useGetQueryResultBundleWithAsyncStatus","BUNDLE_MASK_LAST_UPDATED_ON","isTable","tableLastRebuilt","_a","friendlyName","entityTypeToFriendlyName","convertToEntityType","datasetCreatedByTooltipText","tableModifiedOnTooltipText","jsxs","Fragment","tableModifiedOnAccessibleLabel","tableLastUpdatedTooltipText","createdByTooltipId","modifiedByTooltipId","lastUpdatedTooltipId","iconSx","Box","Breadcrumbs","ConditionalWrapper","Skeleton","UserCard","SMALL_USER_CARD","formatDate","dayjs","isDataset","Tooltip","InfoTwoTone"],"mappings":"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"}