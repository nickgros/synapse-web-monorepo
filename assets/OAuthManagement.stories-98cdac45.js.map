{"version":3,"file":"OAuthManagement.stories-98cdac45.js","sources":["../../src/lib/utils/hooks/SynapseAPI/oauth/useOAuthClient.ts","../../src/lib/containers/oauth/CreateOAuthClient.tsx","../../src/lib/containers/oauth/OAuthManagement.tsx"],"sourcesContent":["import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { OAuthClient, OAuthClientList } from '../../../synapseTypes/OAuthClient'\n\nexport function useGetOAuthClientInfinite(\n  options?: UseInfiniteQueryOptions<OAuthClientList, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<OAuthClientList, SynapseClientError>(\n    keyFactory.getMyOAuthClientsQueryKey(),\n    async context =>\n      await SynapseClient.getOAuth2(accessToken!, context.pageParam),\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useDeleteOAuthClient(\n  options?: UseMutationOptions<void, SynapseClientError, string>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, string>(\n    (clientId: string) =>\n      SynapseClient.deleteOAuthClient(clientId, accessToken!),\n    {\n      ...options,\n      onSuccess: async (updatedClient, clientId, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getMyOAuthClientsQueryKey(),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedClient, clientId, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useUpdateOAuthClient(\n  options?: UseMutationOptions<OAuthClient, SynapseClientError, OAuthClient>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<OAuthClient, SynapseClientError, OAuthClient>(\n    (client: OAuthClient) =>\n      SynapseClient.updateOAuthClient(client, accessToken!),\n    {\n      ...options,\n      onSuccess: async (updatedClient, client, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getMyOAuthClientsQueryKey(),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedClient, client, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useCreateOAuthClient(\n  options?: UseMutationOptions<OAuthClient, SynapseClientError, OAuthClient>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<OAuthClient, SynapseClientError, OAuthClient>(\n    (client: OAuthClient) =>\n      SynapseClient.createOAuthClient(client, accessToken!),\n    {\n      ...options,\n      onSuccess: async (updatedClient, client, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getMyOAuthClientsQueryKey(),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedClient, client, ctx)\n        }\n      },\n    },\n  )\n}\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { Alert, Button, Col, Form, Modal, Row } from 'react-bootstrap'\nimport { displayToast } from '../ToastMessage'\nimport { Typography } from '@mui/material'\nimport { OAuthClient } from '../../utils/synapseTypes/OAuthClient'\nimport {\n  useCreateOAuthClient,\n  useDeleteOAuthClient,\n  useUpdateOAuthClient,\n} from '../../utils/hooks/SynapseAPI'\nimport IconSvg from '../IconSvg'\nimport { WarningDialog } from '../synapse_form_wrapper/WarningDialog'\nimport { HelpOutlineTwoTone } from '@mui/icons-material'\nimport { Tooltip } from '@mui/material'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { SynapseSpinner } from '../LoadingScreen'\nimport { SynapseClient } from '../../utils'\nimport { useDebouncedEffect } from '../../utils/hooks'\n\nconst INPUT_CHANGE_DEBOUNCE_DELAY_MS = 500\n\nexport type CreateOAuthModalProps = {\n  isShowingModal: boolean\n  isEdit: boolean\n  onClose: () => void\n  setIsShowingConfirmModal: (a: boolean) => void\n  isShowingConfirmModal: boolean\n  client?: OAuthClient\n  setIsShowingModal: (a: boolean) => void\n}\n\nexport const CreateOAuthModal: React.FunctionComponent<\n  CreateOAuthModalProps\n> = ({\n  isShowingModal = false,\n  isEdit,\n  onClose,\n  client,\n  setIsShowingConfirmModal,\n  isShowingConfirmModal,\n  setIsShowingModal,\n}) => {\n  const { accessToken } = useSynapseContext()\n  const [clientName, setClientName] = useState('')\n  const [redirectUris, setRedirectUris] = useState([{ uri: '' }])\n  const [policyUri, setPolicyUri] = useState<string>()\n  const [clientUri, setClientUri] = useState<string>()\n  const [sectorUri, setSectorUri] = useState<string | undefined>()\n  const [tosUri, setTosUri] = useState<string>()\n  const [warnTrigger, setWarnTrigger] = useState(false)\n  const [isDelete, setIsDelete] = useState<boolean>(false)\n  const [updatedClient, setUpdatedClient] = useState<OAuthClient>()\n  const [error, setError] = useState<SynapseClientError>()\n\n  const warningHeader = 'Are you absolutely sure?'\n  const warningBody =\n    'Editing this detail will render your client invalid and will require you to resubmit verification. This action cannot be undone.'\n  const uriHelpMessage = 'Click Add URI to add more Redirect URIs'\n\n  // Return the OAuth Client definition based on the current client-side UI state\n  const oAuthClient: OAuthClient = useMemo(() => {\n    return {\n      client_id: client?.client_id,\n      client_name: clientName,\n      redirect_uris: redirectUris?.map(str => str.uri) ?? [''],\n      policy_uri: policyUri,\n      client_uri: clientUri,\n      sector_identifier_uri: sectorUri ?? '',\n      tos_uri: tosUri,\n      etag: client?.etag,\n    }\n  }, [\n    client?.client_id,\n    client?.etag,\n    clientName,\n    clientUri,\n    policyUri,\n    redirectUris,\n    sectorUri,\n    tosUri,\n  ])\n\n  useEffect(() => {\n    setClientName(client?.client_name ?? '')\n    setRedirectUris(\n      client?.redirect_uris.map(str => ({ uri: str })) ?? [{ uri: '' }],\n    )\n    setPolicyUri(client?.policy_uri ?? '')\n    setClientUri(client?.client_uri ?? '')\n    setSectorUri(client?.sector_identifier_uri ?? undefined)\n    setTosUri(client?.tos_uri ?? '')\n  }, [isShowingModal, client])\n\n  useDebouncedEffect(\n    () => {\n      if (accessToken) {\n        // SWC-6365: use the pre-check service to determine if we need to show a warning on edit\n        SynapseClient.isOAuthClientReverificationRequired(\n          oAuthClient,\n          accessToken,\n        ).then(precheckResult => {\n          setWarnTrigger(precheckResult.reverificationRequired)\n        })\n      }\n    },\n    [accessToken, oAuthClient],\n    INPUT_CHANGE_DEBOUNCE_DELAY_MS,\n  )\n\n  const hide = () => {\n    setClientName('')\n    setRedirectUris([{ uri: '' }])\n    setPolicyUri('')\n    setClientUri('')\n    setSectorUri('')\n    setTosUri('')\n    onClose()\n  }\n\n  const hideConfirmModal = () => {\n    setIsShowingConfirmModal(false)\n    setIsDelete(false)\n  }\n\n  const { mutate: createClient } = useCreateOAuthClient({\n    onSuccess: () => {\n      displayToast('Successfully created', 'success')\n      setError(undefined)\n      hide()\n    },\n    onError: err => {\n      setError(err)\n    },\n  })\n\n  const { mutate: updateClient, isLoading: isLoadingUpdate } =\n    useUpdateOAuthClient({\n      onSuccess: () => {\n        displayToast('Successfully saved', 'success')\n        setError(undefined)\n        hide()\n      },\n      onError: err => {\n        setError(err)\n        setIsShowingModal(true)\n      },\n    })\n\n  const { mutate: deleteClient } = useDeleteOAuthClient({\n    onSuccess: () => {\n      displayToast('Successfully deleted', 'success')\n      hide()\n    },\n    onError: error => {\n      displayToast(error.reason, 'danger')\n    },\n  })\n\n  const onCreateClient = () => {\n    try {\n      if (accessToken) {\n        setUpdatedClient(oAuthClient)\n        if (warnTrigger === true) {\n          setIsShowingConfirmModal(true)\n        } else {\n          if (isEdit) {\n            updateClient(oAuthClient)\n          } else {\n            createClient(oAuthClient)\n          }\n        }\n      }\n    } catch (err) {\n      displayToast(err.reason as string, 'danger')\n    }\n  }\n\n  const handleRedirectUriAdd = () => {\n    if (redirectUris) {\n      setRedirectUris([...redirectUris, { uri: '' }])\n    }\n  }\n\n  const handleRedirectUriRemove = (index: number) => {\n    if (redirectUris) {\n      const list = [...redirectUris]\n      list.splice(index, 1)\n      setRedirectUris(list)\n    }\n  }\n\n  const handleUriChange = (e: any, index: number) => {\n    if (redirectUris) {\n      const { name, value } = e.target\n      const list = [...redirectUris]\n      list[index][name] = value\n      setRedirectUris(list)\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport\">\n      <Modal\n        show={isShowingModal && !isShowingConfirmModal}\n        animation={false}\n        backdrop=\"static\"\n        onHide={() => {\n          hide()\n          setError(undefined)\n        }}\n        size=\"lg\"\n        className=\"OAuthDialog bootstrap-4-backport\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>\n            {isEdit ? 'Client Details' : 'Create New OAuth Client'}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {isLoadingUpdate && (\n            <div className={'SRC-center-text'}>\n              <SynapseSpinner size={40} />\n            </div>\n          )}\n          {!isLoadingUpdate && (\n            <>\n              <Typography variant=\"body1\">\n                To protect you and your users, your consent screen and\n                application will need to be verified by Sage Bionetworks. Before\n                your consent screen and application are verified by Sage\n                Bionetworks, you can still test your application with\n                limitations.\n              </Typography>\n\n              {isEdit && (\n                <Typography style={{ marginTop: '16px' }} variant=\"label\">\n                  Client ID: {client?.client_id}\n                </Typography>\n              )}\n              <Row>\n                <Col lg={6} md={6} sm={12} xs={12}>\n                  <Form.Group className=\"required\">\n                    <Form.Label htmlFor=\"clientName\">Client Name</Form.Label>\n                    <Form.Control\n                      required\n                      onChange={e => setClientName(e.target.value)}\n                      placeholder=\"Client Name\"\n                      type=\"text\"\n                      value={clientName}\n                      id=\"clientName\"\n                    />\n                  </Form.Group>\n                </Col>\n                <Col lg={6} md={6} sm={12} xs={12}>\n                  <Form.Label className=\"required\" htmlFor=\"clientUri\">\n                    Client Homepage\n                  </Form.Label>\n                  <Form.Control\n                    onChange={e => setClientUri(e.target.value)}\n                    placeholder=\"https://\"\n                    type=\"text\"\n                    value={clientUri}\n                    id=\"clientUri\"\n                  />\n                </Col>\n              </Row>\n              <Row>\n                {!isEdit && (\n                  <>\n                    <Col lg={6} md={6} sm={12} xs={12}>\n                      <Form.Group className=\"required\">\n                        <Form.Label htmlFor=\"redirect-uri-0\">\n                          Redirect URI(s)\n                        </Form.Label>\n                        <Tooltip title={uriHelpMessage} placement=\"top\">\n                          <HelpOutlineTwoTone className={`HelpButton`} />\n                        </Tooltip>\n                        {redirectUris?.map((singleUri, idx) => (\n                          <div key={idx}>\n                            <Form.Control\n                              name=\"uri\"\n                              required\n                              id={`redirect-uri-${idx}`}\n                              onChange={e => handleUriChange(e, idx)}\n                              value={singleUri.uri}\n                              placeholder=\"https://\"\n                              type=\"text\"\n                            />\n                            {redirectUris.length > 1 && (\n                              <button\n                                onClick={() => handleRedirectUriRemove(idx)}\n                              >\n                                <IconSvg\n                                  icon=\"delete\"\n                                  sx={{ color: 'error.main' }}\n                                />\n                              </button>\n                            )}\n\n                            {redirectUris.length - 1 === idx && (\n                              <Button\n                                onClick={handleRedirectUriAdd}\n                                disabled={singleUri.uri.length === 0}\n                              >\n                                Add URI\n                              </Button>\n                            )}\n                          </div>\n                        ))}\n                      </Form.Group>\n                    </Col>\n                    <Col lg={6} md={6} sm={12} xs={12}>\n                      <Form.Label>Sector Identifier URI</Form.Label>\n                      <Form.Control\n                        onChange={e => setSectorUri(e.target.value)}\n                        placeholder=\"https://\"\n                        type=\"text\"\n                      />\n                    </Col>\n                  </>\n                )}\n              </Row>\n              <Row>\n                <Col lg={6} md={6} sm={12} xs={12}>\n                  <Form.Label>Link to Privacy Policy</Form.Label>\n                  <Form.Control\n                    onChange={e => setPolicyUri(e.target.value)}\n                    placeholder=\"https://\"\n                    type=\"text\"\n                    value={policyUri}\n                  />\n                </Col>\n                <Col lg={6} md={6} sm={12} xs={12}>\n                  <Form.Label>Links to Terms of Service</Form.Label>\n                  <Form.Control\n                    onChange={e => setTosUri(e.target.value)}\n                    placeholder=\"https://\"\n                    type=\"text\"\n                    value={tosUri}\n                  />\n                </Col>\n              </Row>\n              {isEdit && (\n                <div className=\"danger\">\n                  <Typography\n                    style={{ marginTop: '8px' }}\n                    color=\"error\"\n                    variant=\"headline3\"\n                  >\n                    DANGER ZONE\n                  </Typography>\n                  <Typography variant=\"smallText1\">\n                    Editing the following information will render your client\n                    invalid and will require you to create it again and resubmit\n                    verification if needed.\n                  </Typography>\n                  <Row>\n                    <Col lg={6} md={6} sm={12} xs={12}>\n                      <Form.Label htmlFor=\"redirect-uri-0\">\n                        Redirect URI(s)\n                      </Form.Label>\n                      <Tooltip title={uriHelpMessage} placement=\"top\">\n                        <HelpOutlineTwoTone className={`HelpButton`} />\n                      </Tooltip>\n\n                      {redirectUris?.map((singleUri, idx) => (\n                        <div key={idx}>\n                          <Form.Control\n                            id={`redirect-uri-${idx}`}\n                            required\n                            name=\"uri\"\n                            onChange={e => handleUriChange(e, idx)}\n                            value={singleUri.uri}\n                            placeholder=\"https://\"\n                            type=\"text\"\n                          />\n                          {redirectUris.length > 1 && (\n                            <button\n                              onClick={() => handleRedirectUriRemove(idx)}\n                            >\n                              <IconSvg\n                                icon=\"delete\"\n                                sx={{ color: 'error.main' }}\n                              />\n                            </button>\n                          )}\n\n                          {redirectUris.length - 1 === idx && (\n                            <Button\n                              onClick={handleRedirectUriAdd}\n                              disabled={singleUri.uri.length === 0}\n                            >\n                              Add Uri\n                            </Button>\n                          )}\n                        </div>\n                      ))}\n                    </Col>\n                    <Col lg={6} md={6} sm={12} xs={12}>\n                      <Form.Label>Sector Identifier URI</Form.Label>\n                      <Form.Control\n                        onChange={e => setSectorUri(e.target.value)}\n                        placeholder=\"https://\"\n                        type=\"text\"\n                        value={sectorUri}\n                      />\n                    </Col>\n                  </Row>\n\n                  <button\n                    className=\"delete-button\"\n                    onClick={() => {\n                      setIsDelete(true)\n                      setIsShowingConfirmModal(true)\n                    }}\n                  >\n                    <IconSvg icon=\"delete\" sx={{ color: 'error.main' }} />\n                    DELETE CLIENT\n                  </button>\n                </div>\n              )}\n            </>\n          )}\n        </Modal.Body>\n        {error && <Alert variant=\"danger\">{error?.reason}</Alert>}\n        <Modal.Footer>\n          <Button\n            variant=\"default\"\n            onClick={() => {\n              hide()\n              setError(undefined)\n            }}\n          >\n            CANCEL\n          </Button>\n          <Button variant=\"primary\" onClick={onCreateClient}>\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <WarningDialog\n        open={isShowingConfirmModal}\n        title={warningHeader}\n        content={warningBody}\n        onCancel={hideConfirmModal}\n        onConfirm={() => {\n          isDelete\n            ? deleteClient(client?.client_id!)\n            : updateClient(updatedClient!)\n          hideConfirmModal()\n        }}\n        confirmButtonColor=\"error\"\n        confirmButtonText=\"Yes, Continue\"\n      />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Table } from 'react-bootstrap'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport dayjs from 'dayjs'\nimport { useGetOAuthClientInfinite } from '../../utils/hooks/SynapseAPI'\nimport { CreateOAuthModal } from './CreateOAuthClient'\nimport { OAuthClient } from '../../utils/synapseTypes/OAuthClient'\nimport WarningDialog from '../synapse_form_wrapper/WarningDialog'\nimport { SynapseClient } from '../../utils'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport CopyToClipboardInput from '../CopyToClipboardInput'\nimport { displayToast } from '../ToastMessage'\nimport { DialogBase } from '../DialogBase'\nimport { Button, Link } from '@mui/material'\n\nexport const OAuthManagement: React.FunctionComponent = () => {\n  const { accessToken } = useSynapseContext()\n  const [isShowingCreateClientModal, setIsShowingCreateClientModal] =\n    useState(false)\n  const [isEdit, setIsEdit] = useState<boolean>(false)\n  const [selectedClient, setSelectedClient] = useState<OAuthClient>()\n  const [isShowingConfirmModal, setIsShowingConfirmModal] = useState(false)\n  const [isShowingSecretWarning, setIsShowingSecretWarning] = useState(false)\n  const [isShowingSecret, setIsShowingSecret] = useState(false)\n  const [secret, setSecret] = useState<string>()\n  const [isShowingVerification, setIsShowingVerification] = useState(false)\n\n  const { data, hasNextPage, fetchNextPage } = useGetOAuthClientInfinite()\n  const oAuthClientList = data?.pages.flatMap(page => page.results) ?? []\n\n  const warningHeader = 'Are you absolutely sure?'\n  const warningBody =\n    'If you have an existing secret, generating a new secret will make your application invalid after generation. This action cannot be undone.'\n\n  const onShowSecret = async () => {\n    setIsShowingSecretWarning(false)\n    try {\n      const secret = await SynapseClient.createOAuthClientSecret(\n        accessToken!,\n        selectedClient?.client_id!,\n      )\n      setSelectedClient(undefined)\n      setIsShowingSecret(true)\n      setSecret(secret.client_secret)\n    } catch (err: any) {\n      displayToast(err.reason as string, 'danger')\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport\">\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => {\n          setIsShowingCreateClientModal(true)\n          setIsEdit(false)\n        }}\n        sx={{ float: 'right' }}\n      >\n        Create New Client\n      </Button>\n      <Table striped>\n        <thead>\n          <tr>\n            <th>Created</th>\n            <th>Modified</th>\n            <th>ID</th>\n            <th>Client</th>\n            <th>Verified</th>\n            <th>App Secret</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {oAuthClientList.map(item => {\n            return (\n              <tr key={item.client_id}>\n                <td>{formatDate(dayjs(item.createdOn))}</td>\n                <td>{formatDate(dayjs(item.modifiedOn))}</td>\n                <td>{item.client_id}</td>\n                <td>{item.client_name}</td>\n                <td>\n                  {item.verified ? (\n                    'Yes'\n                  ) : (\n                    <Button\n                      variant=\"outlined\"\n                      size=\"small\"\n                      onClick={() => setIsShowingVerification(true)}\n                    >\n                      SUBMIT VERIFICATION\n                    </Button>\n                  )}\n                </td>\n                <td>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() => {\n                      setSelectedClient(item)\n                      setIsShowingSecretWarning(true)\n                    }}\n                    size=\"small\"\n                  >\n                    GENERATE SECRET\n                  </Button>\n                </td>\n                <td>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() => {\n                      setSelectedClient(item)\n                      setIsEdit(true)\n                      setIsShowingCreateClientModal(true)\n                    }}\n                    size=\"small\"\n                  >\n                    EDIT\n                  </Button>\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </Table>\n      {hasNextPage && (\n        <div className=\"text-center\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              fetchNextPage()\n            }}\n          >\n            Load more\n          </Button>\n        </div>\n      )}\n\n      <CreateOAuthModal\n        onClose={() => {\n          setIsShowingCreateClientModal(false)\n        }}\n        isShowingModal={isShowingCreateClientModal}\n        client={isEdit ? selectedClient : undefined}\n        isEdit={isEdit}\n        setIsShowingConfirmModal={setIsShowingConfirmModal}\n        isShowingConfirmModal={isShowingConfirmModal}\n        setIsShowingModal={setIsShowingCreateClientModal}\n      />\n      <DialogBase\n        open={isShowingVerification}\n        onCancel={() => setIsShowingVerification(false)}\n        title=\"Submit Verification\"\n        content={\n          <>\n            <p>\n              In order to verify an OAuth client please submit a request to the{' '}\n              <Link\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://sagebionetworks.jira.com/servicedesk/customer/portal/9\"\n              >\n                Synapse Service Desk.\n              </Link>\n            </p>\n            <b>Please list the following items in your request:</b>\n            <ul>\n              <li>Your name</li>\n              <li>\n                The ID of the client to be verified <br />\n              </li>\n              <li>A description of your application</li>\n            </ul>\n            {/* <p>\n            Verification can take up to X weeks and we will notify you via X.\n          </p> */}\n          </>\n        }\n      />\n      <WarningDialog\n        open={isShowingSecretWarning}\n        title={warningHeader}\n        content={warningBody}\n        onCancel={() => {\n          setIsShowingSecretWarning(false)\n          setSelectedClient(undefined)\n        }}\n        onConfirm={onShowSecret}\n        confirmButtonColor=\"error\"\n        confirmButtonText=\"Yes, Continue\"\n      />\n      {secret && (\n        <DialogBase\n          open={isShowingSecret}\n          title=\"App Secret\"\n          onCancel={() => {\n            setIsShowingSecret(false)\n            setSecret(undefined)\n          }}\n          content={\n            <>\n              <p>\n                <b>This secret will not be able to be retrieved again.</b> If\n                needed, in order to generate a new secret select Generate from\n                the Client List.\n              </p>\n              <CopyToClipboardInput value={secret} inputWidth={'400px'} />\n            </>\n          }\n        />\n      )}\n    </div>\n  )\n}\n"],"names":["useGetOAuthClientInfinite","options","accessToken","keyFactory","useSynapseContext","useInfiniteQuery","context","SynapseClient.getOAuth2","page","useDeleteOAuthClient","queryClient","useQueryClient","useMutation","clientId","SynapseClient.deleteOAuthClient","updatedClient","ctx","useUpdateOAuthClient","client","SynapseClient.updateOAuthClient","useCreateOAuthClient","SynapseClient.createOAuthClient","INPUT_CHANGE_DEBOUNCE_DELAY_MS","CreateOAuthModal","isShowingModal","isEdit","onClose","setIsShowingConfirmModal","isShowingConfirmModal","setIsShowingModal","clientName","setClientName","useState","redirectUris","setRedirectUris","policyUri","setPolicyUri","clientUri","setClientUri","sectorUri","setSectorUri","tosUri","setTosUri","warnTrigger","setWarnTrigger","isDelete","setIsDelete","setUpdatedClient","error","setError","warningHeader","warningBody","uriHelpMessage","oAuthClient","useMemo","str","useEffect","useDebouncedEffect","SynapseClient.isOAuthClientReverificationRequired","precheckResult","hide","hideConfirmModal","createClient","displayToast","err","updateClient","isLoadingUpdate","deleteClient","error2","onCreateClient","handleRedirectUriAdd","handleRedirectUriRemove","index","list","handleUriChange","e","name","value","jsxs","Modal","jsx","SynapseSpinner","Fragment","Typography","Row","Col","Form","Tooltip","HelpOutlineTwoTone","singleUri","idx","IconSvg","Button","Alert","WarningDialog","OAuthManagement","isShowingCreateClientModal","setIsShowingCreateClientModal","setIsEdit","selectedClient","setSelectedClient","isShowingSecretWarning","setIsShowingSecretWarning","isShowingSecret","setIsShowingSecret","secret","setSecret","isShowingVerification","setIsShowingVerification","data","hasNextPage","fetchNextPage","oAuthClientList","onShowSecret","secret2","SynapseClient.createOAuthClientSecret","Table","item","formatDate","dayjs","DialogBase","Link","CopyToClipboardInput"],"mappings":"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"}