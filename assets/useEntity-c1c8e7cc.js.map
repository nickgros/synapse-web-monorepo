{"version":3,"file":"useEntity-c1c8e7cc.js","sources":["../../src/lib/utils/hooks/SynapseAPI/QueryClientUtils.ts","../../src/lib/utils/hooks/SynapseAPI/entity/useEntity.ts"],"sourcesContent":["import { QueryClient } from 'react-query'\nimport { KeyFactory } from './KeyFactory'\n\n/**\n * Invalidate all queries for the given entity.\n * @param queryClient\n * @param keyFactory\n * @param id\n */\nexport function invalidateAllQueriesForEntity(\n  queryClient: QueryClient,\n  keyFactory: KeyFactory,\n  id: string,\n) {\n  // TODO: Figure out how to handle cases where the change can affect other entities.\n  // Some examples:\n  //  - deleting an entity should invalidate the parent's children\n  //  - moving an entity should invalidate the old and new parent's children\n  return queryClient.invalidateQueries(keyFactory.getEntityQueryKey(id))\n}\n","/*\n * Hooks to access Entity Services in Synapse\n */\n\nimport { omit, pick } from 'lodash-es'\nimport { useEffect, useState } from 'react'\nimport {\n  QueryFunctionContext,\n  QueryKey,\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { entityJsonKeys } from '../../../functions/EntityTypeUtils'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport {\n  Entity,\n  EntityJson,\n  EntityJsonValue,\n  EntityPath,\n  PaginatedResults,\n} from '../../../synapseTypes'\nimport { VersionInfo } from '../../../synapseTypes/VersionInfo'\nimport { invalidateAllQueriesForEntity } from '../QueryClientUtils'\n\nexport function useGetEntity<T extends Entity>(\n  entityId: string,\n  versionNumber?: string | number,\n  options?: UseQueryOptions<T, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<T, SynapseClientError>(\n    keyFactory.getEntityVersionQueryKey(entityId, versionNumber),\n    () =>\n      SynapseClient.getEntity<T>(\n        accessToken,\n        entityId,\n        versionNumber?.toString(),\n      ),\n    options,\n  )\n}\n\nexport function useUpdateEntity<T extends Entity>(\n  options?: UseMutationOptions<T, SynapseClientError, T>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<T, SynapseClientError, T>(\n    (entity: T) => SynapseClient.updateEntity<T>(entity, accessToken),\n    {\n      ...options,\n      onSuccess: async (updatedEntity, variables, ctx) => {\n        await invalidateAllQueriesForEntity(\n          queryClient,\n          keyFactory,\n          updatedEntity.id!,\n        )\n        queryClient.setQueryData(\n          keyFactory.getEntityQueryKey(updatedEntity.id!),\n          updatedEntity,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedEntity, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useDeleteEntity(\n  options?: UseMutationOptions<void, SynapseClientError, string>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, string>(\n    (entityId: string) => SynapseClient.deleteEntity(accessToken, entityId),\n    {\n      ...options,\n      onSuccess: async (voidReturn, entityId, ctx) => {\n        await invalidateAllQueriesForEntity(queryClient, keyFactory, entityId)\n        if (options?.onSuccess) {\n          await options.onSuccess(voidReturn, entityId, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetVersions(\n  entityId: string,\n  offset: number = 0,\n  limit: number = 200,\n  options?: UseQueryOptions<PaginatedResults<VersionInfo>, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<PaginatedResults<VersionInfo>, SynapseClientError>(\n    keyFactory.getPaginatedEntityVersionsQueryKey(entityId, limit, offset),\n    () => SynapseClient.getEntityVersions(entityId, accessToken, offset, limit),\n    options,\n  )\n}\n\nexport function useGetVersionsInfinite(\n  entityId: string,\n  options: UseInfiniteQueryOptions<\n    PaginatedResults<VersionInfo>,\n    SynapseClientError\n  >,\n) {\n  const LIMIT = 200\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<PaginatedResults<VersionInfo>, SynapseClientError>(\n    keyFactory.getEntityVersionsQueryKey(entityId),\n    async (context: QueryFunctionContext<QueryKey, number>) => {\n      return await SynapseClient.getEntityVersions(\n        entityId,\n        accessToken,\n        context.pageParam,\n        LIMIT,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        if (lastPage.results.length > 0) return pages.length * LIMIT\n        //set the new offset to (page * limit)\n        else return undefined\n      },\n    },\n  )\n}\n\nexport function getStandardEntityFields(json: EntityJson): EntityJson {\n  return pick(json, entityJsonKeys[json.concreteType]) as EntityJson\n}\n\nexport function removeStandardEntityFields(\n  json: EntityJson,\n): Record<\n  string,\n  string | number | boolean | string[] | number[] | boolean[] | undefined\n> {\n  return omit(json, entityJsonKeys[json.concreteType])\n}\n\n/**\n * In addition to the standard objects returned by {@link useQuery}, this hook also returns the following objects:\n * - `entityMetadata`: the standard entity fields contained in the JSON response\n * - `annotations`: the annotations contained in the JSON response\n *\n * The union of these objects would be equal in value to the `data` object.\n */\nexport function useGetJson(\n  entityId: string,\n  options?: UseQueryOptions<EntityJson, SynapseClientError>,\n) {\n  const [entityMetadata, setEntityMetadata] = useState<EntityJson | undefined>()\n  const [annotations, setAnnotations] = useState<\n    Record<string, EntityJsonValue> | undefined\n  >()\n  const { accessToken, keyFactory } = useSynapseContext()\n  const query = useQuery<EntityJson, SynapseClientError>(\n    keyFactory.getEntityJsonQueryKey(entityId),\n    () => SynapseClient.getEntityJson(entityId, accessToken),\n    options,\n  )\n\n  // Separate the standard fields and annotations.\n  useEffect(() => {\n    if (query.data) {\n      setEntityMetadata(getStandardEntityFields(query.data))\n      setAnnotations(removeStandardEntityFields(query.data))\n    }\n  }, [query.data])\n\n  return {\n    ...query,\n    entityMetadata,\n    annotations,\n  }\n}\n\nexport function useUpdateViaJson(\n  options?: UseMutationOptions<EntityJson, SynapseClientError, EntityJson>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useMutation<EntityJson, SynapseClientError, EntityJson>(\n    (json: EntityJson) => {\n      const entityId = json.id\n      return SynapseClient.updateEntityJson(entityId, json, accessToken)\n    },\n    {\n      ...options,\n      onSuccess: async (data, variables, ctx) => {\n        const entityId = data.id\n\n        await invalidateAllQueriesForEntity(queryClient, keyFactory, entityId)\n        queryClient.setQueryData(\n          keyFactory.getEntityJsonQueryKey(entityId),\n          data,\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(data, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useGetEntityPath(\n  entityId: string,\n  options?: UseQueryOptions<EntityPath, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<EntityPath, SynapseClientError>(\n    keyFactory.getEntityPathQueryKey(entityId),\n    () => SynapseClient.getEntityPath(entityId, accessToken),\n    options,\n  )\n}\n"],"names":["invalidateAllQueriesForEntity","queryClient","keyFactory","id","useGetEntity","entityId","versionNumber","options","accessToken","useSynapseContext","useQuery","SynapseClient.getEntity","useUpdateEntity","useQueryClient","useMutation","entity","SynapseClient.updateEntity","updatedEntity","variables","ctx","useDeleteEntity","SynapseClient.deleteEntity","voidReturn","useGetVersionsInfinite","useInfiniteQuery","context","SynapseClient.getEntityVersions","lastPage","pages","getStandardEntityFields","json","pick","entityJsonKeys","removeStandardEntityFields","omit","useGetJson","entityMetadata","setEntityMetadata","useState","annotations","setAnnotations","query","SynapseClient.getEntityJson","useEffect","useUpdateViaJson","SynapseClient.updateEntityJson","data","useGetEntityPath","SynapseClient.getEntityPath"],"mappings":"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"}