{"version":3,"file":"LoginAwareButton-f534222d.js","sources":["../../src/components/widgets/LoginAwareButton.tsx"],"sourcesContent":["import * as React from 'react'\nimport { Button, ButtonProps } from '@mui/material'\nimport { Link, LinkProps } from 'react-router-dom'\nimport { SRC_SIGN_IN_CLASS } from '../../utils/SynapseConstants'\nimport { useSynapseContext } from '../../utils/context'\n\n/* Allow component to behave as a MUI Button or a React Router Link */\nexport type LoginAwareButtonProps = ButtonProps &\n  Partial<Pick<LinkProps, 'to' | 'replace'>>\n\nexport const LoginAwareButton: React.FunctionComponent<\n  LoginAwareButtonProps\n> = (props: LoginAwareButtonProps) => {\n  const { accessToken } = useSynapseContext()\n  const isSignedIn = !!accessToken\n  const mergedProps = { ...props }\n  const linkProps = {\n    to: props.to,\n    replace: props.replace,\n  }\n  delete mergedProps.to\n  delete mergedProps.replace\n  if (!isSignedIn) {\n    /* If token is missing, add css class to flag button to require login before continuing */\n    delete mergedProps.href\n    mergedProps.className = SRC_SIGN_IN_CLASS\n  }\n  let linkBtn = <Button {...mergedProps}>{mergedProps.children}</Button>\n  if (isSignedIn && linkProps.to && !mergedProps.href) {\n    linkBtn = (\n      <Link to={linkProps.to} replace={linkProps.replace}>\n        {linkBtn}\n      </Link>\n    )\n  }\n  return linkBtn\n}\n"],"names":["LoginAwareButton","props","accessToken","useSynapseContext","isSignedIn","mergedProps","linkProps","SRC_SIGN_IN_CLASS","linkBtn","jsx","Button","Link"],"mappings":"6OAUO,MAAAA,EAAAC,GAAA,CAGL,KAAA,CAAA,YAAAC,GAAAC,IACAC,EAAA,CAAA,CAAAF,EACAG,EAAA,CAAA,GAAAJ,GACAK,EAAA,CAAkB,GAAAL,EAAA,GACN,QAAAA,EAAA,OACK,EAEjB,OAAAI,EAAA,GACA,OAAAA,EAAA,QACAD,IAEE,OAAAC,EAAA,KACAA,EAAA,UAAAE,GAEF,IAAAC,EAAAC,EAAAC,EAAA,CAAA,GAAAL,EAAA,SAAAA,EAAA,QAAA,CAAA,EACA,OAAAD,GAAAE,EAAA,IAAA,CAAAD,EAAA,OACEG,EAAAC,EAAAE,EAAA,CAAA,GAAAL,EAAA,GAAA,QAAAA,EAAA,QAAA,SAAAE,CAAA,CAAA,GAMFA,CACF;;;;;;;;"}