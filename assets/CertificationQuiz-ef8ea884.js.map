{"version":3,"file":"CertificationQuiz-ef8ea884.js","sources":["../../src/synapse-queries/user/useCertificationQuiz.ts","../../src/components/CertificationQuiz/CertificationAnswer.tsx","../../src/components/CertificationQuiz/CertificationQuiz.tsx"],"sourcesContent":["import {\n  useMutation,\n  UseMutationOptions,\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context'\nimport { PassingRecord } from '@sage-bionetworks/synapse-types'\nimport { QuizResponse } from '@sage-bionetworks/synapse-types'\nimport { useGetCurrentUserProfile } from './useUserBundle'\nimport { USER_BUNDLE_MASK_IS_CERTIFIED } from '../../utils/SynapseConstants'\n\nexport function useGetPassingRecord(\n  userId: string = '',\n  options?: UseQueryOptions<PassingRecord, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<PassingRecord, SynapseClientError>(\n    keyFactory.getPassingRecordQueryKey(userId),\n    () => SynapseClient.getPassingRecord(userId, accessToken),\n    options,\n  )\n}\n\nexport function usePostCertifiedUserTestResponse(\n  options?: UseMutationOptions<PassingRecord, SynapseClientError, QuizResponse>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n  const { data: userProfile } = useGetCurrentUserProfile()\n\n  return useMutation<PassingRecord, SynapseClientError, QuizResponse>(\n    (quizResponse: QuizResponse) =>\n      SynapseClient.postCertifiedUserTestResponse(accessToken, quizResponse),\n    {\n      ...options,\n      onSuccess: async (updatedPassingRecord, variables, ctx) => {\n        await Promise.all([\n          queryClient.invalidateQueries(\n            keyFactory.getPassingRecordQueryKey(userProfile?.ownerId!),\n          ),\n          queryClient.invalidateQueries(\n            keyFactory.getUserBundleQueryKey(\n              'current',\n              USER_BUNDLE_MASK_IS_CERTIFIED,\n            ),\n          ),\n        ])\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedPassingRecord, variables, ctx)\n        }\n      },\n    },\n  )\n}\n","import React from 'react'\nimport {\n  MultichoiceAnswer,\n  MultichoiceQuestion,\n} from '@sage-bionetworks/synapse-types'\nimport { Typography } from '@mui/material'\n\nexport type CertificationAnswerProps = {\n  question: MultichoiceQuestion\n  answer: MultichoiceAnswer\n  onClick?: React.MouseEventHandler<HTMLInputElement>\n  checked?: boolean\n  disabled?: boolean\n}\n\nexport default function CertificationAnswer(props: CertificationAnswerProps) {\n  const { question, answer, onClick, checked, disabled } = props\n  return (\n    <div>\n      <input\n        id={`${question.questionIndex}-${answer.answerIndex}`}\n        name={`${question.questionIndex}`}\n        type={question.exclusive ? 'radio' : 'checkbox'}\n        value={answer.answerIndex}\n        onClick={onClick}\n        checked={checked}\n        disabled={disabled}\n      />\n      <Typography\n        variant={'label'}\n        component={'label'}\n        sx={{ fontWeight: 400 }}\n        htmlFor={`${question.questionIndex}-${answer.answerIndex}`}\n      >\n        {answer.prompt}\n      </Typography>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport SynapseClient from '../../synapse-client'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  QuizResponse,\n  Quiz,\n  MultichoiceQuestion,\n  MultichoiceResponse,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  MULTICHOICE_RESPONSE_CONCRETE_TYPE_VALUE,\n  QuestionResponse,\n} from '@sage-bionetworks/synapse-types'\nimport { displayToast } from '../ToastMessage/ToastMessage'\nimport { Alert, AlertTitle, Button, Link, Skeleton } from '@mui/material'\nimport { MarkdownPopover } from '../Markdown/MarkdownPopover'\nimport { HelpOutlineTwoTone } from '@mui/icons-material'\nimport { ButtonProps, Typography } from '@mui/material'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { useGetCurrentUserBundle } from '../../synapse-queries'\nimport { USER_BUNDLE_MASK_IS_CERTIFIED } from '../../utils/SynapseConstants'\nimport {\n  useGetPassingRecord,\n  usePostCertifiedUserTestResponse,\n} from '../../synapse-queries/user/useCertificationQuiz'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport dayjs from 'dayjs'\nimport CertificationAnswer from './CertificationAnswer'\nimport { SkeletonParagraph, SkeletonTable } from '../Skeleton'\n\nconst CertificationQuiz: React.FunctionComponent = () => {\n  const { accessToken } = useSynapseContext()\n  const handleError = useErrorHandler()\n  const [quiz, setQuiz] = useState<Quiz | undefined>()\n  const [isRetakingQuiz, setIsRetakingQuiz] = useState(false)\n  const [questionResponse, setQuestionResponse] = useState<QuestionResponse[]>(\n    [],\n  )\n  const { data: currentUserBundle } = useGetCurrentUserBundle(\n    USER_BUNDLE_MASK_IS_CERTIFIED,\n  )\n  const isCertified = currentUserBundle?.isCertified\n  const userId = currentUserBundle?.userId\n  const { data: passingRecord, isLoading: isLoadingPassingRecord } =\n    useGetPassingRecord(userId, {\n      enabled: userId !== undefined,\n    })\n  const formRef = React.useRef<HTMLFormElement>(null)\n  const GETTING_STARTED_URL =\n    'https://help.synapse.org/docs/Getting-Started.2055471150.html'\n\n  const getQuiz = async () => {\n    try {\n      setQuiz(await SynapseClient.getCertifyQuiz(accessToken))\n    } catch (err: any) {\n      handleError(err)\n    }\n  }\n\n  const { mutate: postCertifiedUserTestResponse, isLoading: isSubmitting } =\n    usePostCertifiedUserTestResponse({\n      onSuccess: () => {\n        setIsRetakingQuiz(false)\n        window.scrollTo(0, 0)\n      },\n      useErrorBoundary: true,\n    })\n  // user is taking the quiz if user is not certified, and either there is no passing record or if the user clicked to retake the quiz\n  const isTakingQuiz =\n    !isCertified && (passingRecord == undefined || isRetakingQuiz)\n  useEffect(() => {\n    if (accessToken) {\n      getQuiz()\n    }\n  }, [accessToken])\n\n  if (isLoadingPassingRecord || quiz == undefined) {\n    return <CertificationQuizSkeleton />\n  }\n\n  const onUpdateAnswer = (questionIndex: number, answer: number) => {\n    const newState = [\n      ...questionResponse.filter(obj => obj.questionIndex !== questionIndex),\n      {\n        questionIndex,\n        answerIndex: [answer],\n        concreteType: MULTICHOICE_RESPONSE_CONCRETE_TYPE_VALUE,\n      },\n    ]\n    setQuestionResponse(newState)\n  }\n\n  const handleRetakeQuiz = () => {\n    formRef.current?.reset()\n    setIsRetakingQuiz(true)\n    setQuestionResponse([])\n    getQuiz()\n  }\n\n  const handleSubmit = () => {\n    try {\n      if (quiz && quiz.questions.length === questionResponse.length) {\n        const quizResponse: QuizResponse = {\n          quizId: quiz.id,\n          questionResponses: questionResponse,\n        }\n        postCertifiedUserTestResponse(quizResponse)\n      } else {\n        displayToast(\n          'Please answer all of the questions and try again.',\n          'warning',\n        )\n      }\n    } catch (err: any) {\n      displayToast(err.reason as string, 'danger')\n    }\n  }\n\n  const actionButtonConfig = (helpUrl: string) =>\n    helpUrl\n      ? {\n          content: <>More info</>,\n          closePopoverOnClick: true,\n          onClick: () => window.open(helpUrl, '_blank'),\n          color: 'primary' as ButtonProps['color'],\n        }\n      : undefined\n  return (\n    <div>\n      {passingRecord && !isTakingQuiz && (\n        <>\n          {(!passingRecord.passed || !isCertified) && (\n            <Alert severity=\"error\">\n              {!passingRecord.passed && <AlertTitle>Quiz Failed</AlertTitle>}\n              <Typography variant=\"body1\" sx={{ marginTop: '5px' }}>\n                Please review the results from the previous attempt, and{' '}\n                <Link\n                  href=\"#\"\n                  onClick={e => {\n                    e.preventDefault()\n                    handleRetakeQuiz()\n                  }}\n                >\n                  retake the quiz\n                </Link>\n                .\n              </Typography>\n            </Alert>\n          )}\n          {passingRecord.passed && isCertified && (\n            <Alert severity=\"success\">\n              <AlertTitle>Quiz Passed</AlertTitle>\n              <Typography variant=\"body1\" sx={{ marginTop: '5px' }}>\n                {`You passed the Synapse Certification Quiz on ${formatDate(\n                  dayjs(passingRecord.passedOn),\n                )}`}\n              </Typography>\n            </Alert>\n          )}\n          <Typography\n            variant=\"sectionTitle\"\n            sx={{ marginTop: '20px', marginBottom: '20px' }}\n          >\n            Score: {passingRecord.score} / {quiz?.questions.length}\n          </Typography>\n        </>\n      )}\n      <div className=\"CertificationQuiz__container\">\n        {quiz && isTakingQuiz && (\n          <>\n            <Button\n              onClick={() => window.open(GETTING_STARTED_URL, '_blank')}\n              className=\"help-button\"\n              color=\"secondary\"\n              variant=\"contained\"\n            >\n              <HelpOutlineTwoTone\n                className=\"HelpButton\"\n                style={{ marginRight: '4px' }}\n              />\n              Help\n            </Button>\n            <div dangerouslySetInnerHTML={{ __html: quiz.header }}></div>\n            <form ref={formRef} onSubmit={e => e.preventDefault()}>\n              <ol>\n                {quiz?.questions.map(question => {\n                  const isHelp = question.helpText || question.docLink\n                  return (\n                    <li\n                      key={question.questionIndex}\n                      role={question.exclusive ? 'radiogroup' : undefined}\n                    >\n                      <Typography\n                        component={'div'}\n                        variant={'body1'}\n                        dangerouslySetInnerHTML={{ __html: question.prompt }}\n                        sx={{ marginTop: '20px' }}\n                      />\n                      {question.answers.map(choice => (\n                        <CertificationAnswer\n                          key={`${question.questionIndex}-${choice.answerIndex}`}\n                          question={question}\n                          answer={choice}\n                          onClick={e =>\n                            onUpdateAnswer(\n                              question.questionIndex,\n                              Number(e.currentTarget.value),\n                            )\n                          }\n                        />\n                      ))}\n                      {isHelp && (\n                        <MarkdownPopover\n                          contentProps={{ markdown: question.helpText }}\n                          placement=\"right\"\n                          sx={{\n                            table: {\n                              textAlign: 'center',\n                              th: {\n                                padding: '5px',\n                              },\n                            },\n                          }}\n                          actionButton={actionButtonConfig(question.docLink)}\n                          showCloseButton={true}\n                        >\n                          <Typography variant=\"hintText\" color=\"primary\">\n                            <HelpOutlineTwoTone\n                              className=\"HelpButton\"\n                              style={{ marginRight: '4px' }}\n                            />\n                            Need help answering this question?\n                          </Typography>\n                        </MarkdownPopover>\n                      )}\n                    </li>\n                  )\n                })}\n              </ol>\n            </form>\n            <Button\n              className=\"help-button\"\n              color=\"primary\"\n              variant=\"contained\"\n              size=\"large\"\n              disabled={isSubmitting}\n              onClick={() => {\n                handleSubmit()\n              }}\n            >\n              Submit\n            </Button>\n          </>\n        )}\n\n        {!isTakingQuiz && passingRecord?.corrections && (\n          <ol>\n            {passingRecord.corrections.map(responseCorrectness => {\n              const question =\n                responseCorrectness.question as MultichoiceQuestion\n              const response =\n                responseCorrectness.response as MultichoiceResponse\n              return (\n                <li key={question.questionIndex}>\n                  <Typography\n                    component={'div'}\n                    variant={'body1'}\n                    dangerouslySetInnerHTML={{ __html: question.prompt }}\n                    className={\n                      responseCorrectness.isCorrect ? '' : 'incorrectQuestion'\n                    }\n                    sx={{ marginTop: '20px' }}\n                  />\n                  {question.answers.map(choice => (\n                    <CertificationAnswer\n                      key={`${question.questionIndex}-${choice.answerIndex}`}\n                      question={question}\n                      answer={choice}\n                      disabled={true}\n                      checked={response.answerIndex.includes(\n                        choice.answerIndex,\n                      )}\n                    />\n                  ))}\n                </li>\n              )\n            })}\n          </ol>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst CertificationQuizSkeleton: React.FunctionComponent = () => {\n  const questions = []\n  for (let i = 0; i < 20; i++) {\n    questions.push(\n      <li key={i}>\n        <SkeletonTable numCols={1} numRows={5} />\n      </li>,\n    )\n  }\n  return (\n    <>\n      <div>\n        <Skeleton height=\"80px\" width=\"460px\" />\n      </div>\n      <SkeletonParagraph numRows={5} />\n      <div className=\"CertificationQuiz__container\">\n        <ol style={{ marginTop: '20px' }}>{questions}</ol>\n      </div>\n    </>\n  )\n}\n\nexport default CertificationQuiz\n"],"names":["useGetPassingRecord","userId","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient","usePostCertifiedUserTestResponse","queryClient","useQueryClient","userProfile","useGetCurrentUserProfile","useMutation","quizResponse","updatedPassingRecord","variables","ctx","USER_BUNDLE_MASK_IS_CERTIFIED","CertificationAnswer","props","question","answer","onClick","checked","disabled","jsxs","jsx","Typography","CertificationQuiz","handleError","useErrorHandler","quiz","setQuiz","useState","isRetakingQuiz","setIsRetakingQuiz","questionResponse","setQuestionResponse","currentUserBundle","useGetCurrentUserBundle","isCertified","passingRecord","isLoadingPassingRecord","formRef","React","GETTING_STARTED_URL","getQuiz","err","postCertifiedUserTestResponse","isSubmitting","isTakingQuiz","useEffect","CertificationQuizSkeleton","onUpdateAnswer","questionIndex","newState","obj","MULTICHOICE_RESPONSE_CONCRETE_TYPE_VALUE","handleRetakeQuiz","_a","handleSubmit","displayToast","actionButtonConfig","helpUrl","Fragment","Alert","AlertTitle","Link","formatDate","dayjs","Button","HelpOutlineTwoTone","isHelp","choice","e","MarkdownPopover","responseCorrectness","response","questions","SkeletonTable","Skeleton","SkeletonParagraph"],"mappings":"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"}