{"version":3,"file":"handlers-fb59c3d3.js","sources":["../../mocks/entity/mockFileEntity.ts","../../mocks/entity/mockDataset.ts","../../mocks/entity/mockDatasetCollection.ts","../../mocks/entity/mockTableEntity.ts","../../mocks/entity/index.ts","../../mocks/entity/mockEntity.ts","../../src/lib/utils/synapseTypes/Schema/JsonSchemaObjectBinding.ts","../../src/lib/utils/synapseTypes/Schema/ObjectType.ts","../../mocks/mockSchema.ts","../../mocks/msw/handlers/entityHandlers.ts","../../mocks/msw/handlers/userProfileHandlers.ts","../../mocks/msw/handlers/accessRequirementHandlers.ts","../../mocks/msw/handlers/wikiHandlers.ts","../../mocks/dataaccess/MockResearchProject.ts","../../mocks/dataaccess/MockDataAccessRequest.ts","../../mocks/msw/handlers/dataAccessRequestHandlers.ts","../../mocks/msw/handlers/researchProjectHandlers.ts","../../mocks/msw/handlers/fileHandlers.ts","../../mocks/msw/handlers.ts"],"sourcesContent":["import {\n  ACCESS_TYPE,\n  AnnotationsValueType,\n  EntityBundle,\n  EntityHeader,\n  EntityJson,\n  EntityPath,\n  EntityType,\n  FileEntity,\n  RestrictionLevel,\n} from '../../src/lib/utils/synapseTypes'\nimport { VersionInfo } from '../../src/lib/utils/synapseTypes/VersionInfo'\nimport {\n  MOCK_FILE_HANDLE_ID,\n  mockFileHandle,\n  mockPreviewFileHandle,\n} from '../mock_file_handle'\nimport { MOCK_USER_ID, MOCK_USER_ID_2 } from '../user/mock_user_profile'\nimport { MockEntityData } from './MockEntityData'\nimport mockProject from './mockProject'\n\nconst parentId = mockProject.id\nconst projectName = mockProject.name\n\nexport const MOCK_FILE_ENTITY_ID = 'syn123'\nconst MOCK_FILE_NAME = 'My mock file entity'\n\n// TODO: Create a mock wiki\nconst MOCK_WIKI_ID = '45745485'\n\nconst mockFileEntity: FileEntity = {\n  id: MOCK_FILE_ENTITY_ID,\n  parentId: parentId,\n  dataFileHandleId: MOCK_FILE_HANDLE_ID,\n  name: MOCK_FILE_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID_2.toString(),\n  etag: '00000000-0000-0000-0000-000000000000',\n  versionNumber: 3,\n  versionLabel: 'a label for version 3',\n  isLatestVersion: true,\n  createdOn: '2021-03-02T15:05:34.973Z',\n  modifiedOn: '2021-03-05T11:31:24.521Z',\n}\n\nconst mockFileEntityVersionInfo: VersionInfo[] = [\n  {\n    id: MOCK_FILE_ENTITY_ID,\n    modifiedBy: MOCK_USER_ID.toString(),\n    versionNumber: 1,\n    versionLabel: 'a label for version 1',\n    versionComment: 'a comment',\n    contentSize: '100',\n    contentMd5: 'd836adae5632872014783b05cd2f76d7',\n    modifiedByPrincipalId: MOCK_USER_ID.toString(),\n    modifiedOn: '2021-03-02T15:05:34.973Z',\n    isLatestVersion: false,\n  },\n  {\n    id: MOCK_FILE_ENTITY_ID,\n    modifiedBy: MOCK_USER_ID.toString(),\n    versionNumber: 3,\n    versionLabel: 'a label for version 3',\n    versionComment: 'a comment about version 3',\n    contentSize: '100',\n    contentMd5: 'bc91a4a16ccb21944fcee55275dc4574',\n    modifiedByPrincipalId: MOCK_USER_ID.toString(),\n    modifiedOn: '2021-03-05T11:31:24.521Z',\n    isLatestVersion: true,\n  },\n]\n\nconst mockFileEntityVersions: Record<number, FileEntity> = {\n  3: {\n    id: MOCK_FILE_ENTITY_ID,\n    parentId: parentId,\n    dataFileHandleId: MOCK_FILE_HANDLE_ID,\n    name: MOCK_FILE_NAME,\n    concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n    createdBy: MOCK_USER_ID.toString(),\n    modifiedBy: MOCK_USER_ID.toString(),\n    etag: '00000000-0000-0000-0000-000000000000',\n    versionNumber: 3,\n    versionLabel: 'a label for version 3',\n    isLatestVersion: true,\n  },\n  1: {\n    id: MOCK_FILE_ENTITY_ID,\n    parentId: parentId,\n    dataFileHandleId: MOCK_FILE_HANDLE_ID,\n    name: MOCK_FILE_NAME,\n    concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n    createdBy: MOCK_USER_ID.toString(),\n    modifiedBy: MOCK_USER_ID.toString(),\n    etag: '00000000-0000-0000-0000-000000000000',\n    versionNumber: 1,\n    versionLabel: 'a label for version 1',\n    isLatestVersion: false,\n  },\n}\n\nconst filePath: EntityPath = {\n  path: [\n    {\n      name: 'root',\n      id: 'syn4489',\n      type: 'org.sagebionetworks.repo.model.Folder',\n    },\n    {\n      name: projectName,\n      id: parentId,\n      type: 'org.sagebionetworks.repo.model.Project',\n    },\n    {\n      name: MOCK_FILE_NAME,\n      id: MOCK_FILE_ENTITY_ID,\n      type: 'org.sagebionetworks.repo.model.FileEntity',\n    },\n  ],\n}\n\nconst mockFileEntityBundle: EntityBundle = {\n  entity: mockFileEntity,\n  entityType: EntityType.FILE,\n  fileHandles: [mockFileHandle, mockPreviewFileHandle],\n  annotations: {\n    id: MOCK_FILE_ENTITY_ID,\n    etag: '00000000-0000-0000-0000-000000000000',\n    annotations: {\n      myStringKey: {\n        type: AnnotationsValueType.STRING,\n        value: ['myValue'],\n      },\n      myIntegerKey: {\n        type: AnnotationsValueType.LONG,\n        value: [4325435345213, 4321],\n      },\n      myFloatKey: {\n        type: AnnotationsValueType.LONG,\n        value: [1.5, 17 / 13],\n      },\n    },\n  },\n  rootWikiId: MOCK_WIKI_ID,\n  fileName: mockFileEntity.name,\n  benefactorAcl: {\n    id: parentId,\n    creationDate: '2020-11-18T20:05:06.540Z',\n    etag: 'f143bbfd-ba09-4a42-b1e9-f9368777ad9b',\n    resourceAccess: [\n      {\n        principalId: MOCK_USER_ID,\n        accessType: [\n          ACCESS_TYPE.DELETE,\n          ACCESS_TYPE.CHANGE_SETTINGS,\n          ACCESS_TYPE.MODERATE,\n          ACCESS_TYPE.CHANGE_PERMISSIONS,\n          ACCESS_TYPE.UPDATE,\n          ACCESS_TYPE.READ,\n          ACCESS_TYPE.DOWNLOAD,\n          ACCESS_TYPE.CREATE,\n        ],\n      },\n      {\n        principalId: 273948,\n        accessType: [ACCESS_TYPE.READ],\n      },\n      {\n        principalId: 273949,\n        accessType: [ACCESS_TYPE.READ],\n      },\n    ],\n  },\n  permissions: {\n    canView: true,\n    canEdit: true,\n    canMove: true,\n    canAddChild: true,\n    canCertifiedUserEdit: true,\n    canCertifiedUserAddChild: true,\n    isCertifiedUser: true,\n    canChangePermissions: true,\n    canChangeSettings: true,\n    canDelete: true,\n    canDownload: true,\n    canUpload: true,\n    canEnableInheritance: true,\n    ownerPrincipalId: 3350396,\n    canPublicRead: true,\n    canModerate: true,\n    isCertificationRequired: true,\n    isEntityOpenData: false,\n  },\n  threadCount: 5,\n  path: filePath,\n  restrictionInformation: {\n    restrictionLevel: RestrictionLevel.OPEN,\n    hasUnmetAccessRequirement: false,\n  },\n}\n\nconst mockFileEntityJson: EntityJson = {\n  id: mockFileEntity.id!,\n  name: mockFileEntity.name,\n  etag: mockFileEntity.etag!,\n  createdOn: mockFileEntity.createdOn!,\n  modifiedOn: mockFileEntity.modifiedOn!,\n  createdBy: mockFileEntity.createdBy!,\n  modifiedBy: mockFileEntity.modifiedBy!,\n  parentId: 'syn4489',\n  concreteType: 'org.sagebionetworks.repo.model.Project',\n  myStringKey: 'myValue',\n  myIntegerKey: [4325435345213, 4321],\n  myFloatKey: [1.5, 17 / 13],\n}\n\nconst mockFileEntityHeader: EntityHeader = {\n  id: mockFileEntity.id!,\n  name: mockFileEntity.name,\n  type: mockFileEntity.concreteType,\n  versionNumber: 3,\n  versionLabel: 'a label for version 3',\n  benefactorId: 123,\n  createdOn: mockFileEntity.createdOn!,\n  modifiedOn: mockFileEntity.modifiedOn!,\n  createdBy: MOCK_USER_ID.toString(), // TODO: Replace with a valid mock user ID\n  modifiedBy: MOCK_USER_ID_2.toString(),\n  isLatestVersion: true,\n}\n\nconst mockFileEntityData: MockEntityData<FileEntity> = {\n  id: MOCK_FILE_ENTITY_ID,\n  name: MOCK_FILE_NAME,\n  entity: mockFileEntity,\n  bundle: mockFileEntityBundle,\n  json: mockFileEntityJson,\n  versions: mockFileEntityVersions,\n  versionInfo: mockFileEntityVersionInfo,\n  entityHeader: mockFileEntityHeader,\n  path: filePath,\n}\n\nexport default mockFileEntityData\n","import {\n  Dataset,\n  EntityBundle,\n  EntityHeader,\n  EntityPath,\n  EntityType,\n} from '../../src/lib/utils/synapseTypes'\nimport { VersionInfo } from '../../src/lib/utils/synapseTypes/VersionInfo'\nimport { MOCK_USER_ID, MOCK_USER_ID_2 } from '../user/mock_user_profile'\nimport { MockEntityData } from './MockEntityData'\nimport mockProjectEntityData from './mockProject'\n\nconst MOCK_DATASET_ENTITY_ID = 'syn234'\nconst MOCK_DATASET_NAME = 'A Mocked Dataset'\n\nexport const mockDatasetEntity: Dataset = {\n  id: MOCK_DATASET_ENTITY_ID,\n  parentId: mockProjectEntityData.id,\n  name: MOCK_DATASET_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.table.Dataset',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID_2.toString(),\n  createdOn: '2020-01-01T00:00:00.000Z',\n  modifiedOn: '2020-02-01T00:00:00.000Z',\n  versionNumber: 3,\n  versionLabel: 'in progress',\n  versionComment: 'in progress',\n  isLatestVersion: true,\n  etag: '00000000-0000-0000-0000-000000000000',\n  items: [],\n  columnIds: [],\n  isSearchEnabled: false,\n}\n\nconst mockHeader: EntityHeader = {\n  id: MOCK_DATASET_ENTITY_ID,\n  type: 'org.sagebionetworks.repo.model.table.Dataset',\n  name: MOCK_DATASET_NAME,\n  benefactorId: parseInt(mockProjectEntityData.id),\n  createdOn: '2020-01-01T00:00:00.000Z',\n  modifiedOn: '2020-02-01T00:00:00.000Z',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID.toString(),\n  versionNumber: 3,\n  versionLabel: 'in progress',\n  isLatestVersion: true,\n}\n\nconst path: EntityPath = {\n  path: [\n    {\n      name: 'root',\n      id: 'syn4489',\n      type: 'org.sagebionetworks.repo.model.Folder',\n    },\n    {\n      name: mockProjectEntityData.name,\n      id: mockProjectEntityData.id,\n      type: 'org.sagebionetworks.repo.model.Project',\n    },\n    {\n      name: MOCK_DATASET_NAME,\n      id: MOCK_DATASET_ENTITY_ID,\n      type: 'org.sagebionetworks.repo.model.FileEntity',\n    },\n  ],\n}\n\nconst versions: Record<number, Dataset> = {\n  1: {\n    ...mockDatasetEntity,\n    versionNumber: 1,\n    versionLabel: 'snapshot 1',\n    versionComment: '',\n    isLatestVersion: false,\n  },\n  2: {\n    ...mockDatasetEntity,\n    versionNumber: 2,\n    versionLabel: 'snapshot 2',\n    versionComment: '',\n    isLatestVersion: false,\n  },\n}\n\nconst versionInfo: VersionInfo[] = [\n  {\n    id: MOCK_DATASET_ENTITY_ID,\n    versionNumber: 2,\n    versionLabel: 'snapshot 2',\n    versionComment: '',\n    isLatestVersion: false,\n    modifiedBy: MOCK_USER_ID.toString(),\n    modifiedByPrincipalId: MOCK_USER_ID.toString(),\n    modifiedOn: '2022-03-22T18:50:22.336Z',\n  },\n  {\n    id: MOCK_DATASET_ENTITY_ID,\n    versionNumber: 1,\n    versionLabel: 'snapshot 1',\n    versionComment: '',\n    isLatestVersion: false,\n    modifiedBy: MOCK_USER_ID.toString(),\n    modifiedByPrincipalId: MOCK_USER_ID.toString(),\n    modifiedOn: '2022-03-22T18:47:34.797Z',\n  },\n]\n\nconst bundle: EntityBundle = {\n  entity: mockDatasetEntity,\n  entityType: EntityType.DATASET,\n  path: path,\n  permissions: {\n    canView: true,\n    canEdit: true,\n    canMove: true,\n    canAddChild: true,\n    canCertifiedUserEdit: true,\n    canCertifiedUserAddChild: true,\n    isCertifiedUser: true,\n    canChangePermissions: true,\n    canChangeSettings: true,\n    canDelete: true,\n    canDownload: true,\n    canUpload: true,\n    canEnableInheritance: true,\n    ownerPrincipalId: 3350396,\n    canPublicRead: true,\n    canModerate: true,\n    isCertificationRequired: true,\n    isEntityOpenData: false,\n  },\n}\n\nconst mockDatasetData: MockEntityData<Dataset> = {\n  id: MOCK_DATASET_ENTITY_ID,\n  name: MOCK_DATASET_NAME,\n  entity: mockDatasetEntity,\n  entityHeader: mockHeader,\n  path: path,\n  bundle: bundle,\n  versions: versions,\n  versionInfo: versionInfo,\n}\n\nexport default mockDatasetData\n","import { DatasetCollection, EntityPath } from '../../src/lib/utils/synapseTypes'\nimport { MOCK_USER_ID } from '../user/mock_user_profile'\nimport mockDatasetData from './mockDataset'\nimport { MockEntityData } from './MockEntityData'\nimport mockProjectEntityData from './mockProject'\n\nconst MOCK_DATASET_COLLECTION_ENTITY_ID = 'syn654651'\nconst MOCK_DATASET_COLLECTION_NAME = 'A Mocked Dataset Collection'\n\nexport const mockDatasetCollectionEntity: DatasetCollection = {\n  id: MOCK_DATASET_COLLECTION_ENTITY_ID,\n  parentId: mockProjectEntityData.id,\n  name: MOCK_DATASET_COLLECTION_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.table.DatasetCollection',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID.toString(),\n  etag: '00000000-0000-0000-0000-000000000000',\n  items: [\n    {\n      entityId: mockDatasetData.id,\n      versionNumber: 1,\n    },\n  ],\n  columnIds: [],\n  isSearchEnabled: false,\n}\n\nconst path: EntityPath = {\n  path: [\n    {\n      name: 'root',\n      id: 'syn4489',\n      type: 'org.sagebionetworks.repo.model.Folder',\n    },\n    {\n      name: mockProjectEntityData.name,\n      id: mockProjectEntityData.id,\n      type: 'org.sagebionetworks.repo.model.Project',\n    },\n    {\n      name: MOCK_DATASET_COLLECTION_NAME,\n      id: MOCK_DATASET_COLLECTION_ENTITY_ID,\n      type: 'org.sagebionetworks.repo.model.FileEntity',\n    },\n  ],\n}\n\nconst mockDatasetCollectionData: MockEntityData<DatasetCollection> = {\n  id: MOCK_DATASET_COLLECTION_ENTITY_ID,\n  name: MOCK_DATASET_COLLECTION_NAME,\n  entity: mockDatasetCollectionEntity,\n  path: path,\n}\n\nexport default mockDatasetCollectionData\n","import { EntityHeader, TableEntity } from '../../src/lib/utils/synapseTypes'\nimport { MOCK_USER_ID, MOCK_USER_ID_2 } from '../user/mock_user_profile'\nimport mockProject from './mockProject'\nimport { MockEntityData } from './MockEntityData'\n\nexport const MOCK_TABLE_ENTITY_ID = 'syn345'\nexport const MOCK_TABLE_ENTITY_NAME = 'my table name'\n\nconst parentId = mockProject.id\n\nexport const mockTableEntity: TableEntity = {\n  id: MOCK_TABLE_ENTITY_ID,\n  versionNumber: 1,\n  versionLabel: 'in progress',\n  versionComment: 'in progress',\n  parentId: parentId,\n  name: MOCK_TABLE_ENTITY_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.table.TableEntity',\n  createdBy: MOCK_USER_ID.toString(),\n  createdOn: '2022-02-03T12:44:35.457Z',\n  modifiedOn: '2022-05-14T17:10:36.915Z',\n  modifiedBy: MOCK_USER_ID_2.toString(),\n  etag: '00000000-0000-0000-0000-000000000000',\n  columnIds: [],\n  isSearchEnabled: true,\n  isLatestVersion: true,\n}\n\nconst mockTableEntityHeader: EntityHeader = {\n  name: mockTableEntity.name,\n  id: MOCK_TABLE_ENTITY_ID,\n  type: 'org.sagebionetworks.repo.model.table.TableEntity',\n  versionNumber: mockTableEntity.versionNumber,\n  versionLabel: mockTableEntity.versionLabel,\n  benefactorId: parentId,\n  createdOn: mockTableEntity.createdOn,\n  modifiedOn: mockTableEntity.modifiedOn,\n  createdBy: mockTableEntity.createdBy,\n  modifiedBy: mockTableEntity.modifiedBy,\n  isLatestVersion: mockTableEntity.isLatestVersion,\n}\n\nconst mockTableEntityData: MockEntityData<TableEntity> = {\n  id: MOCK_TABLE_ENTITY_ID,\n  name: MOCK_TABLE_ENTITY_NAME,\n  entity: mockTableEntity,\n  entityHeader: mockTableEntityHeader,\n}\n\nexport default mockTableEntityData\n","import mockDatasetData from './mockDataset'\nimport mockDatasetCollectionData from './mockDatasetCollection'\nimport { MockEntityData } from './MockEntityData'\nimport mockFileEntityData from './mockFileEntity'\nimport mockProjectEntityData from './mockProject'\nimport mockTableEntityData from './mockTableEntity'\n\nconst mockEntities: MockEntityData[] = [\n  mockFileEntityData,\n  mockProjectEntityData,\n  mockDatasetData,\n  mockDatasetCollectionData,\n  mockTableEntityData,\n]\n\nexport default mockEntities\n","import {\n  Entity,\n  ENTITY_VIEW_TYPE_MASK_FILE,\n  ENTITY_VIEW_TYPE_MASK_PROJECT,\n  EntityHeader,\n  EntityView,\n  PaginatedResults,\n  ProjectHeader,\n} from '../../src/lib/utils/synapseTypes'\nimport { MOCK_USER_ID } from '../user/mock_user_profile'\nimport mockFile from './mockFileEntity'\nimport mockProject from './mockProject'\n\nconst MOCK_PROJECT_ID = mockProject.id\nconst mockProjectEntity = mockProject.entity\nconst MOCK_FILE_NAME = mockFile.name\nconst mockFileEntityHeader = mockFile.entityHeader\n\nexport const MOCK_FOLDER_ID = 'syn1234'\nexport const MOCK_INVALID_PROJECT_NAME = 'A $@*#$% terribly named Project'\nexport const MOCK_FILE_VIEW_ENTITY_ID = 'syn456'\nexport const MOCK_PROJECT_VIEW_ENTITY_ID = 'syn567'\n\nexport const mockFolderEntity: Entity = {\n  id: MOCK_FOLDER_ID,\n  parentId: MOCK_PROJECT_ID,\n  name: 'my folder name',\n  concreteType: 'org.sagebionetworks.repo.model.Folder',\n}\n\nexport const mockFolderEntityHeader: EntityHeader = {\n  id: mockFolderEntity.id!,\n  name: mockFolderEntity.name,\n  type: mockFolderEntity.concreteType,\n  versionNumber: 1,\n  versionLabel: 'Version label',\n  benefactorId: 1234,\n  createdOn: '',\n  modifiedOn: '',\n  createdBy: '', // TODO: Replace with a valid mock user ID\n  modifiedBy: '',\n}\n\nexport const mockPaginatedEntityHeaders: PaginatedResults<EntityHeader> = {\n  totalNumberOfResults: 2,\n  results: [mockFileEntityHeader, mockFolderEntityHeader],\n}\n\nexport const mockProjectHeader: ProjectHeader = {\n  id: mockProjectEntity.id!,\n  name: mockProjectEntity.name,\n  lastActivity: '2022-02-03T12:44:35.457Z',\n  modifiedOn: mockProjectEntity.modifiedOn!,\n  modifiedBy: MOCK_USER_ID,\n}\n\nexport const mockFileViewEntity: EntityView = {\n  id: MOCK_FILE_VIEW_ENTITY_ID,\n  parentId: MOCK_PROJECT_ID,\n  name: MOCK_FILE_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.table.EntityView',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID.toString(),\n  etag: '00000000-0000-0000-0000-000000000000',\n  columnIds: [],\n  viewTypeMask: ENTITY_VIEW_TYPE_MASK_FILE,\n  scopeIds: [MOCK_PROJECT_ID],\n}\n\nexport const mockProjectViewEntity: EntityView = {\n  id: MOCK_PROJECT_VIEW_ENTITY_ID,\n  parentId: MOCK_PROJECT_ID,\n  name: MOCK_FILE_NAME,\n  concreteType: 'org.sagebionetworks.repo.model.table.EntityView',\n  createdBy: MOCK_USER_ID.toString(),\n  modifiedBy: MOCK_USER_ID.toString(),\n  etag: '00000000-0000-0000-0000-000000000000',\n  columnIds: [],\n  viewTypeMask: ENTITY_VIEW_TYPE_MASK_PROJECT,\n  scopeIds: [MOCK_PROJECT_ID],\n}\n","export type JsonSchemaVersionInfo = {\n  organizationId: string\n  organizationName: string\n  schemaId: string\n  schemaName: string\n  versionId: string\n  $id: string\n  semanticVersion?: string\n  jsonSHA256Hex: string\n  createdOn: string\n  createdBy: string\n}\n\nexport enum BoundObjectType {\n  entity = 'entity',\n}\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/schema/JsonSchemaObjectBinding.html\nexport type JsonSchemaObjectBinding = {\n  jsonSchemaVersionInfo: JsonSchemaVersionInfo\n  objectId: number\n  objectType: BoundObjectType\n  createdOn: string\n  createdBy: string\n}\n","// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/schema/ObjectType.html\nexport enum ObjectType {\n  entity = 'entity',\n}\n","import {\n  BoundObjectType,\n  JsonSchemaObjectBinding,\n} from '../src/lib/utils/synapseTypes/Schema/JsonSchemaObjectBinding'\nimport { ObjectType } from '../src/lib/utils/synapseTypes/Schema/ObjectType'\nimport { ValidationResults } from '../src/lib/utils/synapseTypes/Schema/ValidationResults'\nimport mockFileEntityData from './entity/mockFileEntity'\nimport { JSONSchema7 } from 'json-schema'\n\nconst mockFileEntity = mockFileEntityData.entity\n\nexport const mockSchemaBinding: JsonSchemaObjectBinding = {\n  jsonSchemaVersionInfo: {\n    organizationId: '1',\n    organizationName: 'org.sagebionetworks',\n    schemaId: '1',\n    schemaName: 'Mock Schema',\n    versionId: '555',\n    $id: 'org.sagebionetworks-MockSchema',\n    jsonSHA256Hex:\n      '5f2cd73c0fe25b30cbee2f213b6d633951f1873ca1911f494d4654f702a69e95',\n    createdOn: '2021-04-01T08:00:00.000Z',\n    createdBy: '1',\n  },\n  objectId: 3333,\n  objectType: BoundObjectType.entity,\n  createdOn: '2021-04-01T08:00:00.000Z',\n  createdBy: '1',\n}\n\nexport const mockSchemaValidationResults: ValidationResults = {\n  objectId: mockFileEntity.id!,\n  objectType: ObjectType.entity,\n  objectEtag: mockFileEntity.etag!,\n  schema$id: `https://repo-prod.prod.sagebase.org/repo/v1/schema/type/registered/${mockSchemaBinding.jsonSchemaVersionInfo.$id}`,\n  isValid: true,\n  validatedOn: '2021-06-28T20:08:44.046Z',\n}\n\nexport const mockValidationSchema: JSONSchema7 = {\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  $id: `https://repo-prod.prod.sagebase.org/repo/v1/schema/type/registered/${mockSchemaBinding.jsonSchemaVersionInfo.$id}`,\n  type: 'object',\n  properties: {\n    country: {\n      enum: ['USA', 'CA'],\n      description: 'Test description for country property',\n    },\n    showStringArray: {\n      type: 'boolean',\n    },\n  },\n  required: ['country'],\n  allOf: [\n    {\n      if: {\n        properties: {\n          country: {\n            const: 'USA',\n          },\n        },\n        required: ['country'],\n      },\n      then: {\n        properties: {\n          state: {\n            type: 'string',\n          },\n        },\n        required: ['state'],\n      },\n    },\n    {\n      if: {\n        properties: {\n          country: {\n            const: 'CA',\n          },\n        },\n        required: ['country'],\n      },\n      then: {\n        properties: {\n          province: {\n            type: 'string',\n          },\n        },\n        required: ['province'],\n      },\n    },\n    {\n      if: {\n        properties: {\n          showStringArray: {\n            const: true,\n          },\n        },\n        required: ['showStringArray'],\n      },\n      then: {\n        properties: {\n          stringArray: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n        },\n      },\n    },\n  ],\n}\n","import { rest } from 'msw'\nimport {\n  ENTITY,\n  ENTITY_BUNDLE_V2,\n  ENTITY_HEADERS,\n  ENTITY_ID,\n  ENTITY_ID_VERSION,\n  ENTITY_ID_VERSIONS,\n  ENTITY_JSON,\n  ENTITY_SCHEMA_BINDING,\n} from '../../../src/lib/utils/APIConstants'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../src/lib/utils/functions/getEndpoint'\nimport {\n  Entity,\n  EntityBundle,\n  EntityHeader,\n  EntityJson,\n  EntityPath,\n  PaginatedResults,\n  Reference,\n  VersionableEntity,\n} from '../../../src/lib/utils/synapseTypes'\nimport { VersionInfo } from '../../../src/lib/utils/synapseTypes/VersionInfo'\nimport mockEntities from '../../entity'\nimport { MOCK_INVALID_PROJECT_NAME } from '../../entity/mockEntity'\nimport { mockSchemaBinding } from '../../mockSchema'\nimport { SynapseApiResponse } from '../handlers'\nimport {\n  UploadDestination,\n  UploadType,\n} from '../../../src/lib/utils/synapseTypes/File/UploadDestination'\n\nexport const getEntityHandlers = (backendOrigin: string) => [\n  /**\n   * Create a new entity\n   */\n  rest.post(`${backendOrigin}${ENTITY}`, async (req, res, ctx) => {\n    let status = 404\n    let response: SynapseApiResponse<Entity> = {\n      reason: `Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(\n        req.body,\n      )}`,\n    }\n    if (req.body) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const requestBody = req.body as Entity\n\n      const entityData = mockEntities.find(\n        entity => entity.name === requestBody.name,\n      )\n      if (entityData) {\n        response = entityData.entity\n        status = 200\n      } else if (requestBody.name === MOCK_INVALID_PROJECT_NAME) {\n        response.reason = 'Invalid project name'\n        status = 403\n      }\n    }\n\n    return res(ctx.status(status), ctx.json(response))\n  }),\n\n  /**\n   * Get entity by ID\n   */\n  rest.get(\n    `${backendOrigin}${ENTITY_ID(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<Entity> = {\n        reason: `Mock Service worker could not find a mock entity with ID ${req.params.entityId}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData) {\n        response = entityData.entity\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID_VERSIONS(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<PaginatedResults<VersionInfo>> = {\n        reason: `Mock Service worker could not find mock entity versions for ID ${req.params.entityId}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData && entityData.versionInfo) {\n        response = { results: entityData.versionInfo }\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID_VERSION(':entityId', ':versionNumber')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      const entityId = req.params.entityId\n      const versionNumber = req.params.versionNumber.toString()\n      const requestedVersionNumber = parseInt(versionNumber)\n\n      let response: SynapseApiResponse<VersionableEntity> = {\n        reason: `Mock Service worker could not find a mock versioned entity with ID ${entityId}.${versionNumber}`,\n      }\n\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (\n        entityData &&\n        entityData.versions &&\n        entityData.versions[requestedVersionNumber]\n      ) {\n        response = entityData.versions[\n          requestedVersionNumber\n        ] as VersionableEntity\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_BUNDLE_V2(':entityId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityBundle> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData?.bundle) {\n        response = entityData.bundle\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_BUNDLE_V2(':entityId', ':versionNumber')}`,\n    async (req, res, ctx) => {\n      const entityId = req.params.entityId\n      const versionNumber = parseInt(req.params.versionNumber as string)\n      let status = 404\n      let response: SynapseApiResponse<EntityBundle> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${entityId}`,\n      }\n      const entityData = mockEntities.find(entity => entity.id === entityId)\n      if (entityData) {\n        const bundle = entityData.bundle\n        if (entityData.versions && entityData.versions[versionNumber]) {\n          response = {\n            ...bundle,\n            entity: entityData.versions[versionNumber],\n          } as EntityBundle\n        } else {\n          response = bundle as EntityBundle\n        }\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ENTITY_SCHEMA_BINDING(':entityId')}`,\n    async (req, res, ctx) => {\n      return res(ctx.status(200), ctx.json(mockSchemaBinding))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ENTITY_JSON(':entityId')}`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityJson> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(\n        entity => entity.id === req.params.entityId,\n      )\n      if (entityData?.json) {\n        response = entityData.json\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.post(\n    `${backendOrigin}${ENTITY_HEADERS}`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<PaginatedResults<EntityHeader>> = {\n        reason: `Mock Service worker could not find a mock entity bundle with ID ${req.params.entityId}`,\n      }\n\n      const referenceList = req.body as { references: Reference[] }\n      const entityData = mockEntities\n        .filter(entity =>\n          referenceList.references.find(ref => ref.targetId === entity.id),\n        )\n        .map(entity => entity.entityHeader)\n        .filter((header): header is EntityHeader => !!header)\n\n      if (entityData) {\n        response = { results: entityData }\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${backendOrigin}${ENTITY_ID(':entityId')}/path`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<EntityPath> = {\n        reason: `Mock Service worker could not find a mock entity path using ID ${req.params.entityId}`,\n      }\n      const entityData = mockEntities.find(e => req.params.entityId === e.id)\n\n      if (entityData && entityData.path) {\n        response = entityData.path\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  rest.get(\n    `${getEndpoint(\n      BackendDestinationEnum.REPO_ENDPOINT,\n    )}/file/v1/entity/:id/uploadDestination`,\n    async (req, res, ctx) => {\n      const response: UploadDestination = {\n        banner: '',\n        storageLocationId: 1,\n        uploadType: UploadType.S3,\n        concreteType: 'org.sagebionetworks.repo.model.file.S3UploadDestination',\n      }\n      return res(ctx.status(200), ctx.json(response))\n    },\n  ),\n]\n","import { rest } from 'msw'\nimport {\n  FAVORITES,\n  NOTIFICATION_EMAIL,\n  PROFILE_IMAGE_PREVIEW,\n  USER_BUNDLE,\n  USER_GROUP_HEADERS,\n  USER_GROUP_HEADERS_BATCH,\n  USER_ID_BUNDLE,\n  USER_PROFILE,\n  USER_PROFILE_ID,\n} from '../../../src/lib/utils/APIConstants'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../src/lib/utils/functions/getEndpoint'\nimport {\n  TYPE_FILTER,\n  UserBundle,\n  UserGroupHeaderResponsePage,\n  UserProfile,\n} from '../../../src/lib/utils/synapseTypes'\nimport { mockPaginatedEntityHeaders } from '../../entity/mockEntity'\nimport {\n  mockUserBundle,\n  mockUserData,\n  mockUserProfileData,\n} from '../../user/mock_user_profile'\nimport { SynapseApiResponse } from '../handlers'\nimport { UserProfileList } from '../../../src/lib/utils/SynapseClient'\nimport { TwoFactorAuthStatus } from '../../../src/lib/utils/synapseTypes/TotpSecret'\n\nexport const getUserProfileHandlers = (backendOrigin: string) => [\n  /**\n   * Get User Profile by ID\n   */\n  rest.get(\n    `${backendOrigin}${USER_PROFILE_ID(':id')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<UserProfile> = {\n        reason: `Mock Service worker could not find a user profile with ID ${req.params.id}`,\n      }\n      const match = mockUserData.find(\n        userData => userData.id.toString() === req.params.id,\n      )\n      if (match && match.userProfile) {\n        response = match.userProfile\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  /**\n   * Get the caller's user profile\n   */\n  rest.get(`${backendOrigin}${USER_PROFILE}`, async (req, res, ctx) => {\n    // default return a mock UserProfile.\n    const response: UserProfile = mockUserProfileData\n    const status = 200\n    return res(ctx.status(status), ctx.json(response))\n  }),\n\n  /**\n   * Get the caller's user bundle\n   */\n  rest.get(\n    `${getEndpoint(BackendDestinationEnum.REPO_ENDPOINT)}${USER_BUNDLE}`,\n    async (req, res, ctx) => {\n      const result: UserBundle = mockUserBundle\n      return res(ctx.status(200), ctx.json(result))\n    },\n  ),\n\n  /**\n   * Get a user bundle by ID\n   */\n  rest.get(\n    `${backendOrigin}${USER_ID_BUNDLE(':id')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<UserBundle> = {\n        reason: `Mock Service worker could not find a user bundle with ID ${req.params.id}`,\n      }\n      const match = mockUserData.find(\n        userData => userData.id.toString() === req.params.id,\n      )\n      if (match && match.userBundle) {\n        response = match.userBundle\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n\n  /**\n   * Get the caller's favorites\n   */\n  rest.get(`${backendOrigin}${FAVORITES}`, async (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json(mockPaginatedEntityHeaders))\n  }),\n\n  /**\n   * Get a batch of user group headers\n   */\n  rest.get(\n    `${backendOrigin}${USER_GROUP_HEADERS_BATCH}`,\n    async (req, res, ctx) => {\n      const ids = req.url.searchParams.get('ids')!.split(',')\n      const responsePage: UserGroupHeaderResponsePage = {\n        children: mockUserData\n          .filter(userData => ids.includes(userData.id.toString()))\n          .map(userData => userData.userGroupHeader),\n      }\n      return res(ctx.status(200), ctx.json(responsePage))\n    },\n  ),\n\n  /**\n   * Get a batch of user profiles\n   */\n  rest.post(`${backendOrigin}${USER_PROFILE}`, async (req, res, ctx) => {\n    const requestedList = (await req.json()).list as string[]\n    const responsePage: UserProfileList = {\n      list: mockUserData\n        .filter(userData => requestedList.includes(userData.id.toString()))\n        .map(userData => userData.userProfile)\n        .filter(\n          (userProfile): userProfile is UserProfile => userProfile != null,\n        ),\n    }\n    return res(ctx.status(200), ctx.json(responsePage))\n  }),\n\n  /**\n   * Get userGroupHeaders by prefix\n   */\n  rest.get(`${backendOrigin}${USER_GROUP_HEADERS}`, async (req, res, ctx) => {\n    const prefix = (\n      req.url.searchParams.get('prefix') ?? ''\n    ).toLowerCase() as string\n    const typeFilter = req.url.searchParams.get('typeFilter') as TYPE_FILTER\n    const responsePage: UserGroupHeaderResponsePage = {\n      children: mockUserData\n        .filter(userData => {\n          if (!typeFilter || typeFilter === TYPE_FILTER.ALL) {\n            return true\n          } else if (typeFilter === TYPE_FILTER.USERS_ONLY) {\n            return userData.userGroupHeader.isIndividual\n          } else {\n            return !userData.userGroupHeader.isIndividual\n          }\n        })\n        .filter(\n          userData =>\n            userData.userGroupHeader.userName\n              .toLowerCase()\n              .startsWith(prefix) ||\n            (userData.userGroupHeader.firstName || '')\n              .toLowerCase()\n              .startsWith(prefix) ||\n            userData.userGroupHeader.displayName\n              .toLowerCase()\n              .startsWith(prefix) ||\n            (userData.userGroupHeader.lastName || '')\n              .toLowerCase()\n              .startsWith(prefix),\n        )\n        .map(userData => userData.userGroupHeader),\n    }\n    return res(ctx.status(200), ctx.json(responsePage))\n  }),\n\n  /**\n   * Return a 404 when fetching the profile image\n   */\n  rest.get(\n    `${backendOrigin}${PROFILE_IMAGE_PREVIEW(':userId')}`,\n    async (req, res, ctx) => {\n      return res(\n        ctx.status(404),\n        ctx.json({ reason: 'user has no profile image' }),\n      )\n    },\n  ),\n\n  rest.get(`${backendOrigin}${NOTIFICATION_EMAIL}`, async (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({ email: mockUserBundle.userProfile?.email }),\n    )\n  }),\n\n  rest.get(`${backendOrigin}/auth/v1/2fa`, async (req, res, ctx) => {\n    const response: TwoFactorAuthStatus = {\n      status: 'ENABLED',\n    }\n    return res(ctx.status(200), ctx.json(response))\n  }),\n]\n","import { rest } from 'msw'\nimport {\n  ACCESS_REQUIREMENT_BY_ID,\n  ACCESS_REQUIREMENT_STATUS,\n  ACCESS_REQUIREMENT_WIKI_PAGE_KEY,\n} from '../../../src/lib/utils/APIConstants'\nimport { MOCK_REPO_ORIGIN } from '../../../src/lib/utils/functions/getEndpoint'\nimport {\n  AccessRequirement,\n  AccessRequirementStatus,\n  ObjectType,\n  SubmissionState,\n  WikiPageKey,\n} from '../../../src/lib/utils/synapseTypes'\nimport { SynapseApiResponse } from '../handlers'\nimport {\n  mockAccessRequirements,\n  mockAccessRequirementWikiPageKeys,\n} from '../../mockAccessRequirements'\nimport { mockApprovedSubmission } from '../../dataaccess/MockSubmission'\n\nexport const getAccessRequirementHandlers = (backendOrigin: string) => [\n  rest.get(\n    `${backendOrigin}${ACCESS_REQUIREMENT_BY_ID(':id')}`,\n\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<AccessRequirement> = {\n        reason: `Mock Service worker could not find an access requirement with ID ${req.params.id}`,\n      }\n      const ar = mockAccessRequirements.find(\n        ar => ar.id.toString() === req.params.id,\n      )\n\n      if (ar) {\n        response = ar\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ACCESS_REQUIREMENT_WIKI_PAGE_KEY(':id')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<WikiPageKey> = {\n        reason: `Mock Service worker could not find an access requirement wiki page key with AR ID ${req.params.id}`,\n      }\n      const wikiPageKey = mockAccessRequirementWikiPageKeys.find(\n        wpk =>\n          (wpk.ownerObjectType === ObjectType.ACCESS_REQUIREMENT &&\n            wpk.ownerObjectId.toString()) === req.params.id,\n      )\n\n      if (wikiPageKey) {\n        response = wikiPageKey\n        status = 200\n      }\n\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n  rest.get(\n    `${backendOrigin}${ACCESS_REQUIREMENT_STATUS(':id')}`,\n\n    async (req, res, ctx) => {\n      const accessRequirement = mockAccessRequirements.find(\n        accessRequirement => req.params.id === accessRequirement.id.toString(),\n      )\n      const isManagedACTAR =\n        accessRequirement.concreteType ===\n        'org.sagebionetworks.repo.model.ManagedACTAccessRequirement'\n      const response: AccessRequirementStatus = {\n        accessRequirementId: req.params.id as string,\n        concreteType: isManagedACTAR\n          ? 'org.sagebionetworks.repo.model.dataaccess.ManagedACTAccessRequirementStatus'\n          : 'org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus',\n        isApproved: true,\n        currentSubmissionStatus: isManagedACTAR\n          ? {\n              submissionId: mockApprovedSubmission.id,\n              submittedBy: mockApprovedSubmission.submittedBy,\n              modifiedOn: mockApprovedSubmission.modifiedOn,\n              state: SubmissionState.APPROVED,\n            }\n          : undefined,\n      }\n      const status = response ? 200 : 404\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n]\n","import { rest } from 'msw'\nimport { ACCESS_REQUIREMENT_WIKI_PAGE } from '../../../src/lib/utils/APIConstants'\nimport { WikiPage } from '../../../src/lib/utils/synapseTypes'\nimport { SynapseApiResponse } from '../handlers'\nimport { mockWikiPages } from '../../mockWiki'\n\nexport const getWikiHandlers = (backendOrigin: string) => [\n  rest.get(\n    `${backendOrigin}${ACCESS_REQUIREMENT_WIKI_PAGE(':arId', ':wikiId')}`,\n    async (req, res, ctx) => {\n      let status = 404\n      let response: SynapseApiResponse<WikiPage> = {\n        reason: `Mock Service worker could not find a wiki page with ID ${req.params.wikiId}`,\n      }\n\n      const wikiPage = mockWikiPages.find(wp => wp.id === req.params.wikiId)\n      if (wikiPage) {\n        response = wikiPage\n        status = 200\n      }\n      return res(ctx.status(status), ctx.json(response))\n    },\n  ),\n]\n","import { ResearchProject } from '../../src/lib/utils/synapseTypes/ResearchProject'\nimport { mockManagedACTAccessRequirement } from '../mockAccessRequirements'\n\nexport const MOCK_RESEARCH_PROJECT_ID = '1981321'\nexport const MOCK_RESEARCH_PROJECT: ResearchProject = {\n  id: MOCK_RESEARCH_PROJECT_ID,\n  accessRequirementId: String(mockManagedACTAccessRequirement.id),\n  institution: 'Black Mesa Research Facility',\n  projectLead: 'Gordon Freeman',\n  intendedDataUseStatement:\n    'We plan to use this data to investigate the properties of antimatter. Our findings will be published in' +\n    ' a peer-reviewed journal, and derivative data will be shared on Synapse.',\n}\n","import { AccessType, Renewal, Request } from '../../src/lib/utils/synapseTypes'\nimport { mockManagedACTAccessRequirement } from '../mockAccessRequirements'\nimport { MOCK_USER_ID, MOCK_USER_ID_2 } from '../user/mock_user_profile'\nimport {\n  MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_1_FILE_HANDLE_ID,\n  MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_2_FILE_HANDLE_ID,\n  MOCK_DATA_ACCESS_SUBMISSION_IRB_APPROVAL_FILE_HANDLE_ID,\n  MOCK_DUC_SUBMISSION_FILE_HANDLE_ID,\n} from '../mock_file_handle'\nimport { MOCK_RESEARCH_PROJECT_ID } from './MockResearchProject'\n\nexport const MOCK_DATA_ACCESS_REQUEST_ID = '3541518'\nexport const MOCK_DATA_ACCESS_RENEWAL_ID = '49813181'\n\nexport const MOCK_DATA_ACCESS_REQUEST: Request = {\n  id: MOCK_DATA_ACCESS_REQUEST_ID,\n  accessorChanges: [\n    {\n      userId: String(MOCK_USER_ID),\n      type: AccessType.GAIN_ACCESS,\n    },\n  ],\n  attachments: [\n    MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_1_FILE_HANDLE_ID,\n    MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_2_FILE_HANDLE_ID,\n  ],\n  createdBy: String(MOCK_USER_ID),\n  createdOn: '2023-04-19T13:06:51+00:00',\n  ducFileHandleId: MOCK_DUC_SUBMISSION_FILE_HANDLE_ID,\n  irbFileHandleId: MOCK_DATA_ACCESS_SUBMISSION_IRB_APPROVAL_FILE_HANDLE_ID,\n  modifiedBy: String(MOCK_USER_ID),\n  modifiedOn: '2023-04-19T13:06:51+00:00',\n  researchProjectId: MOCK_RESEARCH_PROJECT_ID,\n  etag: '0',\n  accessRequirementId: String(mockManagedACTAccessRequirement.id),\n  concreteType: 'org.sagebionetworks.repo.model.dataaccess.Request',\n}\n\nexport const MOCK_DATA_ACCESS_RENEWAL: Renewal = {\n  id: MOCK_DATA_ACCESS_RENEWAL_ID,\n  accessorChanges: [\n    {\n      userId: String(MOCK_USER_ID),\n      type: AccessType.GAIN_ACCESS,\n    },\n    {\n      userId: String(MOCK_USER_ID_2),\n      type: AccessType.REVOKE_ACCESS,\n    },\n  ],\n  attachments: [\n    MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_1_FILE_HANDLE_ID,\n    MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_2_FILE_HANDLE_ID,\n  ],\n  createdBy: String(MOCK_USER_ID),\n  createdOn: '2023-04-19T13:06:51+00:00',\n  ducFileHandleId: MOCK_DUC_SUBMISSION_FILE_HANDLE_ID,\n  irbFileHandleId: MOCK_DATA_ACCESS_SUBMISSION_IRB_APPROVAL_FILE_HANDLE_ID,\n  modifiedBy: String(MOCK_USER_ID),\n  modifiedOn: '2023-04-19T13:06:51+00:00',\n  researchProjectId: MOCK_RESEARCH_PROJECT_ID,\n  etag: '0',\n  accessRequirementId: String(mockManagedACTAccessRequirement.id),\n  concreteType: 'org.sagebionetworks.repo.model.dataaccess.Renewal',\n  publication:\n    'My cool paper that used this data: https://doi.org/10.1016/j.cell.2011.02.013',\n  summaryOfUse:\n    'We ran a χ² test of homogeneity to determine if this data was representative of the rest of the population with' +\n    ' consideration for similar large data collections.',\n}\n","import { Renewal, Request } from '../../../src/lib/utils/synapseTypes'\nimport { rest } from 'msw'\nimport {\n  ACCESS_REQUIREMENT_DATA_ACCESS_REQUEST_FOR_UPDATE,\n  DATA_ACCESS_REQUEST,\n  DATA_ACCESS_REQUEST_SUBMISSION,\n} from '../../../src/lib/utils/APIConstants'\nimport { MOCK_DATA_ACCESS_REQUEST } from '../../dataaccess/MockDataAccessRequest'\n\nexport function getDataAccessRequestHandlers(\n  backendOrigin: string,\n  request: Request | Renewal = MOCK_DATA_ACCESS_REQUEST,\n) {\n  return [\n    rest.get(\n      `${backendOrigin}${ACCESS_REQUIREMENT_DATA_ACCESS_REQUEST_FOR_UPDATE(\n        ':id',\n      )}`,\n      async (req, res, ctx) => {\n        const response: Request | Renewal = request\n        return res(ctx.status(200), ctx.json(response))\n      },\n    ),\n    rest.post(\n      `${backendOrigin}${DATA_ACCESS_REQUEST}`,\n      async (req, res, ctx) => {\n        const resp = await req.json()\n        return res(ctx.status(201), ctx.json(resp))\n      },\n    ),\n    rest.post(\n      `${backendOrigin}${DATA_ACCESS_REQUEST_SUBMISSION(':id')}`,\n      async (req, res, ctx) => {\n        return res(ctx.status(201), ctx.json({}))\n      },\n    ),\n  ]\n}\n","import { rest } from 'msw'\nimport {\n  ACCESS_REQUIREMENT_RESEARCH_PROJECT_FOR_UPDATE,\n  RESEARCH_PROJECT,\n} from '../../../src/lib/utils/APIConstants'\nimport { ResearchProject } from '../../../src/lib/utils/synapseTypes/ResearchProject'\nimport { MOCK_RESEARCH_PROJECT } from '../../dataaccess/MockResearchProject'\n\nexport function getResearchProjectHandlers(backendOrigin: string) {\n  return [\n    rest.post(`${backendOrigin}${RESEARCH_PROJECT}`, async (req, res, ctx) => {\n      const resp = await req.json()\n      return res(ctx.status(201), ctx.json(resp))\n    }),\n    rest.get(\n      `${backendOrigin}${ACCESS_REQUIREMENT_RESEARCH_PROJECT_FOR_UPDATE(\n        ':id',\n      )}`,\n      async (req, res, ctx) => {\n        const response: ResearchProject = {\n          ...MOCK_RESEARCH_PROJECT,\n          accessRequirementId: req.params.id.toString(),\n        }\n        return res(ctx.status(200), ctx.json(response))\n      },\n    ),\n  ]\n}\n","import {\n  BatchFileRequest,\n  BatchFileResult,\n} from '../../../src/lib/utils/synapseTypes'\nimport { rest } from 'msw'\nimport { FILE_HANDLE_BATCH } from '../../../src/lib/utils/APIConstants'\nimport { mockFileHandles } from '../../mock_file_handle'\n\nexport function getFileHandlers(backendOrigin: string) {\n  return [\n    rest.post(`${backendOrigin}${FILE_HANDLE_BATCH}`, async (req, res, ctx) => {\n      const request: BatchFileRequest = await req.json()\n\n      const response: BatchFileResult = {\n        requestedFiles: [],\n      }\n\n      request.requestedFiles.forEach(fileHandleAssociation => {\n        const fileHandle = mockFileHandles.find(\n          fh => fh.id === fileHandleAssociation.fileHandleId,\n        )\n        if (fileHandle) {\n          response.requestedFiles.push({\n            fileHandleId: fileHandle.id,\n            fileHandle,\n          })\n        }\n      })\n\n      return res(ctx.status(201), ctx.json(response))\n    }),\n  ]\n}\n","import { rest } from 'msw'\nimport { SynapseError } from '../../src/lib/utils/SynapseClient'\nimport { getEntityHandlers } from './handlers/entityHandlers'\nimport { getUserProfileHandlers } from './handlers/userProfileHandlers'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../src/lib/utils/functions/getEndpoint'\nimport { getAccessRequirementHandlers } from './handlers/accessRequirementHandlers'\nimport { getWikiHandlers } from './handlers/wikiHandlers'\nimport { getDataAccessRequestHandlers } from './handlers/dataAccessRequestHandlers'\nimport { getResearchProjectHandlers } from './handlers/researchProjectHandlers'\nimport { getFileHandlers } from './handlers/fileHandlers'\n\n// Simple utility type that just indicates that the response body could be an error like the Synapse backend may send.\nexport type SynapseApiResponse<T> = T | SynapseError\n\nconst getHandlers = (backendOrigin: string) => [\n  rest.options('*', async (req, res, ctx) => {\n    return res(ctx.status(200))\n  }),\n  rest.get(\n    `${backendOrigin}/auth/v1/authenticatedOn`,\n    async (req, res, ctx) => {\n      return res(\n        ctx.status(200),\n        ctx.json({ authenticatedOn: new Date().toISOString() }),\n      )\n    },\n  ),\n  ...getEntityHandlers(backendOrigin),\n  ...getUserProfileHandlers(backendOrigin),\n  ...getWikiHandlers(backendOrigin),\n  ...getAccessRequirementHandlers(backendOrigin),\n  ...getDataAccessRequestHandlers(backendOrigin),\n  ...getResearchProjectHandlers(backendOrigin),\n  ...getFileHandlers(backendOrigin),\n]\n\nconst handlers = getHandlers(getEndpoint(BackendDestinationEnum.REPO_ENDPOINT))\n\nexport { handlers, getHandlers }\n"],"names":["parentId","mockProject","projectName","MOCK_FILE_ENTITY_ID","MOCK_FILE_NAME","MOCK_WIKI_ID","mockFileEntity","MOCK_FILE_HANDLE_ID","MOCK_USER_ID","MOCK_USER_ID_2","mockFileEntityVersionInfo","mockFileEntityVersions","filePath","mockFileEntityBundle","EntityType","mockFileHandle","mockPreviewFileHandle","AnnotationsValueType","ACCESS_TYPE","RestrictionLevel","mockFileEntityJson","mockFileEntityHeader","mockFileEntityData","MOCK_DATASET_ENTITY_ID","MOCK_DATASET_NAME","mockDatasetEntity","mockProjectEntityData","mockHeader","path","versions","versionInfo","bundle","mockDatasetData","MOCK_DATASET_COLLECTION_ENTITY_ID","MOCK_DATASET_COLLECTION_NAME","mockDatasetCollectionEntity","mockDatasetCollectionData","MOCK_TABLE_ENTITY_ID","MOCK_TABLE_ENTITY_NAME","mockTableEntity","mockTableEntityHeader","mockTableEntityData","mockEntities","MOCK_PROJECT_ID","mockProjectEntity","mockFile","MOCK_FOLDER_ID","MOCK_INVALID_PROJECT_NAME","mockFolderEntity","mockFolderEntityHeader","mockPaginatedEntityHeaders","BoundObjectType","ObjectType","mockSchemaBinding","getEntityHandlers","backendOrigin","rest","ENTITY","req","res","ctx","status","response","requestBody","entityData","entity","ENTITY_ID","ENTITY_ID_VERSIONS","ENTITY_ID_VERSION","entityId","versionNumber","requestedVersionNumber","ENTITY_BUNDLE_V2","ENTITY_SCHEMA_BINDING","ENTITY_JSON","ENTITY_HEADERS","referenceList","ref","header","e","getEndpoint","BackendDestinationEnum","UploadType","getUserProfileHandlers","USER_PROFILE_ID","match","mockUserData","userData","USER_PROFILE","mockUserProfileData","USER_BUNDLE","result","mockUserBundle","USER_ID_BUNDLE","FAVORITES","USER_GROUP_HEADERS_BATCH","ids","responsePage","requestedList","userProfile","USER_GROUP_HEADERS","prefix","typeFilter","TYPE_FILTER","PROFILE_IMAGE_PREVIEW","NOTIFICATION_EMAIL","_a","getAccessRequirementHandlers","ACCESS_REQUIREMENT_BY_ID","ar","mockAccessRequirements","ACCESS_REQUIREMENT_WIKI_PAGE_KEY","wikiPageKey","mockAccessRequirementWikiPageKeys","wpk","ACCESS_REQUIREMENT_STATUS","isManagedACTAR","accessRequirement","mockApprovedSubmission","SubmissionState","getWikiHandlers","ACCESS_REQUIREMENT_WIKI_PAGE","wikiPage","mockWikiPages","wp","MOCK_RESEARCH_PROJECT_ID","MOCK_RESEARCH_PROJECT","mockManagedACTAccessRequirement","MOCK_DATA_ACCESS_REQUEST_ID","MOCK_DATA_ACCESS_RENEWAL_ID","MOCK_DATA_ACCESS_REQUEST","AccessType","MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_1_FILE_HANDLE_ID","MOCK_DATA_ACCESS_SUBMISSION_ATTACHMENT_2_FILE_HANDLE_ID","MOCK_DUC_SUBMISSION_FILE_HANDLE_ID","MOCK_DATA_ACCESS_SUBMISSION_IRB_APPROVAL_FILE_HANDLE_ID","getDataAccessRequestHandlers","request","ACCESS_REQUIREMENT_DATA_ACCESS_REQUEST_FOR_UPDATE","DATA_ACCESS_REQUEST","resp","DATA_ACCESS_REQUEST_SUBMISSION","getResearchProjectHandlers","RESEARCH_PROJECT","ACCESS_REQUIREMENT_RESEARCH_PROJECT_FOR_UPDATE","getFileHandlers","FILE_HANDLE_BATCH","fileHandleAssociation","fileHandle","mockFileHandles","fh","getHandlers"],"mappings":"gvBAqBA,MAAMA,EAAWC,EAAY,GACvBC,GAAcD,EAAY,KAEnBE,EAAsB,SAC7BC,EAAiB,sBAGjBC,GAAe,WAEfC,EAA6B,CACjC,GAAIH,EAAA,SACJH,EACA,iBAAkBO,EAClB,KAAMH,EACN,aAAc,4CACd,UAAWI,EAAa,SAAS,EACjC,WAAYC,EAAe,SAAS,EACpC,KAAM,uCACN,cAAe,EACf,aAAc,wBACd,gBAAiB,GACjB,UAAW,2BACX,WAAY,0BACd,EAEMC,GAA2C,CAC/C,CACE,GAAIP,EACJ,WAAYK,EAAa,SAAS,EAClC,cAAe,EACf,aAAc,wBACd,eAAgB,YAChB,YAAa,MACb,WAAY,mCACZ,sBAAuBA,EAAa,SAAS,EAC7C,WAAY,2BACZ,gBAAiB,EACnB,EACA,CACE,GAAIL,EACJ,WAAYK,EAAa,SAAS,EAClC,cAAe,EACf,aAAc,wBACd,eAAgB,4BAChB,YAAa,MACb,WAAY,mCACZ,sBAAuBA,EAAa,SAAS,EAC7C,WAAY,2BACZ,gBAAiB,EACnB,CACF,EAEMG,GAAqD,CACzD,EAAG,CACD,GAAIR,EAAA,SACJH,EACA,iBAAkBO,EAClB,KAAMH,EACN,aAAc,4CACd,UAAWI,EAAa,SAAS,EACjC,WAAYA,EAAa,SAAS,EAClC,KAAM,uCACN,cAAe,EACf,aAAc,wBACd,gBAAiB,EACnB,EACA,EAAG,CACD,GAAIL,EAAA,SACJH,EACA,iBAAkBO,EAClB,KAAMH,EACN,aAAc,4CACd,UAAWI,EAAa,SAAS,EACjC,WAAYA,EAAa,SAAS,EAClC,KAAM,uCACN,cAAe,EACf,aAAc,wBACd,gBAAiB,EACnB,CACF,EAEMI,EAAuB,CAC3B,KAAM,CACJ,CACE,KAAM,OACN,GAAI,UACJ,KAAM,uCACR,EACA,CACE,KAAMV,GACN,GAAIF,EACJ,KAAM,wCACR,EACA,CACE,KAAMI,EACN,GAAID,EACJ,KAAM,2CACR,CACF,CACF,EAEMU,GAAqC,CACzC,OAAQP,EACR,WAAYQ,EAAW,KACvB,YAAa,CAACC,GAAgBC,EAAqB,EACnD,YAAa,CACX,GAAIb,EACJ,KAAM,uCACN,YAAa,CACX,YAAa,CACX,KAAMc,EAAqB,OAC3B,MAAO,CAAC,SAAS,CACnB,EACA,aAAc,CACZ,KAAMA,EAAqB,KAC3B,MAAO,CAAC,cAAe,IAAI,CAC7B,EACA,WAAY,CACV,KAAMA,EAAqB,KAC3B,MAAO,CAAC,IAAK,GAAK,EAAE,CACtB,CACF,CACF,EACA,WAAYZ,GACZ,SAAUC,EAAe,KACzB,cAAe,CACb,GAAIN,EACJ,aAAc,2BACd,KAAM,uCACN,eAAgB,CACd,CACE,YAAaQ,EACb,WAAY,CACVU,EAAY,OACZA,EAAY,gBACZA,EAAY,SACZA,EAAY,mBACZA,EAAY,OACZA,EAAY,KACZA,EAAY,SACZA,EAAY,MACd,CACF,EACA,CACE,YAAa,OACb,WAAY,CAACA,EAAY,IAAI,CAC/B,EACA,CACE,YAAa,OACb,WAAY,CAACA,EAAY,IAAI,CAC/B,CACF,CACF,EACA,YAAa,CACX,QAAS,GACT,QAAS,GACT,QAAS,GACT,YAAa,GACb,qBAAsB,GACtB,yBAA0B,GAC1B,gBAAiB,GACjB,qBAAsB,GACtB,kBAAmB,GACnB,UAAW,GACX,YAAa,GACb,UAAW,GACX,qBAAsB,GACtB,iBAAkB,QAClB,cAAe,GACf,YAAa,GACb,wBAAyB,GACzB,iBAAkB,EACpB,EACA,YAAa,EACb,KAAMN,EACN,uBAAwB,CACtB,iBAAkBO,GAAiB,KACnC,0BAA2B,EAC7B,CACF,EAEMC,GAAiC,CACrC,GAAId,EAAe,GACnB,KAAMA,EAAe,KACrB,KAAMA,EAAe,KACrB,UAAWA,EAAe,UAC1B,WAAYA,EAAe,WAC3B,UAAWA,EAAe,UAC1B,WAAYA,EAAe,WAC3B,SAAU,UACV,aAAc,yCACd,YAAa,UACb,aAAc,CAAC,cAAe,IAAI,EAClC,WAAY,CAAC,IAAK,GAAK,EAAE,CAC3B,EAEMe,GAAqC,CACzC,GAAIf,EAAe,GACnB,KAAMA,EAAe,KACrB,KAAMA,EAAe,aACrB,cAAe,EACf,aAAc,wBACd,aAAc,IACd,UAAWA,EAAe,UAC1B,WAAYA,EAAe,WAC3B,UAAWE,EAAa,SAAS,EACjC,WAAYC,EAAe,SAAS,EACpC,gBAAiB,EACnB,EAEMa,EAAiD,CACrD,GAAInB,EACJ,KAAMC,EACN,OAAQE,EACR,OAAQO,GACR,KAAMO,GACN,SAAUT,GACV,YAAaD,GACb,aAAcW,GACd,KAAMT,CACR,ECrOMW,EAAyB,SACzBC,EAAoB,mBAEbC,EAA6B,CACxC,GAAIF,EACJ,SAAUG,EAAsB,GAChC,KAAMF,EACN,aAAc,+CACd,UAAWhB,EAAa,SAAS,EACjC,WAAYC,EAAe,SAAS,EACpC,UAAW,2BACX,WAAY,2BACZ,cAAe,EACf,aAAc,cACd,eAAgB,cAChB,gBAAiB,GACjB,KAAM,uCACN,MAAO,CAAC,EACR,UAAW,CAAC,EACZ,gBAAiB,EACnB,EAEMkB,GAA2B,CAC/B,GAAIJ,EACJ,KAAM,+CACN,KAAMC,EACN,aAAc,SAASE,EAAsB,EAAE,EAC/C,UAAW,2BACX,WAAY,2BACZ,UAAWlB,EAAa,SAAS,EACjC,WAAYA,EAAa,SAAS,EAClC,cAAe,EACf,aAAc,cACd,gBAAiB,EACnB,EAEMoB,EAAmB,CACvB,KAAM,CACJ,CACE,KAAM,OACN,GAAI,UACJ,KAAM,uCACR,EACA,CACE,KAAMF,EAAsB,KAC5B,GAAIA,EAAsB,GAC1B,KAAM,wCACR,EACA,CACE,KAAMF,EACN,GAAID,EACJ,KAAM,2CACR,CACF,CACF,EAEMM,GAAoC,CACxC,EAAG,CACD,GAAGJ,EACH,cAAe,EACf,aAAc,aACd,eAAgB,GAChB,gBAAiB,EACnB,EACA,EAAG,CACD,GAAGA,EACH,cAAe,EACf,aAAc,aACd,eAAgB,GAChB,gBAAiB,EACnB,CACF,EAEMK,GAA6B,CACjC,CACE,GAAIP,EACJ,cAAe,EACf,aAAc,aACd,eAAgB,GAChB,gBAAiB,GACjB,WAAYf,EAAa,SAAS,EAClC,sBAAuBA,EAAa,SAAS,EAC7C,WAAY,0BACd,EACA,CACE,GAAIe,EACJ,cAAe,EACf,aAAc,aACd,eAAgB,GAChB,gBAAiB,GACjB,WAAYf,EAAa,SAAS,EAClC,sBAAuBA,EAAa,SAAS,EAC7C,WAAY,0BACd,CACF,EAEMuB,GAAuB,CAC3B,OAAQN,EACR,WAAYX,EAAW,QAAA,KACvBc,EACA,YAAa,CACX,QAAS,GACT,QAAS,GACT,QAAS,GACT,YAAa,GACb,qBAAsB,GACtB,yBAA0B,GAC1B,gBAAiB,GACjB,qBAAsB,GACtB,kBAAmB,GACnB,UAAW,GACX,YAAa,GACb,UAAW,GACX,qBAAsB,GACtB,iBAAkB,QAClB,cAAe,GACf,YAAa,GACb,wBAAyB,GACzB,iBAAkB,EACpB,CACF,EAEMI,GAA2C,CAC/C,GAAIT,EACJ,KAAMC,EACN,OAAQC,EACR,aAAcE,GAAA,KACdC,EACA,OAAAG,GACA,SAAAF,GACA,YAAAC,EACF,ECzIMG,EAAoC,YACpCC,EAA+B,8BAExBC,GAAiD,CAC5D,GAAIF,EACJ,SAAUP,EAAsB,GAChC,KAAMQ,EACN,aAAc,yDACd,UAAW1B,EAAa,SAAS,EACjC,WAAYA,EAAa,SAAS,EAClC,KAAM,uCACN,MAAO,CACL,CACE,SAAUwB,GAAgB,GAC1B,cAAe,CACjB,CACF,EACA,UAAW,CAAC,EACZ,gBAAiB,EACnB,EAEMJ,GAAmB,CACvB,KAAM,CACJ,CACE,KAAM,OACN,GAAI,UACJ,KAAM,uCACR,EACA,CACE,KAAMF,EAAsB,KAC5B,GAAIA,EAAsB,GAC1B,KAAM,wCACR,EACA,CACE,KAAMQ,EACN,GAAID,EACJ,KAAM,2CACR,CACF,CACF,EAEMG,GAA+D,CACnE,GAAIH,EACJ,KAAMC,EACN,OAAQC,GACR,KAAAP,EACF,EC/CaS,EAAuB,SACvBC,GAAyB,gBAEhCtC,GAAWC,EAAY,GAEhBsC,EAA+B,CAC1C,GAAIF,EACJ,cAAe,EACf,aAAc,cACd,eAAgB,cAChB,SAAArC,GACA,KAAMsC,GACN,aAAc,mDACd,UAAW9B,EAAa,SAAS,EACjC,UAAW,2BACX,WAAY,2BACZ,WAAYC,EAAe,SAAS,EACpC,KAAM,uCACN,UAAW,CAAC,EACZ,gBAAiB,GACjB,gBAAiB,EACnB,EAEM+B,GAAsC,CAC1C,KAAMD,EAAgB,KACtB,GAAIF,EACJ,KAAM,mDACN,cAAeE,EAAgB,cAC/B,aAAcA,EAAgB,aAC9B,aAAcvC,GACd,UAAWuC,EAAgB,UAC3B,WAAYA,EAAgB,WAC5B,UAAWA,EAAgB,UAC3B,WAAYA,EAAgB,WAC5B,gBAAiBA,EAAgB,eACnC,EAEME,GAAmD,CACvD,GAAIJ,EACJ,KAAMC,GACN,OAAQC,EACR,aAAcC,EAChB,ECxCME,EAAiC,CACrCpB,EACAI,EACAM,GACAI,GACAK,EACF,ECAME,GAAkB1C,EAAY,GAC9B2C,EAAoB3C,EAAY,OACf4C,EAAS,KAChC,MAAMxB,GAAuBwB,EAAS,aAEzBC,GAAiB,UACjBC,GAA4B,kCAI5BC,EAA2B,CACtC,GAAIF,GACJ,SAAUH,GACV,KAAM,iBACN,aAAc,uCAChB,EAEaM,GAAuC,CAClD,GAAID,EAAiB,GACrB,KAAMA,EAAiB,KACvB,KAAMA,EAAiB,aACvB,cAAe,EACf,aAAc,gBACd,aAAc,KACd,UAAW,GACX,WAAY,GACZ,UAAW,GACX,WAAY,EACd,EAEaE,GAA6D,CACxE,qBAAsB,EACtB,QAAS,CAAC7B,GAAsB4B,EAAsB,CACxD,EAGML,EAAkB,GAChBA,EAAkB,KAEZA,EAAkB,WAClBpC,ECxCF,IAAA2C,IAAAA,IACVA,EAAA,OAAS,SADCA,IAAAA,IAAA,CAAA,CAAA,ECZAC,IAAAA,IACVA,EAAA,OAAS,SADCA,IAAAA,IAAA,CAAA,CAAA,ECQZ,MAAM9C,EAAiBgB,EAAmB,OAE7B+B,EAA6C,CACxD,sBAAuB,CACrB,eAAgB,IAChB,iBAAkB,sBAClB,SAAU,IACV,WAAY,cACZ,UAAW,MACX,IAAK,iCACL,cACE,mEACF,UAAW,2BACX,UAAW,GACb,EACA,SAAU,KACV,WAAYF,GAAgB,OAC5B,UAAW,2BACX,UAAW,GACb,EAGY7C,EAAe,GACb8C,GAAW,OACX9C,EAAe,KACsD,GAAA+C,EAAkB,sBAAsB,MAO9C,GAAAA,EAAkB,sBAAsB,MCNxG,MAAAC,GAAqBC,GAA0B,CAI1DC,OAAK,KAAK,GAAGD,IAAgBE,KAAU,MAAOC,EAAKC,EAAKC,IAAQ,CAC9D,IAAIC,EAAS,IACTC,EAAuC,CACzC,OAAQ,gFAAgF,KAAK,UAC3FJ,EAAI,IAAA,GACN,EAEF,GAAIA,EAAI,KAAM,CAEZ,MAAMK,EAAcL,EAAI,KAElBM,EAAatB,EAAa,KAC9BuB,GAAUA,EAAO,OAASF,EAAY,IAAA,EAEpCC,GACFF,EAAWE,EAAW,OACbH,EAAA,KACAE,EAAY,OAAShB,KAC9Be,EAAS,OAAS,uBACTD,EAAA,IAEb,CAEO,OAAAF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CAAA,CAClD,EAKDN,EAAAA,KAAK,IACH,GAAGD,IAAgBW,EAAU,WAAW,IACxC,MAAOR,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAAuC,CACzC,OAAQ,4DAA4DJ,EAAI,OAAO,UAAA,EAGjF,MAAMM,EAAatB,EAAa,KACpBuB,GAAAA,EAAO,KAAOP,EAAI,OAAO,QAAA,EAErC,OAAIM,IACFF,EAAWE,EAAW,OACbH,EAAA,KAEJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EAEAN,EAAAA,KAAK,IACH,GAAGD,IAAgBY,GAAmB,WAAW,IACjD,MAAOT,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAA8D,CAChE,OAAQ,kEAAkEJ,EAAI,OAAO,UAAA,EAGvF,MAAMM,EAAatB,EAAa,KACpBuB,GAAAA,EAAO,KAAOP,EAAI,OAAO,QAAA,EAEjC,OAAAM,GAAcA,EAAW,cAChBF,EAAA,CAAE,QAASE,EAAW,WAAY,EACpCH,EAAA,KAEJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EAEAN,EAAAA,KAAK,IACH,GAAGD,IAAgBa,GAAkB,YAAa,gBAAgB,IAClE,MAAOV,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACP,MAAAQ,EAAWX,EAAI,OAAO,SACtBY,EAAgBZ,EAAI,OAAO,cAAc,SAAS,EAClDa,EAAyB,SAASD,CAAa,EAErD,IAAIR,EAAkD,CACpD,OAAQ,sEAAsEO,KAAYC,GAAA,EAG5F,MAAMN,EAAatB,EAAa,KACpBuB,IAAAA,GAAO,KAAOP,EAAI,OAAO,QAAA,EAErC,OACEM,GACAA,EAAW,UACXA,EAAW,SAASO,CAAsB,IAE/BT,EAAAE,EAAW,SACpBO,CACF,EACSV,EAAA,KAEJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EAEAN,EAAAA,KAAK,KACH,GAAGD,IAAgBiB,EAAiB,WAAW,IAC/C,MAAOd,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAA6C,CAC/C,OAAQ,mEAAmEJ,EAAI,OAAO,UAAA,EAExF,MAAMM,EAAatB,EAAa,KACpBuB,GAAAA,EAAO,KAAOP,EAAI,OAAO,QAAA,EAErC,OAAIM,GAAA,MAAAA,EAAY,SACdF,EAAWE,EAAW,OACbH,EAAA,KAEJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EAEAN,EAAAA,KAAK,KACH,GAAGD,IAAgBiB,EAAiB,YAAa,gBAAgB,IACjE,MAAOd,EAAKC,EAAKC,IAAQ,CACjB,MAAAS,EAAWX,EAAI,OAAO,SACtBY,EAAgB,SAASZ,EAAI,OAAO,aAAuB,EACjE,IAAIG,EAAS,IACTC,EAA6C,CAC/C,OAAQ,mEAAmEO,GAAA,EAE7E,MAAML,EAAatB,EAAa,KAAeuB,GAAAA,EAAO,KAAOI,CAAQ,EACrE,GAAIL,EAAY,CACd,MAAMjC,EAASiC,EAAW,OACtBA,EAAW,UAAYA,EAAW,SAASM,CAAa,EAC/CR,EAAA,CACT,GAAG/B,EACH,OAAQiC,EAAW,SAASM,CAAa,CAAA,EAGhCR,EAAA/B,EAEJ8B,EAAA,GACX,CAEO,OAAAF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EACAN,EAAAA,KAAK,IACH,GAAGD,IAAgBkB,GAAsB,WAAW,IACpD,MAAOf,EAAKC,EAAKC,IACRD,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKP,CAAiB,CAAC,CAE3D,EACAG,EAAAA,KAAK,IACH,GAAGD,IAAgBmB,GAAY,WAAW,IAE1C,MAAOhB,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAA2C,CAC7C,OAAQ,mEAAmEJ,EAAI,OAAO,UAAA,EAExF,MAAMM,EAAatB,EAAa,KACpBuB,GAAAA,EAAO,KAAOP,EAAI,OAAO,QAAA,EAErC,OAAIM,GAAA,MAAAA,EAAY,OACdF,EAAWE,EAAW,KACbH,EAAA,KAGJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EAEAN,EAAAA,KAAK,KACH,GAAGD,IAAgBoB,KAEnB,MAAOjB,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAA+D,CACjE,OAAQ,mEAAmEJ,EAAI,OAAO,UAAA,EAGxF,MAAMkB,EAAgBlB,EAAI,KACpBM,EAAatB,EAChB,OAAOuB,GACNW,EAAc,WAAW,QAAYC,EAAI,WAAaZ,EAAO,EAAE,CACjE,EACC,IAAIA,GAAUA,EAAO,YAAY,EACjC,OAAQa,GAAmC,CAAC,CAACA,CAAM,EAEtD,OAAId,IACSF,EAAA,CAAE,QAASE,GACbH,EAAA,KAGJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EAEAN,EAAAA,KAAK,IACH,GAAGD,IAAgBW,EAAU,WAAW,SAExC,MAAOR,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAA2C,CAC7C,OAAQ,kEAAkEJ,EAAI,OAAO,UAAA,EAEjF,MAAAM,EAAatB,EAAa,KAAKqC,GAAKrB,EAAI,OAAO,WAAaqB,EAAE,EAAE,EAElE,OAAAf,GAAcA,EAAW,OAC3BF,EAAWE,EAAW,KACbH,EAAA,KAGJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EAEAN,EAAAA,KAAK,IACH,GAAGwB,EACDC,EAAuB,aACzB,yCACA,MAAOvB,EAAKC,EAAKC,IAAQ,CACvB,MAAME,EAA8B,CAClC,OAAQ,GACR,kBAAmB,EACnB,WAAYoB,GAAW,GACvB,aAAc,yDAAA,EAET,OAAAvB,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKE,CAAQ,CAAC,CAChD,CACF,CACF,ECxOaqB,GAA0B5B,GAA0B,CAI/DC,EAAAA,KAAK,IACH,GAAGD,IAAgB6B,GAAgB,KAAK,IACxC,MAAO1B,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAA4C,CAC9C,OAAQ,6DAA6DJ,EAAI,OAAO,IAAA,EAElF,MAAM2B,EAAQC,EAAa,QACbC,EAAS,GAAG,SAAS,IAAM7B,EAAI,OAAO,EAAA,EAEhD,OAAA2B,GAASA,EAAM,cACjBvB,EAAWuB,EAAM,YACRxB,EAAA,KAEJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EAKAN,OAAK,IAAI,GAAGD,IAAgBiC,IAAgB,MAAO9B,EAAKC,EAAKC,IAAQ,CAEnE,MAAME,EAAwB2B,GACxB5B,EAAS,IACR,OAAAF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CAAA,CAClD,EAKDN,EAAAA,KAAK,IACH,GAAGwB,EAAYC,EAAuB,aAAa,IAAIS,KACvD,MAAOhC,EAAKC,EAAKC,IAAQ,CACvB,MAAM+B,EAAqBC,EACpB,OAAAjC,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAK+B,CAAM,CAAC,CAC9C,CACF,EAKAnC,EAAAA,KAAK,IACH,GAAGD,IAAgBsC,GAAe,KAAK,IACvC,MAAOnC,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAA2C,CAC7C,OAAQ,4DAA4DJ,EAAI,OAAO,IAAA,EAEjF,MAAM2B,EAAQC,EAAa,QACbC,EAAS,GAAG,SAAS,IAAM7B,EAAI,OAAO,EAAA,EAEhD,OAAA2B,GAASA,EAAM,aACjBvB,EAAWuB,EAAM,WACRxB,EAAA,KAEJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EAKAN,OAAK,IAAI,GAAGD,IAAgBuC,KAAa,MAAOpC,EAAKC,EAAKC,IACjDD,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKV,EAA0B,CAAC,CACjE,EAKDM,EAAAA,KAAK,IACH,GAAGD,IAAgBwC,KACnB,MAAOrC,EAAKC,EAAKC,IAAQ,CACjB,MAAAoC,EAAMtC,EAAI,IAAI,aAAa,IAAI,KAAK,EAAG,MAAM,GAAG,EAChDuC,EAA4C,CAChD,SAAUX,EACP,OAAOC,GAAYS,EAAI,SAAST,EAAS,GAAG,SAAA,CAAU,CAAC,EACvD,IAAIA,GAAYA,EAAS,eAAe,CAAA,EAEtC,OAAA5B,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKqC,CAAY,CAAC,CACpD,CACF,EAKAzC,OAAK,KAAK,GAAGD,IAAgBiC,IAAgB,MAAO9B,EAAKC,EAAKC,IAAQ,CACpE,MAAMsC,GAAiB,MAAMxC,EAAI,KAAA,GAAQ,KACnCuC,EAAgC,CACpC,KAAMX,EACH,OAAmBC,GAAAW,EAAc,SAASX,EAAS,GAAG,SAAU,CAAA,CAAC,EACjE,IAAgBA,GAAAA,EAAS,WAAW,EACpC,OACEY,GAA4CA,GAAe,IAC9D,CAAA,EAEG,OAAAxC,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKqC,CAAY,CAAC,CAAA,CACnD,EAKDzC,OAAK,IAAI,GAAGD,IAAgB6C,KAAsB,MAAO1C,EAAKC,EAAKC,IAAQ,CACnE,MAAAyC,GACJ3C,EAAI,IAAI,aAAa,IAAI,QAAQ,GAAK,IACtC,cACI4C,EAAa5C,EAAI,IAAI,aAAa,IAAI,YAAY,EAClDuC,EAA4C,CAChD,SAAUX,EACP,OAAmBC,GACd,CAACe,GAAcA,IAAeC,EAAY,IACrC,GACED,IAAeC,EAAY,WAC7BhB,EAAS,gBAAgB,aAEzB,CAACA,EAAS,gBAAgB,YAEpC,EACA,OAEGA,GAAAA,EAAS,gBAAgB,SACtB,YACA,EAAA,WAAWc,CAAM,IACnBd,EAAS,gBAAgB,WAAa,IACpC,cACA,WAAWc,CAAM,GACpBd,EAAS,gBAAgB,YACtB,cACA,WAAWc,CAAM,IACnBd,EAAS,gBAAgB,UAAY,IACnC,YAAY,EACZ,WAAWc,CAAM,CAEvB,EAAA,IAAgBd,GAAAA,EAAS,eAAe,CAAA,EAEtC,OAAA5B,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKqC,CAAY,CAAC,CAAA,CACnD,EAKDzC,EAAAA,KAAK,IACH,GAAGD,IAAgBiD,GAAsB,SAAS,IAClD,MAAO9C,EAAKC,EAAKC,IACRD,EACLC,EAAI,OAAO,GAAG,EACdA,EAAI,KAAK,CAAE,OAAQ,4BAA6B,CAAA,CAGtD,EAEAJ,OAAK,IAAI,GAAGD,IAAgBkD,KAAsB,MAAO/C,EAAKC,EAAKC,IAAQ,OAClE,OAAAD,EACLC,EAAI,OAAO,GAAG,EACdA,EAAI,KAAK,CAAE,OAAO8C,EAAAd,EAAe,cAAf,YAAAc,EAA4B,MAAO,CAAA,CACvD,CACD,EAEDlD,OAAK,IAAI,GAAGD,gBAA6B,MAAOG,EAAKC,EAAKC,IAAQ,CAChE,MAAME,EAAgC,CACpC,OAAQ,SAAA,EAEH,OAAAH,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKE,CAAQ,CAAC,CAAA,CAC/C,CACH,ECnLa6C,GAAgCpD,GAA0B,CACrEC,EAAAA,KAAK,IACH,GAAGD,IAAgBqD,GAAyB,KAAK,IAEjD,MAAOlD,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAAkD,CACpD,OAAQ,oEAAoEJ,EAAI,OAAO,IAAA,EAEzF,MAAMmD,EAAKC,EAAuB,KAChCD,GAAMA,EAAG,GAAG,SAAS,IAAMnD,EAAI,OAAO,EAAA,EAGxC,OAAImD,IACS/C,EAAA+C,EACFhD,EAAA,KAGJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EACAN,EAAAA,KAAK,IACH,GAAGD,IAAgBwD,GAAiC,KAAK,IACzD,MAAOrD,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAA4C,CAC9C,OAAQ,qFAAqFJ,EAAI,OAAO,IAAA,EAE1G,MAAMsD,EAAcC,GAAkC,KACpDC,IACGA,EAAI,kBAAoB9D,GAAW,oBAClC8D,EAAI,cAAc,SAAA,KAAgBxD,EAAI,OAAO,EAAA,EAGnD,OAAIsD,IACSlD,EAAAkD,EACFnD,EAAA,KAGJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,EACAN,EAAAA,KAAK,IACH,GAAGD,IAAgB4D,GAA0B,KAAK,IAElD,MAAOzD,EAAKC,EAAKC,IAAQ,CAIjB,MAAAwD,EAHoBN,EAAuB,KAC/CO,GAAqB3D,EAAI,OAAO,KAAO2D,EAAkB,GAAG,SAAS,CAAA,EAGnD,eAClB,6DACIvD,EAAoC,CACxC,oBAAqBJ,EAAI,OAAO,GAChC,aAAc0D,EACV,8EACA,yEACJ,WAAY,GACZ,wBAAyBA,EACrB,CACE,aAAcE,EAAuB,GACrC,YAAaA,EAAuB,YACpC,WAAYA,EAAuB,WACnC,MAAOC,GAAgB,QAEzB,EAAA,MAAA,EAEA1D,EAASC,EAAW,IAAM,IACzB,OAAAH,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,CACF,ECtFa0D,GAAmBjE,GAA0B,CACxDC,EAAAA,KAAK,IACH,GAAGD,IAAgBkE,GAA6B,QAAS,SAAS,IAClE,MAAO/D,EAAKC,EAAKC,IAAQ,CACvB,IAAIC,EAAS,IACTC,EAAyC,CAC3C,OAAQ,0DAA0DJ,EAAI,OAAO,QAAA,EAGzE,MAAAgE,EAAWC,GAAc,KAAKC,GAAMA,EAAG,KAAOlE,EAAI,OAAO,MAAM,EACrE,OAAIgE,IACS5D,EAAA4D,EACF7D,EAAA,KAEJF,EAAIC,EAAI,OAAOC,CAAM,EAAGD,EAAI,KAAKE,CAAQ,CAAC,CACnD,CACF,CACF,ECpBa+D,EAA2B,UAC3BC,GAAyC,CACpD,GAAID,EACJ,oBAAqB,OAAOE,EAAgC,EAAE,EAC9D,YAAa,+BACb,YAAa,iBACb,yBACE,iLAEJ,ECDaC,GAA8B,UAC9BC,GAA8B,WAE9BC,GAAoC,CAC/C,GAAIF,GACJ,gBAAiB,CACf,CACE,OAAQ,OAAOxH,CAAY,EAC3B,KAAM2H,EAAW,WACnB,CACF,EACA,YAAa,CACXC,EACAC,CACF,EACA,UAAW,OAAO7H,CAAY,EAC9B,UAAW,4BACX,gBAAiB8H,EACjB,gBAAiBC,EACjB,WAAY,OAAO/H,CAAY,EAC/B,WAAY,4BACZ,kBAAmBqH,EACnB,KAAM,IACN,oBAAqB,OAAOE,EAAgC,EAAE,EAC9D,aAAc,mDAChB,EAMc,OAAOvH,CAAY,EACrB2H,EAAW,YAGT,OAAO1H,CAAc,EACvB0H,EAAW,cAInBC,EACAC,EAES,OAAO7H,CAAY,EAEb8H,EACAC,EACL,OAAO/H,CAAY,EAIV,OAAOuH,EAAgC,EAAE,ECrDhD,SAAAS,GACdjF,EACAkF,EAA6BP,GAC7B,CACO,MAAA,CACL1E,EAAAA,KAAK,IACH,GAAGD,IAAgBmF,GACjB,KAAA,IAEF,MAAOhF,EAAKC,EAAKC,IAAQ,CACvB,MAAME,EAA8B2E,EAC7B,OAAA9E,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKE,CAAQ,CAAC,CAChD,CACF,EACAN,EAAAA,KAAK,KACH,GAAGD,IAAgBoF,KACnB,MAAOjF,EAAKC,EAAKC,IAAQ,CACjB,MAAAgF,EAAO,MAAMlF,EAAI,OAChB,OAAAC,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKgF,CAAI,CAAC,CAC5C,CACF,EACApF,EAAAA,KAAK,KACH,GAAGD,IAAgBsF,GAA+B,KAAK,IACvD,MAAOnF,EAAKC,EAAKC,IACRD,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAK,CAAE,CAAA,CAAC,CAE5C,CAAA,CAEJ,CC7BO,SAASkF,GAA2BvF,EAAuB,CACzD,MAAA,CACLC,OAAK,KAAK,GAAGD,IAAgBwF,KAAoB,MAAOrF,EAAKC,EAAKC,IAAQ,CAClE,MAAAgF,EAAO,MAAMlF,EAAI,OAChB,OAAAC,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKgF,CAAI,CAAC,CAAA,CAC3C,EACDpF,EAAAA,KAAK,IACH,GAAGD,IAAgByF,GACjB,KAAA,IAEF,MAAOtF,EAAKC,EAAKC,IAAQ,CACvB,MAAME,EAA4B,CAChC,GAAGgE,GACH,oBAAqBpE,EAAI,OAAO,GAAG,SAAS,CAAA,EAEvC,OAAAC,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKE,CAAQ,CAAC,CAChD,CACF,CAAA,CAEJ,CCnBO,SAASmF,GAAgB1F,EAAuB,CAC9C,MAAA,CACLC,OAAK,KAAK,GAAGD,IAAgB2F,KAAqB,MAAOxF,EAAKC,EAAKC,IAAQ,CACnE,MAAA6E,EAA4B,MAAM/E,EAAI,OAEtCI,EAA4B,CAChC,eAAgB,CAAC,CAAA,EAGX,OAAA2E,EAAA,eAAe,QAAiCU,GAAA,CACtD,MAAMC,EAAaC,GAAgB,KACjCC,GAAMA,EAAG,KAAOH,EAAsB,YAAA,EAEpCC,GACFtF,EAAS,eAAe,KAAK,CAC3B,aAAcsF,EAAW,GACzB,WAAAA,CAAA,CACD,CACH,CACD,EAEMzF,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKE,CAAQ,CAAC,CAAA,CAC/C,CAAA,CAEL,CCfM,MAAAyF,GAAehG,GAA0B,CAC7CC,OAAK,QAAQ,IAAK,MAAOE,EAAKC,EAAKC,IAC1BD,EAAIC,EAAI,OAAO,GAAG,CAAC,CAC3B,EACDJ,EAAAA,KAAK,IACH,GAAGD,4BACH,MAAOG,EAAKC,EAAKC,IACRD,EACLC,EAAI,OAAO,GAAG,EACdA,EAAI,KAAK,CAAE,gBAAiB,IAAI,KAAK,EAAE,YAAY,EAAG,CAAA,CAG5D,EACA,GAAGN,GAAkBC,CAAa,EAClC,GAAG4B,GAAuB5B,CAAa,EACvC,GAAGiE,GAAgBjE,CAAa,EAChC,GAAGoD,GAA6BpD,CAAa,EAC7C,GAAGiF,GAA6BjF,CAAa,EAC7C,GAAGuF,GAA2BvF,CAAa,EAC3C,GAAG0F,GAAgB1F,CAAa,CAClC,EAEiBgG,GAAYvE,EAAYC,EAAuB,aAAa,CAAC"}