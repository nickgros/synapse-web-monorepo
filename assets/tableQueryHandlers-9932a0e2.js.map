{"version":3,"file":"tableQueryHandlers-9932a0e2.js","sources":["../../mocks/msw/handlers/tableQueryHandlers.ts"],"sourcesContent":["import { cloneDeep, uniqueId } from 'lodash-es'\nimport { rest } from 'msw'\nimport {\n  ASYNCHRONOUS_JOB_TOKEN,\n  TABLE_QUERY_ASYNC_GET,\n  TABLE_QUERY_ASYNC_START,\n} from '../../../src/utils/APIConstants'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../src/utils/functions/getEndpoint'\nimport {\n  BUNDLE_MASK_LAST_UPDATED_ON,\n  BUNDLE_MASK_QUERY_COLUMN_MODELS,\n  BUNDLE_MASK_QUERY_COUNT,\n  BUNDLE_MASK_QUERY_FACETS,\n  BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE,\n  BUNDLE_MASK_QUERY_RESULTS,\n  BUNDLE_MASK_QUERY_SELECT_COLUMNS,\n  BUNDLE_MASK_SUM_FILES_SIZE_BYTES,\n} from '../../../src/utils/SynapseConstants'\nimport {\n  AsynchronousJobStatus,\n  AsyncJobId,\n  QueryBundleRequest,\n  QueryResultBundle,\n} from '@sage-bionetworks/synapse-types'\n\nconst BIT_TO_FIELD_MAP: Record<number, keyof QueryResultBundle> = {\n  [BUNDLE_MASK_QUERY_RESULTS]: 'queryResult',\n  [BUNDLE_MASK_QUERY_COUNT]: 'queryCount',\n  [BUNDLE_MASK_QUERY_SELECT_COLUMNS]: 'selectColumns',\n  [BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE]: 'maxRowsPerPage',\n  [BUNDLE_MASK_QUERY_COLUMN_MODELS]: 'columnModels',\n  [BUNDLE_MASK_QUERY_FACETS]: 'facets',\n  [BUNDLE_MASK_SUM_FILES_SIZE_BYTES]: 'sumFileSizes',\n  [BUNDLE_MASK_LAST_UPDATED_ON]: 'lastUpdatedOn',\n}\n\nfunction removeBundleFieldsUsingMask(\n  queryResultBundle: QueryResultBundle,\n  partMask: number,\n): QueryResultBundle {\n  const result = cloneDeep(queryResultBundle)\n  Object.entries(BIT_TO_FIELD_MAP).forEach(([bit, field]) => {\n    if ((partMask & parseInt(bit)) === 0) {\n      delete result[field]\n    }\n  })\n  return result\n}\n\nexport function getHandlersForTableQuery(\n  response: QueryResultBundle,\n  backendOrigin = getEndpoint(BackendDestinationEnum.REPO_ENDPOINT),\n) {\n  const asyncJobId = uniqueId()\n  let queryBundleRequest: QueryBundleRequest | undefined\n\n  return [\n    rest.post(\n      `${backendOrigin}${TABLE_QUERY_ASYNC_START(':id')}`,\n      async (req, res, ctx) => {\n        queryBundleRequest = req.body as QueryBundleRequest\n        return res(\n          ctx.status(201),\n          ctx.json<AsyncJobId>({\n            token: asyncJobId,\n          }),\n        )\n      },\n    ),\n\n    rest.get(\n      `${backendOrigin}${ASYNCHRONOUS_JOB_TOKEN(asyncJobId)}`,\n      async (req, res, ctx) => {\n        const resultBundle = removeBundleFieldsUsingMask(\n          response,\n          queryBundleRequest!.partMask,\n        )\n\n        return res(\n          ctx.status(201),\n          ctx.json<\n            AsynchronousJobStatus<QueryBundleRequest, QueryResultBundle>\n          >({\n            jobState: 'COMPLETE',\n            jobCanceling: false,\n            requestBody: queryBundleRequest!,\n            etag: '00000000-0000-0000-0000-000000000000',\n            jobId: asyncJobId,\n            responseBody: resultBundle,\n            startedByUserId: 0,\n            startedOn: '',\n            changedOn: '',\n            progressMessage: '',\n            progressCurrent: 100,\n            progressTotal: 100,\n            exception: '',\n            errorMessage: '',\n            errorDetails: '',\n            runtimeMS: 100,\n          }),\n        )\n      },\n    ),\n\n    rest.get(\n      `${backendOrigin}${TABLE_QUERY_ASYNC_GET(':id', asyncJobId)}`,\n      async (req, res, ctx) => {\n        const resultBundle = removeBundleFieldsUsingMask(\n          response,\n          queryBundleRequest!.partMask,\n        )\n\n        return res(ctx.status(201), ctx.json<QueryResultBundle>(resultBundle))\n      },\n    ),\n  ]\n}\n"],"names":["BIT_TO_FIELD_MAP","BUNDLE_MASK_QUERY_RESULTS","BUNDLE_MASK_QUERY_COUNT","BUNDLE_MASK_QUERY_SELECT_COLUMNS","BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE","BUNDLE_MASK_QUERY_COLUMN_MODELS","BUNDLE_MASK_QUERY_FACETS","BUNDLE_MASK_SUM_FILES_SIZE_BYTES","BUNDLE_MASK_LAST_UPDATED_ON","removeBundleFieldsUsingMask","queryResultBundle","partMask","result","cloneDeep","bit","field","getHandlersForTableQuery","response","backendOrigin","getEndpoint","BackendDestinationEnum","asyncJobId","uniqueId","queryBundleRequest","rest","TABLE_QUERY_ASYNC_START","req","res","ctx","ASYNCHRONOUS_JOB_TOKEN","resultBundle","TABLE_QUERY_ASYNC_GET"],"mappings":"yVA4BA,MAAMA,EAA4D,CAChE,CAACC,CAAyB,EAAG,cAC7B,CAACC,CAAuB,EAAG,aAC3B,CAACC,CAAgC,EAAG,gBACpC,CAACC,CAAmC,EAAG,iBACvC,CAACC,CAA+B,EAAG,eACnC,CAACC,CAAwB,EAAG,SAC5B,CAACC,CAAgC,EAAG,eACpC,CAACC,CAA2B,EAAG,eACjC,EAEA,SAASC,EACPC,EACAC,EACmB,CACb,MAAAC,EAASC,EAAUH,CAAiB,EACnC,cAAA,QAAQV,CAAgB,EAAE,QAAQ,CAAC,CAACc,EAAKC,CAAK,IAAM,CACpDJ,EAAW,SAASG,CAAG,GAC1B,OAAOF,EAAOG,CAAK,CACrB,CACD,EACMH,CACT,CAEO,SAASI,EACdC,EACAC,EAAgBC,EAAYC,EAAuB,aAAa,EAChE,CACA,MAAMC,EAAaC,IACf,IAAAC,EAEG,MAAA,CACLC,EAAAA,KAAK,KACH,GAAGN,IAAgBO,EAAwB,KAAK,IAChD,MAAOC,EAAKC,EAAKC,KACfL,EAAqBG,EAAI,KAClBC,EACLC,EAAI,OAAO,GAAG,EACdA,EAAI,KAAiB,CACnB,MAAOP,CAAA,CACR,CAAA,EAGP,EAEAG,EAAAA,KAAK,IACH,GAAGN,IAAgBW,EAAuBR,CAAU,IACpD,MAAOK,EAAKC,EAAKC,IAAQ,CACvB,MAAME,EAAerB,EACnBQ,EACAM,EAAoB,QAAA,EAGf,OAAAI,EACLC,EAAI,OAAO,GAAG,EACdA,EAAI,KAEF,CACA,SAAU,WACV,aAAc,GACd,YAAaL,EACb,KAAM,uCACN,MAAOF,EACP,aAAcS,EACd,gBAAiB,EACjB,UAAW,GACX,UAAW,GACX,gBAAiB,GACjB,gBAAiB,IACjB,cAAe,IACf,UAAW,GACX,aAAc,GACd,aAAc,GACd,UAAW,GAAA,CACZ,CAAA,CAEL,CACF,EAEAN,EAAAA,KAAK,IACH,GAAGN,IAAgBa,EAAsB,MAAOV,CAAU,IAC1D,MAAOK,EAAKC,EAAKC,IAAQ,CACvB,MAAME,EAAerB,EACnBQ,EACAM,EAAoB,QAAA,EAGf,OAAAI,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAwBE,CAAY,CAAC,CACvE,CACF,CAAA,CAEJ"}