{"version":3,"file":"TableColumnSchemaEditor.stories-a3f084eb.js","sources":["../../src/components/TableColumnSchemaEditor/TableColumnSchemaEditor.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useRef } from 'react'\nimport {\n  useGetEntityBundle,\n  useUpdateTableColumns,\n} from '../../synapse-queries'\nimport { SkeletonTable } from '../Skeleton'\nimport { convertToEntityType } from '../../utils/functions/EntityTypeUtils'\nimport TableColumnSchemaForm, { SubmitHandle } from './TableColumnSchemaForm'\nimport { Alert } from '@mui/material'\nimport { getViewScopeForEntity } from './TableColumnSchemaEditorUtils'\nimport { ColumnModel, ViewScope } from '@sage-bionetworks/synapse-types'\nimport { SetOptional } from 'type-fest'\nimport { SynapseSpinner } from '../LoadingScreen/LoadingScreen'\nimport { isUndefined, noop, omitBy } from 'lodash-es'\nimport { ConfirmationDialog } from '../ConfirmationDialog'\n\nexport type TableColumnSchemaEditorProps = {\n  entityId: string\n  open: boolean\n  onColumnsUpdated?: () => void\n  onCancel?: () => void\n}\n\n/**\n * Fetches column model data for a Synapse Table and renders a form to edit the column models.\n * @param props\n * @constructor\n */\nexport default function TableColumnSchemaEditor(\n  props: TableColumnSchemaEditorProps,\n) {\n  const { entityId, open, onColumnsUpdated = noop, onCancel = noop } = props\n\n  const formRef = useRef<SubmitHandle>(null)\n  const { data: bundle, isLoading } = useGetEntityBundle(\n    entityId,\n    undefined,\n    {\n      includeEntity: true,\n      includeTableBundle: true,\n    },\n    {\n      // This data is inserted into a form, so don't refetch it.\n      staleTime: Infinity,\n      useErrorBoundary: true,\n    },\n  )\n\n  const entity = bundle?.entity\n  const originalColumnModels = bundle?.tableBundle?.columnModels\n\n  const {\n    mutate,\n    isLoading: isMutating,\n    error,\n  } = useUpdateTableColumns({\n    onSuccess: () => {\n      onColumnsUpdated()\n    },\n  })\n\n  const onSubmit = useCallback(\n    (newColumnModels: SetOptional<ColumnModel, 'id'>[]) => {\n      // Update the table schema with the new column models.\n      mutate({\n        entityId,\n        originalColumnModels: originalColumnModels!,\n        newColumnModels: newColumnModels.map(cm =>\n          // Remove undefined properties from the new column models\n          omitBy(cm, isUndefined),\n        ) as SetOptional<ColumnModel, 'id'>[],\n      })\n    },\n    [entityId, mutate, originalColumnModels],\n  )\n\n  const viewScope: ViewScope | undefined = useMemo(() => {\n    if (!entity) {\n      return undefined\n    }\n    return getViewScopeForEntity(entity)\n  }, [entity])\n\n  if (isLoading || !bundle || !entity) {\n    return (\n      <SkeletonTable\n        numRows={8}\n        numCols={7}\n        rowHeight={'50px'}\n        fullWidthCells\n      />\n    )\n  }\n\n  return (\n    <ConfirmationDialog\n      open={open}\n      maxWidth={'xl'}\n      title={'Edit Columns'}\n      content={\n        <>\n          <TableColumnSchemaForm\n            ref={formRef}\n            entityType={convertToEntityType(entity.concreteType)}\n            viewScope={viewScope}\n            initialData={bundle?.tableBundle?.columnModels}\n            isSubmitting={isMutating}\n            onSubmit={formData => {\n              onSubmit(formData)\n            }}\n          />\n          {error && (\n            <Alert severity={'error'} sx={{ my: 2 }}>\n              {error?.message}\n            </Alert>\n          )}\n        </>\n      }\n      confirmButtonProps={{\n        children: isMutating ? 'Saving...' : 'Save',\n        disabled: isMutating,\n        startIcon: isMutating ? <SynapseSpinner /> : undefined,\n      }}\n      onConfirm={() => {\n        if (formRef.current) {\n          formRef.current.submit()\n        }\n      }}\n      cancelButtonProps={{\n        disabled: isMutating,\n      }}\n      onCancel={onCancel}\n    />\n  )\n}\n"],"names":["TableColumnSchemaEditor","props","entityId","open","onColumnsUpdated","noop","onCancel","formRef","useRef","bundle","isLoading","useGetEntityBundle","entity","originalColumnModels","_a","mutate","isMutating","error","useUpdateTableColumns","onSubmit","useCallback","newColumnModels","cm","omitBy","isUndefined","viewScope","useMemo","getViewScopeForEntity","jsx","SkeletonTable","ConfirmationDialog","jsxs","Fragment","TableColumnSchemaForm","convertToEntityType","_b","formData","Alert","SynapseSpinner"],"mappings":"qxQA4BA,SAAAA,EAAAC,EAAA,SAGE,KAAA,CAAA,SAAAC,EAAA,KAAAC,EAAA,iBAAAC,EAAAC,EAAA,SAAAC,EAAAD,CAAA,EAAAJ,EAEAM,EAAAC,SAAA,IAAA,EACA,CAAA,KAAAC,EAAA,UAAAC,CAAA,EAAAC,EAAoCT,EAClC,OACA,CACA,cAAA,GACiB,mBAAA,EACK,EACtB,CACA,UAAA,IAEa,iBAAA,EACO,CACpB,EAGFU,EAAAH,GAAA,YAAAA,EAAA,OACAI,GAAAC,EAAAL,GAAA,YAAAA,EAAA,cAAA,YAAAK,EAAA,aAEA,CAAM,OAAAC,EACJ,UAAAC,EACW,MAAAC,CACX,EAAAC,EAAA,CACwB,UAAA,IAAA,CAEtBd,GAAiB,CACnB,CAAA,EAGFe,EAAAC,EAAA,YAAiBC,GAAA,CAGbN,EAAA,CAAO,SAAAb,EACL,qBAAAW,EACA,gBAAAQ,EAAA,IACiCC,GAAIC,EAAAD,EAAAE,CAAA,CAEb,CACxB,CAAA,CACD,EACH,CAAAtB,EAAAa,EAAAF,CAAA,CACuC,EAGzCY,EAAAC,EAAAA,QAAA,IAAA,CACE,GAAAd,EAGA,OAAAe,EAAAf,CAAA,CAAmC,EAAA,CAAAA,CAAA,CAAA,EAGrC,OAAAF,GAAA,CAAAD,GAAA,CAAAG,EACEgB,EACEC,EAAC,CAAA,QAAA,EACU,QAAA,EACA,UAAA,OACE,eAAA,EACG,CAAA,EAKpBD,EACEE,EAAC,CAAA,KAAA3B,EACC,SAAA,KACU,MAAA,eACH,QAAA4B,EAAAC,EAAA,CAAA,SAAA,CAGHJ,EAAAK,EAAC,CAAA,IAAA1B,EACM,WAAA2B,EAAAtB,EAAA,YAAA,EAC8C,UAAAa,EACnD,aAAAU,EAAA1B,GAAA,YAAAA,EAAA,cAAA,YAAA0B,EAAA,aACkC,aAAAnB,EACpB,SAAAoB,GAAA,CAEZjB,EAAAiB,CAAA,CAAiB,CACnB,CAAA,EACFnB,GAAAW,EAAAS,EAAA,CAAA,SAAA,QAAA,GAAA,CAAA,GAAA,CAAA,EAAA,SAAApB,GAAA,YAAAA,EAAA,OAAA,CAAA,CAIE,EAAA,EAEJ,mBAAA,CAEkB,SAAAD,EAAA,YAAA,OACmB,SAAAA,EAC3B,UAAAA,EAAAY,EAAAU,EAAA,CAAA,CAAA,EAAA,MACmC,EAC/C,UAAA,IAAA,CAEE/B,EAAA,SACEA,EAAA,QAAA,QACF,EACF,kBAAA,CACmB,SAAAS,CACP,EACZ,SAAAV,CACA,CAAA,CAGN;;;;;;;;;;;;;;;;;"}