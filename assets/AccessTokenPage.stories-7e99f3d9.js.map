{"version":3,"file":"AccessTokenPage.stories-7e99f3d9.js","sources":["../../src/synapse-queries/user/usePersonalAccessToken.ts","../../src/components/AccessTokenPage/AccessTokenCard.tsx","../../src/components/AccessTokenPage/CreateAccessTokenModal.tsx","../../src/components/AccessTokenPage/AccessTokenPage.tsx"],"sourcesContent":["import {\n  UseInfiniteQueryOptions,\n  useInfiniteQuery,\n  QueryFunctionContext,\n  QueryKey,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { AccessTokenRecordList } from '@sage-bionetworks/synapse-types'\n\nexport function useGetPersonalAccessTokensInfinite(\n  options?: UseInfiniteQueryOptions<AccessTokenRecordList, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<AccessTokenRecordList, SynapseClientError>(\n    keyFactory.getPersonalAccessTokensQueryKey(),\n    async (context: QueryFunctionContext<QueryKey, string | undefined>) => {\n      return await SynapseClient.getPersonalAccessTokenRecords(\n        accessToken,\n        context.pageParam,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n","import dayjs from 'dayjs'\nimport React, { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useErrorHandler } from 'react-error-boundary'\nimport SynapseClient from '../../synapse-client'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { AccessTokenRecord } from '@sage-bionetworks/synapse-types'\nimport { scopeDescriptions } from '@sage-bionetworks/synapse-types'\nimport { Tooltip } from '@mui/material'\nimport IconSvg from '../IconSvg/IconSvg'\nimport WarningDialog from '../SynapseForm/WarningDialog'\nimport relativeTime from 'dayjs/plugin/relativeTime'\n\ndayjs.extend(relativeTime)\n\nexport type AccessTokenCardProps = {\n  /** Record referring to an access token, not a token itself */\n  accessToken: AccessTokenRecord\n  onDelete: (...args: any[]) => void\n}\n\nexport const AccessTokenCard: React.FunctionComponent<AccessTokenCardProps> = ({\n  accessToken,\n  onDelete,\n}: AccessTokenCardProps) => {\n  const { accessToken: authToken } = useSynapseContext()\n  const [showModal, setShowModal] = useState(false)\n  const handleError = useErrorHandler()\n\n  const isExpired = accessToken.state === 'EXPIRED'\n\n  return (\n    <div\n      className={\n        'cardContainer PersonalAccessTokenCard' +\n        (isExpired ? ' bg-warning' : '')\n      }\n    >\n      <WarningDialog\n        title={'Confirm Deletion'}\n        content={\n          <>\n            <p>\n              If you delete this token, any applications using it will stop\n              working. This action cannot be undone.\n            </p>\n            <p className=\"SRC-boldText\">\n              Are you sure you want to delete this token?\n            </p>\n          </>\n        }\n        confirmButtonText={'Delete Token'}\n        onCancel={() => setShowModal(false)}\n        onConfirm={(id: string) => {\n          SynapseClient.deletePersonalAccessToken(id, authToken)\n            .then(() => {\n              onDelete()\n              setShowModal(false)\n            })\n            .catch(error => {\n              handleError(error)\n            })\n        }}\n        confirmButtonColor=\"error\"\n        open={showModal}\n        onConfirmCallbackArgs={[accessToken.id, authToken]}\n      />\n\n      <div className=\"SRC-cardContent\">\n        <div className=\"SRC-eqHeightRow SRC-userCardName\">\n          <span className={'SRC-blackText'}>{accessToken.name}</span>\n          {isExpired && (\n            <Tooltip\n              title=\"This token has expired. It no longer works and can only be deleted.\"\n              enterNextDelay={100}\n            >\n              <span aria-hidden=\"true\">\n                <IconSvg icon=\"warning\" />\n              </span>\n            </Tooltip>\n          )}\n        </div>\n\n        <div className=\"SRC-eqHeightRow\">\n          <span>Permissions: </span>\n          {accessToken.scopes.map(scope => {\n            return (\n              <span\n                className=\"PersonalAccessTokenCard__ScopeName SRC-primary-text-color SRC-primary-color-hover SRC-hand-cursor SRC-inlineFlex\"\n                data-tip={scopeDescriptions[scope].description}\n                key={scope}\n              >\n                {scopeDescriptions[scope].displayName}\n              </span>\n            )\n          })}\n        </div>\n        <div className=\"SRC-eqHeightRow\">\n          <span>Last used {dayjs(accessToken.lastUsed).fromNow()}</span>\n          <span className={'SRC-deemphasized-text'}>{' | '}</span>\n          <span>Created {dayjs(accessToken.createdOn).fromNow()}</span>\n        </div>\n      </div>\n      {/* Delete button */}\n      <div className=\"PersonalAccessTokenCard__DeleteButton\">\n        <Button\n          variant=\"default\"\n          aria-label=\"delete\"\n          onClick={() => {\n            if (isExpired) {\n              // token no longer works, no need for warning/confirmation\n              SynapseClient.deletePersonalAccessToken(accessToken.id, authToken)\n                .then(() => {\n                  onDelete()\n                })\n                .catch(error => {\n                  handleError(error)\n                })\n            } else {\n              setShowModal(true)\n            }\n          }}\n        >\n          <IconSvg icon=\"delete\" aria-hidden=\"true\" />\n        </Button>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Typography } from '@mui/material'\nimport SynapseClient from '../../synapse-client'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { AccessTokenGenerationRequest } from '@sage-bionetworks/synapse-types'\nimport { scopeDescriptions } from '@sage-bionetworks/synapse-types'\nimport { CopyToClipboardInput } from '../CopyToClipboardInput'\nimport { ErrorBanner } from '../error/ErrorBanner'\nimport loadingScreen from '../LoadingScreen'\nimport { Checkbox } from '../widgets/Checkbox'\nimport { ConfirmationDialog } from '../ConfirmationDialog/ConfirmationDialog'\nimport TextField from '../TextField/TextField'\n\nconst INVALID_INPUT_MSG =\n  'You must provide a token name and at least one permission.'\n\nexport type CreateAccessTokenModalProps = {\n  onClose: (...args: any[]) => void\n  onCreate: (...args: any[]) => void\n}\n\nexport const CreateAccessTokenModal: React.FunctionComponent<\n  CreateAccessTokenModalProps\n> = ({ onClose, onCreate }: CreateAccessTokenModalProps) => {\n  const { accessToken } = useSynapseContext()\n  const [tokenName, setTokenName] = React.useState('')\n  const [viewAccess, setViewAccess] = React.useState(true)\n  const [downloadAccess, setDownloadAccess] = React.useState(false)\n  const [modifyAccess, setModifyAccess] = React.useState(false)\n\n  const [isLoading, setIsLoading] = React.useState(false)\n\n  const [showCreatedToken, setShowCreatedToken] = React.useState(false)\n  const [createdToken, setCreatedToken] = React.useState('')\n\n  const [errorMessage, setErrorMessage] = React.useState('')\n  const [showErrorMessage, setShowErrorMessage] = React.useState(false)\n\n  const handleTokenNameChange = (event: React.ChangeEvent) => {\n    setTokenName((event.target as HTMLInputElement).value)\n  }\n\n  const validateInput = (tokenName: string, access: boolean[]): boolean => {\n    return !!tokenName && access.some(x => x)\n  }\n\n  const onSubmit = async (): Promise<void> => {\n    if (validateInput(tokenName, [viewAccess, downloadAccess, modifyAccess])) {\n      try {\n        const request: AccessTokenGenerationRequest = {\n          scope: [],\n          name: tokenName,\n        }\n        if (viewAccess) request.scope.push('view')\n        if (downloadAccess) request.scope.push('download')\n        if (modifyAccess) request.scope.push('modify')\n\n        setIsLoading(true)\n\n        const response = await SynapseClient.createPersonalAccessToken(\n          request,\n          accessToken,\n        )\n\n        setIsLoading(false)\n        setCreatedToken(response.token)\n        setShowCreatedToken(true)\n        onCreate()\n      } catch (err) {\n        setIsLoading(false)\n        setErrorMessage(err.reason)\n        setShowErrorMessage(true)\n      }\n    } else {\n      setErrorMessage(INVALID_INPUT_MSG)\n      setShowErrorMessage(true)\n    }\n  }\n\n  const dialogContent = showCreatedToken ? (\n    <>\n      <span className=\"SRC-boldText\">\n        This token will not be able to be retrieved again.\n      </span>{' '}\n      <span>\n        If needed, generate a new personal access token, and delete this one.\n      </span>\n      <div className=\"AccessTokenModal__CopyToClipboardContainer\">\n        <CopyToClipboardInput value={createdToken} inputWidth={'350px'} />\n      </div>\n      <p>\n        This token grants access to your account functions and should be treated\n        like a password.\n      </p>\n    </>\n  ) : (\n    <div className=\"SRC-marginFive\">\n      <TextField\n        autoFocus\n        label=\"Token Name\"\n        value={tokenName}\n        onChange={handleTokenNameChange}\n        placeholder=\"e.g. Synapse command line access on my laptop\"\n      />\n      <div className=\"AccessTokenModal SRC-marginBottomTop\">\n        <Typography variant=\"label\">Token Permissions</Typography>\n        <Checkbox\n          label={scopeDescriptions.view.displayName}\n          checked={viewAccess}\n          onChange={() => setViewAccess(!viewAccess)}\n        >\n          <div className=\"AccessTokenModal__ScopeDescription\">\n            {scopeDescriptions.view.description}. Required to use Synapse\n            programmatic clients.\n          </div>\n        </Checkbox>\n        <Checkbox\n          label={scopeDescriptions.download.displayName}\n          checked={downloadAccess}\n          onChange={() => setDownloadAccess(!downloadAccess)}\n        >\n          <div className=\"AccessTokenModal__ScopeDescription\">\n            {scopeDescriptions.download.description}\n          </div>\n        </Checkbox>\n        <Checkbox\n          label={scopeDescriptions.modify.displayName}\n          checked={modifyAccess}\n          onChange={() => setModifyAccess(!modifyAccess)}\n        >\n          <div className=\"AccessTokenModal__ScopeDescription\">\n            {scopeDescriptions.modify.description}\n          </div>\n        </Checkbox>\n      </div>\n      {showErrorMessage && <ErrorBanner error={errorMessage}></ErrorBanner>}\n    </div>\n  )\n\n  return (\n    <ConfirmationDialog\n      open={true}\n      title=\"Create New Personal Access Token\"\n      content={isLoading ? loadingScreen : dialogContent}\n      confirmButtonText={showCreatedToken ? 'Close' : 'Create Token'}\n      confirmButtonVariant={showCreatedToken ? 'outlined' : 'contained'}\n      hasCancelButton={!showCreatedToken}\n      onCancel={onClose}\n      onConfirm={\n        showCreatedToken\n          ? () => onClose()\n          : () => {\n              void onSubmit()\n            }\n      }\n    />\n  )\n}\n","import React, { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useGetPersonalAccessTokensInfinite } from '../../synapse-queries/user/usePersonalAccessToken'\nimport { ErrorBanner, SynapseErrorBoundary } from '../error/ErrorBanner'\nimport loadingScreen from '../LoadingScreen'\nimport { AccessTokenCard } from './AccessTokenCard'\nimport { CreateAccessTokenModal } from './CreateAccessTokenModal'\n\nexport type AccessTokenPageProps = {\n  title: string\n  body: string | JSX.Element\n}\n\nexport const AccessTokenPage: React.FunctionComponent<AccessTokenPageProps> = ({\n  title,\n  body,\n}: AccessTokenPageProps) => {\n  const [showCreateTokenModal, setShowCreateTokenModal] = useState(false)\n\n  const {\n    data: infiniteData,\n    isLoading,\n    error,\n    refetch,\n    fetchNextPage,\n    hasNextPage,\n  } = useGetPersonalAccessTokensInfinite()\n\n  // We rerender the list whenever a token is created or deleted to ensure we are up-to-date\n  const rerenderList = () => {\n    refetch()\n  }\n\n  const tokenRecords = infiniteData?.pages.flatMap(page => page.results) ?? []\n\n  return (\n    <div className=\"PersonalAccessTokenPage bootstrap-4-backport\">\n      <div className=\"PersonalAccessTokenPage__Header\">\n        <div className=\"PersonalAccessTokenPage__Header__CopyText\">\n          <h1>{title}</h1>\n          {body}\n        </div>\n        <div className=\"PersonalAccessTokenPage__Header__CreateButton\">\n          <Button\n            variant=\"sds-primary\"\n            onClick={() => setShowCreateTokenModal(true)}\n          >\n            Create New Token\n          </Button>\n        </div>\n      </div>\n      <SynapseErrorBoundary>\n        {showCreateTokenModal && (\n          <CreateAccessTokenModal\n            onClose={() => setShowCreateTokenModal(false)}\n            onCreate={rerenderList}\n          ></CreateAccessTokenModal>\n        )}\n\n        <div>\n          {!isLoading && tokenRecords.length === 0 && (\n            <div className=\"PersonalAccessTokenPage__NoTokensMessage SRC-text-title\">\n              You currently have no personal access tokens.\n            </div>\n          )}\n          <div className=\"PersonalAccessTokenPage__CardList\">\n            {tokenRecords.map(accessToken => {\n              return (\n                <AccessTokenCard\n                  key={accessToken.id}\n                  accessToken={accessToken}\n                  onDelete={rerenderList}\n                />\n              )\n            })}\n            {isLoading && loadingScreen}\n            {!isLoading && hasNextPage && !error && (\n              <div className=\"PersonalAccessTokenPage__CardList__LoadMore\">\n                <Button\n                  className=\"PersonalAccessTokenPage__CardList__LoadMore__Button\"\n                  variant=\"sds-primary\"\n                  onClick={() => {\n                    fetchNextPage()\n                  }}\n                >\n                  Load More\n                </Button>\n              </div>\n            )}\n          </div>\n          {error && <ErrorBanner error={error}></ErrorBanner>}\n        </div>\n      </SynapseErrorBoundary>\n    </div>\n  )\n}\n"],"names":["useGetPersonalAccessTokensInfinite","options","accessToken","keyFactory","useSynapseContext","useInfiniteQuery","context","SynapseClient","page","dayjs","relativeTime","AccessTokenCard","onDelete","authToken","showModal","setShowModal","useState","handleError","useErrorHandler","isExpired","jsxs","jsx","WarningDialog","Fragment","id","error","Tooltip","IconSvg","scope","scopeDescriptions","Button","INVALID_INPUT_MSG","CreateAccessTokenModal","onClose","onCreate","tokenName","setTokenName","React","viewAccess","setViewAccess","downloadAccess","setDownloadAccess","modifyAccess","setModifyAccess","isLoading","setIsLoading","showCreatedToken","setShowCreatedToken","createdToken","setCreatedToken","errorMessage","setErrorMessage","showErrorMessage","setShowErrorMessage","handleTokenNameChange","event","validateInput","tokenName2","access","x","onSubmit","request","response","err","dialogContent","CopyToClipboardInput","TextField","Typography","Checkbox","ErrorBanner","ConfirmationDialog","loadingScreen","AccessTokenPage","title","body","showCreateTokenModal","setShowCreateTokenModal","infiniteData","refetch","fetchNextPage","hasNextPage","rerenderList","tokenRecords","SynapseErrorBoundary"],"mappings":"4iMAWO,SAASA,GACdC,EACA,CACA,KAAM,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAAIC,EAAkB,EAC/C,OAAAC,EACLF,EAAW,gCAAgC,EAC3C,MAAOG,GACE,MAAMC,EAAc,8BACzBL,EACAI,EAAQ,SAAA,EAGZ,CACE,GAAGL,EACH,oBAA0BO,EAAK,aACjC,CAAA,CAEJ,CCfAC,EAAA,OAAAC,CAAA,EAQO,MAAAC,EAAA,CAAA,CAAwE,YAAAT,EAC7E,SAAAU,CAEF,IAAA,CACE,KAAA,CAAA,YAAAC,CAAA,EAAAT,EAAA,EACA,CAAAU,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACAC,EAAAC,IAEAC,EAAAjB,EAAA,QAAA,UAEA,OAAAkB,EACE,MAAC,CAAA,UAAA,yCAAAD,EAAA,cAAA,IAGgC,SAAA,CAG/BE,EAAAC,EAAC,CAAA,MAAA,mBACQ,QAAAF,EAAAG,EAAA,CAAA,SAAA,CAGHF,EAAA,IAAA,CAAA,SAAA,sGAAA,CAAA,EAGAA,EAAA,IAAA,CAAA,UAAA,eAAA,SAAA,8CAAA,CAGA,EAAA,EACF,kBAAA,eAEiB,SAAA,IAAAN,EAAA,EAAA,EACe,UAAAS,GAAA,CAEhCjB,EAAA,0BAAAiB,EAAAX,CAAA,EAAA,KAAA,IAAA,CAEID,IACAG,EAAA,EAAA,CAAkB,CAAA,EAAA,MAAAU,GAAA,CAGlBR,EAAAQ,CAAA,CAAiB,CAAA,CAClB,EACL,mBAAA,QACmB,KAAAX,EACb,sBAAA,CAAAZ,EAAA,GAAAW,CAAA,CAC2C,CAAA,EACnDO,EAAA,MAAA,CAAA,UAAA,kBAAA,SAAA,CAGEA,EAAA,MAAA,CAAA,UAAA,mCAAA,SAAA,CACEC,EAAA,OAAA,CAAA,UAAA,gBAAA,SAAAnB,EAAA,KAAA,EAAoDiB,GAAAE,EAElDK,GAAC,CAAA,MAAA,sEACO,eAAA,IACU,SAAAL,EAAA,OAAA,CAAA,cAAA,OAAA,SAAAA,EAAAM,EAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,CAIhB,CAAA,CACF,EAAA,EAEJP,EAAA,MAAA,CAAA,UAAA,kBAAA,SAAA,CAGEC,EAAA,OAAA,CAAA,SAAA,eAAA,CAAA,EAAmBnB,EAAA,OAAA,IAAA0B,GAEjBP,EACE,OAAC,CAAA,UAAA,mHACW,WAAAQ,EAAAD,CAAA,EAAA,YACyB,SAAAC,EAAAD,CAAA,EAAA,WAGT,EAAAA,CAFrB,CAGP,CAEH,EAAA,EACHR,EAAA,MAAA,CAAA,UAAA,kBAAA,SAAA,CAEEA,EAAA,OAAA,CAAA,SAAA,CAAM,aAAAX,EAAAP,EAAA,QAAA,EAAA,QAAA,CAA+C,EAAA,EAAEmB,EAAA,OAAA,CAAA,UAAA,wBAAA,SAAA,MAAA,EACND,EAAA,OAAA,CAAA,SAAA,CAC3C,WAAAX,EAAAP,EAAA,SAAA,EAAA,QAAA,CAA8C,EAAA,CAAE,EAAA,CACxD,EAAA,EACFmB,EAAA,MAAA,CAAA,UAAA,wCAAA,SAAAA,EAGES,EAAC,CAAA,QAAA,UACS,aAAA,SACG,QAAA,IAAA,CAETX,EAEEZ,EAAA,0BAAAL,EAAA,GAAAW,CAAA,EAAA,KAAA,IAAA,CAEID,GAAS,CAAA,EAAA,MAAAa,GAAA,CAGTR,EAAAQ,CAAA,CAAiB,CAAA,EAGrBV,EAAA,EAAA,CACF,EACF,SAAAM,EAAAM,EAAA,CAAA,KAAA,SAAA,cAAA,OAAA,CAE0C,CAAA,EAAA,CAE9C,CAAA,CAAA,CAGN,uYCnHA,MAAAI,GAAA,6DAQOC,EAAA,CAAA,CAAA,QAAAC,EAAA,SAAAC,KAAA,CAGL,KAAA,CAAA,YAAAhC,GAAAE,IACA,CAAA+B,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EACA,CAAAG,EAAAC,CAAA,EAAAJ,EAAA,SAAA,EAAA,EACA,CAAAK,EAAAC,CAAA,EAAAN,EAAA,SAAA,EAAA,EAEA,CAAAO,EAAAC,CAAA,EAAAR,EAAA,SAAA,EAAA,EAEA,CAAAS,EAAAC,CAAA,EAAAV,EAAA,SAAA,EAAA,EACA,CAAAW,EAAAC,CAAA,EAAAZ,EAAA,SAAA,EAAA,EAEA,CAAAa,EAAAC,CAAA,EAAAd,EAAA,SAAA,EAAA,EACA,CAAAe,EAAAC,CAAA,EAAAhB,EAAA,SAAA,EAAA,EAEAiB,EAAAC,GAAA,CACEnB,EAAAmB,EAAA,OAAA,KAAA,CAAqD,EAGvDC,EAAA,CAAAC,EAAAC,IACE,CAAA,CAAAD,GAAAC,EAAA,KAAAC,GAAAA,CAAA,EAGFC,EAAA,SAAA,CACE,GAAAJ,EAAArB,EAAA,CAAAG,EAAAE,EAAAE,CAAA,CAAA,EACE,GAAA,CACE,MAAAmB,EAAA,CAA8C,MAAA,CAAA,EACpC,KAAA1B,CACF,EAERG,GAAgBuB,EAAA,MAAA,KAAA,MAAA,EAChBrB,GAAoBqB,EAAA,MAAA,KAAA,UAAA,EACpBnB,GAAkBmB,EAAA,MAAA,KAAA,QAAA,EAElBhB,EAAA,EAAA,EAEA,MAAAiB,EAAA,MAAAvD,EAAA,0BAAqCsD,EACnC3D,CACA,EAGF2C,EAAA,EAAA,EACAI,EAAAa,EAAA,KAAA,EACAf,EAAA,EAAA,EACAb,GAAS,OAAA6B,EAAA,CAETlB,EAAA,EAAA,EACAM,EAAAY,EAAA,MAAA,EACAV,EAAA,EAAA,CAAwB,MAG1BF,EAAApB,EAAA,EACAsB,EAAA,EAAA,CACF,EAGFW,EAAAlB,EAAA1B,EAAAG,EAAA,CAAA,SAAA,CAEIF,EAAA,OAAA,CAAA,UAAA,eAAA,SAAA,qDAAA,EAEA,IAAQA,EAAA,OAAA,CAAA,SAAA,uEAAA,CAAA,EAGRA,EAAA,MAAA,CAAA,UAAA,6CAAA,SAAAA,EAAA4C,GAAA,CAAA,MAAAjB,EAAA,WAAA,OAAA,CAAA,CAAA,CAAA,EAGA3B,EAAA,IAAA,CAAA,SAAA,2FAAA,CAAA,CAIA,CAAA,CAAA,EAAAD,EAAA,MAAA,CAAA,UAAA,iBAAA,SAAA,CAIAC,EAAA6C,GAAC,CAAA,UAAA,GACU,MAAA,aACH,MAAA/B,EACC,SAAAmB,EACG,YAAA,+CACE,CAAA,EACdlC,EAAA,MAAA,CAAA,UAAA,uCAAA,SAAA,CAEEC,EAAA8C,GAAA,CAAA,QAAA,QAAA,SAAA,oBAAA,EAA6C9C,EAC7C+C,EAAC,CAAA,MAAAvC,EAAA,KAAA,YAC+B,QAAAS,EACrB,SAAA,IAAAC,EAAA,CAAAD,CAAA,EACgC,SAAAlB,EAAA,MAAA,CAAA,UAAA,qCAAA,SAAA,CAGtCS,EAAA,KAAA,YAAuB,iDAAY,EAAA,CAEtC,CAAA,EACFR,EACA+C,EAAC,CAAA,MAAAvC,EAAA,SAAA,YACmC,QAAAW,EACzB,SAAA,IAAAC,EAAA,CAAAD,CAAA,EACwC,SAAAnB,EAAA,MAAA,CAAA,UAAA,qCAAA,SAAAQ,EAAA,SAAA,YAAA,CAIjD,CAAA,EACFR,EACA+C,EAAC,CAAA,MAAAvC,EAAA,OAAA,YACiC,QAAAa,EACvB,SAAA,IAAAC,EAAA,CAAAD,CAAA,EACoC,SAAArB,EAAA,MAAA,CAAA,UAAA,qCAAA,SAAAQ,EAAA,OAAA,YAAA,CAI7C,CAAA,CACF,EAAA,EACFuB,GAAA/B,EAAAgD,EAAA,CAAA,MAAAnB,CAAA,CAAA,CACuD,CAAA,CAAA,EAI3D,OAAA7B,EACEiD,GAAC,CAAA,KAAA,GACO,MAAA,mCACA,QAAA1B,EAAA2B,EAAAP,EAC+B,kBAAAlB,EAAA,QAAA,eACW,qBAAAA,EAAA,WAAA,YACM,gBAAA,CAAAA,EACpC,SAAAb,EACR,UAAAa,EAAA,IAAAb,EAAA,EAAA,IAAA,CAKF2B,EAAA,CAAc,CAChB,CAAA,CAIZ,6VChJO,MAAAY,EAAA,CAAA,CAAwE,MAAAC,EAC7E,KAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAA5D,EAAA,SAAA,EAAA,EAEA,CAAM,KAAA6D,EACE,UAAAjC,EACN,MAAAnB,EACA,QAAAqD,EACA,cAAAC,EACA,YAAAC,CACA,EAAAhF,GAAA,EAIFiF,EAAA,IAAA,CACEH,GAAQ,EAGVI,GAAAL,GAAA,YAAAA,EAAA,MAAA,QAAArE,GAAAA,EAAA,WAAA,GAEA,OAAAY,EAAA,MAAA,CAAA,UAAA,+CAAA,SAAA,CAEIA,EAAA,MAAA,CAAA,UAAA,kCAAA,SAAA,CACEA,EAAA,MAAA,CAAA,UAAA,4CAAA,SAAA,CACEC,EAAA,KAAA,CAAA,SAAAoD,CAAA,CAAA,EAAWC,CACV,EAAA,EACHrD,EAAA,MAAA,CAAA,UAAA,gDAAA,SAAAA,EAEES,EAAC,CAAA,QAAA,cACS,QAAA,IAAA8C,EAAA,EAAA,EACmC,SAAA,kBAC5C,CAAA,EAAA,CAGH,EAAA,EACFxD,EAAA+D,EAAA,CAAA,SAAA,CAEGR,GAAAtD,EACCW,EAAC,CAAA,QAAA,IAAA4C,EAAA,EAAA,EAC6C,SAAAK,CAClC,CAAA,EACX7D,EAAA,MAAA,CAAA,SAAA,CAIA,CAAAwB,GAAAsC,EAAA,SAAA,GAAA7D,EAAA,MAAA,CAAA,UAAA,0DAAA,SAAA,+CAAA,CAAA,EAGCD,EAAA,MAAA,CAAA,UAAA,oCAAA,SAAA,CAGC8D,EAAA,IAAAhF,GACCmB,EACEV,EAAC,CAAA,YAAAT,EAEC,SAAA+E,CACU,EAAA/E,EAAA,EAFO,CAGnB,EAEH0C,GAAA2B,EACa,CAAA3B,GAAAoC,GAAA,CAAAvD,GAAAJ,EAAA,MAAA,CAAA,UAAA,8CAAA,SAAAA,EAGVS,EAAC,CAAA,UAAA,sDACW,QAAA,cACF,QAAA,IAAA,CAENiD,GAAc,EAChB,SAAA,WACD,CAAA,EAAA,CAGH,EAAA,EAEJtD,GAAAJ,EAAAgD,EAAA,CAAA,MAAA5C,CAAA,CAAA,CACqC,EAAA,CACvC,EAAA,CACF,CAAA,CAAA,CAGN;;;;;"}