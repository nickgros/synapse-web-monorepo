{"version":3,"file":"EntityModal-f961e42a.js","sources":["../../src/components/entity/metadata/AnnotationsTable.tsx","../../src/components/entity/metadata/MetadataTable.tsx","../../src/components/entity/metadata/EntityModal.tsx"],"sourcesContent":["import React from 'react'\nimport { isEmpty } from 'lodash-es'\nimport {\n  convertToEntityType,\n  entityTypeToFriendlyName,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport { useGetSchemaBinding } from '../../../synapse-queries/entity/useEntityBoundSchema'\nimport { useSynapseContext } from '../../../utils/context/SynapseContext'\nimport { useGetJson } from '../../../synapse-queries/entity/useEntity'\nimport { SkeletonTable } from '../../Skeleton/SkeletonTable'\n\nexport type AnnotationsTableProps = {\n  readonly entityId: string\n  readonly versionNumber?: number\n}\n\nexport const AnnotationsTable: React.FC<AnnotationsTableProps> = ({\n  entityId,\n}) => {\n  /**\n   * Currently, schema/validation features are only shown in experimental mode.\n   */\n  const { isInExperimentalMode } = useSynapseContext()\n\n  // TODO: Support versioned annotations, see PLFM-7290\n  const { entityMetadata, annotations, isLoading } = useGetJson(entityId)\n\n  const { data: boundSchema } = useGetSchemaBinding(entityId, {\n    enabled: isInExperimentalMode,\n  })\n\n  return isLoading ? (\n    <SkeletonTable numRows={3} numCols={2} />\n  ) : (\n    <>\n      {entityMetadata && annotations && isEmpty(annotations) ? (\n        <div className=\"placeholder\">\n          This{' '}\n          {entityTypeToFriendlyName(\n            convertToEntityType(entityMetadata.concreteType),\n          )}{' '}\n          has no annotations.\n        </div>\n      ) : null}\n      <table className=\"AnnotationsTable\">\n        <tbody>\n          {annotations &&\n            Object.keys(annotations).map((key: string) => {\n              return (\n                <tr key={key} className=\"AnnotationsTable__Row\">\n                  <td className=\"AnnotationsTable__Row__Key\">{key}</td>\n                  <td className=\"AnnotationsTable__Row__Value\">\n                    {Array.isArray(annotations[key])\n                      ? (\n                          annotations[key] as string[] | number[] | boolean[]\n                        ).join(', ')\n                      : annotations[key]!.toString()}\n                  </td>\n                </tr>\n              )\n            })}\n          {boundSchema && isInExperimentalMode ? (\n            <tr className=\"AnnotationsTable__Row\">\n              <td className=\"AnnotationsTable__Row__Key Schema\">\n                Validation Schema\n              </td>\n              <td className=\"AnnotationsTable__Row__Value\">\n                <a\n                  href={`${getEndpoint(\n                    BackendDestinationEnum.REPO_ENDPOINT,\n                  )}repo/v1/schema/type/registered/${\n                    boundSchema.jsonSchemaVersionInfo.$id\n                  }`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {boundSchema.jsonSchemaVersionInfo.schemaName}\n                </a>\n              </td>\n            </tr>\n          ) : null}\n        </tbody>\n      </table>\n    </>\n  )\n}\n","import dayjs from 'dayjs'\nimport React from 'react'\nimport { formatDate } from '../../../utils/functions/DateFormatter'\nimport {\n  entityTypeToFriendlyName,\n  getVersionDisplay,\n  isVersionableEntity,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  getDataFileHandle,\n  getStorageLocationName,\n} from '../../../utils/functions/FileHandleUtils'\nimport useGetEntityBundle from '../../../synapse-queries/entity/useEntityBundle'\nimport UserCard from '../../UserCard/UserCard'\n\nexport type MetadataTableProps = {\n  readonly entityId: string\n  readonly versionNumber?: number\n}\n\nexport const MetadataTable = ({\n  entityId,\n  versionNumber,\n}: MetadataTableProps) => {\n  const { data: entityBundle } = useGetEntityBundle(entityId, versionNumber)\n\n  const isVersionable = entityBundle && isVersionableEntity(entityBundle.entity)\n\n  const dataFileHandle = entityBundle\n    ? getDataFileHandle(entityBundle)\n    : undefined\n\n  let fileLocationName = undefined\n  if (dataFileHandle) {\n    fileLocationName = getStorageLocationName(dataFileHandle)\n  }\n\n  return entityBundle ? (\n    <table className=\"MetadataTable\">\n      <tbody>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Name</td>\n          <td className=\"MetadataTable__Row__Value\">\n            {entityBundle.entity?.name}\n          </td>\n        </tr>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Type</td>\n          <td className=\"MetadataTable__Row__Value\">\n            {entityTypeToFriendlyName(entityBundle.entityType)}\n          </td>\n        </tr>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Synapse ID</td>\n          <td className=\"MetadataTable__Row__Value\">\n            {entityBundle.entity?.id}\n          </td>\n        </tr>\n        {isVersionable && (\n          <tr className=\"MetadataTable__Row\">\n            <td className=\"MetadataTable__Row__Key\">Version</td>\n            <td className=\"MetadataTable__Row__Value\">\n              {getVersionDisplay(entityBundle.entity)}\n            </td>\n          </tr>\n        )}\n        {fileLocationName && (\n          <tr className=\"MetadataTable__Row\">\n            <td className=\"MetadataTable__Row__Key\">Storage</td>\n            <td className=\"MetadataTable__Row__Value\">{fileLocationName}</td>\n          </tr>\n        )}\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\"> Last Modified By</td>\n          <td className=\"MetadataTable__Row__Value\">\n            <UserCard\n              size=\"SMALL USER CARD\"\n              ownerId={entityBundle.entity?.modifiedBy}\n            />{' '}\n            at {formatDate(dayjs(entityBundle.entity?.modifiedOn))}\n          </td>\n        </tr>\n        <tr className=\"MetadataTable__Row\">\n          <td className=\"MetadataTable__Row__Key\">Created By</td>\n          <td className=\"MetadataTable__Row__Value\">\n            <UserCard\n              size=\"SMALL USER CARD\"\n              ownerId={entityBundle.entity?.createdBy}\n            />{' '}\n            at {formatDate(dayjs(entityBundle.entity?.createdOn))}\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  ) : null\n}\n","import Skeleton from '@mui/material/Skeleton'\nimport Form from '@rjsf/core'\nimport React, { useRef, useState } from 'react'\nimport {\n  entityTypeToFriendlyName,\n  isVersionableEntityType,\n} from '../../../utils/functions/EntityTypeUtils'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../../utils/functions/getEndpoint'\nimport useGetEntityBundle from '../../../synapse-queries/entity/useEntityBundle'\nimport { VersionableEntity } from '@sage-bionetworks/synapse-types'\nimport { SynapseErrorBoundary } from '../../error/ErrorBanner'\nimport { displayToast } from '../../ToastMessage/ToastMessage'\nimport { SchemaDrivenAnnotationEditor } from '../../SchemaDrivenAnnotationEditor/SchemaDrivenAnnotationEditor'\nimport { AnnotationsTable } from './AnnotationsTable'\nimport { MetadataTable } from './MetadataTable'\nimport { Button, Tooltip } from '@mui/material'\nimport { DialogBase } from '../../DialogBase'\n\nexport const EntityModalTabs = [\n  // non-annotation metadata about the entity\n  'METADATA',\n  // annotation and schema information\n  'ANNOTATIONS',\n  // TODO: Access -- we haven't yet built a viewer/editor for ACLs in SRC -- consider a redesign before building\n  //'ACCESS', // ACLs (and maybe ARs?)\n  // TODO: Previews - we would need preview renderers that accomplish feature parity with SWC\n  //'PREVIEW' // should only show this tab if a preview exists\n] as const\ntype EntityModalTab = (typeof EntityModalTabs)[number]\n\nexport type EntityModalProps = {\n  readonly show: boolean\n  readonly entityId: string\n  readonly versionNumber?: number\n  readonly onClose: () => void\n  readonly initialTab?: EntityModalTab\n  readonly showTabs?: boolean\n}\n\nexport function EntityModal(props: EntityModalProps) {\n  const {\n    entityId,\n    versionNumber,\n    show,\n    onClose,\n    initialTab = 'METADATA',\n    showTabs = true,\n  } = props\n  const annotationEditorFormRef = useRef<Form>(null)\n\n  const [currentTab, setCurrentTab] = useState<EntityModalTab>(initialTab)\n  const [isInEditMode, setIsInEditMode] = useState(false)\n  const [hasClickedCancel, setHasClickedCancel] = useState(false)\n\n  const { data: entityBundle } = useGetEntityBundle(entityId, versionNumber)\n  const canEdit = entityBundle && entityBundle.permissions.canEdit\n\n  const isVersionable =\n    entityBundle && isVersionableEntityType(entityBundle.entityType)\n\n  const isLatestVersion =\n    isVersionable && (entityBundle.entity as VersionableEntity).isLatestVersion!\n\n  const showOpenEntityPageButton =\n    currentTab === 'METADATA' &&\n    entityBundle &&\n    !window.location.href.includes(entityId)\n  const openEntityPageButton = (\n    <Button\n      variant={'contained'}\n      onClick={() =>\n        window.open(\n          `${getEndpoint(\n            BackendDestinationEnum.PORTAL_ENDPOINT,\n          )}#!Synapse:${entityId}`,\n          '_blank',\n          'noopener',\n        )\n      }\n    >\n      Open{' '}\n      {entityBundle ? entityTypeToFriendlyName(entityBundle?.entityType) : ''}\n    </Button>\n  )\n\n  const showSaveAnnotationsButton = currentTab === 'ANNOTATIONS' && isInEditMode\n  const saveAnnotationsButton = (\n    <Button\n      variant={'contained'}\n      onClick={() => {\n        // Workaround for https://github.com/rjsf-team/react-jsonschema-form/issues/3121\n        ;(\n          annotationEditorFormRef.current as any\n        ).formElement.current.requestSubmit()\n      }}\n    >\n      Save Annotations\n    </Button>\n  )\n\n  const showCancelAnnotationEditsButton =\n    currentTab === 'ANNOTATIONS' && isInEditMode\n  const cancelAnnotationEditsButton = (\n    <Button\n      variant={'outlined'}\n      onClick={() => {\n        if (hasClickedCancel) {\n          setIsInEditMode(false)\n        }\n        setHasClickedCancel(!hasClickedCancel)\n      }}\n    >\n      {hasClickedCancel\n        ? 'Are you sure? Unsaved changes will be lost'\n        : 'Cancel'}\n    </Button>\n  )\n\n  const showEditAnnotationsButton =\n    canEdit && currentTab === 'ANNOTATIONS' && !isInEditMode\n  const editAnnotationsButton = (\n    <Tooltip\n      title={\n        isVersionable && !isLatestVersion\n          ? 'Annotations can only be edited on the latest version'\n          : undefined\n      }\n    >\n      <Button\n        variant={'contained'}\n        disabled={isVersionable && !isLatestVersion}\n        onClick={() => {\n          setIsInEditMode(true)\n        }}\n      >\n        Edit\n      </Button>\n    </Tooltip>\n  )\n\n  const dialogContent = (\n    <>\n      {showTabs && !isInEditMode ? (\n        <div className=\"Tabs\">\n          {EntityModalTabs.map(tabName => {\n            return (\n              <div\n                className=\"Tab\"\n                role=\"tab\"\n                key={tabName}\n                onClick={e => {\n                  e.stopPropagation()\n                  setCurrentTab(tabName)\n                }}\n                aria-selected={tabName === currentTab}\n              >\n                {tabName}\n              </div>\n            )\n          })}\n        </div>\n      ) : null}\n      <div style={currentTab === 'ANNOTATIONS' ? {} : { display: 'none' }}>\n        {isInEditMode ? (\n          <SynapseErrorBoundary>\n            <SchemaDrivenAnnotationEditor\n              entityId={entityId}\n              formRef={annotationEditorFormRef}\n              onSuccess={() => {\n                displayToast('Annotations successfully updated.', 'success')\n                setIsInEditMode(false)\n              }}\n              onCancel={() => setIsInEditMode(false)}\n            />\n          </SynapseErrorBoundary>\n        ) : (\n          <AnnotationsTable entityId={entityId} versionNumber={versionNumber} />\n        )}\n      </div>\n      <div style={currentTab === 'METADATA' ? {} : { display: 'none' }}>\n        <MetadataTable entityId={entityId} versionNumber={versionNumber} />\n      </div>\n    </>\n  )\n\n  return (\n    <DialogBase\n      className={`EntityMetadata`}\n      open={show}\n      onCancel={onClose}\n      maxWidth={isInEditMode ? 'md' : 'sm'}\n      title={\n        entityBundle ? entityBundle.entity.name : <Skeleton width={'40%'} />\n      }\n      content={dialogContent}\n      actions={\n        <>\n          {showCancelAnnotationEditsButton && cancelAnnotationEditsButton}\n          {showSaveAnnotationsButton && saveAnnotationsButton}\n          {showEditAnnotationsButton && editAnnotationsButton}\n          {showOpenEntityPageButton && openEntityPageButton}\n        </>\n      }\n    />\n  )\n}\n"],"names":["AnnotationsTable","entityId","isInExperimentalMode","useSynapseContext","entityMetadata","annotations","isLoading","useGetJson","boundSchema","useGetSchemaBinding","jsx","SkeletonTable","jsxs","Fragment","isEmpty","entityTypeToFriendlyName","convertToEntityType","key","getEndpoint","BackendDestinationEnum","MetadataTable","versionNumber","entityBundle","useGetEntityBundle","isVersionable","isVersionableEntity","dataFileHandle","getDataFileHandle","fileLocationName","getStorageLocationName","_a","_b","getVersionDisplay","UserCard","_c","formatDate","dayjs","_d","_e","_f","EntityModalTabs","EntityModal","props","show","onClose","initialTab","showTabs","annotationEditorFormRef","useRef","currentTab","setCurrentTab","useState","isInEditMode","setIsInEditMode","hasClickedCancel","setHasClickedCancel","canEdit","isVersionableEntityType","isLatestVersion","showOpenEntityPageButton","openEntityPageButton","Button","showSaveAnnotationsButton","saveAnnotationsButton","showCancelAnnotationEditsButton","cancelAnnotationEditsButton","showEditAnnotationsButton","editAnnotationsButton","Tooltip","dialogContent","tabName","e","SynapseErrorBoundary","SchemaDrivenAnnotationEditor","displayToast","DialogBase","Skeleton"],"mappings":"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"}