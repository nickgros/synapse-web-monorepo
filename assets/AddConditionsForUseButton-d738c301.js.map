{"version":3,"file":"AddConditionsForUseButton-d738c301.js","sources":["../../src/components/AccessRequirement/AddConditionsForUseButton.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { Button } from '@mui/material'\nimport IconSvg from '../IconSvg/IconSvg'\nimport ImposeRestrictionDialog from './ImposeRestrictionDialog'\nimport {\n  useGetEntityBundle,\n  useIsCurrentUserACTMember,\n} from '../../synapse-queries'\nimport { RestrictionLevel } from '@sage-bionetworks/synapse-types'\nimport {\n  isEntityRefCollectionView,\n  isEntityView,\n} from '../../utils/functions/EntityTypeUtils'\n\nexport type AddConditionsForUseButtonProps = {\n  entityId: string\n  /* Handler for when an ACT member clicks the button. */\n  onACTMemberClick: () => void\n}\n\nexport default function AddConditionsForUseButton(\n  props: AddConditionsForUseButtonProps,\n) {\n  const { entityId, onACTMemberClick } = props\n  const [openDialog, setOpenDialog] = useState(false)\n\n  const { data: entityBundle, isLoading: isLoadingBundle } =\n    useGetEntityBundle(entityId)\n\n  const { data: isActMember, isLoading: isLoadingIsACT } =\n    useIsCurrentUserACTMember()\n  const isLoading = isLoadingBundle || isLoadingIsACT\n  // EntityViews and Dataset/Collections can have ARs, but they aren't meaningful, so hide the button (SWC-5909)\n  const isRestrictableEntityType =\n    entityBundle?.entity &&\n    !isEntityView(entityBundle.entity) &&\n    !isEntityRefCollectionView(entityBundle.entity)\n  const hasAdministrativeAccess = entityBundle?.permissions.canChangePermissions\n  const hasNoExistingRestrictions =\n    entityBundle?.restrictionInformation?.restrictionLevel ===\n    RestrictionLevel.OPEN\n\n  const showButton =\n    !isLoading &&\n    hasNoExistingRestrictions &&\n    isRestrictableEntityType &&\n    (hasAdministrativeAccess || isActMember)\n\n  return (\n    <>\n      <ImposeRestrictionDialog\n        open={openDialog}\n        onClose={() => setOpenDialog(false)}\n        entityId={entityId}\n      />\n      {showButton && (\n        <Button\n          onClick={() => {\n            if (isActMember) {\n              onACTMemberClick()\n            } else {\n              setOpenDialog(true)\n            }\n          }}\n          startIcon={<IconSvg icon={'addConditions'} wrap={false} />}\n        >\n          Add Conditions for Use\n        </Button>\n      )}\n    </>\n  )\n}\n"],"names":["AddConditionsForUseButton","props","entityId","onACTMemberClick","openDialog","setOpenDialog","useState","entityBundle","isLoadingBundle","useGetEntityBundle","isActMember","isLoadingIsACT","useIsCurrentUserACTMember","isLoading","isRestrictableEntityType","isEntityView","isEntityRefCollectionView","hasAdministrativeAccess","hasNoExistingRestrictions","_a","RestrictionLevel","jsxs","Fragment","jsx","ImposeRestrictionDialog","Button","IconSvg"],"mappings":"6dAoBA,SAAAA,EAAAC,EAAA,OAGE,KAAA,CAAA,SAAAC,EAAA,iBAAAC,CAAA,EAAAF,EACA,CAAAG,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEA,CAAA,KAAAC,EAAA,UAAAC,GAAAC,EAAAP,CAAA,EAGA,CAAA,KAAAQ,EAAA,UAAAC,CAAA,EAAAC,IAEAC,EAAAL,GAAAG,EAEAG,GAAAP,GAAA,YAAAA,EAAA,SAAA,CAAAQ,EAAAR,EAAA,MAAA,GAAA,CAAAS,EAAAT,EAAA,MAAA,EAIAU,EAAAV,GAAA,YAAAA,EAAA,YAAA,qBACAW,IAAAC,EAAAZ,GAAA,YAAAA,EAAA,yBAAA,YAAAY,EAAA,oBAAAC,EAAA,KAUA,OAAAC,EAAAC,EAAA,CAAA,SAAA,CAEIC,EAAAC,EAAC,CAAA,KAAApB,EACO,QAAA,IAAAC,EAAA,EAAA,EAC4B,SAAAH,CAClC,CAAA,EAXN,CAAAW,GAAAK,GAAAJ,IAAAG,GAAAP,IAYIa,EAEEE,EAAC,CAAA,QAAA,IAAA,CAEGf,EACEP,IAEAE,EAAA,EAAA,CACF,EACF,UAAAkB,EAAAG,EAAA,CAAA,KAAA,gBAAA,KAAA,GAAA,EACwD,SAAA,wBACzD,CAAA,CAED,CAAA,CAAA,CAIR"}