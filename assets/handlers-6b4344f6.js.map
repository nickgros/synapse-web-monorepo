{"version":3,"file":"handlers-6b4344f6.js","sources":["../../mocks/msw/handlers.ts"],"sourcesContent":["import { rest } from 'msw'\nimport { getEntityHandlers } from './handlers/entityHandlers'\nimport {\n  getCurrentUserCertifiedValidatedHandler,\n  getUserProfileHandlers,\n} from './handlers/userProfileHandlers'\nimport {\n  BackendDestinationEnum,\n  getEndpoint,\n} from '../../src/utils/functions/getEndpoint'\nimport {\n  getAccessRequirementEntityBindingHandlers,\n  getAccessRequirementHandlers,\n  getAccessRequirementStatusHandlers,\n} from './handlers/accessRequirementHandlers'\nimport { getWikiHandlers } from './handlers/wikiHandlers'\nimport { getDataAccessRequestHandlers } from './handlers/dataAccessRequestHandlers'\nimport { getResearchProjectHandlers } from './handlers/researchProjectHandlers'\nimport { getFileHandlers } from './handlers/fileHandlers'\nimport { SynapseError } from '../../src/utils/SynapseError'\n\n// Simple utility type that just indicates that the response body could be an error like the Synapse backend may send.\nexport type SynapseApiResponse<T> = T | SynapseError\n\nconst getHandlers = (backendOrigin: string) => [\n  rest.options('*', async (req, res, ctx) => {\n    return res(ctx.status(200))\n  }),\n  rest.get(\n    `${backendOrigin}/auth/v1/authenticatedOn`,\n    async (req, res, ctx) => {\n      return res(\n        ctx.status(200),\n        ctx.json({ authenticatedOn: new Date().toISOString() }),\n      )\n    },\n  ),\n  ...getEntityHandlers(backendOrigin),\n  ...getUserProfileHandlers(backendOrigin),\n  getCurrentUserCertifiedValidatedHandler(backendOrigin, true, true),\n  ...getWikiHandlers(backendOrigin),\n  ...getAccessRequirementHandlers(backendOrigin),\n  ...getAccessRequirementEntityBindingHandlers(backendOrigin),\n  ...getAccessRequirementStatusHandlers(backendOrigin),\n  ...getDataAccessRequestHandlers(backendOrigin),\n  ...getResearchProjectHandlers(backendOrigin),\n  ...getFileHandlers(backendOrigin),\n]\n\nconst handlers = getHandlers(getEndpoint(BackendDestinationEnum.REPO_ENDPOINT))\n\nexport { handlers, getHandlers }\n"],"names":["getHandlers","backendOrigin","rest","req","res","ctx","getEntityHandlers","getUserProfileHandlers","getCurrentUserCertifiedValidatedHandler","getWikiHandlers","getAccessRequirementHandlers","getAccessRequirementEntityBindingHandlers","getAccessRequirementStatusHandlers","getDataAccessRequestHandlers","getResearchProjectHandlers","getFileHandlers","getEndpoint","BackendDestinationEnum"],"mappings":"4YAwBM,MAAAA,EAAeC,GAA0B,CAC7CC,OAAK,QAAQ,IAAK,MAAOC,EAAKC,EAAKC,IAC1BD,EAAIC,EAAI,OAAO,GAAG,CAAC,CAC3B,EACDH,EAAAA,KAAK,IACH,GAAGD,4BACH,MAAOE,EAAKC,EAAKC,IACRD,EACLC,EAAI,OAAO,GAAG,EACdA,EAAI,KAAK,CAAE,oBAAqB,KAAK,EAAE,YAAY,EAAG,CAAA,CAG5D,EACA,GAAGC,EAAkBL,CAAa,EAClC,GAAGM,EAAuBN,CAAa,EACvCO,EAAwCP,EAAe,GAAM,EAAI,EACjE,GAAGQ,EAAgBR,CAAa,EAChC,GAAGS,EAA6BT,CAAa,EAC7C,GAAGU,EAAuD,EAC1D,GAAGC,EAAmCX,CAAa,EACnD,GAAGY,EAA6BZ,CAAa,EAC7C,GAAGa,EAA2Bb,CAAa,EAC3C,GAAGc,EAAgBd,CAAa,CAClC,EAEiBD,EAAYgB,EAAYC,EAAuB,aAAa,CAAC"}