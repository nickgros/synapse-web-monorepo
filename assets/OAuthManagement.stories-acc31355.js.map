{"version":3,"file":"OAuthManagement.stories-acc31355.js","sources":["../../src/lib/utils/hooks/SynapseAPI/oauth/useOAuthClient.ts","../../src/lib/containers/oauth/CreateOAuthClient.tsx","../../src/lib/containers/oauth/OAuthManagement.tsx"],"sourcesContent":["import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from 'react-query'\nimport { SynapseClient } from '../../..'\nimport { SynapseClientError } from '../../../SynapseClientError'\nimport { useSynapseContext } from '../../../SynapseContext'\nimport { OAuthClient, OAuthClientList } from '../../../synapseTypes/OAuthClient'\n\nexport function useGetOAuthClientInfinite(\n  options?: UseInfiniteQueryOptions<OAuthClientList, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<OAuthClientList, SynapseClientError>(\n    keyFactory.getMyOAuthClientsQueryKey(),\n    async context =>\n      await SynapseClient.getOAuth2(accessToken!, context.pageParam),\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n\nexport function useDeleteOAuthClient(\n  options?: UseMutationOptions<void, SynapseClientError, string>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, string>(\n    (clientId: string) =>\n      SynapseClient.deleteOAuthClient(clientId, accessToken!),\n    {\n      ...options,\n      onSuccess: async (updatedClient, clientId, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getMyOAuthClientsQueryKey(),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedClient, clientId, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useUpdateOAuthClient(\n  options?: UseMutationOptions<OAuthClient, SynapseClientError, OAuthClient>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<OAuthClient, SynapseClientError, OAuthClient>(\n    (client: OAuthClient) =>\n      SynapseClient.updateOAuthClient(client, accessToken!),\n    {\n      ...options,\n      onSuccess: async (updatedClient, client, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getMyOAuthClientsQueryKey(),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedClient, client, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useCreateOAuthClient(\n  options?: UseMutationOptions<OAuthClient, SynapseClientError, OAuthClient>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<OAuthClient, SynapseClientError, OAuthClient>(\n    (client: OAuthClient) =>\n      SynapseClient.createOAuthClient(client, accessToken!),\n    {\n      ...options,\n      onSuccess: async (updatedClient, client, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getMyOAuthClientsQueryKey(),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedClient, client, ctx)\n        }\n      },\n    },\n  )\n}\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport { displayToast } from '../ToastMessage'\nimport {\n  Alert,\n  Box,\n  Button,\n  Grid,\n  IconButton,\n  TextField,\n  Typography,\n  InputAdornment,\n} from '@mui/material'\nimport { OAuthClient } from '../../utils/synapseTypes/OAuthClient'\nimport {\n  useCreateOAuthClient,\n  useDeleteOAuthClient,\n  useUpdateOAuthClient,\n} from '../../utils/hooks/SynapseAPI'\nimport { WarningDialog } from '../synapse_form_wrapper/WarningDialog'\nimport DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { SynapseSpinner } from '../LoadingScreen'\nimport { SynapseClient } from '../../utils'\nimport { useDebouncedEffect } from '../../utils/hooks'\nimport { ConfirmationDialog } from '../ConfirmationDialog'\n\nconst INPUT_CHANGE_DEBOUNCE_DELAY_MS = 500\nconst GRID_NARROW = 12\nconst GRID_WIDE = 6\nconst GRID_ROW_SPACING = 1\nconst GRID_COL_SPACING = 2\n\nexport type CreateOAuthModalProps = {\n  isShowingModal: boolean\n  isEdit: boolean\n  onClose: () => void\n  setIsShowingConfirmModal: (a: boolean) => void\n  isShowingConfirmModal: boolean\n  client?: OAuthClient\n  setIsShowingModal: (a: boolean) => void\n}\n\nexport const CreateOAuthModal: React.FunctionComponent<\n  CreateOAuthModalProps\n> = ({\n  isShowingModal = false,\n  isEdit,\n  onClose,\n  client,\n  setIsShowingConfirmModal,\n  isShowingConfirmModal,\n  setIsShowingModal,\n}) => {\n  const { accessToken } = useSynapseContext()\n  const [clientName, setClientName] = useState('')\n  const [redirectUris, setRedirectUris] = useState([{ uri: '' }])\n  const [policyUri, setPolicyUri] = useState<string>()\n  const [clientUri, setClientUri] = useState<string>()\n  const [sectorUri, setSectorUri] = useState<string | undefined>()\n  const [tosUri, setTosUri] = useState<string>()\n  const [warnTrigger, setWarnTrigger] = useState(false)\n  const [isDelete, setIsDelete] = useState<boolean>(false)\n  const [updatedClient, setUpdatedClient] = useState<OAuthClient>()\n  const [error, setError] = useState<SynapseClientError>()\n\n  const warningHeader = 'Are you absolutely sure?'\n  const warningBody =\n    'Editing this detail will render your client invalid and will require you to resubmit verification. This action cannot be undone.'\n\n  // Return the OAuth Client definition based on the current client-side UI state\n  const oAuthClient: OAuthClient = useMemo(() => {\n    return {\n      client_id: client?.client_id,\n      client_name: clientName,\n      redirect_uris: redirectUris?.map(str => str.uri) ?? [''],\n      policy_uri: policyUri,\n      client_uri: clientUri,\n      sector_identifier_uri: sectorUri ?? '',\n      tos_uri: tosUri,\n      etag: client?.etag,\n    }\n  }, [\n    client?.client_id,\n    client?.etag,\n    clientName,\n    clientUri,\n    policyUri,\n    redirectUris,\n    sectorUri,\n    tosUri,\n  ])\n\n  useEffect(() => {\n    setClientName(client?.client_name ?? '')\n    setRedirectUris(\n      client?.redirect_uris.map(str => ({ uri: str })) ?? [{ uri: '' }],\n    )\n    setPolicyUri(client?.policy_uri ?? '')\n    setClientUri(client?.client_uri ?? '')\n    setSectorUri(client?.sector_identifier_uri ?? undefined)\n    setTosUri(client?.tos_uri ?? '')\n  }, [isShowingModal, client])\n\n  useDebouncedEffect(\n    () => {\n      if (accessToken) {\n        // SWC-6365: use the pre-check service to determine if we need to show a warning on edit\n        SynapseClient.isOAuthClientReverificationRequired(\n          oAuthClient,\n          accessToken,\n        ).then(precheckResult => {\n          setWarnTrigger(precheckResult.reverificationRequired)\n        })\n      }\n    },\n    [accessToken, oAuthClient],\n    INPUT_CHANGE_DEBOUNCE_DELAY_MS,\n  )\n\n  const hide = () => {\n    setClientName('')\n    setRedirectUris([{ uri: '' }])\n    setPolicyUri('')\n    setClientUri('')\n    setSectorUri('')\n    setTosUri('')\n    onClose()\n  }\n\n  const hideConfirmModal = () => {\n    setIsShowingConfirmModal(false)\n    setIsDelete(false)\n  }\n\n  const { mutate: createClient } = useCreateOAuthClient({\n    onSuccess: () => {\n      displayToast('Successfully created', 'success')\n      setError(undefined)\n      hide()\n    },\n    onError: err => {\n      setError(err)\n    },\n  })\n\n  const { mutate: updateClient, isLoading: isLoadingUpdate } =\n    useUpdateOAuthClient({\n      onSuccess: () => {\n        displayToast('Successfully saved', 'success')\n        setError(undefined)\n        hide()\n      },\n      onError: err => {\n        setError(err)\n        setIsShowingModal(true)\n      },\n    })\n\n  const { mutate: deleteClient } = useDeleteOAuthClient({\n    onSuccess: () => {\n      displayToast('Successfully deleted', 'success')\n      hide()\n    },\n    onError: error => {\n      displayToast(error.reason, 'danger')\n    },\n  })\n\n  const onCreateClient = () => {\n    try {\n      if (accessToken) {\n        setUpdatedClient(oAuthClient)\n        if (warnTrigger === true) {\n          setIsShowingConfirmModal(true)\n        } else {\n          if (isEdit) {\n            updateClient(oAuthClient)\n          } else {\n            createClient(oAuthClient)\n          }\n        }\n      }\n    } catch (err) {\n      displayToast(err.reason as string, 'danger')\n    }\n  }\n\n  const handleRedirectUriAdd = () => {\n    if (redirectUris) {\n      setRedirectUris([...redirectUris, { uri: '' }])\n    }\n  }\n\n  const handleRedirectUriRemove = (index: number) => {\n    if (redirectUris) {\n      const list = [...redirectUris]\n      list.splice(index, 1)\n      setRedirectUris(list)\n    }\n  }\n\n  const handleUriChange = (e: any, index: number) => {\n    if (redirectUris) {\n      const { name, value } = e.target\n      const list = [...redirectUris]\n      list[index][name] = value\n      setRedirectUris(list)\n    }\n  }\n\n  const dangerLabelSx = {\n    color: isEdit ? 'error.main' : undefined,\n    '&.Mui-focused': {\n      color: isEdit ? 'error.main' : undefined,\n    },\n  }\n\n  const sectorIdentifierURIInput = (\n    <TextField\n      onChange={e => setSectorUri(e.target.value)}\n      placeholder=\"https://\"\n      type=\"text\"\n      value={sectorUri}\n      id=\"sectorURI\"\n      label=\"Sector Identifier URI\"\n      margin=\"normal\"\n      InputLabelProps={{ sx: dangerLabelSx }}\n      fullWidth\n    />\n  )\n\n  const redirectURIInputs = (\n    <>\n      {redirectUris?.map((singleUri, idx) => (\n        <div key={idx}>\n          <TextField\n            required={idx === 0}\n            InputLabelProps={{ sx: dangerLabelSx }}\n            label={idx === 0 && 'Redirect URI(s)'}\n            name=\"uri\"\n            fullWidth\n            id={`redirect-uri-${idx}`}\n            onChange={e => handleUriChange(e, idx)}\n            value={singleUri.uri}\n            placeholder=\"https://\"\n            type=\"text\"\n            InputProps={{\n              endAdornment: redirectUris.length > 1 && (\n                <InputAdornment position=\"end\">\n                  <IconButton onClick={() => handleRedirectUriRemove(idx)}>\n                    <DeleteTwoToneIcon sx={{ color: 'error.main' }} />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n            margin={idx === 0 ? 'normal' : 'dense'}\n          />\n          {redirectUris.length - 1 === idx && (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleRedirectUriAdd}\n              disabled={singleUri.uri.length === 0}\n              sx={{ my: '10px' }}\n            >\n              Add URI\n            </Button>\n          )}\n        </div>\n      ))}\n    </>\n  )\n\n  const content = (\n    <>\n      {isLoadingUpdate && (\n        <div className={'SRC-center-text'}>\n          <SynapseSpinner size={40} />\n        </div>\n      )}\n      {!isLoadingUpdate && (\n        <>\n          <Typography variant=\"body1\" mb={'10px'}>\n            To protect you and your users, your consent screen and application\n            will need to be verified by Sage Bionetworks. Before your consent\n            screen and application are verified by Sage Bionetworks, you can\n            still test your application with limitations.\n          </Typography>\n\n          {isEdit && (\n            <Typography sx={{ mt: '16px' }} variant=\"label\">\n              Client ID: {client?.client_id}\n            </Typography>\n          )}\n          <Grid\n            container\n            rowSpacing={GRID_ROW_SPACING}\n            columnSpacing={GRID_COL_SPACING}\n          >\n            <Grid item md={GRID_WIDE} xs={GRID_NARROW}>\n              <TextField\n                label=\"Client Name\"\n                required\n                onChange={e => setClientName(e.target.value)}\n                placeholder=\"Client Name\"\n                type=\"text\"\n                value={clientName}\n                id=\"clientName\"\n                margin=\"normal\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item md={GRID_WIDE} xs={GRID_NARROW}>\n              <TextField\n                label=\"Client Homepage\"\n                onChange={e => setClientUri(e.target.value)}\n                placeholder=\"https://\"\n                type=\"text\"\n                value={clientUri}\n                id=\"clientUri\"\n                fullWidth\n                margin=\"normal\"\n              />\n            </Grid>\n            {!isEdit && (\n              <>\n                <Grid item md={GRID_WIDE} xs={GRID_NARROW}>\n                  {redirectURIInputs}\n                </Grid>\n                <Grid item md={GRID_WIDE} xs={GRID_NARROW}>\n                  {sectorIdentifierURIInput}\n                </Grid>\n              </>\n            )}\n            <Grid item md={GRID_WIDE} xs={GRID_NARROW}>\n              <TextField\n                label=\"Link to Privacy Policy\"\n                onChange={e => setPolicyUri(e.target.value)}\n                placeholder=\"https://\"\n                type=\"text\"\n                value={policyUri}\n                fullWidth\n                margin=\"normal\"\n              />\n            </Grid>\n            <Grid item md={GRID_WIDE} xs={GRID_NARROW}>\n              <TextField\n                label=\"Links to Terms of Service\"\n                onChange={e => setTosUri(e.target.value)}\n                placeholder=\"https://\"\n                type=\"text\"\n                value={tosUri}\n                fullWidth\n                margin=\"normal\"\n              />\n            </Grid>\n          </Grid>\n          {isEdit && (\n            <Box\n              sx={{ backgroundColor: 'rgb(178, 36, 42, 0.03)' }}\n              mt=\"10px\"\n              padding={1}\n            >\n              <Typography sx={{ my: 1 }} color=\"error\" variant=\"headline3\">\n                DANGER ZONE\n              </Typography>\n              <Typography variant=\"smallText1\">\n                Editing the following information will render your client\n                invalid and will require you to create it again and resubmit\n                verification if needed.\n              </Typography>\n              <Grid\n                container\n                rowSpacing={GRID_ROW_SPACING}\n                columnSpacing={GRID_COL_SPACING}\n              >\n                <Grid item md={GRID_WIDE} xs={GRID_NARROW}>\n                  {redirectURIInputs}\n                </Grid>\n                <Grid item md={GRID_WIDE} xs={GRID_NARROW}>\n                  {sectorIdentifierURIInput}\n                </Grid>\n              </Grid>\n\n              <Button\n                onClick={() => {\n                  setIsDelete(true)\n                  setIsShowingConfirmModal(true)\n                }}\n                color=\"error\"\n                variant=\"text\"\n                startIcon={<DeleteTwoToneIcon />}\n                sx={{ padding: 0, mb: 1 }}\n              >\n                DELETE CLIENT\n              </Button>\n            </Box>\n          )}\n        </>\n      )}\n      {error && <Alert severity=\"error\">{error?.reason}</Alert>}\n    </>\n  )\n\n  return (\n    <>\n      <ConfirmationDialog\n        open={isShowingModal && !isShowingConfirmModal}\n        onCancel={() => {\n          hide()\n          setError(undefined)\n        }}\n        maxWidth=\"md\"\n        title={isEdit ? 'Client Details' : 'Create New OAuth Client'}\n        content={content}\n        onConfirm={onCreateClient}\n        confirmButtonText=\"Save\"\n      />\n      <WarningDialog\n        open={isShowingConfirmModal}\n        title={warningHeader}\n        content={warningBody}\n        onCancel={hideConfirmModal}\n        onConfirm={() => {\n          isDelete\n            ? deleteClient(client?.client_id!)\n            : updateClient(updatedClient!)\n          hideConfirmModal()\n        }}\n        confirmButtonColor=\"error\"\n        confirmButtonText=\"Yes, Continue\"\n      />\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { Table } from 'react-bootstrap'\nimport { formatDate } from '../../utils/functions/DateFormatter'\nimport dayjs from 'dayjs'\nimport { useGetOAuthClientInfinite } from '../../utils/hooks/SynapseAPI'\nimport { CreateOAuthModal } from './CreateOAuthClient'\nimport { OAuthClient } from '../../utils/synapseTypes/OAuthClient'\nimport WarningDialog from '../synapse_form_wrapper/WarningDialog'\nimport { SynapseClient } from '../../utils'\nimport { useSynapseContext } from '../../utils/SynapseContext'\nimport CopyToClipboardInput from '../CopyToClipboardInput'\nimport { displayToast } from '../ToastMessage'\nimport { DialogBase } from '../DialogBase'\nimport { Button, Link } from '@mui/material'\n\nexport const OAuthManagement: React.FunctionComponent = () => {\n  const { accessToken } = useSynapseContext()\n  const [isShowingCreateClientModal, setIsShowingCreateClientModal] =\n    useState(false)\n  const [isEdit, setIsEdit] = useState<boolean>(false)\n  const [selectedClient, setSelectedClient] = useState<OAuthClient>()\n  const [isShowingConfirmModal, setIsShowingConfirmModal] = useState(false)\n  const [isShowingSecretWarning, setIsShowingSecretWarning] = useState(false)\n  const [isShowingSecret, setIsShowingSecret] = useState(false)\n  const [secret, setSecret] = useState<string>()\n  const [isShowingVerification, setIsShowingVerification] = useState(false)\n\n  const { data, hasNextPage, fetchNextPage } = useGetOAuthClientInfinite()\n  const oAuthClientList = data?.pages.flatMap(page => page.results) ?? []\n\n  const warningHeader = 'Are you absolutely sure?'\n  const warningBody =\n    'If you have an existing secret, generating a new secret will make your application invalid after generation. This action cannot be undone.'\n\n  const onShowSecret = async () => {\n    setIsShowingSecretWarning(false)\n    try {\n      const secret = await SynapseClient.createOAuthClientSecret(\n        accessToken!,\n        selectedClient?.client_id!,\n      )\n      setSelectedClient(undefined)\n      setIsShowingSecret(true)\n      setSecret(secret.client_secret)\n    } catch (err: any) {\n      displayToast(err.reason as string, 'danger')\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport\">\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => {\n          setIsShowingCreateClientModal(true)\n          setIsEdit(false)\n        }}\n        sx={{ float: 'right' }}\n      >\n        Create New Client\n      </Button>\n      <Table striped>\n        <thead>\n          <tr>\n            <th>Created</th>\n            <th>Modified</th>\n            <th>ID</th>\n            <th>Client</th>\n            <th>Verified</th>\n            <th>App Secret</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {oAuthClientList.map(item => {\n            return (\n              <tr key={item.client_id}>\n                <td>{formatDate(dayjs(item.createdOn))}</td>\n                <td>{formatDate(dayjs(item.modifiedOn))}</td>\n                <td>{item.client_id}</td>\n                <td>{item.client_name}</td>\n                <td>\n                  {item.verified ? (\n                    'Yes'\n                  ) : (\n                    <Button\n                      variant=\"outlined\"\n                      size=\"small\"\n                      onClick={() => setIsShowingVerification(true)}\n                    >\n                      SUBMIT VERIFICATION\n                    </Button>\n                  )}\n                </td>\n                <td>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() => {\n                      setSelectedClient(item)\n                      setIsShowingSecretWarning(true)\n                    }}\n                    size=\"small\"\n                  >\n                    GENERATE SECRET\n                  </Button>\n                </td>\n                <td>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() => {\n                      setSelectedClient(item)\n                      setIsEdit(true)\n                      setIsShowingCreateClientModal(true)\n                    }}\n                    size=\"small\"\n                  >\n                    EDIT\n                  </Button>\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </Table>\n      {hasNextPage && (\n        <div className=\"text-center\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              fetchNextPage()\n            }}\n          >\n            Load more\n          </Button>\n        </div>\n      )}\n\n      <CreateOAuthModal\n        onClose={() => {\n          setIsShowingCreateClientModal(false)\n        }}\n        isShowingModal={isShowingCreateClientModal}\n        client={isEdit ? selectedClient : undefined}\n        isEdit={isEdit}\n        setIsShowingConfirmModal={setIsShowingConfirmModal}\n        isShowingConfirmModal={isShowingConfirmModal}\n        setIsShowingModal={setIsShowingCreateClientModal}\n      />\n      <DialogBase\n        open={isShowingVerification}\n        onCancel={() => setIsShowingVerification(false)}\n        title=\"Submit Verification\"\n        content={\n          <>\n            <p>\n              In order to verify an OAuth client please submit a request to the{' '}\n              <Link\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://sagebionetworks.jira.com/servicedesk/customer/portal/9\"\n              >\n                Synapse Service Desk.\n              </Link>\n            </p>\n            <b>Please list the following items in your request:</b>\n            <ul>\n              <li>Your name</li>\n              <li>\n                The ID of the client to be verified <br />\n              </li>\n              <li>A description of your application</li>\n            </ul>\n            {/* <p>\n            Verification can take up to X weeks and we will notify you via X.\n          </p> */}\n          </>\n        }\n      />\n      <WarningDialog\n        open={isShowingSecretWarning}\n        title={warningHeader}\n        content={warningBody}\n        onCancel={() => {\n          setIsShowingSecretWarning(false)\n          setSelectedClient(undefined)\n        }}\n        onConfirm={onShowSecret}\n        confirmButtonColor=\"error\"\n        confirmButtonText=\"Yes, Continue\"\n      />\n      {secret && (\n        <DialogBase\n          open={isShowingSecret}\n          title=\"App Secret\"\n          onCancel={() => {\n            setIsShowingSecret(false)\n            setSecret(undefined)\n          }}\n          content={\n            <>\n              <p>\n                <b>This secret will not be able to be retrieved again.</b> If\n                needed, in order to generate a new secret select Generate from\n                the Client List.\n              </p>\n              <CopyToClipboardInput value={secret} inputWidth={'400px'} />\n            </>\n          }\n        />\n      )}\n    </div>\n  )\n}\n"],"names":["useGetOAuthClientInfinite","options","accessToken","keyFactory","useSynapseContext","useInfiniteQuery","context","SynapseClient.getOAuth2","page","useDeleteOAuthClient","queryClient","useQueryClient","useMutation","clientId","SynapseClient.deleteOAuthClient","updatedClient","ctx","useUpdateOAuthClient","client","SynapseClient.updateOAuthClient","useCreateOAuthClient","SynapseClient.createOAuthClient","INPUT_CHANGE_DEBOUNCE_DELAY_MS","GRID_NARROW","GRID_WIDE","GRID_ROW_SPACING","GRID_COL_SPACING","CreateOAuthModal","isShowingModal","isEdit","onClose","setIsShowingConfirmModal","isShowingConfirmModal","setIsShowingModal","clientName","setClientName","useState","redirectUris","setRedirectUris","policyUri","setPolicyUri","clientUri","setClientUri","sectorUri","setSectorUri","tosUri","setTosUri","warnTrigger","setWarnTrigger","isDelete","setIsDelete","setUpdatedClient","error","setError","warningHeader","warningBody","oAuthClient","useMemo","str","useEffect","useDebouncedEffect","SynapseClient.isOAuthClientReverificationRequired","precheckResult","hide","hideConfirmModal","createClient","displayToast","err","updateClient","isLoadingUpdate","deleteClient","error2","onCreateClient","handleRedirectUriAdd","handleRedirectUriRemove","index","list","handleUriChange","e","name","value","dangerLabelSx","sectorIdentifierURIInput","jsx","TextField","redirectURIInputs","Fragment","singleUri","idx","jsxs","InputAdornment","IconButton","DeleteTwoToneIcon","Button","content","SynapseSpinner","Typography","Grid","Box","Alert","ConfirmationDialog","WarningDialog","OAuthManagement","isShowingCreateClientModal","setIsShowingCreateClientModal","setIsEdit","selectedClient","setSelectedClient","isShowingSecretWarning","setIsShowingSecretWarning","isShowingSecret","setIsShowingSecret","secret","setSecret","isShowingVerification","setIsShowingVerification","data","hasNextPage","fetchNextPage","oAuthClientList","onShowSecret","secret2","SynapseClient.createOAuthClientSecret","Table","item","formatDate","dayjs","DialogBase","Link","CopyToClipboardInput"],"mappings":"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"}