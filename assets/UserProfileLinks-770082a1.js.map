{"version":3,"file":"UserProfileLinks-770082a1.js","sources":["../../src/synapse-queries/user/useGetUserChallenges.ts","../../src/synapse-queries/user/useGetUserProjects.ts","../../src/components/UserProfileLinks/UserChallenges.tsx","../../src/components/UserProfileLinks/UserProjects.tsx","../../src/components/UserProfileLinks/UserTeams.tsx","../../src/components/UserProfileLinks/UserProfileLinks.tsx"],"sourcesContent":["import {\n  useInfiniteQuery,\n  UseInfiniteQueryOptions,\n  useQuery,\n  UseQueryOptions,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  Challenge,\n  ChallengeWithProjectHeaderPagedResults,\n  PaginatedResults,\n} from '@sage-bionetworks/synapse-types'\n\nexport function useGetUserChallenges(\n  userId: string,\n  limit?: number,\n  options?: UseQueryOptions<PaginatedResults<Challenge>, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useQuery<PaginatedResults<Challenge>, SynapseClientError>(\n    keyFactory.getUserChallengesQueryKey(userId),\n    () => SynapseClient.getUserChallenges(accessToken, userId, 0, limit ?? 10),\n    options,\n  )\n}\n\nexport function useGetUserChallengesInfinite(\n  userId: string,\n  options?: UseInfiniteQueryOptions<\n    ChallengeWithProjectHeaderPagedResults,\n    SynapseClientError,\n    ChallengeWithProjectHeaderPagedResults\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<\n    ChallengeWithProjectHeaderPagedResults,\n    SynapseClientError\n  >(\n    keyFactory.getUserChallengesQueryKey(userId),\n    async context => {\n      const challenges = await SynapseClient.getUserChallenges(\n        accessToken,\n        userId,\n        context.pageParam, // pass the context.pageParam for the new offset\n        10, // limit\n      )\n      // also look up the challenge project names (if there are challenges)\n      if (challenges.results.length > 0) {\n        const challengeProjectIds = Array.from(\n          challenges.results,\n          challenge => challenge.projectId,\n        )\n        const challengeProjects = await SynapseClient.getEntityHeadersByIds(\n          challengeProjectIds,\n        )\n        const challengeWithProjectHeaderPagedResults: ChallengeWithProjectHeaderPagedResults =\n          {\n            results: Array.from(challenges.results, (challenge, index) => {\n              return {\n                challenge,\n                projectHeader: challengeProjects.results[index],\n              }\n            }),\n            totalNumberOfResults: challenges.totalNumberOfResults,\n          }\n        return challengeWithProjectHeaderPagedResults\n      }\n      return {\n        results: [],\n        totalNumberOfResults: challenges.totalNumberOfResults,\n      }\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        if (lastPage.results.length > 0)\n          return pages.length * 10 //set the new offset to (page * limit)\n        else return undefined\n      },\n    },\n  )\n}\n","import { useInfiniteQuery, UseInfiniteQueryOptions } from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport { ProjectHeaderList } from '@sage-bionetworks/synapse-types'\nimport { GetProjectsParameters } from '@sage-bionetworks/synapse-types'\n\nexport function useGetUserProjectsInfinite(\n  userId: string,\n  projectParams: GetProjectsParameters,\n  options?: UseInfiniteQueryOptions<\n    ProjectHeaderList,\n    SynapseClientError,\n    ProjectHeaderList\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<ProjectHeaderList, SynapseClientError>(\n    keyFactory.getUserProjectsQueryKey(userId, projectParams),\n    async context => {\n      return SynapseClient.getUserProjects(\n        userId,\n        { ...projectParams, nextPageToken: context.pageParam },\n        accessToken,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: page => page.nextPageToken,\n    },\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { useInView } from 'react-intersection-observer'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { useGetUserChallengesInfinite } from '../../synapse-queries/user/useGetUserChallenges'\nimport { ChallengeWithProjectHeader } from '@sage-bionetworks/synapse-types'\nimport { SkeletonTable } from '../Skeleton/SkeletonTable'\n\nexport type UserChallengesProps = {\n  userId: string\n}\n\nexport default function UserChallenges({ userId }: UserChallengesProps) {\n  const handleError = useErrorHandler()\n  // Load the next page when this ref comes into view.\n  const { ref, inView } = useInView()\n  const {\n    data,\n    status,\n    isFetching,\n    isLoading,\n    hasNextPage,\n    fetchNextPage,\n    isError,\n    error: newError,\n  } = useGetUserChallengesInfinite(userId)\n\n  useEffect(() => {\n    if (isError && newError) {\n      handleError(newError)\n    }\n  }, [isError, newError, handleError])\n\n  useEffect(() => {\n    if (\n      status === 'success' &&\n      !isFetching &&\n      hasNextPage &&\n      fetchNextPage &&\n      inView\n    ) {\n      fetchNextPage()\n    }\n  }, [status, isFetching, hasNextPage, fetchNextPage, inView])\n\n  const allRows = data?.pages.flatMap(page => page.results) ?? []\n\n  return (\n    <>\n      {allRows.length > 0 && (\n        <>\n          {allRows.map((item: ChallengeWithProjectHeader) => {\n            if (item && item.challenge && item.projectHeader) {\n              // another option may be to use an EntityLink\n              return (\n                <p key={`user-challenge-list-item-${item.challenge.projectId}`}>\n                  <a\n                    target=\"_self\"\n                    rel=\"noopener noreferrer\"\n                    href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${item.challenge.projectId}/challenge`}\n                  >\n                    {item.projectHeader.name}\n                  </a>\n                </p>\n              )\n            } else return false\n          })}\n          {/* To trigger loading the next page */}\n          <div ref={ref} />\n        </>\n      )}\n      {!isFetching && allRows.length == 0 && <div>Empty</div>}\n      {isLoading && <SkeletonTable numRows={5} numCols={1} />}\n    </>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { useInView } from 'react-intersection-observer'\nimport { ProjectHeader } from '@sage-bionetworks/synapse-types'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { useGetUserProjectsInfinite } from '../../synapse-queries/user/useGetUserProjects'\nimport { GetProjectsParameters } from '@sage-bionetworks/synapse-types'\nimport { SkeletonTable } from '../Skeleton/SkeletonTable'\n\nexport type UserProjectsProps = {\n  userId: string\n}\n\nexport default function UserProjects({ userId }: UserProjectsProps) {\n  const handleError = useErrorHandler()\n  // Load the next page when this ref comes into view.\n  const { ref, inView } = useInView()\n  const getProjectsParameters: GetProjectsParameters = {}\n  const {\n    data,\n    status,\n    isFetching,\n    isLoading,\n    hasNextPage,\n    fetchNextPage,\n    isError,\n    error: newError,\n  } = useGetUserProjectsInfinite(userId, getProjectsParameters)\n\n  useEffect(() => {\n    if (isError && newError) {\n      handleError(newError)\n    }\n  }, [isError, newError, handleError])\n\n  useEffect(() => {\n    if (\n      status === 'success' &&\n      !isFetching &&\n      hasNextPage &&\n      fetchNextPage &&\n      inView\n    ) {\n      fetchNextPage()\n    }\n  }, [status, isFetching, hasNextPage, fetchNextPage, inView])\n\n  const allRows = data?.pages.flatMap(page => page.results) ?? []\n\n  return (\n    <>\n      {allRows.length > 0 && (\n        <>\n          {allRows.map((item: ProjectHeader) => {\n            if (item) {\n              // another option would be to use an EntityLink\n              return (\n                <p key={`user-project-list-item-${item.id}`}>\n                  <a\n                    target=\"_self\"\n                    rel=\"noopener noreferrer\"\n                    href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${item.id}`}\n                  >\n                    {item.name}\n                  </a>\n                </p>\n              )\n            } else return false\n          })}\n          {/* To trigger loading the next page */}\n          <div ref={ref} />\n        </>\n      )}\n      {!isFetching && allRows.length == 0 && <div>Empty</div>}\n      {isLoading && <SkeletonTable numRows={5} numCols={1} />}\n    </>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useErrorHandler } from 'react-error-boundary'\nimport { useInView } from 'react-intersection-observer'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { useGetUserTeamsInfinite } from '../../synapse-queries/user/useGetUserTeams'\nimport { Team } from '@sage-bionetworks/synapse-types'\nimport { SkeletonTable } from '../Skeleton/SkeletonTable'\n\nexport type UserTeamsProps = {\n  userId: string\n}\n\nexport default function UserTeams({ userId }: UserTeamsProps) {\n  const handleError = useErrorHandler()\n  // Load the next page when this ref comes into view.\n  const { ref, inView } = useInView()\n  const {\n    data,\n    status,\n    isFetching,\n    isLoading,\n    hasNextPage,\n    fetchNextPage,\n    isError,\n    error: newError,\n  } = useGetUserTeamsInfinite(userId)\n\n  useEffect(() => {\n    if (isError && newError) {\n      handleError(newError)\n    }\n  }, [isError, newError, handleError])\n\n  useEffect(() => {\n    if (\n      status === 'success' &&\n      !isFetching &&\n      hasNextPage &&\n      fetchNextPage &&\n      inView\n    ) {\n      fetchNextPage()\n    }\n  }, [status, isFetching, hasNextPage, fetchNextPage, inView])\n\n  const allRows = data?.pages.flatMap(page => page.results) ?? []\n\n  return (\n    <>\n      {allRows.length > 0 && (\n        <>\n          {allRows.map((item: Team) => {\n            if (item) {\n              // another option would be to use an EntityLink\n              return (\n                <p key={`user-team-list-item-${item.id}`}>\n                  <a\n                    target=\"_self\"\n                    rel=\"noopener noreferrer\"\n                    href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Team:${item.id}`}\n                  >\n                    {item.name}\n                  </a>\n                </p>\n              )\n            } else return false\n          })}\n          {/* To trigger loading the next page */}\n          <div ref={ref} />\n        </>\n      )}\n      {!isFetching && allRows.length == 0 && <div>Empty</div>}\n      {isLoading && <SkeletonTable numRows={5} numCols={1} />}\n    </>\n  )\n}\n","import Skeleton from '@mui/material/Skeleton'\nimport React, { useState } from 'react'\nimport { useGetUserProfile } from '../../synapse-queries/user/useUserBundle'\nimport Typography from '@mui/material/Typography'\nimport { SynapseErrorBoundary } from '../error/ErrorBanner'\nimport IconSvg, { IconName } from '../IconSvg/IconSvg'\nimport UserChallenges from './UserChallenges'\nimport UserProjects from './UserProjects'\nimport UserTeams from './UserTeams'\n\nexport enum UserProfileLinksTabs {\n  PROJECTS = 'Projects',\n  TEAMS = 'Teams',\n  CHALLENGES = 'Challenges',\n}\n\nexport type UserProfileLinksProps = {\n  userId: string\n}\n\nexport function UserProfileLinks({ userId }: UserProfileLinksProps) {\n  const [currentTab, setCurrentTab] = useState<UserProfileLinksTabs>(\n    UserProfileLinksTabs.PROJECTS,\n  )\n  const { data: userProfile } = useGetUserProfile(userId)\n\n  function getIconName(currentTab: UserProfileLinksTabs): IconName {\n    switch (currentTab) {\n      case UserProfileLinksTabs.PROJECTS:\n        return 'dashboard'\n      case UserProfileLinksTabs.TEAMS:\n        return 'peopleTwoTone'\n      case UserProfileLinksTabs.CHALLENGES:\n        return 'challengesTwoTone'\n    }\n  }\n  return (\n    <div className=\"UserProfileLinks\">\n      <Typography variant=\"headline2\" className=\"title\">\n        {userProfile && <>{userProfile?.userName}&apos;s Items</>}\n        {!userProfile && <Skeleton width=\"75%\" />}\n      </Typography>\n      <div className=\"Tabs\">\n        {Object.keys(UserProfileLinksTabs).map((keyName: string) => {\n          return (\n            <div\n              className=\"Tab\"\n              role=\"tab\"\n              key={keyName}\n              onClick={e => {\n                e.stopPropagation()\n                setCurrentTab(UserProfileLinksTabs[keyName])\n              }}\n              aria-selected={UserProfileLinksTabs[keyName] === currentTab}\n            >\n              <Typography variant=\"buttonLink\">\n                <IconSvg icon={getIconName(UserProfileLinksTabs[keyName])} />{' '}\n                {UserProfileLinksTabs[keyName]}\n              </Typography>\n            </div>\n          )\n        })}\n      </div>\n      <div className=\"TabContent\">\n        <SynapseErrorBoundary>\n          {currentTab === UserProfileLinksTabs.PROJECTS && (\n            <>\n              <UserProjects userId={userId} />\n            </>\n          )}\n          {currentTab === UserProfileLinksTabs.TEAMS && (\n            <>\n              <UserTeams userId={userId} />\n            </>\n          )}\n          {currentTab === UserProfileLinksTabs.CHALLENGES && (\n            <>\n              <UserChallenges userId={userId} />\n            </>\n          )}\n        </SynapseErrorBoundary>\n      </div>\n    </div>\n  )\n}\n\nexport default UserProfileLinks\n"],"names":["useGetUserChallengesInfinite","userId","options","accessToken","keyFactory","useSynapseContext","useInfiniteQuery","context","challenges","SynapseClient","challengeProjectIds","challenge","challengeProjects","index","lastPage","pages","useGetUserProjectsInfinite","projectParams","page","UserChallenges","handleError","useErrorHandler","ref","inView","useInView","data","status","isFetching","isLoading","hasNextPage","fetchNextPage","isError","newError","useEffect","allRows","jsxs","Fragment","item","jsx","PRODUCTION_ENDPOINT_CONFIG","SkeletonTable","UserProjects","getProjectsParameters","UserTeams","useGetUserTeamsInfinite","UserProfileLinksTabs","UserProfileLinksTabs2","UserProfileLinks","currentTab","setCurrentTab","useState","userProfile","useGetUserProfile","getIconName","currentTab2","Typography","Skeleton","keyName","e","IconSvg","SynapseErrorBoundary"],"mappings":"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"}