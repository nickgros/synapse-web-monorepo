{"version":3,"file":"EntityPageTitleBar.stories-cd1531c4.js","sources":["../../src/components/CopyToClipboardString/CopyToClipboardString.tsx","../../src/synapse-queries/doi/useDOI.ts","../../src/components/entity/page/title_bar/useGetEntityTitleBarProperties.tsx","../../src/components/entity/page/title_bar/TitleBarProperties.tsx","../../src/components/entity/page/title_bar/EntityTitleBarVersionInfo.tsx","../../src/components/entity/page/title_bar/EntityPageTitleBar.tsx"],"sourcesContent":["import React from 'react'\nimport { Stack, Tooltip, Typography, TypographyProps } from '@mui/material'\nimport IconSvg from '../IconSvg/IconSvg'\n\nexport type CopyToClipboardStringProps = {\n  value: string\n  typographyVariant?: TypographyProps['variant']\n}\n\n/**\n * Displays a string and a \"Copy to Clipboard\" icon, that, when clicked, will copy the contents of the string to the clipboard.\n */\nexport function CopyToClipboardString(props: CopyToClipboardStringProps) {\n  const { value, typographyVariant = 'smallText1' } = props\n  const [tooltipText, setTooltipText] = React.useState('Copy to clipboard')\n\n  const copyToClipboard = (event: React.SyntheticEvent) => {\n    event.preventDefault()\n\n    // use the Clipboard API\n    // https://caniuse.com/mdn-api_clipboard_writetext\n    navigator.clipboard.writeText(value).then(() => {\n      setTooltipText('Copied to clipboard')\n    })\n  }\n\n  return (\n    <Stack\n      direction={'row'}\n      alignItems=\"center\"\n      spacing={0.5}\n      sx={{ display: 'inline-flex' }}\n    >\n      <Typography component={'span'} variant={typographyVariant}>\n        {value}\n      </Typography>\n      <Tooltip title={tooltipText} placement={'top'}>\n        <span\n          role=\"button\"\n          style={{ cursor: 'pointer' }}\n          onClick={copyToClipboard}\n        >\n          <IconSvg icon=\"contentCopy\" wrap={false} sx={{ width: '16px' }} />\n        </span>\n      </Tooltip>\n    </Stack>\n  )\n}\n\nexport default CopyToClipboardString\n","import { DoiAssociation } from '@sage-bionetworks/synapse-types'\nimport { useQuery, UseQueryOptions } from 'react-query'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport SynapseClient from '../../synapse-client'\n\nexport function useGetDOIAssociation(\n  objectId: string,\n  versionNumber?: number,\n  objectType = 'ENTITY',\n  options?: UseQueryOptions<DoiAssociation | null, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useQuery<DoiAssociation | null, SynapseClientError>(\n    keyFactory.getDOIAssociationQueryKey(objectType, objectId, versionNumber),\n    () =>\n      SynapseClient.getDOIAssociation(\n        accessToken,\n        objectId,\n        versionNumber,\n        objectType,\n      ),\n    options,\n  )\n}\n","import React from 'react'\nimport {\n  useGetEntityBundle,\n  useGetEntityChildren,\n} from '../../../../synapse-queries'\nimport {\n  EntityRefCollectionView,\n  EntityType,\n} from '@sage-bionetworks/synapse-types'\nimport {\n  isContainerType,\n  isEntityRefCollectionView,\n  isVersionableEntity,\n} from '../../../../utils/functions/EntityTypeUtils'\nimport {\n  useGetDefaultUploadDestination,\n  useGetUploadDestinationForStorageLocation,\n} from '../../../../synapse-queries/file/useUploadDestination'\nimport {\n  getDataFileHandle,\n  getFileHandleStorageInfo,\n  getUploadDestinationString,\n} from '../../../../utils/functions/FileHandleUtils'\nimport { calculateFriendlyFileSize } from '../../../../utils/functions/calculateFriendlyFileSize'\nimport { Box, Link } from '@mui/material'\nimport { HasAccessV2 } from '../../../HasAccess/HasAccessV2'\nimport CopyToClipboardString from '../../../CopyToClipboardString/CopyToClipboardString'\nimport { useGetDOIAssociation } from '../../../../synapse-queries/doi/useDOI'\n\nexport type EntityProperty = {\n  key: string\n  title: string\n  value: React.ReactNode\n}\n\n/**\n * This hook fetches all the entity metadata shown on the Entity page, and transforms the data into an ordered list of\n * render-able key-value pairs.\n * @param entityId\n * @param versionNumber\n */\nexport function useGetEntityTitleBarProperties(\n  entityId: string,\n  versionNumber?: number,\n): EntityProperty[] {\n  const { data: bundle } = useGetEntityBundle(entityId, versionNumber)\n\n  const isContainer = !!(\n    bundle?.entityType && isContainerType(bundle.entityType)\n  )\n  const dataFileHandle = bundle && getDataFileHandle(bundle)\n  const parentId = bundle?.entity?.parentId\n  const storageLocationId = dataFileHandle?.storageLocationId\n\n  const { data: entityChildrenResponse } = useGetEntityChildren(\n    {\n      parentId: entityId,\n      includeTypes: Object.values(EntityType),\n      includeTotalChildCount: true,\n    },\n    { enabled: isContainer },\n  )\n\n  const { data: defaultUploadDestination } = useGetDefaultUploadDestination(\n    entityId,\n    { enabled: isContainer },\n  )\n\n  // Note: defaultUploadDestination can't be used for non-container entities\n  // since the service checks that any entity in the path to the root has some\n  // project setting with a storage location, but does not look at the file entity's\n  // storage location id. Since a user can upload a file in any storage location\n  // and put it anywhere in the hierarchy, the file entity storage location id\n  // is where the file handle was actually uploaded. We must use a service that\n  // takes the storage location id in the input to get the storage location for a\n  // file entity.\n  const { data: storageLocationUploadDestination } =\n    useGetUploadDestinationForStorageLocation(parentId!, storageLocationId!, {\n      enabled:\n        !isContainer &&\n        parentId !== undefined &&\n        storageLocationId != null,\n    })\n\n  // If this is the latest entity version, show the \"versionless\" DOI if it exists.\n  const useFallbackVersionlessDOI =\n    bundle &&\n    !bundle.doiAssociation &&\n    isVersionableEntity(bundle.entity) &&\n    bundle.entity.isLatestVersion\n  const { data: versionlessDOIAssociation } = useGetDOIAssociation(\n    entityId,\n    undefined,\n    'ENTITY',\n    {\n      enabled: useFallbackVersionlessDOI,\n    },\n  )\n\n  const size =\n    dataFileHandle?.contentSize &&\n    calculateFriendlyFileSize(dataFileHandle.contentSize)\n  const fileHandleStorageInfo =\n    dataFileHandle &&\n    getFileHandleStorageInfo(dataFileHandle, storageLocationUploadDestination)\n  const storageLocation =\n    fileHandleStorageInfo &&\n    'location' in fileHandleStorageInfo &&\n    fileHandleStorageInfo.location\n  const endpoint =\n    fileHandleStorageInfo &&\n    'endpoint' in fileHandleStorageInfo &&\n    fileHandleStorageInfo.endpoint\n  const bucket =\n    fileHandleStorageInfo &&\n    'bucket' in fileHandleStorageInfo &&\n    fileHandleStorageInfo.bucket\n  const fileKey =\n    fileHandleStorageInfo &&\n    'fileKey' in fileHandleStorageInfo &&\n    fileHandleStorageInfo.fileKey\n  const externalUrl =\n    fileHandleStorageInfo &&\n    'url' in fileHandleStorageInfo &&\n    fileHandleStorageInfo.url\n\n  const md5 = dataFileHandle?.contentMd5\n  const downloadAlias =\n    bundle?.entity.name != bundle?.fileName && bundle?.fileName\n\n  const uploadDestinationString =\n    defaultUploadDestination &&\n    getUploadDestinationString(defaultUploadDestination)\n\n  // If there is no version-specific DOI, fall back to the versionless DOI\n  const doiAssociation = useFallbackVersionlessDOI\n    ? versionlessDOIAssociation\n    : bundle?.doiAssociation\n  const doi = doiAssociation && `https://doi.org/${doiAssociation?.doiUri}`\n\n  const containerItems = entityChildrenResponse?.totalChildCount\n\n  const datasetItems =\n    bundle?.entity && isEntityRefCollectionView(bundle.entity)\n      ? ((bundle?.entity as EntityRefCollectionView).items ?? []).length\n      : null\n\n  return [\n    {\n      key: 'id',\n      title: 'SynID',\n      value: <CopyToClipboardString value={entityId} />,\n    },\n    {\n      key: 'access',\n      title: 'Access',\n      value: <HasAccessV2 entityId={entityId} />,\n    },\n    size && { key: 'fileSize', title: 'Size', value: size },\n    containerItems != null && {\n      key: 'containerItems',\n      title: 'Items',\n      value: containerItems.toLocaleString(),\n    },\n    datasetItems != null && {\n      key: 'entityRefCollectionItems',\n      title: 'Items',\n      value: datasetItems.toLocaleString(),\n    },\n    doi && {\n      key: 'doi',\n      title: 'DOI',\n      value: (\n        <Link href={doi} rel={'noopener noreferrer'} target={'_blank'}>\n          {doi}\n        </Link>\n      ),\n    },\n    md5 && {\n      key: 'fileMd5',\n      title: 'MD5',\n      value: <CopyToClipboardString value={md5} />,\n    },\n    storageLocation && {\n      key: 'fileStorageLocation',\n      title: 'Storage Location',\n      value: storageLocation,\n    },\n    uploadDestinationString && {\n      key: 'uploadDestination',\n      title: 'Storage Location',\n      value: uploadDestinationString,\n    },\n    endpoint && {\n      key: 'externalFileEndpoint',\n      title: 'Endpoint',\n      value: endpoint,\n    },\n    externalUrl && {\n      key: 'externalUrl',\n      title: 'URL',\n      value: externalUrl,\n    },\n    bucket && { key: 'externalFileBucket', title: 'Bucket', value: bucket },\n    fileKey && { key: 'externalFileKey', title: 'File Key', value: fileKey },\n    downloadAlias && {\n      key: 'fileAlias',\n      title: 'Alias',\n      value: (\n        <>\n          {'Name when downloaded will be: '}\n          <Box sx={{ display: 'inline', fontFamily: 'monospace' }}>\n            {downloadAlias}\n          </Box>\n        </>\n      ),\n    },\n  ].filter(item => !!item) as EntityProperty[]\n}\n","import React, { useState } from 'react'\nimport { Box, Divider, Link, Stack, Typography } from '@mui/material'\nimport { useGetEntityBundle } from '../../../../synapse-queries'\nimport AddConditionsForUseButton from '../../../AccessRequirement/AddConditionsForUseButton/AddConditionsForUseButton'\nimport { useSynapseContext } from '../../../../utils/context/SynapseContext'\nimport { useGetEntityTitleBarProperties } from './useGetEntityTitleBarProperties'\n\nexport type TitleBarPropertiesProps = {\n  entityId: string\n  versionNumber?: number\n  /* Callback invoked when an ACT member clicks \"Add Conditions for Use\". */\n  onActMemberClickAddConditionsForUse: () => void\n}\n\ntype PropertyProps = {\n  title: string\n  value: React.ReactNode\n}\nfunction Property(props: PropertyProps) {\n  const { title, value } = props\n  return (\n    <tr>\n      <td style={{ paddingRight: '1em' }}>\n        <Typography\n          component={'span'}\n          variant={'smallText1'}\n          sx={{\n            fontWeight: 700,\n          }}\n        >\n          {title}\n        </Typography>\n      </td>\n      <td>\n        <Typography component={'span'} variant={'smallText1'}>\n          {value}\n        </Typography>\n      </td>\n    </tr>\n  )\n}\n\n/**\n * The TitleBarProperties component displays a tabular view of the entity metadata on the Entity page.\n */\nexport default function TitleBarProperties(props: TitleBarPropertiesProps) {\n  const { entityId, versionNumber, onActMemberClickAddConditionsForUse } = props\n  const { isInExperimentalMode } = useSynapseContext()\n\n  // We don't need the entire bundle, but it's fetched for the rest of the title bar and useGetEntityTitleBarProperties below, so the cache will be hot.\n  const { data: bundle } = useGetEntityBundle(entityId, versionNumber)\n\n  // Actual entity data is fetched and transformed in this custom hook\n  const properties = useGetEntityTitleBarProperties(entityId, versionNumber)\n\n  const [showAllProperties, setShowAllProperties] = useState(false)\n\n  return (\n    <Box sx={{ padding: '20px 40px' }}>\n      <Stack\n        direction={'row'}\n        justifyContent={'space-between'}\n        alignItems={'flex-start'}\n      >\n        <Stack\n          direction=\"row\"\n          alignItems={'flex-start'}\n          divider={<Divider orientation=\"vertical\" flexItem />}\n          spacing={2}\n        >\n          {/* Always show the first 4 properties*/}\n          <table>\n            <tbody>\n              {properties.slice(0, 2).map(p => {\n                return <Property key={p.key} title={p.title} value={p.value} />\n              })}\n            </tbody>\n          </table>\n          {properties.length > 2 && (\n            <table>\n              <tbody>\n                {properties.slice(2, 4).map(p => {\n                  return (\n                    <Property key={p.key} title={p.title} value={p.value} />\n                  )\n                })}\n              </tbody>\n            </table>\n          )}\n          {/* If there are 5 or 6 properties, show them in the last column */}\n          {(properties.length === 5 || properties.length === 6) && (\n            <table>\n              <tbody>\n                {properties.slice(4, 6).map(p => {\n                  return (\n                    <Property key={p.key} title={p.title} value={p.value} />\n                  )\n                })}\n              </tbody>\n            </table>\n          )}\n          {/* If there are more than 6 properties, then just show a button that toggles showing the rest */}\n          {properties.length > 6 && (\n            <Link onClick={() => setShowAllProperties(v => !v)}>\n              {showAllProperties\n                ? 'Hide properties'\n                : `${properties.length - 4} more properties`}\n            </Link>\n          )}\n        </Stack>\n        <AddConditionsForUseButton\n          entityId={entityId}\n          onACTMemberClick={onActMemberClickAddConditionsForUse}\n        />\n      </Stack>\n      {showAllProperties && (\n        <Box sx={{ pt: '20px' }}>\n          <table>\n            <tbody>\n              {/* Show the remaining properties. */}\n              {properties.slice(4, Infinity).map(p => {\n                return <Property key={p.key} title={p.title} value={p.value} />\n              })}\n            </tbody>\n          </table>\n        </Box>\n      )}\n      {bundle?.entity?.description && isInExperimentalMode && (\n        <Box sx={{ marginTop: '10px', maxWidth: '720px' }}>\n          {bundle?.entity?.description}\n        </Box>\n      )}\n    </Box>\n  )\n}\n","import { useGetEntityBundle } from '../../../../synapse-queries'\nimport {\n  isEntityRefCollectionView,\n  isTable,\n  isVersionableEntity,\n} from '../../../../utils/functions/EntityTypeUtils'\nimport { truncateString } from '../../../../utils/functions/StringUtils'\nimport { Box, Link, Tooltip, Typography } from '@mui/material'\nimport React from 'react'\nimport { Entity } from '@sage-bionetworks/synapse-types'\nimport { ActionConfiguration } from '../action_menu/EntityActionMenu'\n\nconst MAX_VERSION_LABEL_LENGTH = 50\nexport type EntityTitleBarVersionInfoProps = {\n  entityId: string\n  versionNumber?: number\n  toggleShowVersionHistory: ActionConfiguration['onClick']\n}\n\nfunction getDisplayedVersionLabel(entity: Entity): string | null {\n  if (!isVersionableEntity(entity)) {\n    return null\n  }\n  if (isTable(entity) && entity.isLatestVersion) {\n    return null\n  }\n  return entity.versionLabel ?? null\n}\n\nfunction getDisplayedVersionNumber(entity: Entity): string | null {\n  if (!isVersionableEntity(entity)) {\n    return null\n  }\n  if (isTable(entity) && entity.isLatestVersion) {\n    if (isEntityRefCollectionView(entity)) {\n      return 'Draft Version'\n    }\n    return 'Current Version'\n  }\n  return `V${entity.versionNumber}${entity.isLatestVersion ? ' (Current)' : ''}`\n}\n\nexport function EntityTitleBarVersionInfo(\n  props: EntityTitleBarVersionInfoProps,\n) {\n  const { entityId, versionNumber, toggleShowVersionHistory } = props\n\n  const { data: bundle } = useGetEntityBundle(entityId, versionNumber)\n\n  const isVersionable = bundle?.entity && isVersionableEntity(bundle.entity)\n\n  const fullVersionLabel =\n    bundle?.entity && getDisplayedVersionLabel(bundle.entity)\n  const truncatedVersionLabel = fullVersionLabel\n    ? truncateString(fullVersionLabel, MAX_VERSION_LABEL_LENGTH)\n    : undefined\n\n  const versionNumberDisplay =\n    bundle?.entity && getDisplayedVersionNumber(bundle.entity)\n\n  if (!isVersionable) {\n    return null\n  }\n\n  return (\n    <Box sx={{ marginTop: '3px' }}>\n      <Tooltip title={fullVersionLabel} placement={'bottom'}>\n        <Typography\n          component={'span'}\n          variant=\"smallText1\"\n          sx={{\n            color: 'grey.700',\n            fontStyle: 'italic',\n          }}\n        >\n          {truncatedVersionLabel}\n        </Typography>\n      </Tooltip>\n      {fullVersionLabel && versionNumberDisplay && (\n        <Typography\n          component={'span'}\n          variant=\"smallText1\"\n          sx={{\n            color: 'grey.700',\n            marginLeft: '5px',\n            marginRight: '5px',\n          }}\n        >\n          /\n        </Typography>\n      )}\n      <Tooltip title={'Click to show version history'} placement={'top'}>\n        <Link\n          onClick={toggleShowVersionHistory}\n          variant=\"smallText1\"\n          sx={{ fontWeight: 400 }}\n        >\n          {versionNumberDisplay}\n        </Link>\n      </Tooltip>\n    </Box>\n  )\n}\n\nexport const EXPORTED_FOR_UNIT_TESTING = {\n  getDisplayedVersionLabel,\n  getDisplayedVersionNumber,\n}\n","import React from 'react'\nimport IconSvg, { type2SvgIconName } from '../../../IconSvg/IconSvg'\nimport { Avatar, Box, Skeleton, Stack, Typography } from '@mui/material'\nimport { useGetEntityBundle } from '../../../../synapse-queries'\nimport FavoriteButton from '../../../favorites/FavoriteButton'\nimport ConditionalWrapper from '../../../utils/ConditionalWrapper'\nimport EntityActionMenu, {\n  EntityActionMenuProps,\n} from '../action_menu/EntityActionMenu'\nimport TitleBarProperties from './TitleBarProperties'\nimport { EntityTitleBarVersionInfo } from './EntityTitleBarVersionInfo'\nimport { isDockerRepository } from '../../../../utils/types/IsType'\n\nexport type EntityPageTitleBarProps = {\n  entityId: string\n  versionNumber?: number\n  /* Props that will be passed through to an EntityActionMenu component */\n  entityActionMenuProps?: EntityActionMenuProps\n  /* Callback invoked when an ACT member clicks \"Add Conditions for Use\". */\n  onActMemberClickAddConditionsForUse: () => void\n}\n\n/**\n * The EntityPageTitleBar component is shown on every Entity page in Synapse, and shows an Entity's metadata and\n * provides controls to view and manipulate the Entity.\n */\nexport default function EntityPageTitleBar(props: EntityPageTitleBarProps) {\n  const { entityId, versionNumber, entityActionMenuProps } = props\n\n  const toggleShowVersionHistory =\n    entityActionMenuProps?.actionConfiguration['SHOW_VERSION_HISTORY']?.onClick\n\n  const { data: bundle, isLoading } = useGetEntityBundle(\n    entityId,\n    versionNumber,\n  )\n\n  const name =\n    bundle?.entity && isDockerRepository(bundle.entity)\n      ? bundle.entity.repositoryName\n      : bundle?.entity?.name\n\n  return (\n    <div>\n      <Box\n        sx={{\n          padding: '20px 40px',\n          backgroundColor: 'grey.100',\n        }}\n      >\n        <Stack direction={'row'}>\n          <Stack\n            direction={'row'}\n            alignItems={'center'}\n            sx={{\n              flexGrow: 1,\n            }}\n          >\n            <ConditionalWrapper\n              condition={isLoading}\n              wrapper={Skeleton}\n              wrapperProps={{\n                variant: 'circular',\n              }}\n            >\n              <Avatar sx={{ bgcolor: 'grey.300', height: 48, width: 48 }}>\n                {bundle?.entityType && (\n                  <IconSvg\n                    icon={\n                      bundle?.entityType\n                        ? type2SvgIconName[bundle.entityType]\n                        : 'file'\n                    }\n                    wrap={false}\n                    sx={{ color: 'grey.700' }}\n                  />\n                )}\n              </Avatar>\n            </ConditionalWrapper>\n            <Box sx={{ marginLeft: '10px', flexGrow: 1 }}>\n              <Stack direction={'row'} alignItems={'center'} gap={'3px'}>\n                <ConditionalWrapper condition={isLoading} wrapper={Skeleton}>\n                  <Typography variant={'headline2'}>\n                    {name ?? 'Name not set'}\n                  </Typography>\n                </ConditionalWrapper>\n                {bundle?.entity?.id && (\n                  <FavoriteButton entityId={bundle.entity.id} />\n                )}\n              </Stack>\n              <EntityTitleBarVersionInfo\n                entityId={entityId}\n                versionNumber={versionNumber}\n                toggleShowVersionHistory={toggleShowVersionHistory}\n              />\n            </Box>\n          </Stack>\n          {entityActionMenuProps && (\n            <EntityActionMenu {...entityActionMenuProps} />\n          )}\n        </Stack>\n      </Box>\n      <TitleBarProperties {...props} />\n    </div>\n  )\n}\n"],"names":["CopyToClipboardString","props","value","typographyVariant","tooltipText","setTooltipText","React","jsxs","Stack","jsx","Typography","Tooltip","event","IconSvg","useGetDOIAssociation","objectId","versionNumber","objectType","options","accessToken","keyFactory","useSynapseContext","useQuery","SynapseClient","useGetEntityTitleBarProperties","entityId","bundle","useGetEntityBundle","isContainer","isContainerType","dataFileHandle","getDataFileHandle","parentId","_a","storageLocationId","entityChildrenResponse","useGetEntityChildren","EntityType","defaultUploadDestination","useGetDefaultUploadDestination","storageLocationUploadDestination","useGetUploadDestinationForStorageLocation","useFallbackVersionlessDOI","isVersionableEntity","versionlessDOIAssociation","size","calculateFriendlyFileSize","fileHandleStorageInfo","getFileHandleStorageInfo","storageLocation","endpoint","bucket","fileKey","externalUrl","md5","downloadAlias","uploadDestinationString","getUploadDestinationString","doiAssociation","doi","containerItems","datasetItems","isEntityRefCollectionView","HasAccessV2","Link","Fragment","Box","item","Property","title","TitleBarProperties","onActMemberClickAddConditionsForUse","isInExperimentalMode","properties","showAllProperties","setShowAllProperties","useState","Divider","p","v","AddConditionsForUseButton","_b","MAX_VERSION_LABEL_LENGTH","getDisplayedVersionLabel","entity","isTable","getDisplayedVersionNumber","EntityTitleBarVersionInfo","toggleShowVersionHistory","isVersionable","fullVersionLabel","truncatedVersionLabel","truncateString","versionNumberDisplay","EntityPageTitleBar","entityActionMenuProps","isLoading","name","isDockerRepository","ConditionalWrapper","Skeleton","Avatar","type2SvgIconName","_c","FavoriteButton","EntityActionMenu"],"mappings":"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"}