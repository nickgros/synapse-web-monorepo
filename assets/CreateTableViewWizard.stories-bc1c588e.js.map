{"version":3,"file":"CreateTableViewWizard.stories-bc1c588e.js","sources":["../../src/components/CreateTableViewWizard/TableNameForm.tsx","../../src/components/CreateTableViewWizard/TableTypeSelection.tsx","../../src/components/CreateTableViewWizard/ViewTypeSelection.tsx","../../src/components/SqlDefinedTableEditor/SqlDefinedTableEditor.tsx","../../src/components/CreateTableViewWizard/CreateTableViewWizardUtils.ts","../../src/components/CreateTableViewWizard/CreateTableViewWizard.tsx"],"sourcesContent":["import React from 'react'\nimport { TextField } from '@mui/material'\nimport { useSynapseContext } from '../../utils'\n\ntype TableNameFormProps = {\n  name: string\n  setName: React.Dispatch<React.SetStateAction<string>>\n  description: string | undefined\n  setDescription: React.Dispatch<React.SetStateAction<string | undefined>>\n}\n\n/**\n * React component for the naming a new table or view.\n * Renders UI to provide the name and description of a table or view.\n */\nexport default function TableNameForm(props: TableNameFormProps) {\n  const { name, setName, description, setDescription } = props\n  const { isInExperimentalMode } = useSynapseContext()\n\n  return (\n    <>\n      <TextField\n        required\n        label={'Name'}\n        value={name}\n        onChange={e => {\n          setName(e.target.value)\n        }}\n        fullWidth\n      />\n      {isInExperimentalMode && (\n        <TextField\n          label={'Description'}\n          value={description}\n          onChange={e => {\n            setDescription(e.target.value || undefined)\n          }}\n          fullWidth\n          multiline\n          rows={3}\n          sx={{ my: 2 }}\n        />\n      )}\n    </>\n  )\n}\n","import React from 'react'\nimport WizardChoiceButtonGroup from '../WizardChoiceButton/WizardChoiceButtonGroup'\nimport WizardChoiceButton from '../WizardChoiceButton/WizardChoiceButton'\nimport WizardChoiceButtonDescription from '../WizardChoiceButton/WizardChoiceButtonDescription'\nimport { Link } from '@mui/material'\n\nconst TABLE_DESCRIPTION = (\n  <>\n    <WizardChoiceButtonDescription>\n      Synapse tables are used to organize web-accessible, sharable, and\n      queryable data. Tables may be queried and edited with the Synapse UI, as\n      well as with the Synapse programmatic clients.\n    </WizardChoiceButtonDescription>\n    <Link\n      href={\n        'https://help.synapse.org/docs/Organizing-Data-With-Tables.2011038095.html'\n      }\n      target=\"_blank\"\n      onClick={e => {\n        e.stopPropagation()\n      }}\n    >\n      More about Tables\n    </Link>\n  </>\n)\n\nconst VIEW_DESCRIPTION = (\n  <>\n    <WizardChoiceButtonDescription>\n      Views allow you to see and query groups of other objects in Synapse, such\n      as files, tables, projects, or submissions and any associated annotations\n      about those items.\n    </WizardChoiceButtonDescription>\n    <Link\n      href={'https://help.synapse.org/docs/Views.2011070739.html'}\n      target=\"_blank\"\n      onClick={e => {\n        e.stopPropagation()\n      }}\n    >\n      More about Views\n    </Link>\n  </>\n)\n\nexport type TableTypeSelectionProps = {\n  /* Callback invoked if the user selects \"Table\" */\n  onTableSelected: () => void\n  /* Callback invoked if the user selects the \"View\" group, which will show more options */\n  onViewSelected: () => void\n}\n\n/**\n * React component for the first step of creating a new table or view.\n * The user will decide if they want to create a Table or a View\n */\nexport default function TableTypeSelection(props: TableTypeSelectionProps) {\n  const { onTableSelected, onViewSelected } = props\n  return (\n    <WizardChoiceButtonGroup>\n      <WizardChoiceButton\n        title={'Table'}\n        description={TABLE_DESCRIPTION}\n        onClick={() => {\n          onTableSelected()\n        }}\n      />\n      <WizardChoiceButton\n        title={'View'}\n        description={VIEW_DESCRIPTION}\n        onClick={onViewSelected}\n      />\n    </WizardChoiceButtonGroup>\n  )\n}\n","import React from 'react'\nimport {\n  ENTITY_VIEW_TYPE_MASK_PROJECT,\n  EntityType,\n} from '@sage-bionetworks/synapse-types'\nimport WizardChoiceButtonGroup from '../WizardChoiceButton/WizardChoiceButtonGroup'\nimport WizardChoiceButton from '../WizardChoiceButton/WizardChoiceButton'\nimport { Link } from '@mui/material'\nimport WizardChoiceButtonDescription from '../WizardChoiceButton/WizardChoiceButtonDescription'\nimport { useSynapseContext } from '../../utils'\n\nconst FILE_VIEW_DESCRIPTION = (\n  <>\n    <WizardChoiceButtonDescription>\n      This view lists all files, folders, and/or tables in the selected folders\n      or projects.\n    </WizardChoiceButtonDescription>\n    <Link\n      href={\n        'https://help.synapse.org/docs/Views.2011070739.html#Views-CreatingaFileView'\n      }\n      target=\"_blank\"\n      onClick={e => {\n        e.stopPropagation()\n      }}\n    >\n      More about File Views\n    </Link>\n  </>\n)\n\nconst PROJECT_VIEW_DESCRIPTION = (\n  <>\n    <WizardChoiceButtonDescription>\n      This view lists all (and only) your selected projects.\n    </WizardChoiceButtonDescription>\n    <Link\n      href={\n        'https://help.synapse.org/docs/Views.2011070739.html#Views-CreatingaProjectView'\n      }\n      target=\"_blank\"\n      onClick={e => {\n        e.stopPropagation()\n      }}\n    >\n      More about Project Views\n    </Link>\n  </>\n)\n\nconst SUBMISSION_VIEW_DESCRIPTION = (\n  <>\n    <WizardChoiceButtonDescription>\n      This view lists all submissions within one or more evaluation queues.\n    </WizardChoiceButtonDescription>\n    <Link\n      href={\n        'https://help.synapse.org/docs/Views.2011070739.html#Views-CreatingaSubmissionView'\n      }\n      target=\"_blank\"\n      onClick={e => {\n        e.stopPropagation()\n      }}\n    >\n      More about Submission Views\n    </Link>\n  </>\n)\n\nconst MATERIALIZED_VIEW_DESCRIPTION = (\n  <>\n    <WizardChoiceButtonDescription>\n      The results of a query across multiple sources, defined by a SQL\n      statement.\n    </WizardChoiceButtonDescription>\n    <Link\n      href={\n        'https://help.synapse.org/docs/Combining-Data-from-Multiple-Table-Sources.2973270158.html'\n      }\n      target=\"_blank\"\n      onClick={e => {\n        e.stopPropagation()\n      }}\n    >\n      More about Materialized Views\n    </Link>\n  </>\n)\n\nconst VIRTUAL_TABLE_DESCRIPTION = (\n  <WizardChoiceButtonDescription>\n    A saved query on another table or view where complex filters can be applied\n    to aggregated results.\n  </WizardChoiceButtonDescription>\n)\n\nexport type ViewTypeSelectionProps = {\n  /* Callback including the chosen type, and optional viewTypeMask if included in the choice (e.g. Project Views) */\n  onTypeSelected: (type: EntityType, viewTypeMask?: number) => void\n}\n\n/**\n * React component for selecting a View type in the View creation wizard.\n * Renders UI to show all view types where the user must choose one to continue.\n */\nexport default function ViewTypeSelection(props: ViewTypeSelectionProps) {\n  const { onTypeSelected } = props\n\n  const { isInExperimentalMode } = useSynapseContext()\n\n  return (\n    <WizardChoiceButtonGroup>\n      <WizardChoiceButton\n        title={'Files, Folders, and Other Objects'}\n        description={FILE_VIEW_DESCRIPTION}\n        onClick={() => {\n          onTypeSelected(EntityType.ENTITY_VIEW)\n        }}\n      />\n      <WizardChoiceButton\n        title={'Projects'}\n        description={PROJECT_VIEW_DESCRIPTION}\n        onClick={() => {\n          onTypeSelected(EntityType.ENTITY_VIEW, ENTITY_VIEW_TYPE_MASK_PROJECT)\n        }}\n      />\n      <WizardChoiceButton\n        title={'Challenge Submissions'}\n        description={SUBMISSION_VIEW_DESCRIPTION}\n        onClick={() => {\n          onTypeSelected(EntityType.SUBMISSION_VIEW)\n        }}\n      />\n      <WizardChoiceButton\n        title={'Materialized View'}\n        description={MATERIALIZED_VIEW_DESCRIPTION}\n        onClick={() => {\n          onTypeSelected(EntityType.MATERIALIZED_VIEW)\n        }}\n      />\n      {isInExperimentalMode && (\n        <WizardChoiceButton\n          title={'Virtual Table'}\n          description={VIRTUAL_TABLE_DESCRIPTION}\n          onClick={() => {\n            onTypeSelected(EntityType.VIRTUAL_TABLE)\n          }}\n        />\n      )}\n    </WizardChoiceButtonGroup>\n  )\n}\n","import React from 'react'\nimport { Box, Link, TextField, Typography } from '@mui/material'\nimport { TextFieldProps } from '@mui/material/TextField'\nimport { EntityType } from '@sage-bionetworks/synapse-types'\n\nconst MATERIALIZED_VIEW_HELP = (\n  <Box mb={2.5}>\n    <Typography variant={'body1'} color={'grey.700'} mb={1.25}>\n      If you store normalized data in Synapse tables, views, or datasets, you\n      can combine separate data sources using Materialized Views. A materialized\n      view is a type of Synapse table that is defined using a Synapse SQL\n      statement, which can contain SQL keywords such as JOIN and UNION to\n      combine existing Synapse tables.\n    </Typography>\n    <Link\n      href={\n        'https://help.synapse.org/docs/Combining-Data-from-Multiple-Table-Sources.2973270158.html'\n      }\n      target=\"_blank\"\n      onClick={e => {\n        e.stopPropagation()\n      }}\n    >\n      More about Materialized Views\n    </Link>\n  </Box>\n)\n\nconst VIRTUAL_TABLE_HELP = (\n  <Box mb={2.5}>\n    <Typography variant={'body1'} color={'grey.700'} mb={1.25}>\n      A Synapse Virtual Table is a type of table that is defined by a Synapse\n      SQL query. Any query on a Virtual Table will execute the defining SQL\n      statement on the referenced table. The defining SQL of a Virtual Table\n      cannot include JOIN clauses on multiple tables.\n    </Typography>\n  </Box>\n)\n\nexport type SqlDefinedTableEditorProps = TextFieldProps & {\n  /* Optional entity type for showing help documentation */\n  entityType?: EntityType\n}\n\n/**\n * Component used to edit the SQL of a Synapse entity defined by SQL, such as a MaterializedView or VirtualTable\n * @param props\n * @constructor\n */\nexport default function SqlDefinedTableEditor(\n  props: SqlDefinedTableEditorProps,\n) {\n  const { entityType, ...textFieldProps } = props\n  return (\n    <>\n      {entityType === EntityType.MATERIALIZED_VIEW && MATERIALIZED_VIEW_HELP}\n      {entityType === EntityType.VIRTUAL_TABLE && VIRTUAL_TABLE_HELP}\n      <TextField\n        label={'Defining SQL'}\n        placeholder={'SELECT * FROM syn123'}\n        fullWidth\n        multiline\n        required\n        minRows={6}\n        {...textFieldProps}\n      />\n    </>\n  )\n}\n","import {\n  ColumnModel,\n  Entity,\n  EntityType,\n  EntityView,\n  MaterializedView,\n  SubmissionView,\n  Table,\n  VirtualTable,\n} from '@sage-bionetworks/synapse-types'\nimport { entityTypeToFriendlyName } from '../../utils/functions/EntityTypeUtils'\n\nexport type CreateTableViewWizardStep =\n  | 'CHOOSE_TABLE_TYPE'\n  | 'CHOOSE_VIEW_TYPE'\n  | 'ENTITY_VIEW_SCOPE'\n  | 'SUBMISSION_VIEW_SCOPE'\n  | 'TABLE_COLUMNS'\n  | 'TABLE_SQL'\n  | 'TABLE_NAME'\n\nexport function getModalTitle(\n  step: CreateTableViewWizardStep,\n  entityType?: EntityType,\n): string {\n  switch (step) {\n    case 'CHOOSE_TABLE_TYPE':\n      return 'Create Table or View'\n    case 'CHOOSE_VIEW_TYPE':\n      return 'Create View'\n    case 'ENTITY_VIEW_SCOPE':\n    case 'SUBMISSION_VIEW_SCOPE':\n      return `Define ${entityTypeToFriendlyName(entityType!)} Scope`\n    case 'TABLE_SQL':\n      return 'Create a SQL-Defined View'\n\n    case 'TABLE_COLUMNS':\n      return `Add Columns to ${entityTypeToFriendlyName(entityType!)}`\n\n    case 'TABLE_NAME':\n      return `Describe the ${entityTypeToFriendlyName(entityType!)}`\n  }\n}\n\nexport function getPreviousStep(\n  currentStep: CreateTableViewWizardStep,\n  entityType?: EntityType,\n): CreateTableViewWizardStep {\n  switch (currentStep) {\n    case 'CHOOSE_TABLE_TYPE':\n      // This should never happen\n      break\n    case 'CHOOSE_VIEW_TYPE':\n      return 'CHOOSE_TABLE_TYPE'\n    case 'ENTITY_VIEW_SCOPE':\n    case 'SUBMISSION_VIEW_SCOPE':\n    case 'TABLE_SQL':\n      return 'CHOOSE_VIEW_TYPE'\n    case 'TABLE_COLUMNS':\n      // If this is a table, then go back to the table type selection\n      if (entityType === EntityType.TABLE) {\n        return 'CHOOSE_TABLE_TYPE'\n      }\n      // If this is a view, go back to scope selection\n      if (entityType === EntityType.ENTITY_VIEW) {\n        return 'ENTITY_VIEW_SCOPE'\n      }\n      if (entityType === EntityType.SUBMISSION_VIEW) {\n        return 'SUBMISSION_VIEW_SCOPE'\n      }\n      break\n    case 'TABLE_NAME':\n      if (\n        entityType === EntityType.TABLE ||\n        entityType === EntityType.ENTITY_VIEW ||\n        entityType === EntityType.SUBMISSION_VIEW\n      ) {\n        return 'TABLE_COLUMNS'\n      } else if (\n        entityType === EntityType.MATERIALIZED_VIEW ||\n        entityType === EntityType.VIRTUAL_TABLE\n      ) {\n        // TODO: Currently, this block is unreachable\n        // TABLE_SQL is the last step, but after PLFM-8209 is complete, TABLE_SQL can come before TABLE_NAME, where this will make more sense\n        // Other than removing this comment, no change will be needed here\n        return 'TABLE_SQL'\n      }\n      break\n  }\n  console.warn(`Unknown previous step at ${currentStep} for type ${entityType}`)\n  return 'CHOOSE_TABLE_TYPE'\n}\n\nexport function isLastStep(step: CreateTableViewWizardStep) {\n  // TODO: after PLFM-8209 is complete, TABLE_SQL can come before TABLE_NAME\n  // TABLE_SQL should then be removed from this fn\n  return step === 'TABLE_NAME' || step === 'TABLE_SQL'\n}\n\nexport function getStepAfterTypeSelection(\n  entityType: EntityType,\n): CreateTableViewWizardStep {\n  if (entityType === EntityType.TABLE) {\n    return 'TABLE_COLUMNS'\n  }\n  if (entityType === EntityType.ENTITY_VIEW) {\n    return 'ENTITY_VIEW_SCOPE'\n  }\n  if (entityType === EntityType.SUBMISSION_VIEW) {\n    return 'SUBMISSION_VIEW_SCOPE'\n  }\n  if (\n    entityType === EntityType.MATERIALIZED_VIEW ||\n    entityType === EntityType.VIRTUAL_TABLE\n  ) {\n    return 'TABLE_SQL'\n  }\n\n  // Should never happen\n  return 'CHOOSE_TABLE_TYPE'\n}\n\nexport function maybeSetColumnIds(\n  entityToCreate: Entity,\n  entityType: EntityType,\n  createdColumnModels: ColumnModel[],\n) {\n  if (\n    [\n      EntityType.TABLE,\n      EntityType.ENTITY_VIEW,\n      EntityType.SUBMISSION_VIEW,\n      EntityType.DATASET,\n      EntityType.DATASET_COLLECTION,\n    ].includes(entityType)\n  ) {\n    if (createdColumnModels.length > 0) {\n      ;(entityToCreate as Table)['columnIds'] = createdColumnModels.map(\n        cm => cm.id,\n      )\n    }\n  }\n}\n\nexport function maybeSetScopeIds(\n  entityToCreate: Entity,\n  entityType: EntityType,\n  scopeIds: string[],\n) {\n  if (\n    [EntityType.ENTITY_VIEW, EntityType.SUBMISSION_VIEW].includes(entityType) &&\n    scopeIds.length > 0\n  ) {\n    ;(entityToCreate as EntityView | SubmissionView)['scopeIds'] = scopeIds\n  }\n}\n\nexport function maybeSetViewTypeMask(\n  entityToCreate: Entity,\n  entityType: EntityType,\n  viewTypeMask: number,\n) {\n  if (entityType === EntityType.ENTITY_VIEW) {\n    ;(entityToCreate as EntityView)['viewTypeMask'] = viewTypeMask\n  }\n}\n\nexport function maybeSetDefiningSQL(\n  entityToCreate: Entity,\n  entityType: EntityType,\n  sql: string,\n) {\n  if (\n    [EntityType.MATERIALIZED_VIEW, EntityType.VIRTUAL_TABLE].includes(\n      entityType,\n    )\n  ) {\n    ;(entityToCreate as MaterializedView | VirtualTable)['definingSQL'] = sql\n  }\n}\n","import React, { useCallback, useMemo, useRef, useState } from 'react'\nimport TableNameForm from './TableNameForm'\nimport {\n  ColumnModel,\n  Entity,\n  ENTITY_VIEW_TYPE_MASK_FILE,\n  ENTITY_VIEW_TYPE_MASK_PROJECT,\n  EntityType,\n  ViewEntityType,\n  ViewScope,\n} from '@sage-bionetworks/synapse-types'\nimport TableTypeSelection from './TableTypeSelection'\nimport { Alert, Box, Button } from '@mui/material'\nimport { useCreateEntity } from '../../synapse-queries'\nimport { convertToConcreteEntityType } from '../../utils/functions/EntityTypeUtils'\nimport ViewTypeSelection from './ViewTypeSelection'\nimport TableColumnSchemaForm, {\n  SubmitHandle,\n} from '../TableColumnSchemaEditor/TableColumnSchemaForm'\nimport EntityViewScopeEditor from '../EntityViewScopeEditor/EntityViewScopeEditor'\nimport { SetOptional } from 'type-fest'\nimport SqlDefinedTableEditor from '../SqlDefinedTableEditor/SqlDefinedTableEditor'\nimport {\n  useCreateColumnModels,\n  useGetDefaultColumnModels,\n} from '../../synapse-queries/table/useColumnModel'\nimport EntityViewMaskEditor from '../EntityViewScopeEditor/EntityViewMaskEditor'\nimport { DialogBase } from '../DialogBase'\nimport {\n  CreateTableViewWizardStep,\n  getModalTitle,\n  getPreviousStep,\n  getStepAfterTypeSelection,\n  isLastStep,\n  maybeSetColumnIds,\n  maybeSetDefiningSQL,\n  maybeSetScopeIds,\n  maybeSetViewTypeMask,\n} from './CreateTableViewWizardUtils'\nimport SubmissionViewScopeEditor from '../SubmissionViewScopeEditor/SubmissionViewScopeEditor'\nimport { isUndefined, omitBy } from 'lodash-es'\n\nexport type CreateTableViewWizardProps = {\n  open: boolean\n  parentId: string\n  onCancel: () => void\n  onComplete: (newEntityId: string) => void\n}\n\n/**\n * Wizard to create a Synapse table, view, or other table type.\n *\n * See the README.md in this folder for a visualization of the flowchart\n *\n * @param props\n * @constructor\n */\nexport default function CreateTableViewWizard(\n  props: CreateTableViewWizardProps,\n) {\n  const { open, parentId, onComplete, onCancel } = props\n  const [step, setStep] =\n    useState<CreateTableViewWizardStep>('CHOOSE_TABLE_TYPE')\n\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState<string | undefined>(undefined)\n\n  const [entityType, setEntityType] = useState<EntityType | undefined>(\n    undefined,\n  )\n\n  const [entityViewScopeIds, setEntityViewScopeIds] = useState<string[]>([])\n  const [submissionViewScopeIds, setSubmissionViewScopeIds] = useState<\n    string[]\n  >([])\n  const [viewTypeMask, setViewTypeMask] = useState<number>(\n    ENTITY_VIEW_TYPE_MASK_FILE,\n  )\n  const isProjectView = viewTypeMask === ENTITY_VIEW_TYPE_MASK_PROJECT\n\n  const [columnModels, setColumnModels] = useState<\n    SetOptional<ColumnModel, 'id'>[]\n  >([])\n  const columnSchemaFormRef = useRef<SubmitHandle>(null)\n\n  const [sql, setSql] = useState('')\n\n  const viewScope: ViewScope | undefined = useMemo(() => {\n    if (entityType === EntityType.ENTITY_VIEW) {\n      return {\n        scope: entityViewScopeIds,\n        viewTypeMask,\n        viewEntityType: entityType as ViewEntityType,\n      }\n    } else if (entityType === EntityType.SUBMISSION_VIEW) {\n      return {\n        scope: submissionViewScopeIds,\n        viewEntityType: entityType as ViewEntityType,\n      }\n    }\n    return undefined\n  }, [entityType, entityViewScopeIds, submissionViewScopeIds, viewTypeMask])\n\n  const {\n    data: defaultColumnModels,\n    isLoading: isLoadingDefaultColumns,\n    isError: errorFetchingDefaultColumns,\n  } = useGetDefaultColumnModels(\n    viewScope?.viewEntityType!,\n    viewScope?.viewTypeMask,\n    {\n      // Fetch the default columns when the user is determining scope\n      // This way we can pre-fill the columns right before they go to the columns step\n      // We will prevent clicking \"Next\" before this is loaded\n      enabled: step === 'ENTITY_VIEW_SCOPE' || step === 'SUBMISSION_VIEW_SCOPE',\n      staleTime: Infinity, // The default column models will never change\n    },\n  )\n\n  const { mutateAsync: createEntity, error: createEntityError } =\n    useCreateEntity({\n      onSuccess: entity => {\n        onComplete(entity.id!)\n      },\n    })\n\n  const { mutateAsync: createColumnModels, error: createColumnModelsError } =\n    useCreateColumnModels()\n\n  const onTableTypeSelected = useCallback(\n    (entityType: EntityType, viewTypeMask?: number) => {\n      setEntityType(entityType)\n      if (viewTypeMask != null) {\n        setViewTypeMask(viewTypeMask)\n      }\n      setStep(getStepAfterTypeSelection(entityType))\n    },\n    [],\n  )\n\n  const onViewSelected = useCallback(() => {\n    setStep('CHOOSE_VIEW_TYPE')\n  }, [])\n\n  const onFinish = useCallback(async () => {\n    if (!entityType) {\n      console.error('entityType was not defined!')\n      setStep('CHOOSE_TABLE_TYPE')\n      return\n    }\n    // Create the column models\n    let createdColumnModels: ColumnModel[] = []\n    if (\n      columnModels &&\n      // Do not create columns if this is a SQL-defined view\n      entityType !== EntityType.MATERIALIZED_VIEW &&\n      entityType !== EntityType.VIRTUAL_TABLE\n    ) {\n      try {\n        createdColumnModels = await createColumnModels(\n          columnModels.map(cm => omitBy(cm, isUndefined)) as SetOptional<\n            ColumnModel,\n            'id'\n          >[],\n        )\n      } catch (e) {\n        // Error will be handled by the hook, exit early if we encountered one\n        return\n      }\n    }\n    // Create the entity\n    const entityToCreate: Entity = {\n      name,\n      description,\n      parentId: parentId,\n      concreteType: convertToConcreteEntityType(entityType),\n    }\n\n    maybeSetColumnIds(entityToCreate, entityType, createdColumnModels)\n    maybeSetScopeIds(\n      entityToCreate,\n      entityType,\n      entityType === EntityType.SUBMISSION_VIEW\n        ? submissionViewScopeIds\n        : entityViewScopeIds,\n    )\n    maybeSetViewTypeMask(entityToCreate, entityType, viewTypeMask)\n    maybeSetDefiningSQL(entityToCreate, entityType, sql)\n\n    try {\n      await createEntity(entityToCreate)\n    } catch (e) {\n      // Error will be handled by the hook\n      return\n    }\n  }, [\n    columnModels,\n    createColumnModels,\n    createEntity,\n    description,\n    entityType,\n    name,\n    parentId,\n    entityViewScopeIds,\n    submissionViewScopeIds,\n    sql,\n    viewTypeMask,\n  ])\n  const onColumnSchemaSubmit = useCallback(\n    (columnModels: SetOptional<ColumnModel, 'id'>[]) => {\n      setColumnModels(columnModels)\n      setStep('TABLE_NAME')\n    },\n    [],\n  )\n\n  const onColumnSchemaNextClicked = useCallback(() => {\n    if (columnSchemaFormRef.current != null) {\n      columnSchemaFormRef.current.submit()\n    }\n  }, [])\n\n  const showBackButton = step !== 'CHOOSE_TABLE_TYPE'\n  const showNextButton =\n    step !== 'CHOOSE_TABLE_TYPE' && step !== 'CHOOSE_VIEW_TYPE'\n\n  const onBackButtonClicked = useCallback(() => {\n    const previousStep = getPreviousStep(step, entityType)\n    // Clear the columns if the user changed their mind on the type of table they want to create\n    // e.g. if you pick file view, add columns, go back, switch to a submission view, the columns should reset.\n    if (['CHOOSE_TABLE_TYPE', 'CHOOSE_VIEW_TYPE'].includes(previousStep)) {\n      setColumnModels([])\n    }\n    setStep(previousStep)\n  }, [step, entityType])\n\n  const onNextButtonClicked = useCallback(() => {\n    if (isLastStep(step)) {\n      void onFinish()\n    } else if (step === 'TABLE_COLUMNS') {\n      onColumnSchemaNextClicked()\n    } else if (\n      step === 'ENTITY_VIEW_SCOPE' ||\n      step === 'SUBMISSION_VIEW_SCOPE'\n    ) {\n      // We make sure that the default column models are loaded before the user gets to this step by disabling the \"Next\" button while we are fetching them (unless there's an error)\n      // So we can assume that defaultColumnModels is safely loaded. If not, user will just start with 0 columns, which is acceptable.\n      if (columnModels.length == 0 && defaultColumnModels) {\n        setColumnModels(\n          defaultColumnModels.map(cm => ({ ...cm, id: undefined })),\n        )\n      }\n      setStep('TABLE_COLUMNS')\n    }\n  }, [\n    step,\n    onFinish,\n    onColumnSchemaNextClicked,\n    columnModels.length,\n    defaultColumnModels,\n  ])\n\n  const isNextButtonDisabled = useMemo(() => {\n    if (step === 'ENTITY_VIEW_SCOPE') {\n      return (\n        entityViewScopeIds.length === 0 ||\n        viewTypeMask === 0 ||\n        (isLoadingDefaultColumns && !errorFetchingDefaultColumns)\n      )\n    }\n    if (step === 'SUBMISSION_VIEW_SCOPE') {\n      return (\n        submissionViewScopeIds.length === 0 ||\n        viewTypeMask === 0 ||\n        (isLoadingDefaultColumns && !errorFetchingDefaultColumns)\n      )\n    }\n    return false\n  }, [\n    entityViewScopeIds.length,\n    submissionViewScopeIds.length,\n    step,\n    viewTypeMask,\n    isLoadingDefaultColumns,\n    errorFetchingDefaultColumns,\n  ])\n\n  const errorContent = useMemo(() => {\n    return (\n      <>\n        {createEntityError && (\n          <Alert sx={{ my: 2 }} severity=\"error\">\n            {createEntityError.message}\n          </Alert>\n        )}\n        {createColumnModelsError && (\n          <Alert sx={{ my: 2 }} severity=\"error\">\n            {createColumnModelsError.message}\n          </Alert>\n        )}\n      </>\n    )\n  }, [createColumnModelsError, createEntityError])\n\n  const stepContent = useMemo(() => {\n    switch (step) {\n      case 'CHOOSE_TABLE_TYPE':\n        return (\n          <TableTypeSelection\n            onTableSelected={() => {\n              onTableTypeSelected(EntityType.TABLE)\n            }}\n            onViewSelected={onViewSelected}\n          />\n        )\n      case 'CHOOSE_VIEW_TYPE':\n        return <ViewTypeSelection onTypeSelected={onTableTypeSelected} />\n      case 'ENTITY_VIEW_SCOPE':\n        return (\n          <>\n            <EntityViewScopeEditor\n              scopeIds={entityViewScopeIds}\n              onChange={setEntityViewScopeIds}\n              isProjectView={isProjectView}\n            />\n            {!isProjectView && (\n              <EntityViewMaskEditor\n                value={viewTypeMask}\n                onChange={setViewTypeMask}\n              />\n            )}\n          </>\n        )\n      case 'SUBMISSION_VIEW_SCOPE':\n        return (\n          <SubmissionViewScopeEditor\n            evaluationIds={submissionViewScopeIds}\n            onChange={setSubmissionViewScopeIds}\n          />\n        )\n      case 'TABLE_SQL':\n        return (\n          <>\n            <TableNameForm\n              name={name}\n              setName={setName}\n              description={description}\n              setDescription={setDescription}\n            />\n            {/* TODO: Move SqlDefinedTableEditor to its own step, see https://sagebionetworks.jira.com/browse/PLFM-8209 */}\n            <Box mt={1.25}>\n              <SqlDefinedTableEditor\n                value={sql}\n                onChange={e => setSql(e.target.value)}\n                entityType={entityType}\n              />\n            </Box>\n            {errorContent}\n          </>\n        )\n      case 'TABLE_COLUMNS':\n        return (\n          <TableColumnSchemaForm\n            initialData={columnModels}\n            entityType={entityType!}\n            ref={columnSchemaFormRef}\n            onSubmit={onColumnSchemaSubmit}\n            viewScope={viewScope}\n          />\n        )\n      case 'TABLE_NAME':\n        return (\n          <>\n            <TableNameForm\n              name={name}\n              setName={setName}\n              description={description}\n              setDescription={setDescription}\n            />\n            {errorContent}\n          </>\n        )\n    }\n  }, [\n    step,\n    onViewSelected,\n    onTableTypeSelected,\n    entityViewScopeIds,\n    isProjectView,\n    viewTypeMask,\n    submissionViewScopeIds,\n    name,\n    description,\n    sql,\n    entityType,\n    errorContent,\n    columnModels,\n    onColumnSchemaSubmit,\n    viewScope,\n  ])\n\n  return (\n    <DialogBase\n      open={open}\n      onCancel={onCancel}\n      maxWidth={'md'}\n      title={getModalTitle(step, entityType)}\n      content={stepContent}\n      actions={\n        <Box display={'flex'} width={'100%'} gap={2.25} mt={2}>\n          {showBackButton && (\n            <Button variant={'outlined'} onClick={onBackButtonClicked}>\n              Back\n            </Button>\n          )}\n          <Box m={'auto'} />\n          <Button variant={'outlined'} onClick={onCancel}>\n            Cancel\n          </Button>\n          {showNextButton && (\n            <Button\n              variant={'contained'}\n              onClick={onNextButtonClicked}\n              disabled={isNextButtonDisabled}\n            >\n              {isLastStep(step) ? 'Finish' : 'Next'}\n            </Button>\n          )}\n        </Box>\n      }\n    />\n  )\n}\n"],"names":["TableNameForm","props","name","setName","description","setDescription","isInExperimentalMode","useSynapseContext","jsxs","Fragment","jsx","TextField","e","TABLE_DESCRIPTION","WizardChoiceButtonDescription","Link","VIEW_DESCRIPTION","TableTypeSelection","onTableSelected","onViewSelected","WizardChoiceButtonGroup","WizardChoiceButton","FILE_VIEW_DESCRIPTION","PROJECT_VIEW_DESCRIPTION","SUBMISSION_VIEW_DESCRIPTION","MATERIALIZED_VIEW_DESCRIPTION","VIRTUAL_TABLE_DESCRIPTION","ViewTypeSelection","onTypeSelected","EntityType","ENTITY_VIEW_TYPE_MASK_PROJECT","MATERIALIZED_VIEW_HELP","Box","Typography","VIRTUAL_TABLE_HELP","SqlDefinedTableEditor","entityType","textFieldProps","getModalTitle","step","entityTypeToFriendlyName","getPreviousStep","currentStep","isLastStep","getStepAfterTypeSelection","maybeSetColumnIds","entityToCreate","createdColumnModels","cm","maybeSetScopeIds","scopeIds","maybeSetViewTypeMask","viewTypeMask","maybeSetDefiningSQL","sql","CreateTableViewWizard","open","parentId","onComplete","onCancel","setStep","useState","setEntityType","entityViewScopeIds","setEntityViewScopeIds","submissionViewScopeIds","setSubmissionViewScopeIds","setViewTypeMask","ENTITY_VIEW_TYPE_MASK_FILE","isProjectView","columnModels","setColumnModels","columnSchemaFormRef","useRef","setSql","viewScope","useMemo","defaultColumnModels","isLoadingDefaultColumns","errorFetchingDefaultColumns","useGetDefaultColumnModels","createEntity","createEntityError","useCreateEntity","entity","createColumnModels","createColumnModelsError","useCreateColumnModels","onTableTypeSelected","useCallback","entityType2","viewTypeMask2","onFinish","omitBy","isUndefined","convertToConcreteEntityType","onColumnSchemaSubmit","columnModels2","onColumnSchemaNextClicked","showBackButton","showNextButton","onBackButtonClicked","previousStep","onNextButtonClicked","isNextButtonDisabled","errorContent","Alert","stepContent","EntityViewScopeEditor","EntityViewMaskEditor","SubmissionViewScopeEditor","TableColumnSchemaForm","DialogBase","Button"],"mappings":"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"}