{"version":3,"file":"DropdownSelect-bf196216.js","sources":["../../src/components/DropdownSelect/DropdownSelect.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  Button,\n  ButtonGroup,\n  ButtonProps,\n  ClickAwayListener,\n  Grow,\n  MenuItem,\n  MenuList,\n  Paper,\n  Popper,\n} from '@mui/material'\nimport IconSvg from '../IconSvg'\n\nexport type DropdownSelectProps = {\n  options: string[]\n  selectedIndex?: number\n  setSelectedIndex?: (selectedIndex: number) => void\n  onButtonClick?: (selectedIndex: number) => void\n  variant?: ButtonProps['variant']\n  buttonGroupAriaLabel?: string\n}\n// Derived from https://mui.com/material-ui/react-button-group/#split-button\n\n/**\n * Renders a button group that acts as a select group\n * @param props\n * @constructor\n */\nexport default function DropdownSelect(props: DropdownSelectProps) {\n  const {\n    options,\n    selectedIndex,\n    setSelectedIndex,\n    variant = 'contained',\n    buttonGroupAriaLabel,\n    onButtonClick,\n  } = props\n  const [open, setOpen] = React.useState(false)\n  const anchorRef = React.useRef<HTMLDivElement>(null)\n  const [selectedIndexLocal, setSelectedIndexLocal] = useState(\n    selectedIndex ?? 0,\n  )\n\n  const handleMenuItemClick = (\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>,\n    index: number,\n  ) => {\n    if (setSelectedIndex) {\n      setSelectedIndex(index)\n    } else {\n      setSelectedIndexLocal(index)\n    }\n    setOpen(false)\n  }\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen)\n  }\n\n  const handleClose = (event: Event) => {\n    if (\n      anchorRef.current &&\n      anchorRef.current.contains(event.target as HTMLElement)\n    ) {\n      return\n    }\n\n    setOpen(false)\n  }\n\n  return (\n    <React.Fragment>\n      <ButtonGroup variant={variant} ref={anchorRef} aria-label=\"split button\">\n        <Button\n          onClick={() => {\n            if (onButtonClick) {\n              onButtonClick(selectedIndex ?? selectedIndexLocal)\n            } else {\n              handleToggle()\n            }\n          }}\n        >\n          {options[selectedIndex ?? selectedIndexLocal]}\n        </Button>\n        <Button\n          size=\"small\"\n          aria-controls={open ? 'split-button-menu' : undefined}\n          aria-expanded={open ? 'true' : undefined}\n          aria-label={buttonGroupAriaLabel}\n          aria-haspopup=\"menu\"\n          onClick={handleToggle}\n          sx={{ width: '36px' }}\n        >\n          <IconSvg icon={'expandMore'} wrap={false} />\n        </Button>\n      </ButtonGroup>\n      <Popper\n        sx={{\n          zIndex: 10,\n        }}\n        open={open}\n        placement={'bottom-start'}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === 'bottom' ? 'center top' : 'center bottom',\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList id=\"split-button-menu\" autoFocusItem>\n                  {options.map((option, index) => (\n                    <MenuItem\n                      key={option}\n                      selected={index === selectedIndex}\n                      onClick={event => handleMenuItemClick(event, index)}\n                    >\n                      {option}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </React.Fragment>\n  )\n}\n"],"names":["DropdownSelect","props","options","selectedIndex","setSelectedIndex","variant","buttonGroupAriaLabel","onButtonClick","open","setOpen","React","anchorRef","selectedIndexLocal","setSelectedIndexLocal","useState","handleMenuItemClick","event","index","handleToggle","prevOpen","handleClose","jsxs","ButtonGroup","jsx","Button","IconSvg","Popper","TransitionProps","placement","Grow","Paper","ClickAwayListener","MenuList","option","MenuItem"],"mappings":"8dA6BA,SAAAA,EAAAC,EAAA,CACE,KAAA,CAAM,QAAAC,EACJ,cAAAC,EACA,iBAAAC,EACA,QAAAC,EAAA,YACU,qBAAAC,EACV,cAAAC,CACA,EAAAN,EAEF,CAAAO,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACAC,EAAAD,EAAA,OAAA,IAAA,EACA,CAAAE,EAAAC,CAAA,EAAAC,EAAA,SAAoDX,GAAA,CACjC,EAGnBY,EAAA,CAAAC,EAAAC,IAAA,CAIEb,EACEA,EAAAa,CAAA,EAEAJ,EAAAI,CAAA,EAEFR,EAAA,EAAA,CAAa,EAGfS,EAAA,IAAA,CACET,EAAAU,GAAA,CAAAA,CAAA,CAA6B,EAG/BC,EAAAJ,GAAA,CACEL,EAAA,SAAAA,EAAA,QAAA,SAAAK,EAAA,MAAA,GAOAP,EAAA,EAAA,CAAa,EAGf,OAAAY,EAAAX,EAAA,SAAA,CAAA,SAAA,CAEIW,EAAAC,EAAA,CAAA,QAAAjB,EAAA,IAAAM,EAAA,aAAA,eAAA,SAAA,CACEY,EAAAC,EAAC,CAAA,QAAA,IAAA,CAEGjB,EACEA,EAAAJ,GAAAS,CAAA,EAEAM,GACF,EACF,SAAAhB,EAAAC,GAAAS,CAAA,CAE4C,CAAA,EAC9CW,EACAC,EAAC,CAAA,KAAA,QACM,gBAAAhB,EAAA,oBAAA,OACuC,gBAAAA,EAAA,OAAA,OACb,aAAAF,EACnB,gBAAA,OACE,QAAAY,EACL,GAAA,CAAA,MAAA,MAAA,EACW,SAAAK,EAAAE,EAAA,CAAA,KAAA,aAAA,KAAA,GAAA,CAEsB,CAAA,CAC5C,EAAA,EACFF,EACAG,EAAC,CAAA,GAAA,CACK,OAAA,EACM,EACV,KAAAlB,EACA,UAAA,eACW,SAAAG,EAAA,QACS,KAAA,OACd,WAAA,GACI,cAAA,GACG,SAAA,CAAA,CAAA,gBAAAgB,EAAA,UAAAC,CAAA,IAAAL,EAGXM,EAAC,CAAA,GAAAF,EACK,MAAA,CACG,gBAAAC,IAAA,SAAA,aAAA,eAEqC,EAC5C,SAAAL,EAAAO,EAAA,CAAA,SAAAP,EAAAQ,EAAA,CAAA,YAAAX,EAAA,SAAAG,EAAAS,EAAA,CAAA,GAAA,oBAAA,cAAA,GAAA,SAAA9B,EAAA,IAAA,CAAA+B,EAAAhB,IAAAM,EAMQW,EAAC,CAAA,SAAAjB,IAAAd,EAEqB,QAAAa,GAAAD,EAAAC,EAAAC,CAAA,EAC8B,SAAAgB,CAEjD,EAAAA,CAJI,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CASf,CAAA,CACF,CAAA,CAEJ,CAAA,CAAA,CAGN"}