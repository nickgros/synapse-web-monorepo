import{l}from"./index-11d74c8f.js";import{l as O,i as h,bE as V,bF as $,bG as A,bH as v,bI as B,bJ as j,bK as _,bL as P,bM as Y,bN as K,aa as R}from"./SynapseClient-bd8dfaf3.js";import{g as F,B as H}from"./getEndpoint-ac94413e.js";import{M as d,a as U}from"./mock_user_profile-48c662f5.js";import{m as c,a as Z}from"./mockProject-fd76f0e5.js";import{m as J}from"./mockFileEntity-ad65f945.js";import{M as k,a as W}from"./mockTableEntity-b0c7a8f6.js";import{b as G}from"./userProfileHandlers-45013f98.js";import{m as z}from"./mockSchema-ad123989.js";const f="syn60000",b="A Mocked Dataset",E={id:f,parentId:c.id,name:b,concreteType:"org.sagebionetworks.repo.model.table.Dataset",createdBy:d.toString(),modifiedBy:U.toString(),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",versionNumber:3,versionLabel:"in progress",versionComment:"in progress",isLatestVersion:!0,etag:"00000000-0000-0000-0000-000000000000",items:[],columnIds:[],isSearchEnabled:!1},Q={id:f,type:"org.sagebionetworks.repo.model.table.Dataset",name:b,benefactorId:parseInt(c.id),createdOn:"2020-01-01T00:00:00.000Z",modifiedOn:"2020-02-01T00:00:00.000Z",createdBy:d.toString(),modifiedBy:d.toString(),versionNumber:3,versionLabel:"in progress",isLatestVersion:!0},D={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:c.name,id:c.id,type:"org.sagebionetworks.repo.model.Project"},{name:b,id:f,type:"org.sagebionetworks.repo.model.FileEntity"}]},X={1:{...E,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1},2:{...E,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1}},q=[{id:f,versionNumber:2,versionLabel:"snapshot 2",versionComment:"",isLatestVersion:!1,modifiedBy:d.toString(),modifiedByPrincipalId:d.toString(),modifiedOn:"2022-03-22T18:50:22.336Z"},{id:f,versionNumber:1,versionLabel:"snapshot 1",versionComment:"",isLatestVersion:!1,modifiedBy:d.toString(),modifiedByPrincipalId:d.toString(),modifiedOn:"2022-03-22T18:47:34.797Z"}],x={accessControlList:{id:"239443242",resourceAccess:[]},annotations:{id:"34243",etag:"00000000-0000-0000-0000-000000000000",annotations:{}},benefactorAcl:{id:"239443242",resourceAccess:[]},fileHandles:[],hasChildren:!1,restrictionInformation:{restrictionLevel:O.OPEN,hasUnmetAccessRequirement:!1},threadCount:0,entity:E,entityType:h.DATASET,path:D,permissions:{canView:!0,canEdit:!0,canMove:!0,canAddChild:!0,canCertifiedUserEdit:!0,canCertifiedUserAddChild:!0,isCertifiedUser:!0,canChangePermissions:!0,canChangeSettings:!0,canDelete:!0,canDownload:!0,canUpload:!0,canEnableInheritance:!0,ownerPrincipalId:3350396,canPublicRead:!0,canModerate:!0,isCertificationRequired:!0,isEntityOpenData:!1}},N={id:f,name:b,entity:E,entityHeader:Q,path:D,bundle:x,versions:X,versionInfo:q},T="syn70000",g="A Mocked Dataset Collection",ee={id:T,parentId:c.id,name:g,concreteType:"org.sagebionetworks.repo.model.table.DatasetCollection",createdBy:d.toString(),modifiedBy:d.toString(),etag:"00000000-0000-0000-0000-000000000000",items:[{entityId:N.id,versionNumber:1}],columnIds:[],isSearchEnabled:!1},te={path:[{name:"root",id:"syn4489",type:"org.sagebionetworks.repo.model.Folder"},{name:c.name,id:c.id,type:"org.sagebionetworks.repo.model.Project"},{name:g,id:T,type:"org.sagebionetworks.repo.model.FileEntity"}]},ne={id:T,name:g,entity:ee,path:te},S="syn50000",w="Mocked File View",u={id:S,parentId:c.id,name:w,concreteType:"org.sagebionetworks.repo.model.table.EntityView",createdBy:d.toString(),modifiedBy:d.toString(),etag:"00000000-0000-0000-0000-000000000000",columnIds:[],viewTypeMask:V,scopeIds:[c.id],isSearchEnabled:!0,versionNumber:1,versionLabel:"in progress",createdOn:"2023-02-09T12:44:35.457Z",modifiedOn:"2023-03-17T17:10:36.915Z",isLatestVersion:!0},se={name:u.name,id:k,type:"org.sagebionetworks.repo.model.table.TableEntity",versionNumber:u.versionNumber,versionLabel:u.versionLabel,benefactorId:parseInt(c.id),createdOn:u.createdOn,modifiedOn:u.modifiedOn,createdBy:u.createdBy,modifiedBy:u.modifiedBy,isLatestVersion:u.isLatestVersion},oe={id:S,name:w,entity:u,entityHeader:se},C="syn500001",L="Mocked Project View",I={id:C,parentId:c.id,name:L,concreteType:"org.sagebionetworks.repo.model.table.EntityView",createdBy:d.toString(),modifiedBy:d.toString(),etag:"00000000-0000-0000-0000-000000000000",columnIds:[],viewTypeMask:$,scopeIds:[c.id],isSearchEnabled:!0,versionNumber:1,versionLabel:"in progress",createdOn:"2023-02-09T12:44:35.457Z",modifiedOn:"2023-03-17T17:10:36.915Z",isLatestVersion:!0},ie={name:I.name,id:k,type:"org.sagebionetworks.repo.model.table.TableEntity",versionNumber:I.versionNumber,versionLabel:I.versionLabel,benefactorId:parseInt(c.id),createdOn:I.createdOn,modifiedOn:I.modifiedOn,createdBy:I.createdBy,modifiedBy:I.modifiedBy,isLatestVersion:I.isLatestVersion},re={id:C,name:L,entity:I,entityHeader:ie},p=[J,...Z,N,ne,W,oe,re],fe=y=>[l.rest.post(`${y}${A}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a matching mock entity for this request : ${JSON.stringify(n.body)}`};if(n.body){const t=n.body,i=p.find(a=>a.name===t.name);i?(o=i.entity,s=200):t.name===G&&(o.reason="Invalid project name",s=403)}return r(e.status(s),e.json(o))}),l.rest.get(`${y}${v(":entityId")}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity with ID ${n.params.entityId}`};const t=p.find(i=>i.id===n.params.entityId);return t&&(o=t.entity,s=200),r(e.status(s),e.json(o))}),l.rest.get(`${y}${B(":entityId")}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find mock entity versions for ID ${n.params.entityId}`};const t=p.find(i=>i.id===n.params.entityId);return t&&t.versionInfo&&(o={results:t.versionInfo},s=200),r(e.status(s),e.json(o))}),l.rest.get(`${y}${j(":entityId",":versionNumber")}`,async(n,r,e)=>{let s=404;const o=n.params.entityId,t=n.params.versionNumber.toString(),i=parseInt(t);let a={reason:`Mock Service worker could not find a mock versioned entity with ID ${o}.${t}`};const m=p.find(M=>M.id===n.params.entityId);return m&&m.versions&&m.versions[i]&&(a=m.versions[i],s=200),r(e.status(s),e.json(a))}),l.rest.post(`${y}${_(":entityId")}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=p.find(i=>i.id===n.params.entityId);return t!=null&&t.bundle&&(o=t.bundle,s=200),r(e.status(s),e.json(o))}),l.rest.post(`${y}${_(":entityId",":versionNumber")}`,async(n,r,e)=>{const s=n.params.entityId,o=parseInt(n.params.versionNumber);let t=404,i={reason:`Mock Service worker could not find a mock entity bundle with ID ${s}`};const a=p.find(m=>m.id===s);if(a){const m=a.bundle;a.versions&&a.versions[o]?i={...m,entity:a.versions[o]}:i=m,t=200}return r(e.status(t),e.json(i))}),l.rest.get(`${y}${P(":entityId")}`,async(n,r,e)=>r(e.status(200),e.json(z))),l.rest.get(`${y}${Y(":entityId")}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=p.find(i=>i.id===n.params.entityId);return t!=null&&t.json&&(o=t.json,s=200),r(e.status(s),e.json(o))}),l.rest.post(`${y}${K}`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=n.body,i=p.filter(a=>t.references.find(m=>m.targetId===a.id)).map(a=>a.entityHeader).filter(a=>!!a);return i&&(o={results:i},s=200),r(e.status(s),e.json(o))}),l.rest.get(`${y}${v(":entityId")}/path`,async(n,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity path using ID ${n.params.entityId}`};const t=p.find(i=>n.params.entityId===i.id);return t&&t.path&&(o=t.path,s=200),r(e.status(s),e.json(o))}),l.rest.get(`${F(H.REPO_ENDPOINT)}/file/v1/entity/:id/uploadDestination`,async(n,r,e)=>{const s={banner:"",storageLocationId:1,uploadType:R.S3,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"};return r(e.status(200),e.json(s))})];export{fe as g};
//# sourceMappingURL=entityHandlers-5340f641.js.map
