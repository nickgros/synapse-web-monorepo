{"version":3,"file":"SubsectionRowRenderer-163ae825.js","sources":["../../src/components/SubsectionRowRenderer/SubsectionRowRenderer.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  getAdditionalFilters,\n  parseEntityIdFromSqlStatement,\n  SQLOperator,\n} from '../../utils/functions/SqlFunctions'\nimport { SynapseConstants } from '../../utils'\nimport SynapseClient from '../../synapse-client'\nimport {\n  ColumnType,\n  ColumnTypeEnum,\n  QueryBundleRequest,\n  RowSet,\n} from '@sage-bionetworks/synapse-types'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport MarkdownSynapse from '../Markdown/MarkdownSynapse'\nimport { SkeletonTable } from '../Skeleton/SkeletonTable'\nimport { ColumnSpecifiedLink } from '../CardContainerLogic'\nimport { Typography } from '@mui/material'\nimport { useDeepCompareEffectNoCheck } from 'use-deep-compare-effect'\n\nexport type FriendlyValuesMap = {\n  [index: string]: string\n}\n\nexport type SubsectionRowRendererProps = {\n  sql: string\n  isMarkdown?: boolean\n  sqlOperator?: SQLOperator\n  searchParams?: Record<string, string>\n  columnLink?: ColumnSpecifiedLink\n  friendlyValuesMap?: FriendlyValuesMap\n  columnNameIsSectionTitle?: boolean\n  limit?: number\n}\n\nconst LIST_COLUMN_TYPES: ColumnType[] = [\n  ColumnTypeEnum.BOOLEAN_LIST,\n  ColumnTypeEnum.DATE_LIST,\n  ColumnTypeEnum.ENTITYID_LIST,\n  ColumnTypeEnum.INTEGER_LIST,\n  ColumnTypeEnum.STRING_LIST,\n]\n\nconst SubsectionRowRenderer: React.FunctionComponent<\n  SubsectionRowRendererProps\n> = ({\n  sql,\n  searchParams,\n  sqlOperator,\n  isMarkdown = false,\n  columnLink,\n  friendlyValuesMap,\n  columnNameIsSectionTitle = false,\n  limit,\n}) => {\n  const { accessToken } = useSynapseContext()\n  const [rowSet, setRowSet] = useState<RowSet>()\n  const [isLoading, setIsLoading] = useState<boolean>()\n  let mounted = true\n  useDeepCompareEffectNoCheck(() => {\n    const fetchData = async function () {\n      setIsLoading(true)\n      const entityId = parseEntityIdFromSqlStatement(sql)\n      const additionalFilters = getAdditionalFilters(\n        entityId,\n        searchParams,\n        sqlOperator,\n      )\n      const partMask = SynapseConstants.BUNDLE_MASK_QUERY_RESULTS\n      const request: QueryBundleRequest = {\n        partMask,\n        concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n        entityId,\n        query: {\n          sql,\n          limit,\n          additionalFilters,\n        },\n      }\n\n      const queryResultBundle = await SynapseClient.getQueryTableResults(\n        request,\n        accessToken,\n      )\n      setIsLoading(false)\n      const queryResults = queryResultBundle?.queryResult?.queryResults\n      if (queryResults) {\n        if (mounted) {\n          setRowSet(queryResults)\n        }\n      } else {\n        console.log('SubsectionRowRenderer: Error getting data')\n      }\n    }\n    fetchData()\n\n    return () => {\n      mounted = false\n    }\n  }, [sql, accessToken, searchParams, sqlOperator])\n\n  /**\n   * If a \"friendly values map\" was provided, then use the friendly value if any of the raw values match.\n   * Otherwise, just return the raw value.\n   * @param rawValue\n   * @returns\n   */\n  const getFriendlyValue = (rawValue: string) => {\n    if (!friendlyValuesMap) {\n      return rawValue\n    }\n    const friendlyValue = friendlyValuesMap[rawValue]\n    return friendlyValue ? friendlyValue : rawValue\n  }\n\n  return (\n    <div className=\"SubsectionRowRenderer bootstrap-4-backport\">\n      {isLoading && <SkeletonTable numRows={2} numCols={1} />}\n      {!isLoading &&\n        rowSet &&\n        rowSet.rows.length > 0 &&\n        rowSet.headers.map((selectColumn, colIndex) => {\n          // If a link column was provided (that contain URLs), do not create a page sub-section for that column.\n          if (columnLink && selectColumn.name == columnLink.linkColumnName) {\n            return <></>\n          }\n          return (\n            <div\n              key={`${colIndex}`}\n              className=\"SubsectionRowRenderer__item\"\n              role=\"table\"\n            >\n              <Typography\n                variant={\n                  columnNameIsSectionTitle ? 'sectionTitle' : 'subsectionHeader'\n                }\n                role=\"heading\"\n              >\n                {selectColumn.name}\n              </Typography>\n              {columnNameIsSectionTitle && <hr />}\n              <div role=\"rowgroup\">\n                {rowSet.rows.map((row, rowIndex) => {\n                  const cellValue = row.values[colIndex]\n                  // If the cell value is undefined, then go to the next row.\n                  if (!cellValue) {\n                    return <></>\n                  }\n                  let values\n                  // If this cell value represents a multi-value (the select column type is a *_LIST column), then parse it and break it apart\n                  if (LIST_COLUMN_TYPES.includes(selectColumn.columnType)) {\n                    const jsonData: string[] = JSON.parse(cellValue)\n                    values = jsonData.map((val: string, index: number) => {\n                      return (\n                        <div\n                          key={index}\n                          className=\"SubsectionRowRenderer__item__value\"\n                          role=\"row\"\n                        >\n                          {isMarkdown && (\n                            <MarkdownSynapse markdown={getFriendlyValue(val)} />\n                          )}\n                          {!isMarkdown && <p>{getFriendlyValue(val)}</p>}\n                        </div>\n                      )\n                    })\n                  } else {\n                    // If this cell value represents a single value\n                    let renderedValue\n                    const friendlyCellValue = getFriendlyValue(cellValue)\n                    if (isMarkdown) {\n                      renderedValue = (\n                        <MarkdownSynapse markdown={friendlyCellValue} />\n                      )\n                    } else if (\n                      columnLink &&\n                      columnLink.matchColumnName == selectColumn.name\n                    ) {\n                      // If a link column was provided, then we need to create links (the url is in this other column)\n                      const urlColumnIndex = rowSet.headers.findIndex(\n                        col => col.name == columnLink.linkColumnName,\n                      )\n                      const values = row.values as string[]\n                      if (values.some(value => value === null)) {\n                        console.warn(\n                          'Row has null value(s) when no nulls expected',\n                        )\n                      }\n\n                      if (urlColumnIndex > -1) {\n                        renderedValue = (\n                          <a\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                            href={values[urlColumnIndex]}\n                          >\n                            {friendlyCellValue}\n                          </a>\n                        )\n                      } else {\n                        renderedValue = <p>{friendlyCellValue}</p>\n                      }\n                    } else {\n                      renderedValue = <p>{friendlyCellValue}</p>\n                    }\n                    values = (\n                      <div\n                        key={rowIndex}\n                        className=\"SubsectionRowRenderer__item__value\"\n                        role=\"row\"\n                      >\n                        {renderedValue}\n                      </div>\n                    )\n                  }\n                  return values\n                })}\n              </div>\n            </div>\n          )\n        })}\n    </div>\n  )\n}\n\nexport default SubsectionRowRenderer\n"],"names":["LIST_COLUMN_TYPES","ColumnTypeEnum","SubsectionRowRenderer","sql","searchParams","sqlOperator","isMarkdown","columnLink","friendlyValuesMap","columnNameIsSectionTitle","limit","accessToken","useSynapseContext","rowSet","setRowSet","useState","isLoading","setIsLoading","mounted","useDeepCompareEffectNoCheck","entityId","parseEntityIdFromSqlStatement","additionalFilters","getAdditionalFilters","request","SynapseConstants.BUNDLE_MASK_QUERY_RESULTS","queryResultBundle","SynapseClient","queryResults","_a","getFriendlyValue","rawValue","friendlyValue","jsxs","jsx","SkeletonTable","selectColumn","colIndex","Fragment","Typography","row","rowIndex","cellValue","values","val","index","MarkdownSynapse","renderedValue","friendlyCellValue","urlColumnIndex","col","values2","value"],"mappings":"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"}