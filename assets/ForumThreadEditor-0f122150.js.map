{"version":3,"file":"ForumThreadEditor-0f122150.js","sources":["../../src/synapse-queries/forum/useReply.ts","../../src/components/Markdown/UserMentionModal.tsx","../../src/components/Markdown/MarkdownEditor.tsx","../../src/components/Forum/ForumThreadEditor.tsx"],"sourcesContent":["import {\n  UseInfiniteQueryOptions,\n  useInfiniteQuery,\n  UseMutationOptions,\n  useQueryClient,\n  useMutation,\n  UseQueryOptions,\n  useQuery,\n} from 'react-query'\nimport SynapseClient from '../../synapse-client'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport { useSynapseContext } from '../../utils/context/SynapseContext'\nimport {\n  CreateDiscussionReply,\n  DiscussionFilter,\n  DiscussionReplyBundle,\n  DiscussionReplyOrder,\n  UpdateDiscussionReply,\n} from '@sage-bionetworks/synapse-types'\nimport { PaginatedResults } from '@sage-bionetworks/synapse-types'\nimport { Match } from '@sage-bionetworks/synapse-types'\n\nexport function useGetRepliesInfinite(\n  threadId: string,\n  ascending: boolean,\n  limit: number,\n  sort?: DiscussionReplyOrder,\n  filter?: DiscussionFilter,\n  options?: UseInfiniteQueryOptions<\n    PaginatedResults<DiscussionReplyBundle>,\n    SynapseClientError\n  >,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useInfiniteQuery<\n    PaginatedResults<DiscussionReplyBundle>,\n    SynapseClientError\n  >(\n    keyFactory.getRepliesQueryKey(threadId, ascending, limit, sort, filter),\n    async context => {\n      return SynapseClient.getReplies(\n        accessToken,\n        threadId,\n        limit,\n        context.pageParam,\n        sort,\n        ascending,\n        filter,\n      )\n    },\n    {\n      ...options,\n      getNextPageParam: (lastPage, pages) => {\n        const numberOfFetchedResults = pages.flatMap(\n          page => page.results,\n        ).length\n        if (lastPage.totalNumberOfResults! > numberOfFetchedResults) {\n          return numberOfFetchedResults\n        } else {\n          return undefined\n        }\n      },\n    },\n  )\n}\n\nexport function useGetReply(\n  reply: DiscussionReplyBundle,\n  options?: UseQueryOptions<string, SynapseClientError>,\n) {\n  const { accessToken, keyFactory } = useSynapseContext()\n  const queryFn = async () => {\n    const messageUrl = await SynapseClient.getReplyMessageUrl(\n      reply.messageKey,\n      accessToken,\n    )\n    const data = await fetch(messageUrl.messageUrl, {\n      method: 'GET',\n      headers: {\n        Accept: '*/*',\n        'Access-Control-Request-Headers': 'authorization',\n        'Content-Type': 'text/plain; charset=utf-8',\n      },\n    })\n    return data.text()\n  }\n  return useQuery<string, SynapseClientError>(\n    keyFactory.getReplyQueryKey(reply.threadId, reply.id, reply.messageKey),\n    queryFn,\n    options,\n  )\n}\n\nexport function usePostReply(\n  options?: UseMutationOptions<\n    DiscussionReplyBundle,\n    SynapseClientError,\n    CreateDiscussionReply\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n  return useMutation<\n    DiscussionReplyBundle,\n    SynapseClientError,\n    CreateDiscussionReply\n  >(\n    (request: CreateDiscussionReply) =>\n      SynapseClient.postReply(request, accessToken),\n    {\n      ...options,\n      onSuccess: async (newReply, variables, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllRepliesQueryKey(newReply.threadId),\n        )\n        if (options?.onSuccess) {\n          await options.onSuccess(newReply, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function usePutReply(\n  options?: UseMutationOptions<\n    DiscussionReplyBundle,\n    SynapseClientError,\n    UpdateDiscussionReply\n  >,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<\n    DiscussionReplyBundle,\n    SynapseClientError,\n    UpdateDiscussionReply\n  >(\n    (request: UpdateDiscussionReply) =>\n      SynapseClient.putReply(request, accessToken),\n    {\n      ...options,\n      onSuccess: async (newReply, variables, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllRepliesQueryKey(newReply.threadId),\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(newReply, variables, ctx)\n        }\n      },\n    },\n  )\n}\n\nexport function useDeleteReply(\n  options?: UseMutationOptions<void, SynapseClientError, Match>,\n) {\n  const queryClient = useQueryClient()\n  const { accessToken, keyFactory } = useSynapseContext()\n\n  return useMutation<void, SynapseClientError, Match>(\n    (match: Match) => SynapseClient.deleteReply(accessToken, match.replyId),\n    {\n      ...options,\n      onSuccess: async (updatedReply, variables, ctx) => {\n        await queryClient.invalidateQueries(\n          keyFactory.getAllRepliesQueryKey(variables.threadId),\n        )\n\n        if (options?.onSuccess) {\n          await options.onSuccess(updatedReply, variables, ctx)\n        }\n      },\n    },\n  )\n}\n","import React, { useCallback } from 'react'\nimport { DialogBase } from '../DialogBase'\nimport { TYPE_FILTER, UserGroupHeader } from '@sage-bionetworks/synapse-types'\nimport UserSearchBoxV2 from '../UserSearchBoxV2'\n\nexport type UserMentionModalProps = {\n  show: boolean\n  onClose: () => void\n  handleUserTag: (user: string) => void\n}\n\nexport const UserMentionModal: React.FC<UserMentionModalProps> = ({\n  show,\n  onClose,\n  handleUserTag,\n}: UserMentionModalProps) => {\n  const onUserChange = useCallback(\n    (selected: string | null, header: UserGroupHeader | null) => {\n      if (selected && header) {\n        handleUserTag(header.userName)\n      }\n      onClose()\n    },\n    [onClose, handleUserTag],\n  )\n\n  return (\n    <>\n      <DialogBase\n        open={show}\n        onCancel={onClose}\n        title=\"Find User or Team\"\n        content={\n          <UserSearchBoxV2\n            placeholder=\"Search for a user or team name\"\n            onChange={onUserChange}\n            typeFilter={TYPE_FILTER.ALL}\n            focusOnSelect={true}\n          />\n        }\n        sx={{\n          '.MuiDialog-paperFullWidth': {\n            overflowY: 'visible',\n            '.MuiDialogContent-root': { overflowY: 'visible' },\n          },\n        }}\n      />\n    </>\n  )\n}\n","import React, { useRef, useState, useEffect } from 'react'\nimport {\n  commandList,\n  CommandListType,\n  MARKDOWN_COMMANDS_DATA,\n} from '@sage-bionetworks/synapse-types'\nimport IconSvg from '../IconSvg/IconSvg'\nimport MarkdownSynapse from './MarkdownSynapse'\nimport { UserMentionModal } from './UserMentionModal'\nimport { startCase } from 'lodash-es'\n\nconst MarkdownEditorTabs = ['WRITE', 'PREVIEW'] as const\n\nexport type MarkdownEditorProps = {\n  placeholder?: string\n  text: string\n  setText: (text: string) => void\n}\n\nexport const MarkdownEditor: React.FunctionComponent<MarkdownEditorProps> = ({\n  placeholder,\n  text,\n  setText,\n}) => {\n  const [currentTab, setCurrentTab] =\n    useState<(typeof MarkdownEditorTabs)[number]>('WRITE')\n  const [selectionStart, setSelectionStart] = useState<number>(0)\n  const [isShowingTagModal, setIsShowingTagModal] = useState<boolean>(false)\n  const [tagModalWithKeyboard, setTagModalWithKeyboard] =\n    useState<boolean>(false)\n  const textAreaRef = useRef<HTMLTextAreaElement>(null)\n\n  /**\n   * Updates the position of the cursor. This must occur within `useEffect` because we need to ensure that the\n   * cursor position is updated after the state of `text` is updated.\n   */\n  useEffect(() => {\n    const input = textAreaRef.current\n    if (input) {\n      input.setSelectionRange(selectionStart, selectionStart)\n    }\n  }, [textAreaRef, selectionStart])\n\n  useEffect(() => {\n    textAreaRef.current?.focus()\n  }, [isShowingTagModal])\n\n  const handleUserTag = (user: string) => {\n    const newText: string[] = []\n    const textVal = textAreaRef.current\n    if (textVal) {\n      const start = textVal?.selectionStart\n      const textBeforeTag = text.substring(0, start)\n      const textAfterTag = text.substring(start, text.length)\n      setSelectionStart(start + user.length)\n      newText.push(\n        textBeforeTag,\n        `${tagModalWithKeyboard ? '' : '@'}${user.replace(/\\s/g, '')}`,\n        textAfterTag,\n      )\n    }\n    setText(newText.join(''))\n    setTagModalWithKeyboard(false)\n  }\n\n  const handleTagModal = (text: string) => {\n    const start = textAreaRef.current && textAreaRef.current.selectionStart\n    if (start && start > 0 && text.charAt(start - 1) === '@') {\n      setTagModalWithKeyboard(true)\n      setIsShowingTagModal(true)\n    }\n  }\n  const handleCommands = (command: CommandListType) => {\n    const textVal = textAreaRef.current\n    if (textVal) {\n      const start = textVal.selectionStart\n      const end = textVal.selectionEnd\n      const selected = text.substring(start, end)\n      const textBeforeSelection = text.substring(0, start)\n      const textAfterSelection = text.substring(end, text.length)\n\n      const openSyntax = MARKDOWN_COMMANDS_DATA[command].openSyntax\n      const closeSyntax = MARKDOWN_COMMANDS_DATA[command].closeSyntax\n\n      switch (command) {\n        case 'code': {\n          const newText: string[] = []\n          newText.push(\n            textBeforeSelection,\n            openSyntax,\n            selected,\n            closeSyntax,\n            textAfterSelection,\n          )\n\n          setText(newText.join('\\r\\n'))\n          textVal.focus()\n          // adds 2 due to new line\n          setSelectionStart(start + openSyntax.length + 2)\n          break\n        }\n        case 'title':\n        case 'bold':\n        case 'italic':\n        case 'strikethrough':\n        case 'latex':\n        case 'subscript':\n        case 'superscript':\n        case 'link':\n        case 'image': {\n          const newText = `${textBeforeSelection}${openSyntax}${selected}${closeSyntax}${textAfterSelection}`\n          textVal.focus()\n          setSelectionStart(start + openSyntax.length)\n          setText(newText)\n        }\n      }\n    }\n  }\n\n  return (\n    <div className=\"bootstrap-4-backport MarkdownEditor\">\n      <div className=\"MarkdownEditorControls\">\n        <div className=\"Tabs\">\n          {MarkdownEditorTabs.map(tabName => {\n            return (\n              <button\n                className=\"Tab\"\n                role=\"tab\"\n                aria-selected={tabName === currentTab}\n                key={tabName}\n                onClick={e => {\n                  e.stopPropagation()\n                  setCurrentTab(tabName)\n                }}\n              >\n                {tabName}\n              </button>\n            )\n          })}\n        </div>\n        {currentTab === 'WRITE' && (\n          <div className=\"MarkdownEditorControlsToolbar\">\n            {commandList.map(type => {\n              return (\n                <button key={type} onClick={() => handleCommands(type)}>\n                  <IconSvg icon={type} label={startCase(type)} />\n                </button>\n              )\n            })}\n            <button onClick={() => setIsShowingTagModal(true)}>\n              <IconSvg icon=\"tag\" label=\"Mention\" />\n            </button>\n          </div>\n        )}\n      </div>\n      <div>\n        {currentTab === 'WRITE' ? (\n          <textarea\n            onChange={e => {\n              setText(e.target.value)\n              handleTagModal(e.target.value)\n            }}\n            style={{ width: '100%' }}\n            rows={6}\n            value={text}\n            ref={textAreaRef}\n            placeholder={placeholder}\n          />\n        ) : text ? (\n          <MarkdownSynapse markdown={text} />\n        ) : (\n          'Nothing to preview'\n        )}\n      </div>\n\n      <UserMentionModal\n        show={isShowingTagModal}\n        onClose={() => setIsShowingTagModal(false)}\n        handleUserTag={handleUserTag}\n      />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Box } from '@mui/material'\nimport { FormControl } from 'react-bootstrap'\nimport {\n  useCreateThread,\n  useUpdateThreadTitle,\n  useUpdateThreadMessage,\n} from '../../synapse-queries/forum/useThread'\nimport { usePostReply, usePutReply } from '../../synapse-queries/forum/useReply'\nimport { CreateDiscussionThread } from '@sage-bionetworks/synapse-types'\nimport { MarkdownEditor } from '../Markdown/MarkdownEditor'\nimport {\n  ConfirmationButtons,\n  ConfirmationDialog,\n} from '../ConfirmationDialog/ConfirmationDialog'\n\nexport type ForumThreadEditorProps = {\n  initialTitle?: string\n  initialText?: string\n  id: string\n  onClose: () => void\n  isReply: boolean\n} & (\n  | { isDialog: false; openDialog?: never }\n  | { isDialog: true; openDialog: boolean }\n)\n\nexport const ForumThreadEditor: React.FunctionComponent<\n  ForumThreadEditorProps\n> = props => {\n  const {\n    initialText,\n    initialTitle,\n    id,\n    onClose,\n    isReply,\n    isDialog,\n    openDialog,\n  } = props\n\n  const [title, setTitle] = useState<string>(initialTitle ?? '')\n  const [text, setText] = useState<string>(initialText ?? '')\n  const { mutate: updateTitle, isLoading: isLoadingTitle } =\n    useUpdateThreadTitle({\n      onSuccess: () => onClose(),\n    })\n  const { mutate: updateMessage, isLoading: isLoadingMessage } =\n    useUpdateThreadMessage({\n      onSuccess: () => onClose(),\n    })\n  const { mutate: createThread, isLoading: isLoadingThread } = useCreateThread({\n    onSuccess: () => onClose(),\n  })\n  const { mutate: createReply, isLoading: isLoadingReply } = usePostReply({\n    onSuccess: () => onClose(),\n  })\n  const { mutate: updateReply, isLoading: isLoadingReplyUpdate } = usePutReply({\n    onSuccess: () => onClose(),\n  })\n\n  const isLoading =\n    isLoadingMessage ||\n    isLoadingReply ||\n    isLoadingThread ||\n    isLoadingTitle ||\n    isLoadingReplyUpdate\n\n  const isExistingThread = !isReply && initialTitle\n\n  const onSave = (text: string, title: string) => {\n    if (isReply) {\n      if (initialText) {\n        // updating reply\n        updateReply({\n          replyId: id,\n          messageMarkdown: text,\n        })\n      } else {\n        // posting reply\n        createReply({\n          threadId: id,\n          messageMarkdown: text,\n        })\n      }\n    } else {\n      if (isExistingThread) {\n        // updating thread\n        updateTitle({\n          title: title,\n          threadId: id,\n        })\n        updateMessage({\n          messageMarkdown: text,\n          threadId: id,\n        })\n      } else {\n        // posting thread\n        const request: CreateDiscussionThread = {\n          forumId: id,\n          title: title,\n          messageMarkdown: text,\n        }\n        createThread(request)\n      }\n    }\n  }\n\n  const editorContent = (\n    <div className=\"bootstrap-4-backport\">\n      {!isReply && (\n        <FormControl\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={e => setTitle(e.target.value)}\n        />\n      )}\n      <MarkdownEditor text={text} setText={setText} />\n    </div>\n  )\n\n  const confirmButtonText = isLoading ? 'Saving' : 'Save'\n\n  return (\n    <>\n      {isDialog ? (\n        <ConfirmationDialog\n          maxWidth=\"md\"\n          open={openDialog}\n          onCancel={onClose}\n          title={\n            isReply\n              ? 'Edit Reply'\n              : isExistingThread\n              ? 'Edit Thread'\n              : 'New Thread'\n          }\n          content={editorContent}\n          onConfirm={() => onSave(text, title)}\n          confirmButtonText={confirmButtonText}\n        />\n      ) : (\n        <>\n          {editorContent}\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n            <ConfirmationButtons\n              onCancel={onClose}\n              onConfirm={() => onSave(text, title)}\n              confirmButtonText={confirmButtonText}\n            />\n          </Box>\n        </>\n      )}\n    </>\n  )\n}\n"],"names":["useGetRepliesInfinite","threadId","ascending","limit","sort","filter","options","accessToken","keyFactory","useSynapseContext","useInfiniteQuery","context","SynapseClient","lastPage","pages","numberOfFetchedResults","page","useGetReply","reply","queryFn","messageUrl","useQuery","usePostReply","queryClient","useQueryClient","useMutation","request","newReply","variables","ctx","usePutReply","useDeleteReply","match","updatedReply","UserMentionModal","show","onClose","handleUserTag","onUserChange","useCallback","selected","header","jsx","Fragment","DialogBase","UserSearchBoxV2","TYPE_FILTER","MarkdownEditorTabs","MarkdownEditor","placeholder","text","setText","currentTab","setCurrentTab","useState","selectionStart","setSelectionStart","isShowingTagModal","setIsShowingTagModal","tagModalWithKeyboard","setTagModalWithKeyboard","textAreaRef","useRef","useEffect","input","_a","user","newText","textVal","start","textBeforeTag","textAfterTag","handleTagModal","text2","handleCommands","command","end","textBeforeSelection","textAfterSelection","openSyntax","MARKDOWN_COMMANDS_DATA","closeSyntax","jsxs","tabName","e","commandList","type","IconSvg","startCase","MarkdownSynapse","ForumThreadEditor","props","initialText","initialTitle","id","isReply","isDialog","openDialog","title","setTitle","updateTitle","isLoadingTitle","useUpdateThreadTitle","updateMessage","isLoadingMessage","useUpdateThreadMessage","createThread","isLoadingThread","useCreateThread","createReply","isLoadingReply","updateReply","isLoadingReplyUpdate","isLoading","isExistingThread","onSave","title2","editorContent","FormControl","confirmButtonText","ConfirmationDialog","Box","ConfirmationButtons"],"mappings":"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"}