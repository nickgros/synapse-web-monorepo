{"version":3,"file":"RejectDataAccessRequestModal-445bd08d.js","sources":["../../src/components/dataaccess/RejectDataAccessRequestModal.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Collapse,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  IconButton,\n  Stack,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport IconSvg from '../IconSvg/IconSvg'\nimport {\n  useGetFullTableQueryResults,\n  useUpdateDataAccessSubmissionState,\n} from '../../synapse-queries'\nimport {\n  BUNDLE_MASK_QUERY_RESULTS,\n  REJECT_SUBMISSION_CANNED_RESPONSES_TABLE,\n} from '../../utils/SynapseConstants'\nimport { Set } from 'immutable'\nimport {\n  QueryResultBundle,\n  Row,\n  SubmissionState,\n} from '@sage-bionetworks/synapse-types'\nimport { SynapseSpinner } from '../LoadingScreen'\nimport { SynapseClientError } from '../../utils/SynapseClientError'\nimport FullWidthAlert from '../FullWidthAlert/FullWidthAlert'\nimport { UseQueryResult } from 'react-query'\nimport { ErrorBanner } from '../error/ErrorBanner'\nimport { displayToast } from '../ToastMessage/ToastMessage'\n\nconst CATEGORY_COLUMN_NAME = 'category'\nconst CATEGORY_SECTION_EMAIL_TEXT_COLUMN_NAME = 'category email prompt'\nconst REJECTION_REASON_FORM_TEXT_COLUMN_NAME = 'rejection reason'\nconst REJECTION_REASON_EMAIL_TEXT_COLUMN_NAME = 'email text'\n\nexport type RejectDataAccessRequestModalProps = {\n  /* ID of the submission for which a rejection should be drafted/sent */\n  submissionId: string | number\n  /* SynID of the table which contains the email responses which should populate this modal. Defaults to syn50683097, which is in production Synapse */\n  tableId?: string\n  open: boolean\n  onClose: () => void\n}\n\ntype RejectionCategoryProps = {\n  category: string\n  rows: Row[]\n  rejectionReasonFormTextIndex: number\n  selectedRowIds: Set<number>\n  setSelectedRowIds: React.Dispatch<React.SetStateAction<Set<number>>>\n}\n\ntype SelectRejectionReasonsFormProps = {\n  tableQuery: UseQueryResult<QueryResultBundle, SynapseClientError>\n  selectedRowIds: Set<number>\n  setSelectedRowIds: React.Dispatch<React.SetStateAction<Set<number>>>\n}\n\nconst DEFAULT_MESSAGE_PREPEND =\n  'Thank you for submitting your data access request.\\n'\nconst DEFAULT_MESSAGE_APPEND =\n  '\\nIf you have questions, do not respond to this email address. Instead, reply to:\\nact@sagebionetworks.org'\n\n/**\n * Renders a rejection reason category and checkboxes for each reason in the category\n */\nfunction RejectionCategory(props: RejectionCategoryProps) {\n  const {\n    category,\n    rows,\n    selectedRowIds,\n    setSelectedRowIds,\n    rejectionReasonFormTextIndex,\n  } = props\n  const [isExpanded, setIsExpanded] = React.useState(false)\n\n  return (\n    <>\n      <Typography\n        variant=\"body1\"\n        onClick={() => setIsExpanded(!isExpanded)}\n        sx={{ fontWeight: 700, cursor: 'pointer', my: 1 }}\n      >\n        <IconSvg\n          icon={isExpanded ? 'expandMore' : 'chevronRight'}\n          sx={{ color: 'grey.700' }}\n          wrap={false}\n        />\n        {category}\n      </Typography>\n      <Collapse in={isExpanded}>\n        <Stack sx={{ ml: 3 }}>\n          {(rows ?? []).map(row => (\n            <FormControlLabel\n              key={row.rowId}\n              control={\n                <Checkbox\n                  checked={selectedRowIds.has(row.rowId!)}\n                  size={'small'}\n                  onChange={event => {\n                    if (event.target.checked) {\n                      setSelectedRowIds(selectedRowIds.add(row.rowId!))\n                    } else {\n                      setSelectedRowIds(selectedRowIds.remove(row.rowId!))\n                    }\n                  }}\n                />\n              }\n              label={\n                <Typography variant={'smallText1'}>\n                  {row.values[rejectionReasonFormTextIndex]}\n                </Typography>\n              }\n            />\n          ))}\n        </Stack>\n      </Collapse>\n    </>\n  )\n}\n\n/**\n * Renders a form for selecting individual rejection reasons grouped by category.\n * The rejection reason data comes from the table whose data is fetched in the tableQuery prop.\n */\nfunction SelectRejectionReasonsForm(props: SelectRejectionReasonsFormProps) {\n  const { tableQuery, selectedRowIds, setSelectedRowIds } = props\n  const { data: tableData, isLoading, error } = tableQuery\n  const categoryIndex = tableData?.queryResult?.queryResults.headers.findIndex(\n    header => header.name.toLowerCase() === CATEGORY_COLUMN_NAME,\n  )\n  const rejectionReasonFormTextIndex =\n    tableData?.queryResult?.queryResults.headers.findIndex(\n      header =>\n        header.name.toLowerCase() === REJECTION_REASON_FORM_TEXT_COLUMN_NAME,\n    )\n\n  const rowsGroupedByCategory =\n    tableData &&\n    tableData.queryResult &&\n    tableData.queryResult.queryResults.rows.reduce(\n      (acc: Record<string, Row[]>, row) => {\n        const category: string = row.values[categoryIndex!]!\n        acc[category] = [...(acc[category] || []), row]\n        return acc\n      },\n      {},\n    )\n  return (\n    <>\n      <Typography variant=\"headline3\" gutterBottom>\n        Reasons for rejecting\n      </Typography>\n      <Typography variant=\"body1\" gutterBottom>\n        You may wish to reject the user&apos;s data access request for a\n        specific reason. The list below contains some common rejection reasons.\n        You will have a chance to edit the response before submitting it,\n        including adding any rejection reason(s) not listed here.\n      </Typography>\n      {isLoading && (\n        <Stack sx={{ my: 2 }}>\n          <SynapseSpinner size={30} />\n        </Stack>\n      )}\n      {error && <ErrorBanner error={error} />}\n      {rowsGroupedByCategory && (\n        <FormControl>\n          {Object.keys(rowsGroupedByCategory).map(category => (\n            <RejectionCategory\n              key={category}\n              category={category}\n              rows={rowsGroupedByCategory[category]}\n              selectedRowIds={selectedRowIds}\n              setSelectedRowIds={setSelectedRowIds}\n              rejectionReasonFormTextIndex={rejectionReasonFormTextIndex!}\n            />\n          ))}\n        </FormControl>\n      )}\n      <Typography variant=\"headline3\" sx={{ mt: 1 }} gutterBottom>\n        We’ll generate a response email message based on your selections.\n      </Typography>\n      <Typography variant=\"body1\" gutterBottom>\n        If your reasons for rejecting are not shown here, that’s okay! You can\n        edit the complete text of the message on the next screen before sending\n        it.\n      </Typography>\n    </>\n  )\n}\n\ntype DraftRejectionMessageProps = {\n  emailText: string\n  setEmailText: React.Dispatch<React.SetStateAction<string>>\n}\n\n/**\n * Presents a text field form that can be used to directly modify the rejection message.\n */\nfunction DraftRejectionMessage(props: DraftRejectionMessageProps) {\n  const { emailText, setEmailText } = props\n  return (\n    <>\n      <Typography variant=\"headline3\" gutterBottom>\n        Edit the text of the rejection message\n      </Typography>\n      <Typography variant=\"body1\" gutterBottom>\n        This message will be sent to the data requester. You may edit it, or add\n        custom text to the message.\n      </Typography>\n      <TextField\n        multiline\n        fullWidth\n        rows={15}\n        value={emailText}\n        onChange={event => {\n          setEmailText(event.target.value)\n        }}\n      />\n    </>\n  )\n}\ntype RejectionMessageObject = {\n  [category: string]: {\n    sectionText: string\n    reasons: string[]\n  }\n}\n\n/**\n * Modal component presented to a data access submission reviewer when they decide to reject a request.\n * The modal contains a form for selecting rejection reasons and a text field for editing the rejection message.\n * After crafting a message, the user can reject the submission and send the message to the requester.\n */\nexport default function RejectDataAccessRequestModal(\n  props: RejectDataAccessRequestModalProps,\n) {\n  const {\n    open,\n    tableId = REJECT_SUBMISSION_CANNED_RESPONSES_TABLE,\n    onClose,\n    submissionId,\n  } = props\n\n  const [step, setStep] = React.useState<1 | 2>(1)\n  const [error, setError] = React.useState<SynapseClientError | null>(null)\n  // selectedRowIds are the row IDs of the canned responses the user selected:\n  const [emailText, setEmailText] = useState('')\n  const [selectedRowIds, setSelectedRowIds] = useState(Set<number>())\n\n  // Fetch the table data\n  const tableQuery = useGetFullTableQueryResults({\n    entityId: tableId,\n    query: {\n      sql: `SELECT * FROM ${tableId}`,\n    },\n    partMask: BUNDLE_MASK_QUERY_RESULTS,\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n  })\n\n  const { data } = tableQuery\n\n  const categoryIndex = data?.queryResult?.queryResults.headers.findIndex(\n    header => header.name.toLowerCase() === CATEGORY_COLUMN_NAME,\n  )\n  const categorySectionEmailTextIndex =\n    data?.queryResult?.queryResults.headers.findIndex(\n      header =>\n        header.name.toLowerCase() === CATEGORY_SECTION_EMAIL_TEXT_COLUMN_NAME,\n    )\n\n  const reasonEmailTextIndex =\n    data?.queryResult?.queryResults.headers.findIndex(\n      header =>\n        header.name.toLowerCase() === REJECTION_REASON_EMAIL_TEXT_COLUMN_NAME,\n    )\n\n  // Transform the selected rejection reasons into an object that can be easily transformed into an email\n  const defaultEmailMessageObject: RejectionMessageObject | undefined =\n    data &&\n    data.queryResult &&\n    selectedRowIds.reduce((messageObject: RejectionMessageObject, rowId) => {\n      const row = data.queryResult!.queryResults.rows.find(\n        row => row.rowId === rowId,\n      )!\n      const category = row.values[categoryIndex!]!\n      const sectionText = row.values[categorySectionEmailTextIndex!]!\n      const reasonText = row.values[reasonEmailTextIndex!]!\n      if (messageObject[category]) {\n        messageObject[category].reasons = [\n          ...messageObject[category].reasons,\n          reasonText,\n        ]\n      } else {\n        messageObject[category] = {\n          sectionText: sectionText,\n          reasons: [reasonText],\n        }\n      }\n      return messageObject\n    }, {})\n\n  // Using the rejection message object, create the email template.\n  const defaultEmailMessage =\n    defaultEmailMessageObject &&\n    DEFAULT_MESSAGE_PREPEND +\n      Object.keys(defaultEmailMessageObject).reduce((message, key) => {\n        const sectionText = defaultEmailMessageObject[key].sectionText\n        message += '\\n' + sectionText + '\\n'\n        for (const reason of defaultEmailMessageObject[key].reasons) {\n          message += '\\n* ' + reason + '\\n'\n        }\n        return message\n      }, '') +\n      DEFAULT_MESSAGE_APPEND\n\n  /* If the selected rows change, then reset the email text. */\n  useEffect(() => {\n    if (defaultEmailMessage) {\n      setEmailText(defaultEmailMessage)\n    }\n    // Specifically fire on update to just selectedRowIds\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedRowIds])\n\n  const { mutate } = useUpdateDataAccessSubmissionState()\n\n  function rejectSubmission(reason: string) {\n    mutate(\n      {\n        submissionId: submissionId.toString(),\n        newState: SubmissionState.REJECTED,\n        rejectedReason: reason,\n      },\n      {\n        onSuccess: () => {\n          setError(null)\n          displayToast(\n            'Submission rejected and message sent to requester',\n            'info',\n          )\n          onClose()\n        },\n        onError: e => {\n          setError(e)\n        },\n      },\n    )\n  }\n\n  // If fetching/processing the table fails, gracefully fall back to just show the email template\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth={'md'} fullWidth>\n      <DialogTitle>\n        <Stack direction=\"row\" alignItems={'center'} gap={'5px'}>\n          Reject Request?\n          <Box sx={{ flexGrow: 1 }} />\n          <IconButton onClick={onClose}>\n            <IconSvg icon={'close'} wrap={false} sx={{ color: 'grey.700' }} />\n          </IconButton>\n        </Stack>\n      </DialogTitle>\n      <DialogContent>\n        {step === 1 && (\n          <SelectRejectionReasonsForm\n            tableQuery={tableQuery}\n            selectedRowIds={selectedRowIds}\n            setSelectedRowIds={setSelectedRowIds}\n          />\n        )}\n        {step === 2 && (\n          <DraftRejectionMessage\n            emailText={emailText}\n            setEmailText={setEmailText}\n          />\n        )}\n        {error && (\n          <FullWidthAlert\n            variant={'danger'}\n            description={error.reason}\n            isGlobal={false}\n          />\n        )}\n      </DialogContent>\n      <DialogActions>\n        {step === 2 && (\n          <Button variant=\"outlined\" onClick={() => setStep(1)}>\n            Back\n          </Button>\n        )}\n        <Box sx={{ flexGrow: 1 }} />\n        <Button variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </Button>\n        {step === 1 && (\n          <Button variant=\"contained\" onClick={() => setStep(2)}>\n            Generate Email\n          </Button>\n        )}\n        {step === 2 && (\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              rejectSubmission(emailText)\n            }}\n          >\n            Reject and Notify Requester\n          </Button>\n        )}\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["CATEGORY_COLUMN_NAME","CATEGORY_SECTION_EMAIL_TEXT_COLUMN_NAME","REJECTION_REASON_FORM_TEXT_COLUMN_NAME","REJECTION_REASON_EMAIL_TEXT_COLUMN_NAME","DEFAULT_MESSAGE_PREPEND","DEFAULT_MESSAGE_APPEND","RejectionCategory","props","category","rows","selectedRowIds","setSelectedRowIds","rejectionReasonFormTextIndex","isExpanded","setIsExpanded","React","jsxs","Fragment","Typography","jsx","IconSvg","Collapse","Stack","row","FormControlLabel","Checkbox","event","SelectRejectionReasonsForm","tableQuery","tableData","isLoading","error","categoryIndex","_a","header","_b","rowsGroupedByCategory","acc","SynapseSpinner","ErrorBanner","FormControl","DraftRejectionMessage","emailText","setEmailText","TextField","RejectDataAccessRequestModal","open","tableId","REJECT_SUBMISSION_CANNED_RESPONSES_TABLE","onClose","submissionId","step","setStep","setError","useState","Set","useGetFullTableQueryResults","BUNDLE_MASK_QUERY_RESULTS","data","categorySectionEmailTextIndex","reasonEmailTextIndex","_c","defaultEmailMessageObject","messageObject","rowId","row2","sectionText","reasonText","defaultEmailMessage","message","key","reason","useEffect","mutate","useUpdateDataAccessSubmissionState","rejectSubmission","SubmissionState","displayToast","e","Dialog","DialogTitle","Box","IconButton","DialogContent","FullWidthAlert","DialogActions","Button"],"mappings":"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"}