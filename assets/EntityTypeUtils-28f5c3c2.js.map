{"version":3,"file":"EntityTypeUtils-28f5c3c2.js","sources":["../../src/utils/functions/EntityTypeUtils.ts"],"sourcesContent":["import {\n  Dataset,\n  DATASET_COLLECTION_CONCRETE_TYPE_VALUE,\n  DATASET_CONCRETE_TYPE_VALUE,\n  DatasetCollection,\n  DOCKER_REPOSITORY_CONCRETE_TYPE_VALUE,\n  Entity,\n  ENTITY_CONCRETE_TYPE,\n  ENTITY_VIEW_CONCRETE_TYPE_VALUE,\n  ENTITY_VIEW_TYPE_MASK_FILE,\n  EntityHeader,\n  EntityType,\n  EntityView,\n  FILE_ENTITY_CONCRETE_TYPE_VALUE,\n  FOLDER_CONCRETE_TYPE_VALUE,\n  Hit,\n  LINK_CONCRETE_TYPE_VALUE,\n  MATERIALIZED_VIEW_CONCRETE_TYPE_VALUE,\n  MaterializedView,\n  PROJECT_CONCRETE_TYPE_VALUE,\n  ProjectHeader,\n  SUBMISSION_VIEW_CONCRETE_TYPE_VALUE,\n  SubmissionView,\n  Table,\n  TABLE_CONCRETE_TYPE_VALUES,\n  TABLE_ENTITY_CONCRETE_TYPE_VALUE,\n  TableEntity,\n  VersionableEntity,\n  View,\n  VIEW_CONCRETE_TYPE_VALUES,\n  VIRTUAL_TABLE_CONCRETE_TYPE_VALUE,\n} from '@sage-bionetworks/synapse-types'\nimport { isTypeViaConcreteTypeFactory } from '../types/IsType'\n\nexport function getEntityTypeFromHeader(\n  header:\n    | Pick<EntityHeader, 'name' | 'id' | 'type'>\n    | EntityHeader\n    | ProjectHeader\n    | Hit,\n) {\n  // Hit has the `node_type` field which is what we already want.\n  if ((header as Hit).node_type) {\n    return (header as Hit).node_type\n  }\n  // ProjectHeader doesn't have the `type` field, so we can just check that to determine if it's a ProjectHeader\n  return (header as EntityHeader).type === undefined\n    ? EntityType.PROJECT\n    : convertToEntityType((header as EntityHeader).type)\n}\n\nexport function isContainerType(type: EntityType): boolean {\n  switch (type) {\n    case EntityType.PROJECT:\n    case EntityType.FOLDER:\n      return true\n    case EntityType.LINK:\n    case EntityType.DOCKER_REPO:\n    case EntityType.FILE:\n    case EntityType.TABLE:\n    case EntityType.SUBMISSION_VIEW:\n    case EntityType.ENTITY_VIEW:\n    case EntityType.DATASET:\n    case EntityType.DATASET_COLLECTION:\n    case EntityType.MATERIALIZED_VIEW:\n    case EntityType.VIRTUAL_TABLE:\n      return false\n    default:\n      throw new Error(`Unknown entity type: ${type}`)\n  }\n}\n\nexport function isTableType(type: EntityType): boolean {\n  switch (type) {\n    case EntityType.PROJECT:\n    case EntityType.FOLDER:\n    case EntityType.LINK:\n    case EntityType.DOCKER_REPO:\n    case EntityType.FILE:\n      return false\n    case EntityType.TABLE:\n    case EntityType.SUBMISSION_VIEW:\n    case EntityType.ENTITY_VIEW:\n    case EntityType.DATASET:\n    case EntityType.DATASET_COLLECTION:\n    case EntityType.MATERIALIZED_VIEW:\n    case EntityType.VIRTUAL_TABLE:\n      return true\n    default:\n      throw new Error(`Unknown entity type: ${type}`)\n  }\n}\n\nexport function entityTypeToFriendlyName(entityType: EntityType): string {\n  switch (entityType) {\n    case EntityType.PROJECT:\n      return 'Project'\n    case EntityType.FOLDER:\n      return 'Folder'\n    case EntityType.FILE:\n      return 'File'\n    case EntityType.TABLE:\n      return 'Table'\n    case EntityType.LINK:\n      return 'Link'\n    case EntityType.ENTITY_VIEW:\n      return 'View'\n    case EntityType.DOCKER_REPO:\n      return 'Docker Repository'\n    case EntityType.SUBMISSION_VIEW:\n      return 'Submission View'\n    case EntityType.DATASET:\n      return 'Dataset'\n    case EntityType.DATASET_COLLECTION:\n      return 'Dataset Collection'\n    case EntityType.MATERIALIZED_VIEW:\n      return 'Materialized View'\n    case EntityType.VIRTUAL_TABLE:\n      return 'Virtual Table'\n    default:\n      console.warn('Entity type could not be mapped to name:', entityType)\n      return ''\n  }\n}\n\nexport function convertToEntityType(\n  typeString: string | ENTITY_CONCRETE_TYPE | EntityType,\n): EntityType {\n  switch (typeString) {\n    case EntityType.PROJECT:\n    case 'org.sagebionetworks.repo.model.Project':\n      return EntityType.PROJECT\n    case EntityType.FOLDER:\n    case 'org.sagebionetworks.repo.model.Folder':\n      return EntityType.FOLDER\n    case EntityType.FILE:\n    case FILE_ENTITY_CONCRETE_TYPE_VALUE:\n      return EntityType.FILE\n    case EntityType.LINK:\n    case 'org.sagebionetworks.repo.model.Link':\n      return EntityType.LINK\n    case EntityType.DOCKER_REPO:\n    case 'org.sagebionetworks.repo.model.docker.DockerRepository':\n      return EntityType.DOCKER_REPO\n    case EntityType.TABLE:\n    case TABLE_ENTITY_CONCRETE_TYPE_VALUE:\n      return EntityType.TABLE\n    case EntityType.SUBMISSION_VIEW:\n    case 'org.sagebionetworks.repo.model.table.SubmissionView':\n      return EntityType.SUBMISSION_VIEW\n    case EntityType.ENTITY_VIEW:\n    case ENTITY_VIEW_CONCRETE_TYPE_VALUE:\n      return EntityType.ENTITY_VIEW\n    case EntityType.DATASET:\n    case DATASET_CONCRETE_TYPE_VALUE:\n      return EntityType.DATASET\n    case EntityType.DATASET_COLLECTION:\n    case DATASET_COLLECTION_CONCRETE_TYPE_VALUE:\n      return EntityType.DATASET_COLLECTION\n    case EntityType.MATERIALIZED_VIEW:\n    case MATERIALIZED_VIEW_CONCRETE_TYPE_VALUE:\n      return EntityType.MATERIALIZED_VIEW\n    case EntityType.VIRTUAL_TABLE:\n    case VIRTUAL_TABLE_CONCRETE_TYPE_VALUE:\n      return EntityType.VIRTUAL_TABLE\n    default:\n      throw new Error(`Unknown entity type: ${typeString}`)\n  }\n}\n\nexport function convertToConcreteEntityType(\n  type: EntityType,\n): ENTITY_CONCRETE_TYPE {\n  switch (type) {\n    case EntityType.PROJECT:\n      return 'org.sagebionetworks.repo.model.Project'\n    case EntityType.FOLDER:\n      return 'org.sagebionetworks.repo.model.Folder'\n    case EntityType.FILE:\n      return 'org.sagebionetworks.repo.model.FileEntity'\n    case EntityType.LINK:\n      return 'org.sagebionetworks.repo.model.Link'\n    case EntityType.DOCKER_REPO:\n      return 'org.sagebionetworks.repo.model.docker.DockerRepository'\n    case EntityType.TABLE:\n      return 'org.sagebionetworks.repo.model.table.TableEntity'\n    case EntityType.SUBMISSION_VIEW:\n      return 'org.sagebionetworks.repo.model.table.SubmissionView'\n    case EntityType.ENTITY_VIEW:\n      return 'org.sagebionetworks.repo.model.table.EntityView'\n    case EntityType.DATASET:\n      return 'org.sagebionetworks.repo.model.table.Dataset'\n    case EntityType.DATASET_COLLECTION:\n      return 'org.sagebionetworks.repo.model.table.DatasetCollection'\n    case EntityType.MATERIALIZED_VIEW:\n      return 'org.sagebionetworks.repo.model.table.MaterializedView'\n    case EntityType.VIRTUAL_TABLE:\n      return 'org.sagebionetworks.repo.model.table.VirtualTable'\n    default:\n      throw new Error(`Unknown entity type: ${type}`)\n  }\n}\n\n/**\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/VersionableEntity.html\n * @param type\n * @returns\n */\nexport function isVersionableEntityType(type: EntityType): boolean {\n  switch (type) {\n    case EntityType.PROJECT:\n    case EntityType.FOLDER:\n    case EntityType.LINK:\n    case EntityType.DOCKER_REPO:\n    case EntityType.SUBMISSION_VIEW: // SubmissionView implements VersionableEntity, but versions aren't supported\n    case EntityType.MATERIALIZED_VIEW: // MaterializedView implements VersionableEntity, but versions aren't supported.\n    case EntityType.VIRTUAL_TABLE: // VirtualTable implements VersionableEntity, but versions aren't supported.\n      return false\n    case EntityType.FILE:\n    case EntityType.TABLE:\n    case EntityType.ENTITY_VIEW:\n    case EntityType.DATASET:\n    case EntityType.DATASET_COLLECTION:\n      return true\n    default:\n      throw new Error(`Unknown entity type: ${type}`)\n  }\n}\n\nexport const isTable = isTypeViaConcreteTypeFactory<Table, Entity>(\n  ...TABLE_CONCRETE_TYPE_VALUES,\n)\n\nexport const isView = isTypeViaConcreteTypeFactory<View, Entity>(\n  ...VIEW_CONCRETE_TYPE_VALUES,\n)\n\nexport const isTableEntity = isTypeViaConcreteTypeFactory<TableEntity, Entity>(\n  TABLE_ENTITY_CONCRETE_TYPE_VALUE,\n)\n\nexport const isSubmissionView = isTypeViaConcreteTypeFactory<\n  SubmissionView,\n  Entity\n>(SUBMISSION_VIEW_CONCRETE_TYPE_VALUE)\n\nexport const isMaterializedView = isTypeViaConcreteTypeFactory<\n  MaterializedView,\n  Entity\n>(MATERIALIZED_VIEW_CONCRETE_TYPE_VALUE)\n\nexport const isDataset = isTypeViaConcreteTypeFactory<Dataset, Entity>(\n  DATASET_CONCRETE_TYPE_VALUE,\n)\nexport const isDatasetCollection = isTypeViaConcreteTypeFactory<\n  DatasetCollection,\n  Entity\n>(DATASET_COLLECTION_CONCRETE_TYPE_VALUE)\n\nexport const isEntityRefCollectionView = (entity: Entity) =>\n  isDataset(entity) || isDatasetCollection(entity)\n\nexport const isEntityView = isTypeViaConcreteTypeFactory<EntityView, Entity>(\n  ENTITY_VIEW_CONCRETE_TYPE_VALUE,\n)\n\n/**\n * @param entityView\n * @returns true iff the viewTypeMask allows files to appear in the view\n */\nexport function hasFilesInView(entityView: EntityView) {\n  return (entityView.viewTypeMask & ENTITY_VIEW_TYPE_MASK_FILE) != 0\n}\n\n/**\n * @param entityView\n * @returns true iff the viewTypeMask allows only files to appear in the view\n */\nexport function isFileView(entityView: EntityView) {\n  return entityView.viewTypeMask === ENTITY_VIEW_TYPE_MASK_FILE\n}\n\nexport function isVersionableEntity(\n  entity: Entity,\n): entity is VersionableEntity {\n  return isVersionableEntityType(convertToEntityType(entity.concreteType))\n}\n\nexport function getVersionDisplay(entity: Entity): string {\n  if (!isVersionableEntity(entity)) {\n    console.warn(\"Entity isn't versionable:\", entity)\n    return ''\n  }\n\n  if (entity.isLatestVersion) {\n    if (!isTable(entity)) {\n      // e.g. Files. Always show the version number\n      return `${entity.versionNumber!.toString()} (Current)`\n    } else if (isDataset(entity)) {\n      return 'Draft'\n    } else {\n      return 'Current'\n    }\n  } else {\n    return entity.versionNumber!.toString()\n  }\n}\n\n// implemented by https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/Entity.html\nconst allEntityKeys: string[] = [\n  'name',\n  'description',\n  'id',\n  'etag',\n  'createdOn',\n  'modifiedOn',\n  'createdBy',\n  'modifiedBy',\n  'parentId',\n  'concreteType',\n]\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/VersionableEntity.html\nconst versionableKeys: string[] = [\n  ...allEntityKeys,\n  'versionNumber',\n  'versionLabel',\n  'versionComment',\n  'isLatestVersion',\n]\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Table.html\nconst tableKeys: string[] = [...versionableKeys, 'columnIds', 'isSearchEnabled']\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/table/View.html\nconst viewKeys: string[] = [...tableKeys]\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/table/EntityRefCollectionView.html\nconst entityRefCollectionViewKeys: string[] = [...viewKeys, 'items']\n\n/**\n * A string array of all possible keys used by Synapse in Entity objects (objects that inherit this interface: https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/Entity.html).\n * This object is used to determine which fields are standard and which are annotations,\n * so it's important that this object contains all keys in the objects that implement the linked interface above.\n */\nexport const entityJsonKeys: Record<ENTITY_CONCRETE_TYPE, string[]> = {\n  [LINK_CONCRETE_TYPE_VALUE]: [...allEntityKeys, 'linksTo', 'linksToClassName'],\n  [DOCKER_REPOSITORY_CONCRETE_TYPE_VALUE]: [\n    ...allEntityKeys,\n    'repositoryName',\n    'isManaged',\n  ],\n  [FILE_ENTITY_CONCRETE_TYPE_VALUE]: [\n    ...versionableKeys,\n    'dataFileHandleId',\n    'fileNameOverride',\n  ],\n  [SUBMISSION_VIEW_CONCRETE_TYPE_VALUE]: [...viewKeys, 'scopeIds'],\n  [DATASET_CONCRETE_TYPE_VALUE]: [\n    ...entityRefCollectionViewKeys,\n    'size',\n    'checksum',\n  ],\n  [DATASET_COLLECTION_CONCRETE_TYPE_VALUE]: [...entityRefCollectionViewKeys],\n  [ENTITY_VIEW_CONCRETE_TYPE_VALUE]: [\n    ...viewKeys,\n    'scopeIds',\n    'viewTypeMask',\n    'type',\n  ],\n  [TABLE_ENTITY_CONCRETE_TYPE_VALUE]: tableKeys,\n  [MATERIALIZED_VIEW_CONCRETE_TYPE_VALUE]: [...tableKeys, 'definingSQL'],\n  [VIRTUAL_TABLE_CONCRETE_TYPE_VALUE]: [...tableKeys, 'definingSQL'],\n  [FOLDER_CONCRETE_TYPE_VALUE]: allEntityKeys,\n  [PROJECT_CONCRETE_TYPE_VALUE]: [...allEntityKeys, 'alias'],\n}\n"],"names":["getEntityTypeFromHeader","header","EntityType","convertToEntityType","isContainerType","type","isTableType","entityTypeToFriendlyName","entityType","typeString","FILE_ENTITY_CONCRETE_TYPE_VALUE","TABLE_ENTITY_CONCRETE_TYPE_VALUE","ENTITY_VIEW_CONCRETE_TYPE_VALUE","DATASET_CONCRETE_TYPE_VALUE","DATASET_COLLECTION_CONCRETE_TYPE_VALUE","MATERIALIZED_VIEW_CONCRETE_TYPE_VALUE","VIRTUAL_TABLE_CONCRETE_TYPE_VALUE","convertToConcreteEntityType","isVersionableEntityType","isTable","isTypeViaConcreteTypeFactory","TABLE_CONCRETE_TYPE_VALUES","isTableEntity","isDataset","isDatasetCollection","isEntityRefCollectionView","entity","isEntityView","hasFilesInView","entityView","ENTITY_VIEW_TYPE_MASK_FILE","isFileView","isVersionableEntity","getVersionDisplay","allEntityKeys","versionableKeys","tableKeys","viewKeys","entityRefCollectionViewKeys","entityJsonKeys","LINK_CONCRETE_TYPE_VALUE","DOCKER_REPOSITORY_CONCRETE_TYPE_VALUE","SUBMISSION_VIEW_CONCRETE_TYPE_VALUE","FOLDER_CONCRETE_TYPE_VALUE","PROJECT_CONCRETE_TYPE_VALUE"],"mappings":"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"}