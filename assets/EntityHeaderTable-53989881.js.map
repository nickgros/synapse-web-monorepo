{"version":3,"file":"EntityHeaderTable-53989881.js","sources":["../../src/components/EntityHeaderTable/DebouncedInput.tsx","../../src/components/EntityHeaderTable/Filter.tsx","../../src/components/EntityHeaderTable/EntityHeaderTableCellRenderers.tsx","../../src/assets/icons/AddAd.tsx","../../src/components/EntityHeaderTable/useEntityHeaderTableState.ts","../../src/components/EntityHeaderTable/EntityHeaderTable.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { TextField, TextFieldProps, Autocomplete } from '@mui/material'\nimport { useDebouncedEffect } from '../../utils/hooks'\n\n// A debounced input react component\n\nexport function DebouncedInput({\n  initialValue,\n  onChange,\n  options,\n  delay = 250,\n  ...textFieldProps\n}: {\n  initialValue: string\n  onChange: (value: string) => void\n  options: string[]\n  delay?: number\n} & Pick<\n  TextFieldProps,\n  'type' | 'value' | 'placeholder' | 'className' | 'label'\n>) {\n  const [value, setValue] = useState(initialValue)\n  useDebouncedEffect(\n    () => {\n      onChange(value)\n    },\n    [onChange, value],\n    delay,\n  )\n\n  return (\n    <Autocomplete\n      freeSolo\n      disablePortal\n      isOptionEqualToValue={(option, value) =>\n        value.length == 0 || option === value\n      }\n      options={options}\n      value={value}\n      onChange={(event, newValue) => {\n        setValue(newValue ?? '')\n      }}\n      sx={{ marginRight: '10px' }}\n      renderInput={params => (\n        <TextField\n          {...params}\n          {...textFieldProps}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      )}\n    />\n  )\n}\n","import React from 'react'\nimport { Column, Table } from '@tanstack/react-table'\nimport { DebouncedInput } from './DebouncedInput'\n\nexport function Filter({\n  column,\n  table,\n}: {\n  column: Column<any, unknown>\n  table: Table<any>\n}) {\n  const firstValue = table\n    .getPreFilteredRowModel()\n    .flatRows[0]?.getValue(column.id)\n\n  const columnFilterValue = (column.getFilterValue() as string) ?? ''\n\n  const sortedUniqueValues: string[] = React.useMemo(\n    () =>\n      typeof firstValue === 'number'\n        ? []\n        : Array.from(column.getFacetedUniqueValues().keys()).sort(),\n    [column.getFacetedUniqueValues()],\n  )\n  return (\n    <DebouncedInput\n      type=\"text\"\n      options={sortedUniqueValues}\n      initialValue={columnFilterValue}\n      onChange={value => column.setFilterValue(value)}\n      label={`Filter by ${column.columnDef.header} (${\n        column.getFacetedUniqueValues().size\n      })`}\n    />\n  )\n}\n","import React from 'react'\nimport { CellContext, HeaderContext } from '@tanstack/react-table'\nimport { Checkbox, Link } from '@mui/material'\nimport { EntityLink } from '../EntityLink'\nimport { PRODUCTION_ENDPOINT_CONFIG } from '../../utils/functions/getEndpoint'\nimport { EntityHeaderOrDummy } from './EntityHeaderTable'\nimport { Typography } from '@mui/material'\n\nexport function EntityHeaderNameCell(\n  props: CellContext<EntityHeaderOrDummy, string | null>,\n) {\n  const { cell } = props\n  const { row } = cell\n  const { original } = row\n  const { id, isDummy } = original\n  return isDummy ? (\n    <Link href={`${PRODUCTION_ENDPOINT_CONFIG.PORTAL}#!Synapse:${id}`}>\n      {id}\n    </Link>\n  ) : (\n    <EntityLink entity={original} />\n  )\n}\nexport function EntityHeaderIDCell(\n  props: CellContext<EntityHeaderOrDummy, string | null>,\n) {\n  const { cell } = props\n  return <Typography variant=\"body1\">{cell.getContext().getValue()}</Typography>\n}\nexport function EntityHeaderTypeCell(\n  props: CellContext<EntityHeaderOrDummy, string | null>,\n) {\n  const { cell } = props\n  return (\n    <Typography variant=\"body1\" sx={{ textTransform: 'capitalize' }}>\n      {cell.getContext().getValue()}\n    </Typography>\n  )\n}\nexport function CheckBoxHeader(\n  props: HeaderContext<EntityHeaderOrDummy, string | null>,\n) {\n  const { table } = props\n  return (\n    <Checkbox\n      checked={table.getIsAllRowsSelected()}\n      indeterminate={table.getIsSomeRowsSelected()}\n      onClick={table.getToggleAllRowsSelectedHandler()}\n    />\n  )\n}\nexport function CheckBoxCell(\n  props: CellContext<EntityHeaderOrDummy, string | null>,\n) {\n  const { row } = props\n  return (\n    <Checkbox\n      checked={row.getIsSelected()}\n      disabled={!row.getCanSelect()}\n      indeterminate={row.getIsSomeSelected()}\n      onClick={row.getToggleSelectedHandler()}\n    />\n  )\n}\n","import React from 'react'\n\nconst AddAd = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <mask\n      id=\"mask0_6722_37828\"\n      style={{ maskType: 'alpha' }}\n      maskUnits=\"userSpaceOnUse\"\n      x=\"0\"\n      y=\"0\"\n      width=\"24\"\n      height=\"24\"\n    >\n      <rect width=\"24\" height=\"24\" fill=\"#D9D9D9\" />\n    </mask>\n    <g mask=\"url(#mask0_6722_37828)\">\n      <path\n        d=\"M18 20V17H15V15H18V12H20V15H23V17H20V20H18ZM3 21C2.45 21 1.97917 20.8042 1.5875 20.4125C1.19583 20.0208 1 19.55 1 19V5C1 4.45 1.19583 3.97917 1.5875 3.5875C1.97917 3.19583 2.45 3 3 3H17C17.55 3 18.0208 3.19583 18.4125 3.5875C18.8042 3.97917 19 4.45 19 5V10H17V8H3V19H16V21H3ZM3 6H17V5H3V6Z\"\n        fill=\"#395979\"\n      />\n    </g>\n  </svg>\n)\n\nexport default AddAd\n","import { useState, useCallback } from 'react'\nimport { RowSelectionState } from '@tanstack/react-table'\nimport { cloneDeep } from 'lodash-es'\nimport { ReferenceList } from '@sage-bionetworks/synapse-types'\n\nexport function useEntityHeaderTableState(\n  references: ReferenceList,\n  onUpdateEntityIDsTextbox?: (value: string) => void,\n  onUpdate?: (updatedRefs: ReferenceList) => void,\n) {\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({})\n  const [refsInState, _setRefsInState] = useState<ReferenceList>(\n    cloneDeep(references),\n  )\n  const [newEntityIDs, _setNewEntityIDs] = useState<string>('')\n  const [parseErrors, setParseErrors] = useState<string[]>([])\n\n  const setNewEntityIDs = useCallback(\n    (newValue: string) => {\n      _setNewEntityIDs(newValue)\n      onUpdateEntityIDsTextbox && onUpdateEntityIDsTextbox(newValue)\n    },\n    [onUpdateEntityIDsTextbox],\n  )\n\n  const setRefsInState = useCallback(\n    (refs: ReferenceList) => {\n      setRowSelection({})\n      _setRefsInState(refs)\n      if (onUpdate) {\n        onUpdate(refs)\n      }\n      setParseErrors([])\n      setNewEntityIDs('')\n    },\n    [onUpdate, setNewEntityIDs],\n  )\n\n  return {\n    rowSelection,\n    setRowSelection,\n    refsInState,\n    setRefsInState,\n    newEntityIDs,\n    setNewEntityIDs,\n    parseErrors,\n    setParseErrors,\n  }\n}\n","import React, { useState, useMemo, useCallback, useEffect } from 'react'\nimport {\n  useReactTable,\n  ColumnFiltersState,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFacetedMinMaxValues,\n  getSortedRowModel,\n  ColumnDef,\n  flexRender,\n} from '@tanstack/react-table'\nimport {\n  TextField,\n  Typography,\n  Box,\n  Button,\n  InputLabel,\n  Alert,\n  AlertTitle,\n  IconButton,\n  Tooltip,\n} from '@mui/material'\nimport { EntityHeader, ReferenceList } from '@sage-bionetworks/synapse-types'\nimport {\n  entityTypeToFriendlyName,\n  getEntityTypeFromHeader,\n} from '../../utils/functions/EntityTypeUtils'\nimport { useGetEntityHeaders } from '../../synapse-queries'\nimport IconSvg from '../IconSvg'\nimport { SkeletonTable } from '../Skeleton'\nimport { AddCircleTwoTone } from '@mui/icons-material'\nimport { parse } from 'papaparse'\nimport { SYNAPSE_ENTITY_ID_REGEX } from '../../utils/functions/RegularExpressions'\nimport { Filter } from './Filter'\nimport { EntityHeaderNameCell } from './EntityHeaderTableCellRenderers'\nimport { EntityHeaderIDCell } from './EntityHeaderTableCellRenderers'\nimport { EntityHeaderTypeCell } from './EntityHeaderTableCellRenderers'\nimport { CheckBoxHeader } from './EntityHeaderTableCellRenderers'\nimport { CheckBoxCell } from './EntityHeaderTableCellRenderers'\nimport AddAd from '../../assets/icons/AddAd'\nimport {\n  EntityFinderModal,\n  EntityFinderModalProps,\n} from '../EntityFinder/EntityFinderModal'\nimport { VersionSelectionType } from '../EntityFinder/VersionSelectionType'\nimport { FinderScope } from '../EntityFinder/tree/EntityTree'\nimport { useEntityHeaderTableState } from './useEntityHeaderTableState'\nimport { noop, upperFirst } from 'lodash-es'\nimport pluralize from 'pluralize'\n\nconst DEFAULT_FINDER_CONFIG: EntityFinderModalProps['configuration'] = {\n  selectMultiple: true,\n  versionSelection: VersionSelectionType.DISALLOWED,\n  initialScope: FinderScope.ALL_PROJECTS,\n  initialContainer: 'root',\n}\n\nexport type EntityHeaderTableProps = {\n  references: ReferenceList\n  isEditable: boolean\n  onUpdate?: (updatedRefs: ReferenceList) => void // when the references are updated, EntityHeaderTable will call this function with the updated list\n  removeSelectedRowsButtonText?: string\n  onUpdateEntityIDsTextbox?: (value: string) => void // when the entity IDs text box is updated, this is called\n  /* The word used to describe the items in the table. Default 'entity' */\n  objectNameCopy?: string\n  // If true, the text field where IDs are pasted is hidden, and confirming the entity finder will immediately call `onUpdate`\n  hideTextFieldToPasteValue?: boolean\n  entityFinderConfiguration?: EntityFinderModalProps['configuration']\n}\n\nconst UNMANAGEABLE_SUBJECT_COUNT = 10\n\n// extend EntityHeader to create dummy EntityHeader rows for those that the current user cannot view\nexport type EntityHeaderOrDummy = EntityHeader & { isDummy?: boolean }\n\n/**\n * Renders a sortable/filterable table for a set of entity references.  If editable, onUpdate will be called back\n * on any entity added/removed.\n */\nexport const EntityHeaderTable = (props: EntityHeaderTableProps) => {\n  const {\n    references,\n    isEditable,\n    onUpdate = noop,\n    removeSelectedRowsButtonText = 'Remove Selected Rows',\n    onUpdateEntityIDsTextbox,\n    objectNameCopy = 'entity',\n    hideTextFieldToPasteValue = false,\n    entityFinderConfiguration = DEFAULT_FINDER_CONFIG,\n  } = props\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])\n  const [showEntityFinder, setShowEntityFinder] = useState<boolean>(false)\n\n  const {\n    rowSelection,\n    setRowSelection,\n    refsInState,\n    setRefsInState,\n    newEntityIDs,\n    setNewEntityIDs,\n    parseErrors,\n    setParseErrors,\n  } = useEntityHeaderTableState(references, onUpdateEntityIDsTextbox, onUpdate)\n\n  const setInvalidEntityIDError = useCallback(\n    (invalidEntityIDs: string[]) => {\n      setParseErrors([`Invalid Synapse ID(s): ${invalidEntityIDs.join(',')}`])\n    },\n    [setParseErrors],\n  )\n\n  const addRefsFromEntityIDs = useCallback(\n    (entityIDs: string[]) => {\n      const newReferences: ReferenceList = entityIDs.map(id => {\n        return {\n          targetId: id.trim(),\n        }\n      })\n      setRefsInState([...refsInState, ...newReferences])\n    },\n    [refsInState, setRefsInState],\n  )\n\n  const addPastedValuesToArray = useCallback(() => {\n    if (newEntityIDs) {\n      if (newEntityIDs.includes(',')) {\n        parse<string[]>(newEntityIDs, {\n          complete: result => {\n            if (result.errors.length > 0) {\n              const newParseErrors = result.errors.map(\n                parseError => parseError.message,\n              )\n              setParseErrors(newParseErrors)\n            } else {\n              const newParsedEntityIDs = result.data[0]\n              const invalidEntityIDs = newParsedEntityIDs.filter(\n                id => !id.trim().match(SYNAPSE_ENTITY_ID_REGEX),\n              )\n              if (invalidEntityIDs.length > 0) {\n                setInvalidEntityIDError(invalidEntityIDs)\n              } else {\n                addRefsFromEntityIDs(newParsedEntityIDs)\n              }\n            }\n          },\n        })\n      } else {\n        // single item\n        if (!newEntityIDs.trim().match(SYNAPSE_ENTITY_ID_REGEX)) {\n          setInvalidEntityIDError([newEntityIDs])\n        } else {\n          addRefsFromEntityIDs([newEntityIDs])\n        }\n      }\n    } else {\n      setParseErrors([])\n      setNewEntityIDs('')\n    }\n  }, [\n    addRefsFromEntityIDs,\n    newEntityIDs,\n    setInvalidEntityIDError,\n    setNewEntityIDs,\n    setParseErrors,\n  ])\n\n  const pluralObjectName = upperFirst(pluralize(objectNameCopy))\n\n  const selectColumns: ColumnDef<EntityHeaderOrDummy, any>[] = useMemo(\n    () => [\n      {\n        id: 'select',\n        header: CheckBoxHeader,\n        cell: CheckBoxCell,\n      },\n    ],\n    [],\n  )\n\n  const entityHeaderColumns: ColumnDef<EntityHeaderOrDummy, any>[] = useMemo(\n    () => [\n      {\n        accessorFn: (row: EntityHeaderOrDummy) => row.name,\n        id: 'name',\n        cell: EntityHeaderNameCell,\n        header: 'Name',\n      },\n      {\n        accessorFn: (row: EntityHeaderOrDummy) => row.id,\n        id: 'id',\n        cell: EntityHeaderIDCell,\n        header: 'SynID',\n      },\n      {\n        accessorFn: (row: EntityHeaderOrDummy) =>\n          row.isDummy\n            ? '-'\n            : entityTypeToFriendlyName(getEntityTypeFromHeader(row)),\n        id: 'type',\n        header: 'Type',\n        cell: EntityHeaderTypeCell,\n        filterFn: 'includesString',\n      },\n    ],\n    [],\n  )\n\n  const columns = useMemo<ColumnDef<EntityHeaderOrDummy, any>[]>(\n    () =>\n      isEditable\n        ? selectColumns.concat(entityHeaderColumns)\n        : entityHeaderColumns,\n    [entityHeaderColumns, isEditable, selectColumns],\n  )\n  const selectionCount = Object.keys(rowSelection).length\n  const {\n    data: results,\n    isSuccess,\n    isLoading,\n  } = useGetEntityHeaders(refsInState, {\n    useErrorBoundary: true,\n  })\n\n  const data = useMemo(() => {\n    //create dummy entries for values that were not returned by the getEntityHeaders call!\n    const newData = results ? results?.results : []\n    const newDataEntityIds = new Set()\n    newData.map(entityHeader => newDataEntityIds.add(entityHeader.id))\n    const missingRefs = refsInState.filter(\n      ref => !newDataEntityIds.has(ref.targetId),\n    )\n    const dummyEntityHeaders: EntityHeaderOrDummy[] = missingRefs.map(ref => {\n      return {\n        id: ref.targetId,\n        name: ref.targetId,\n        benefactorId: -1,\n        type: 'org.sagebionetworks.repo.model.Project',\n        createdOn: '',\n        modifiedOn: '',\n        createdBy: '',\n        modifiedBy: '',\n        isLatestVersion: true,\n        isDummy: true,\n      }\n    })\n    return newData.concat(dummyEntityHeaders)\n  }, [refsInState, results])\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      rowSelection,\n      columnFilters,\n    },\n    enableRowSelection: isEditable,\n    onRowSelectionChange: setRowSelection,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n    getFacetedMinMaxValues: getFacetedMinMaxValues(),\n    // debugTable: true,\n    // debugHeaders: true,\n    // debugColumns: false,\n    columnResizeMode: 'onChange',\n  })\n\n  const onRemove = useCallback(() => {\n    // rowSelection looks like {3: true. 5: true} where the key is the row index.\n    // Create a new ReferenceList based on the entityHeaders in the current table.\n    const updatedData = data.filter(\n      (_value, index) => !(rowSelection[index] === true),\n    )\n    const newRowRefs: ReferenceList = updatedData.map(entityHeader => {\n      return {\n        targetId: entityHeader.id,\n      }\n    })\n    setRefsInState(newRowRefs)\n  }, [data, rowSelection, setRefsInState])\n\n  const isSelection = selectionCount > 0\n  const totalRowCount = data.length\n  const filteredRowCount = table.getPrePaginationRowModel().rows.length\n  const showFilterControls = totalRowCount > UNMANAGEABLE_SUBJECT_COUNT\n\n  /**\n   * Reset the column filters when the filter controls are hidden.\n   * This handles the following edge case:\n   *      1. List contains 100 items of type \"A\" and 1 of type \"B\"\n   *      2. User filters to show just \"A\" items\n   *      3. User removes all \"A\" items\n   *      4. Only the single \"B\" item remains, but the filter is still present on type \"A\".\n   *         The filter controls are hidden, so the user cannot see the \"B\" item.\n   *\n   * This effect will clear the filters when the filter controls are hidden, preventing this scenario.\n   */\n  useEffect(\n    function resetFiltersWhenFilterControlsAreHidden() {\n      if (!showFilterControls) {\n        table.setColumnFilters([])\n      }\n    },\n    [table, showFilterControls],\n  )\n\n  if (isLoading) {\n    return (\n      <SkeletonTable numCols={3} numRows={Math.min(10, refsInState.length)} />\n    )\n  } else if (!isSuccess) {\n    return <></>\n  }\n  return (\n    <div>\n      <Box\n        display={'flex'}\n        justifyContent={'space-between'}\n        p={'12px 10px 10px 5px'}\n      >\n        {showFilterControls && (\n          <Typography variant=\"body1\" sx={{ marginBottom: '10px' }}>\n            {totalRowCount} {pluralObjectName}{' '}\n            {filteredRowCount < totalRowCount\n              ? `(${filteredRowCount} visible)`\n              : ''}\n            {isSelection && <span>{` (${selectionCount} selected)`}</span>}\n          </Typography>\n        )}\n        {isEditable && refsInState.length > 0 && (\n          <Button\n            variant=\"contained\"\n            disabled={!isSelection}\n            onClick={onRemove}\n          >\n            {removeSelectedRowsButtonText}\n          </Button>\n        )}\n      </Box>\n      <Box display={'flex'} pb={2}>\n        {table.getHeaderGroups().map(headerGroup =>\n          headerGroup.headers.map(header => {\n            return header.isPlaceholder ? null : (\n              <React.Fragment key={header.column.id}>\n                {header.column.getCanFilter() && showFilterControls ? (\n                  <Box sx={{ flexGrow: 1 }}>\n                    <Filter column={header.column} table={table} />\n                  </Box>\n                ) : null}\n              </React.Fragment>\n            )\n          }),\n        )}\n      </Box>\n      {totalRowCount > 0 && (\n        <Box\n          sx={theme => ({\n            overflow: 'auto',\n            maxHeight: '250px',\n            paddingLeft: '2px',\n            th: {\n              height: '38px',\n              backgroundColor: theme.palette.grey[200],\n              zIndex: 100,\n            },\n            ['tr:nth-of-type(2n)']: {\n              backgroundColor: theme.palette.grey[100],\n            },\n          })}\n        >\n          <table style={{ borderCollapse: 'collapse', width: '100%' }}>\n            <thead>\n              {table.getHeaderGroups().map(headerGroup => (\n                <tr key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    let columnSize: string = '5%'\n                    switch (header.id) {\n                      case 'name':\n                        columnSize = '50%'\n                        break\n                      case 'id':\n                        columnSize = '22%'\n                        break\n                      case 'type':\n                        columnSize = '22%'\n                        break\n                      default:\n                        break\n                    }\n                    return (\n                      <th\n                        key={header.id}\n                        colSpan={header.colSpan}\n                        style={{\n                          width: columnSize,\n                          position: 'sticky',\n                          top: '0px',\n                        }}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Box display={'flex'} alignItems={'center'}>\n                            {flexRender(\n                              header.column.columnDef.header,\n                              header.getContext(),\n                            )}\n                            <Box mx={'auto'} />\n                            {header.column.getCanSort() && (\n                              <IconButton\n                                onClick={header.column.getToggleSortingHandler()}\n                                size={'small'}\n                                sx={{\n                                  marginLeft: 'auto',\n                                  marginRight: '16px',\n                                }}\n                              >\n                                <IconSvg\n                                  icon={\n                                    header.column.getIsSorted() === 'asc'\n                                      ? 'sortUp'\n                                      : 'sortDown'\n                                  }\n                                  wrap={false}\n                                  fontSize={'inherit'}\n                                  sx={{\n                                    color: header.column.getIsSorted()\n                                      ? 'primary.main'\n                                      : 'grey.700',\n                                    backgroundColor: 'none',\n                                  }}\n                                />\n                              </IconButton>\n                            )}\n                          </Box>\n                        )}\n                        {header.column.getCanResize() && (\n                          <div\n                            className={`resizer ${\n                              header.column.getIsResizing() ? 'isResizing' : ''\n                            }`}\n                            onMouseDown={header.getResizeHandler()}\n                            onTouchStart={header.getResizeHandler()}\n                          />\n                        )}\n                      </th>\n                    )\n                  })}\n                </tr>\n              ))}\n            </thead>\n            <tbody>\n              {table.getRowModel().rows.map(row => {\n                return (\n                  <tr key={row.id} style={{ height: '30px' }}>\n                    {row.getVisibleCells().map(cell => {\n                      return (\n                        <td\n                          key={cell.id}\n                          style={{\n                            width: cell.column.getSize(),\n                          }}\n                        >\n                          {flexRender(\n                            cell.column.columnDef.cell,\n                            cell.getContext(),\n                          )}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        </Box>\n      )}\n      <EntityFinderModal\n        configuration={entityFinderConfiguration}\n        promptCopy={`Select ${pluralObjectName} to add to the Synapse ID list`}\n        show={showEntityFinder}\n        title={`Select ${pluralObjectName}`}\n        confirmButtonCopy={`Add ${pluralObjectName}`}\n        onConfirm={items => {\n          if (hideTextFieldToPasteValue) {\n            const newRefs = [...refsInState, ...items]\n            setRefsInState(newRefs)\n            onUpdate(newRefs)\n          } else {\n            const newEntityIDsArray = items.map(ref => ref.targetId)\n            const newEntityIDsString =\n              newEntityIDs.trim().length > 0\n                ? newEntityIDs.concat(',')\n                : newEntityIDs\n            const newValue = newEntityIDsString.concat(\n              newEntityIDsArray.join(','),\n            )\n            setNewEntityIDs(newValue)\n          }\n          setShowEntityFinder(false)\n        }}\n        onCancel={() => setShowEntityFinder(false)}\n      />\n      {isEditable && (\n        <Box sx={{ marginTop: '10px' }}>\n          {hideTextFieldToPasteValue && (\n            <Button\n              variant=\"outlined\"\n              onClick={() => {\n                setShowEntityFinder(true)\n              }}\n              startIcon={<AddAd />}\n            >\n              Add {pluralObjectName}\n            </Button>\n          )}\n          {!hideTextFieldToPasteValue && (\n            <>\n              <InputLabel htmlFor=\"synIDs\">Add Synapse IDs</InputLabel>\n              <Box\n                sx={{ display: 'grid', gridTemplateColumns: 'auto 50px 150px' }}\n              >\n                <TextField\n                  id=\"synIDs\"\n                  name=\"synIDs\"\n                  fullWidth\n                  onChange={e => {\n                    setNewEntityIDs(e.target.value)\n                  }}\n                  value={newEntityIDs}\n                  placeholder=\"Enter a list of Synapse IDs (i.e. 'syn123, syn456')\"\n                />\n                <Box sx={{ padding: '5px 0px 0px 5px' }}>\n                  {/* Entity finder button.  On select, append the selected entity ID to the newSynIDs list */}\n                  <Tooltip title=\"Add a Synapse ID to the list via the Entity Finder\">\n                    <IconButton\n                      onClick={() => {\n                        setShowEntityFinder(true)\n                      }}\n                    >\n                      <AddAd />\n                    </IconButton>\n                  </Tooltip>\n                </Box>\n                <Button\n                  variant=\"outlined\"\n                  onClick={addPastedValuesToArray}\n                  disabled={isLoading || newEntityIDs.trim().length == 0}\n                  startIcon={<AddCircleTwoTone />}\n                >\n                  Add {pluralObjectName}\n                </Button>\n              </Box>\n            </>\n          )}\n          {parseErrors && parseErrors.length > 0 && (\n            <Alert severity={'error'} sx={{ my: 2 }}>\n              <AlertTitle>Parsing errors encountered:</AlertTitle>\n              <ul>\n                {parseErrors.map((error, index) => {\n                  return (\n                    <Typography\n                      component={parseErrors.length > 1 ? 'li' : 'span'}\n                      lineHeight={1.5}\n                      key={index}\n                      variant={'smallText1'}\n                    >\n                      {error}\n                    </Typography>\n                  )\n                })}\n              </ul>\n            </Alert>\n          )}\n        </Box>\n      )}\n    </div>\n  )\n}\n"],"names":["DebouncedInput","initialValue","onChange","options","delay","textFieldProps","value","setValue","useState","useDebouncedEffect","jsx","Autocomplete","option","value2","event","newValue","params","TextField","e","Filter","column","table","firstValue","_a","columnFilterValue","sortedUniqueValues","React","EntityHeaderNameCell","props","cell","row","original","id","isDummy","Link","PRODUCTION_ENDPOINT_CONFIG","EntityLink","EntityHeaderIDCell","Typography","EntityHeaderTypeCell","CheckBoxHeader","Checkbox","CheckBoxCell","AddAd","jsxs","useEntityHeaderTableState","references","onUpdateEntityIDsTextbox","onUpdate","rowSelection","setRowSelection","refsInState","_setRefsInState","cloneDeep","newEntityIDs","_setNewEntityIDs","parseErrors","setParseErrors","setNewEntityIDs","useCallback","setRefsInState","refs","DEFAULT_FINDER_CONFIG","VersionSelectionType","FinderScope","UNMANAGEABLE_SUBJECT_COUNT","EntityHeaderTable","isEditable","noop","removeSelectedRowsButtonText","objectNameCopy","hideTextFieldToPasteValue","entityFinderConfiguration","columnFilters","setColumnFilters","showEntityFinder","setShowEntityFinder","setInvalidEntityIDError","invalidEntityIDs","addRefsFromEntityIDs","entityIDs","newReferences","addPastedValuesToArray","parse","result","newParseErrors","parseError","newParsedEntityIDs","SYNAPSE_ENTITY_ID_REGEX","pluralObjectName","upperFirst","pluralize","selectColumns","useMemo","entityHeaderColumns","entityTypeToFriendlyName","getEntityTypeFromHeader","columns","selectionCount","results","isSuccess","isLoading","useGetEntityHeaders","data","newData","newDataEntityIds","entityHeader","dummyEntityHeaders","ref","useReactTable","getCoreRowModel","getFilteredRowModel","getSortedRowModel","getFacetedRowModel","getFacetedUniqueValues","getFacetedMinMaxValues","onRemove","newRowRefs","_value","index","isSelection","totalRowCount","filteredRowCount","showFilterControls","useEffect","SkeletonTable","Box","Button","headerGroup","header","theme","columnSize","flexRender","IconButton","IconSvg","EntityFinderModal","items","newRefs","newEntityIDsArray","Fragment","InputLabel","Tooltip","AddCircleTwoTone","Alert","AlertTitle","error"],"mappings":"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"}