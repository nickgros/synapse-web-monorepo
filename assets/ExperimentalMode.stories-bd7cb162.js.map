{"version":3,"file":"ExperimentalMode.stories-bd7cb162.js","sources":["../../src/components/ExperimentalMode/ExperimentalMode.tsx"],"sourcesContent":["import React from 'react'\nimport { Button, IconButton, Tooltip } from '@mui/material'\nimport { useEffect, useState } from 'react'\nimport UniversalCookies from 'universal-cookie'\nimport { isInSynapseExperimentalMode } from '../../synapse-client/SynapseClient'\nimport { EXPERIMENTAL_MODE_COOKIE } from '../../utils/SynapseConstants'\nimport { InfoOutlined } from '@mui/icons-material'\n\nconst experimentalModeText =\n  'This mode gives you early access to features that are still in development. Please note that we do not guarantee an absence of errors, and that the data created using these features may be lost during product upgrade.'\n\nconst ExperimentalMode: React.FC = () => {\n  const [isExperimentalModeOn, setIsExperimentalModeOn] =\n    useState<boolean>(false)\n  const cookies = new UniversalCookies()\n  let mounted = true\n\n  useEffect(() => {\n    if (mounted) {\n      if (isInSynapseExperimentalMode()) {\n        setIsExperimentalModeOn(true)\n      }\n    }\n    return () => {\n      mounted = false\n    }\n  }, [])\n\n  const createExperimentalModeCookie = () => {\n    cookies.set(EXPERIMENTAL_MODE_COOKIE, { path: '/' })\n    setIsExperimentalModeOn(true)\n  }\n\n  const deleteExperimentalModeCookie = () => {\n    // cookie.remove requires to re-calculate date obj each time, this is more straightforward\n    document.cookie = `${EXPERIMENTAL_MODE_COOKIE}= ; expires = Thu, 01 Jan 1970 00:00:00 GMT`\n    setIsExperimentalModeOn(false)\n  }\n\n  return (\n    <span className={'experimental-mode-wrapper'}>\n      <Button\n        className={'experimental-mode'}\n        variant=\"text\"\n        onClick={\n          isExperimentalModeOn\n            ? deleteExperimentalModeCookie\n            : createExperimentalModeCookie\n        }\n      >\n        Experimental mode is {isExperimentalModeOn ? 'on' : 'off'}\n      </Button>\n      <Tooltip title={experimentalModeText} arrow placement=\"top\">\n        <IconButton\n          aria-label=\"info\"\n          color=\"inherit\"\n          sx={{ '&:hover': { backgroundColor: 'transparent' } }}\n        >\n          <InfoOutlined sx={{ verticalAlign: 'middle' }} />\n        </IconButton>\n      </Tooltip>\n    </span>\n  )\n}\n\nexport default ExperimentalMode\n"],"names":["experimentalModeText","ExperimentalMode","isExperimentalModeOn","setIsExperimentalModeOn","useState","cookies","UniversalCookies","mounted","useEffect","isInSynapseExperimentalMode","jsxs","Button","EXPERIMENTAL_MODE_COOKIE","jsx","Tooltip","IconButton","InfoOutlined"],"mappings":"unDAQA,MAAAA,EAAA,4NAGAC,EAAA,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEAC,EAAA,IAAAC,EACA,IAAAC,EAAA,GAEAC,OAAAA,EAAAA,UAAA,KACED,GACEE,EAAA,GACEN,EAAA,EAAA,EAGJ,IAAA,CACEI,EAAA,EAAU,GACZ,CAAA,CAAA,EAcFG,EAAA,OAAA,CAAA,UAAA,4BAAA,SAAA,CAEIA,EAAAC,EAAC,CAAA,UAAA,oBACY,QAAA,OACH,QAAAT,EAVd,IAAA,CAEE,SAAA,OAAA,GAAAU,+CACAT,EAAA,EAAA,CAA6B,EAR/B,IAAA,CACEE,EAAA,IAAAO,EAAA,CAAA,KAAA,GAAA,CAAA,EACAT,EAAA,EAAA,CAA4B,EAiBlB,SAAA,CAEP,wBAAAD,EAAA,KAAA,KACqD,CAAA,CAAA,EACtDW,EAAAC,EAAA,CAAA,MAAAd,EAAA,MAAA,GAAA,UAAA,MAAA,SAAAa,EAEEE,EAAC,CAAA,aAAA,OACY,MAAA,UACL,GAAA,CAAA,UAAA,CAAA,gBAAA,aAAA,CAAA,EAC8C,SAAAF,EAAAG,EAAA,CAAA,GAAA,CAAA,cAAA,QAAA,EAAA,CAEL,CAAA,EAAA,CAEnD,CAAA,CAAA,CAGN"}