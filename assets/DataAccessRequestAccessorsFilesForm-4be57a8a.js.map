{"version":3,"file":"DataAccessRequestAccessorsFilesForm-4be57a8a.js","sources":["../../src/components/AccessRequirementList/ManagedACTAccessRequirementRequestFlow/DataAccessRequestAccessorsEditor.tsx","../../src/components/DirectDownloadButton.tsx","../../src/components/AccessRequirementList/ManagedACTAccessRequirementRequestFlow/UploadDocumentField.tsx","../../src/components/AccessRequirementList/ManagedACTAccessRequirementRequestFlow/DocumentTemplate.tsx","../../src/components/AccessRequirementList/ManagedACTAccessRequirementRequestFlow/DataAccessRequestAccessorsFilesForm.tsx"],"sourcesContent":["import React from 'react'\nimport { Form } from 'react-bootstrap'\nimport { Button, Stack, Typography } from '@mui/material'\nimport UserCard from '../../UserCard/UserCard'\nimport {\n  AccessorChange,\n  AccessType,\n  TYPE_FILTER,\n  UserGroupHeader,\n} from '@sage-bionetworks/synapse-types'\nimport IconSvg from '../../IconSvg/IconSvg'\nimport { RadioGroup } from '../../widgets/RadioGroup'\nimport { useGetCurrentUserProfile } from '../../../synapse-queries'\nimport UserSearchBoxV2 from '../../UserSearchBoxV2'\n\nexport type DataAccessRequestAccessorsEditorProps = {\n  /* The current set of accessor changes for a data access request */\n  accessorChanges: AccessorChange[]\n  /* Invoked when the set of accessors is updated */\n  onChange: (updater: (prevValue: AccessorChange[]) => AccessorChange[]) => void\n  /* Whether this request is a renewal */\n  isRenewal: boolean\n  /* Text to show to inform the user about requirements accessors may need to meet */\n  helpText: React.ReactNode\n}\n\n/**\n * Component that handles adding/removing/revoking accessors for a data access request.\n */\nexport default function DataAccessRequestAccessorsEditor(\n  props: DataAccessRequestAccessorsEditorProps,\n) {\n  const { accessorChanges, onChange, isRenewal, helpText } = props\n  const { data: user } = useGetCurrentUserProfile()\n\n  const onSelectUserCallback = (\n    id: string | null,\n    ugh: UserGroupHeader | null,\n  ) => {\n    if (ugh) {\n      onChange(previousValue => {\n        const currentAccessorIds = previousValue.map(ac => ac.userId)\n        // if user is not already in the accessor list (prevent duplicates in accessor list)\n        if (!currentAccessorIds.includes(ugh.ownerId)) {\n          const selectedAccessor: AccessorChange = {\n            userId: ugh.ownerId,\n            type: AccessType.GAIN_ACCESS,\n          }\n          previousValue.push(selectedAccessor)\n        }\n        return previousValue\n      })\n    }\n  }\n\n  const onClearAccessor = (userId: string) => {\n    onChange(previousValue => {\n      return previousValue.filter(item => item.userId !== userId)\n    })\n  }\n\n  // For renewal only\n  const onAccessorAccessTypeChange = (\n    accessType: AccessType,\n    userId: string,\n  ) => {\n    onChange(previousValue => {\n      const indexOfUser = previousValue.findIndex(\n        item => item.userId === userId,\n      )\n      previousValue[indexOfUser].type = accessType\n      return previousValue\n    })\n  }\n\n  return (\n    <>\n      <Form.Group>\n        <Typography variant={'headline3'} sx={{ mt: 4, mb: 2 }}>\n          Data Requesters\n        </Typography>\n        <Typography\n          variant={'body1'}\n          sx={{ mb: 1 }}\n          className={'requester-label'}\n        >\n          {helpText}\n        </Typography>\n        <UserSearchBoxV2\n          inputId={'requesters'}\n          typeFilter={TYPE_FILTER.USERS_ONLY}\n          onChange={onSelectUserCallback}\n          filterPredicate={userGroupHeader =>\n            !accessorChanges\n              .map(ac => ac.userId)\n              .includes(userGroupHeader.ownerId)\n          }\n          value={null}\n        />\n      </Form.Group>\n      <Form.Group>\n        <Stack gap={1}>\n          {accessorChanges.map((ac, i) => {\n            return (\n              <div className={'list-items'} key={`accessor-${i}`}>\n                <UserCard\n                  size={'SMALL USER CARD'}\n                  ownerId={ac.userId}\n                  showAccountLevelIcon={true}\n                  disableLink={true}\n                  showFullName={true}\n                />\n                {\n                  // only display delete button if the user profile is not the current user and has not had access before\n                  user?.ownerId !== ac.userId &&\n                    ac.type === AccessType.GAIN_ACCESS && (\n                      <Button\n                        aria-label={`Remove user`}\n                        variant={'text'}\n                        sx={{\n                          ml: 1,\n                          px: 0,\n                        }}\n                        onClick={() => onClearAccessor(ac.userId)}\n                      >\n                        <IconSvg icon=\"clear\" />\n                      </Button>\n                    )\n                }\n                {\n                  // Renewal/Revoke data access, only display if isRenewal is true\n                  isRenewal &&\n                    user?.ownerId !== ac.userId &&\n                    ac.type !== AccessType.GAIN_ACCESS && (\n                      <>\n                        <RadioGroup\n                          id={`accessor-renewal-${ac.userId}`}\n                          value={ac.type}\n                          options={[\n                            {\n                              label: 'Renew',\n                              value: AccessType.RENEW_ACCESS,\n                            },\n                            {\n                              label: 'Revoke',\n                              value: AccessType.REVOKE_ACCESS,\n                            },\n                          ]}\n                          onChange={(value: string) =>\n                            onAccessorAccessTypeChange(\n                              value as AccessType,\n                              ac.userId,\n                            )\n                          }\n                        ></RadioGroup>\n                      </>\n                    )\n                }\n              </div>\n            )\n          })}\n        </Stack>\n      </Form.Group>\n    </>\n  )\n}\n","import React from 'react'\nimport { Button, ButtonProps } from '@mui/material'\nimport {\n  BatchFileRequest,\n  FileHandleAssociation,\n} from '@sage-bionetworks/synapse-types'\nimport { getFiles } from '../synapse-client/SynapseClient'\nimport { useSynapseContext } from '../utils/context/SynapseContext'\n\nexport type DirectFileDownloadButtonProps = Omit<ButtonProps, 'onClick'> & {\n  fileHandleAssociation: FileHandleAssociation\n  fileName: string | undefined\n}\n\nfunction DirectDownloadButton(props: DirectFileDownloadButtonProps) {\n  const { fileHandleAssociation, fileName, ...buttonProps } = props\n  const { accessToken } = useSynapseContext()\n\n  const getDownloadLink = async () => {\n    if (!fileHandleAssociation.fileHandleId || !accessToken) return\n\n    const batchFileRequest: BatchFileRequest = {\n      requestedFiles: [fileHandleAssociation],\n      includePreSignedURLs: true,\n      includeFileHandles: false,\n      includePreviewPreSignedURLs: false,\n    }\n    try {\n      const file = await getFiles(batchFileRequest, accessToken)\n      const preSignedURL = file.requestedFiles[0].preSignedURL\n      if (!preSignedURL) {\n        console.log('Fail to get file download link')\n      } else {\n        window.open(preSignedURL)\n      }\n    } catch (e) {\n      console.log('Fail to get file download link', e)\n    }\n  }\n\n  return (\n    <Button\n      {...buttonProps}\n      onClick={() => {\n        getDownloadLink()\n      }}\n    >\n      {fileName}\n    </Button>\n  )\n}\n\nexport default DirectDownloadButton\n","import {\n  FileHandleAssociation,\n  UploadCallbackResp,\n} from '@sage-bionetworks/synapse-types'\nimport { useGetFileBatch } from '../../../synapse-queries/file/useFiles'\nimport { Box, Button } from '@mui/material'\nimport FileUpload from '../../FileUpload/FileUpload'\nimport IconSvg from '../../IconSvg/IconSvg'\nimport DirectDownloadButton from '../../DirectDownloadButton'\nimport React from 'react'\n\ntype UploadDocumentFieldProps = {\n  id: string\n  documentName: string\n  uploadCallback: (data: UploadCallbackResp) => void\n  /* The fileHandleAssociations corresponding to an existing upload */\n  fileHandleAssociations?: FileHandleAssociation[]\n  isMultiFileUpload?: boolean\n  onClearAttachment?: (fileHandleId: string) => void\n}\n\nexport function UploadDocumentField(props: UploadDocumentFieldProps) {\n  const {\n    fileHandleAssociations = [],\n    uploadCallback,\n    id,\n    documentName,\n    isMultiFileUpload = false,\n    onClearAttachment,\n  } = props\n  const { data: fileData } = useGetFileBatch(\n    {\n      includeFileHandles: true,\n      includePreSignedURLs: false,\n      includePreviewPreSignedURLs: false,\n      requestedFiles: fileHandleAssociations,\n    },\n    { enabled: fileHandleAssociations.length > 0 },\n  )\n\n  return (\n    <Box\n      id={id}\n      display={'flex'}\n      flexDirection={isMultiFileUpload ? 'column' : 'row'}\n      alignItems={isMultiFileUpload ? 'flex-start' : 'center'}\n      justifyContent={'flex-start'}\n      gap={2}\n      sx={{ my: 2 }}\n    >\n      <FileUpload\n        id={`${id}-upload`}\n        uploadCallback={uploadCallback}\n        label={`Upload ${documentName}`}\n        buttonProps={{\n          variant: 'outlined',\n          endIcon: <IconSvg icon={'upload'} wrap={false} />,\n        }}\n      />\n      {fileHandleAssociations.map((fha, index) => {\n        const fileHandle = fileData?.requestedFiles.find(\n          result => result.fileHandleId === fha.fileHandleId,\n        )?.fileHandle\n        return (\n          <Box key={fha.fileHandleId}>\n            <DirectDownloadButton\n              key={index}\n              id={`${id}-download-${index}`}\n              variant={'text'}\n              endIcon={<IconSvg icon={'download'} wrap={false} />}\n              color={'primary'}\n              fileHandleAssociation={fha}\n              fileName={fileHandle?.fileName}\n              sx={{\n                /* Do not apply text-transform because the text is a raw filename */\n                textTransform: 'none',\n              }}\n            />\n            {onClearAttachment && (\n              <Button\n                className={'clear-x'}\n                variant={'text'}\n                onClick={() => onClearAttachment(fha.fileHandleId)}\n              >\n                <IconSvg icon=\"clear\" />\n              </Button>\n            )}\n          </Box>\n        )\n      })}\n    </Box>\n  )\n}\n","import { Box, Typography } from '@mui/material'\nimport DirectDownloadButton from '../../DirectDownloadButton'\nimport { FileHandleAssociation } from '@sage-bionetworks/synapse-types'\nimport IconSvg from '../../IconSvg/IconSvg'\nimport React from 'react'\nimport { useGetFileBatch } from '../../../synapse-queries/file/useFiles'\n\nexport type DownloadDocumentTemplateProps = {\n  title: React.ReactNode\n  description: React.ReactNode\n  fileHandleAssociation: FileHandleAssociation\n  downloadButtonText: string\n}\n\nexport default function DocumentTemplate(props: DownloadDocumentTemplateProps) {\n  const { title, description, fileHandleAssociation, downloadButtonText } =\n    props\n\n  // get batch of files\n  const { data: fileData } = useGetFileBatch(\n    {\n      requestedFiles: [fileHandleAssociation],\n      includeFileHandles: true,\n      includePreSignedURLs: false,\n      includePreviewPreSignedURLs: false,\n    },\n    {\n      enabled: !!fileHandleAssociation,\n    },\n  )\n\n  const fileName = fileData?.requestedFiles[0]?.fileHandle?.fileName\n\n  return (\n    <>\n      <Typography variant={'headline3'} sx={{ mt: 4, mb: 2 }}>\n        {title}\n      </Typography>\n      <Typography variant={'body1'} sx={{ my: 2 }}>\n        {description}\n      </Typography>\n      <Typography variant={'body1'}>Download this file:</Typography>\n      <Typography variant={'smallText1'} sx={{ my: 0.5 }}>\n        <strong>{fileName}</strong>\n      </Typography>\n      <Box\n        display={'flex'}\n        alignItems={'center'}\n        justifyContent={'flex-start'}\n        gap={2}\n        sx={{ backgroundColor: 'tertiary.100', p: 2.5, my: 2 }}\n      >\n        <DirectDownloadButton\n          variant={'outlined'}\n          fileHandleAssociation={fileHandleAssociation}\n          fileName={downloadButtonText}\n          endIcon={<IconSvg icon={'download'} wrap={false} />}\n          sx={{ whiteSpace: 'nowrap', flexShrink: 0 }}\n        />\n        <Typography variant={'body1'}>\n          You must fill out and upload this exact version of the template.{' '}\n          <strong>No other versions will be accepted.</strong>\n        </Typography>\n      </Box>\n    </>\n  )\n}\n","import React from 'react'\nimport { useState } from 'react'\nimport {\n  AccessorChange,\n  AccessType,\n  FileHandleAssociateType,\n  FileHandleAssociation,\n  FileUploadComplete,\n  ManagedACTAccessRequirement,\n  Renewal,\n  Request,\n  RestrictableObjectType,\n  UploadCallbackResp,\n} from '@sage-bionetworks/synapse-types'\nimport IconSvg from '../../IconSvg/IconSvg'\nimport {\n  Alert,\n  AlertProps as MuiAlertProps,\n  Box,\n  Button,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Link,\n  Stack,\n  Typography,\n} from '@mui/material'\nimport {\n  useGetCurrentUserProfile,\n  useGetDataAccessRequestForUpdate,\n  useSubmitDataAccessRequest,\n  useUpdateDataAccessRequest,\n} from '../../../synapse-queries'\nimport { SynapseClientError } from '../../../utils/SynapseClientError'\nimport TextField from '../../TextField/TextField'\nimport DataAccessRequestAccessorsEditor, {\n  DataAccessRequestAccessorsEditorProps,\n} from './DataAccessRequestAccessorsEditor'\nimport { UploadDocumentField } from './UploadDocumentField'\nimport DocumentTemplate from './DocumentTemplate'\n\nexport type DataAccessRequestAccessorsFilesFormProps = {\n  /**\n   * The ID of the entity of interest. This corresponds to the subjectId of the {@link CreateSubmissionRequest}\n   */\n  entityId: string\n  /* The access requirement to which the user is requesting access */\n  managedACTAccessRequirement: ManagedACTAccessRequirement\n  onSubmissionCreated: () => void\n  researchProjectId: string\n  onHide: () => void\n  /* Callback invoked when the user clicks cancel. The unsaved, modified dataAccessRequest is returned so the calling component may prompt the user to save this data */\n  onCancel: (modifiedDataAccessRequest: Request | Renewal) => void\n}\n\nexport type AlertProps = {\n  key: MuiAlertProps['severity']\n  message: string | JSX.Element\n}\n\n/**\n * Step 2 of the Data Access Request/Renewal flow prompts the user to\n * - Manage the list of accessors, i.e. Synapse users who will gain, renew, or lose access\n * - Download and upload documents required by the Access Requirement\n * - If a renewal, provide publications and a summary of use statement.\n *\n * The component expects a researchProjectId, which should reference complete researchProject created in Step 1.\n * The user may click a \"Submit\" button, which will save the request and issue a data access submission that references\n * the requestId created/updated in this component.\n */\nexport default function DataAccessRequestAccessorsFilesForm(\n  props: DataAccessRequestAccessorsFilesFormProps,\n) {\n  const {\n    onSubmissionCreated,\n    managedACTAccessRequirement,\n    entityId,\n    researchProjectId,\n    onCancel,\n  } = props\n  const { data: user } = useGetCurrentUserProfile()\n  const [alert, setAlert] = useState<AlertProps | undefined>()\n  const [dataAccessRequest, setDataAccessRequest] = useState<\n    Request | Renewal | undefined\n  >()\n\n  useGetDataAccessRequestForUpdate(String(managedACTAccessRequirement.id), {\n    // We append the current user onto the accessorChanges, so we wait for that data to populate\n    enabled: !!user,\n    // Infinite staleTime ensures this won't get re-fetched unless explicitly invalidated by the mutation\n    staleTime: Infinity,\n    select: data => {\n      const isRenewal =\n        data.concreteType ===\n        'org.sagebionetworks.repo.model.dataaccess.Renewal'\n      // Add the current user with GAIN_ACCESS to the list of accessors\n      const currentUserWithGainAccess: AccessorChange = {\n        userId: user!.ownerId,\n        type: isRenewal ? AccessType.RENEW_ACCESS : AccessType.GAIN_ACCESS,\n      }\n      if (!data.accessorChanges) {\n        data.accessorChanges = [currentUserWithGainAccess]\n      } else {\n        data.accessorChanges = [\n          currentUserWithGainAccess,\n          ...data.accessorChanges,\n        ]\n      }\n\n      // SWC-5765: Filter out duplicate accessors\n      const seen = new Set()\n      data.accessorChanges = data.accessorChanges.filter(accessorChange => {\n        return seen.has(accessorChange.userId)\n          ? false\n          : seen.add(accessorChange.userId)\n      })\n\n      // Attach the researchProjectId to the request\n      data.researchProjectId = researchProjectId\n      return data\n    },\n    onSuccess: data => {\n      setAlert(undefined)\n      setDataAccessRequest(data)\n    },\n    onError: err => {\n      setAlert({\n        key: 'error',\n        message: err.reason,\n      })\n    },\n  })\n\n  const isRenewal =\n    dataAccessRequest?.concreteType ===\n    'org.sagebionetworks.repo.model.dataaccess.Renewal'\n\n  function onError(e: SynapseClientError) {\n    console.log('RequestDataAccessStep2: Error updating form', e)\n    setAlert({\n      key: 'error',\n      message: getErrorMessage(e.reason),\n    })\n  }\n\n  const { mutate: submit } = useSubmitDataAccessRequest({\n    onSuccess: () => {\n      onSubmissionCreated()\n    },\n    onError: onError,\n  })\n\n  const { mutateAsync: updateRequestAsync } = useUpdateDataAccessRequest({\n    onError: onError,\n  })\n\n  async function handleSubmit() {\n    if (dataAccessRequest) {\n      // Save the request\n      const requestObject = await updateRequestAsync(dataAccessRequest)\n      // Create a submission and attach the request\n      submit({\n        request: {\n          requestId: requestObject.id,\n          requestEtag: requestObject.etag,\n          subjectId: entityId,\n          subjectType: RestrictableObjectType.ENTITY,\n        },\n        accessRequirementId: String(managedACTAccessRequirement.id),\n      })\n    }\n  }\n\n  const getErrorMessage = (reason: string = '') => {\n    return (\n      <>\n        <strong>Sorry, there is an error in submitting your request.</strong>\n        <br />\n        {reason}\n      </>\n    )\n  }\n\n  const onAccessorChange: DataAccessRequestAccessorsEditorProps['onChange'] =\n    updater => {\n      setDataAccessRequest(req => ({\n        ...req!,\n        // Copy the array so the caller doesn't have to worry about immutability\n        accessorChanges: [...updater(req!.accessorChanges || [])],\n      }))\n    }\n\n  const onClearAttachment = (fid: string) => {\n    setDataAccessRequest(req => {\n      if (req) {\n        return {\n          ...req,\n          attachments: req.attachments?.filter(item => item !== fid),\n        }\n      }\n      return req\n    })\n  }\n\n  const uploadCallback = (\n    data: UploadCallbackResp,\n    context: keyof Pick<\n      Request,\n      'attachments' | 'irbFileHandleId' | 'ducFileHandleId'\n    >,\n  ) => {\n    if (data.resp && data.success) {\n      const uploadResponse: FileUploadComplete = data.resp\n      if (context === 'attachments') {\n        setDataAccessRequest(req => {\n          return {\n            ...req!,\n            attachments: [\n              ...(req!.attachments || []),\n              uploadResponse.fileHandleId,\n            ],\n          }\n        })\n      } else {\n        setDataAccessRequest(req => ({\n          ...req!,\n          [context]: uploadResponse.fileHandleId,\n        }))\n      }\n    } else if (!data.success && data.error) {\n      // show the error\n      console.log(\n        'RequestDataAccessStep2: Error uploading the file',\n        data.error,\n      )\n      setAlert({\n        key: 'error',\n        message: getErrorMessage(data.error.reason),\n      })\n    }\n  }\n\n  const handleTextAreaInputChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement>,\n    key: keyof Pick<Renewal, 'publication' | 'summaryOfUse'>,\n  ) => {\n    const value = e.target.value\n    setDataAccessRequest(req => ({\n      ...(req as Renewal),\n      [key]: value,\n    }))\n  }\n\n  const AccessorRequirementHelpText = () => {\n    let link: string = ''\n    let msg: string = ''\n\n    if (\n      managedACTAccessRequirement.isCertifiedUserRequired &&\n      managedACTAccessRequirement.isValidatedProfileRequired\n    ) {\n      link = 'https://help.synapse.org/docs/User-Types.2007072795.html'\n      msg =\n        'All data requesters must be certified users and have a validated user profile.'\n    } else if (managedACTAccessRequirement.isCertifiedUserRequired) {\n      link =\n        'https://help.synapse.org/docs/User-Types.2007072795.html#UserAccountTiers-CertifiedUsers'\n      msg = 'All data requesters must be a certified user.'\n    } else if (managedACTAccessRequirement.isValidatedProfileRequired) {\n      link =\n        'https://help.synapse.org/docs/User-Types.2007072795.html#UserAccountTiers-ValidatedUsers'\n      msg = 'All data requesters must have a validated user profile.'\n    }\n    return link && msg ? (\n      <>\n        {managedACTAccessRequirement.isDUCRequired ? (\n          <>\n            This list should match those listed on your DUC.\n            <br />\n          </>\n        ) : (\n          ''\n        )}\n        {msg}{' '}\n        <Link href={link} target={'_blank'} rel={'noreferrer'}>\n          Learn more\n        </Link>\n      </>\n    ) : (\n      <></>\n    )\n  }\n\n  const ducFileHandleAssociation: FileHandleAssociation[] =\n    dataAccessRequest?.ducFileHandleId\n      ? [\n          {\n            fileHandleId: dataAccessRequest?.ducFileHandleId,\n            associateObjectType:\n              FileHandleAssociateType.AccessRequirementAttachment,\n            associateObjectId: String(managedACTAccessRequirement.id),\n          },\n        ]\n      : []\n  const irbFileHandleAssociation: FileHandleAssociation[] =\n    dataAccessRequest?.irbFileHandleId\n      ? [\n          {\n            fileHandleId: dataAccessRequest.irbFileHandleId,\n            associateObjectType:\n              FileHandleAssociateType.AccessRequirementAttachment,\n            associateObjectId: String(managedACTAccessRequirement.id),\n          },\n        ]\n      : []\n\n  const attachmentFileHandleAssociations: FileHandleAssociation[] =\n    (dataAccessRequest?.attachments || []).map(attachmentFileHandleId => ({\n      fileHandleId: attachmentFileHandleId,\n      associateObjectType: FileHandleAssociateType.AccessRequirementAttachment,\n      associateObjectId: String(managedACTAccessRequirement.id),\n    })) ?? []\n\n  return (\n    <>\n      <DialogTitle>\n        <Stack direction=\"row\" alignItems={'center'} gap={'5px'}>\n          Request Access\n          <Box sx={{ flexGrow: 1 }} />\n          <IconButton onClick={props.onHide}>\n            <IconSvg icon={'close'} wrap={false} sx={{ color: 'grey.700' }} />\n          </IconButton>\n        </Stack>\n      </DialogTitle>\n      <DialogContent>\n        <Box\n          component={'form'}\n          sx={{\n            // Must set a minHeight to ensure the user picker in the DataAccessRequestAccessorsEditor doesn't get cut off\n            minHeight: '475px',\n          }}\n          onSubmit={e => e.preventDefault()}\n        >\n          <Typography variant={'body1'} sx={{ mb: 2 }}>\n            Please provide the information below to submit the request for\n            access.\n          </Typography>\n\n          {dataAccessRequest && (\n            <DataAccessRequestAccessorsEditor\n              accessorChanges={dataAccessRequest.accessorChanges || []}\n              onChange={onAccessorChange}\n              isRenewal={isRenewal}\n              helpText={<AccessorRequirementHelpText />}\n            />\n          )}\n\n          {(managedACTAccessRequirement?.isDUCRequired ||\n            managedACTAccessRequirement?.isIRBApprovalRequired ||\n            managedACTAccessRequirement?.areOtherAttachmentsRequired ||\n            isRenewal) && <Divider sx={{ my: 4 }} />}\n          {/* DUC */}\n          {managedACTAccessRequirement?.isDUCRequired && (\n            <>\n              {managedACTAccessRequirement?.ducTemplateFileHandleId && (\n                <DocumentTemplate\n                  title={'Download DUC Template'}\n                  description={\n                    'As a first step, you will need to download the most current version of the Data Use Certificate.'\n                  }\n                  fileHandleAssociation={{\n                    fileHandleId:\n                      managedACTAccessRequirement.ducTemplateFileHandleId,\n                    associateObjectType:\n                      FileHandleAssociateType.AccessRequirementAttachment,\n                    associateObjectId: String(managedACTAccessRequirement.id),\n                  }}\n                  downloadButtonText={'Download DUC Template'}\n                />\n              )}\n              <Typography variant={'headline3'} sx={{ mt: 4, mb: 2 }}>\n                Fill out and upload a Data Use Certificate\n              </Typography>\n              <Typography variant={'body1'} sx={{ my: 2 }}>\n                You must download and fill out a Data Use Certificate (DUC). Be\n                sure to upload the completed DUC below once you&apos;ve\n                completed it.\n              </Typography>\n              <Typography variant={'body1'} component={'ol'}>\n                <li>Download the DUC template file.</li>\n                <li>\n                  Fill out the DUC template, following the instructions in the\n                  file.\n                </li>\n                <li>\n                  Upload the completed certificate using the button below:\n                </li>\n              </Typography>\n              <UploadDocumentField\n                id={'duc'}\n                uploadCallback={resp => uploadCallback(resp, 'ducFileHandleId')}\n                documentName={'Data Use Certificate'}\n                fileHandleAssociations={ducFileHandleAssociation}\n              />\n              {(managedACTAccessRequirement?.isIRBApprovalRequired ||\n                managedACTAccessRequirement?.areOtherAttachmentsRequired ||\n                isRenewal) && <Divider sx={{ my: 4 }} />}\n            </>\n          )}\n\n          {/* IRB */}\n          {managedACTAccessRequirement?.isIRBApprovalRequired && (\n            <>\n              <Typography variant={'headline3'} sx={{ my: 2 }}>\n                IRB Approval\n              </Typography>\n              <Typography variant={'body1'} sx={{ my: 2 }}>\n                Upload a signed IRB letter on institutional letterhead. The\n                letter must include the names of all the datasets requested, as\n                well as the names of the data requesters above. Use the button\n                below to upload the document.\n              </Typography>\n              <UploadDocumentField\n                id={'irb'}\n                documentName={'IRB Approval Letter'}\n                uploadCallback={resp => uploadCallback(resp, 'irbFileHandleId')}\n                fileHandleAssociations={irbFileHandleAssociation}\n              />\n\n              {(managedACTAccessRequirement?.areOtherAttachmentsRequired ||\n                isRenewal) && <Divider sx={{ my: 4 }} />}\n            </>\n          )}\n\n          {\n            /* Attachments */\n            managedACTAccessRequirement?.areOtherAttachmentsRequired && (\n              <>\n                <Typography variant={'headline3'} sx={{ my: 2 }}>\n                  Upload other required documents\n                </Typography>\n                <Typography variant={'body1'} sx={{ my: 2 }}>\n                  You must upload other required documents. Please review the\n                  instructions to gain data access to determine which documents\n                  must also be uploaded.\n                </Typography>\n                <UploadDocumentField\n                  id={'file-attachment'}\n                  documentName={'Attachment'}\n                  uploadCallback={res => uploadCallback(res, 'attachments')}\n                  isMultiFileUpload={true}\n                  fileHandleAssociations={attachmentFileHandleAssociations}\n                  onClearAttachment={onClearAttachment}\n                />\n\n                {isRenewal && <Divider sx={{ my: 4 }} />}\n              </>\n            )\n          }\n\n          {\n            // Publications & Summary of Use\n            isRenewal && (\n              <>\n                <TextField\n                  id={'publications'}\n                  label={'Publication(s)'}\n                  multiline\n                  rows={3}\n                  value={dataAccessRequest?.publication}\n                  onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                    handleTextAreaInputChange(e, 'publication')\n                  }\n                />\n                <TextField\n                  id={'summaryOfUse'}\n                  label={'Summary of use'}\n                  value={dataAccessRequest?.summaryOfUse}\n                  multiline\n                  rows={3}\n                  onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                    handleTextAreaInputChange(e, 'summaryOfUse')\n                  }\n                />\n              </>\n            )\n          }\n\n          {\n            /* Alert message */\n            alert && <Alert severity={alert.key}>{alert.message}</Alert>\n          }\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        {\n          <>\n            <Button\n              variant=\"outlined\"\n              onClick={() => {\n                if (dataAccessRequest) {\n                  onCancel(dataAccessRequest)\n                }\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                handleSubmit()\n              }}\n            >\n              Submit\n            </Button>\n          </>\n        }\n      </DialogActions>\n    </>\n  )\n}\n"],"names":["DataAccessRequestAccessorsEditor","props","accessorChanges","onChange","isRenewal","helpText","user","useGetCurrentUserProfile","onSelectUserCallback","id","ugh","previousValue","ac","selectedAccessor","AccessType","onClearAccessor","userId","item","onAccessorAccessTypeChange","accessType","indexOfUser","jsxs","Fragment","Form","jsx","Typography","UserSearchBoxV2","TYPE_FILTER","userGroupHeader","Stack","i","UserCard","Button","IconSvg","RadioGroup","value","DirectDownloadButton","fileHandleAssociation","fileName","buttonProps","accessToken","useSynapseContext","getDownloadLink","batchFileRequest","preSignedURL","getFiles","e","UploadDocumentField","fileHandleAssociations","uploadCallback","documentName","isMultiFileUpload","onClearAttachment","fileData","useGetFileBatch","Box","FileUpload","fha","index","fileHandle","_a","result","DocumentTemplate","title","description","downloadButtonText","_b","DataAccessRequestAccessorsFilesForm","onSubmissionCreated","managedACTAccessRequirement","entityId","researchProjectId","onCancel","alert","setAlert","useState","dataAccessRequest","setDataAccessRequest","useGetDataAccessRequestForUpdate","data","isRenewal2","currentUserWithGainAccess","seen","accessorChange","err","onError","getErrorMessage","submit","useSubmitDataAccessRequest","updateRequestAsync","useUpdateDataAccessRequest","handleSubmit","requestObject","RestrictableObjectType","reason","onAccessorChange","updater","req","fid","context","uploadResponse","handleTextAreaInputChange","key","AccessorRequirementHelpText","link","msg","Link","ducFileHandleAssociation","FileHandleAssociateType","irbFileHandleAssociation","attachmentFileHandleAssociations","attachmentFileHandleId","DialogTitle","IconButton","DialogContent","Divider","resp","res","TextField","Alert","DialogActions"],"mappings":"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"}