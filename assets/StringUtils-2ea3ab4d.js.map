{"version":3,"file":"StringUtils-2ea3ab4d.js","sources":["../../src/utils/functions/StringUtils.ts"],"sourcesContent":["/**\n * Truncates a string to be a specified length, then optionally append a suffix.\n */\nexport function truncateString(str: string, maxLength: number, suffix = 'â€¦') {\n  if (str.length <= maxLength) {\n    return str\n  }\n  return str.substring(0, maxLength) + suffix\n}\n\nexport function hex2ascii(inputString: string): string {\n  const hex: string = inputString.toString()\n  let str: string = ''\n  for (let n = 0; n < hex.length; n += 2) {\n    str += String.fromCharCode(parseInt(hex.substring(n, n + 2), 16))\n  }\n  return str\n}\n\n/**\n * Returns a hash code from a string. Uses Java's String.hashCode() algorithm: https://devdocs.io/openjdk~8/java/lang/string#hashCode--\n * @param  {String} str The string to hash.\n * @return {Number}    A 32bit integer\n * @see https://stackoverflow.com/a/8831937\n */\nexport function hashCode(str?: string | null) {\n  if (str == null) {\n    str = ''\n  }\n  let hash = 0\n  for (let i = 0, len = str.length; i < len; i++) {\n    const chr = str.charCodeAt(i)\n    hash = (hash << 5) - hash + chr\n    hash |= 0 // Convert to 32bit integer\n  }\n  return hash\n}\n"],"names":["truncateString","str","maxLength","suffix","hashCode","hash","i","len","chr"],"mappings":"AAGO,SAASA,EAAeC,EAAaC,EAAmBC,EAAS,IAAK,CACvE,OAAAF,EAAI,QAAUC,EACTD,EAEFA,EAAI,UAAU,EAAGC,CAAS,EAAIC,CACvC,CAiBO,SAASC,EAASH,EAAqB,CACxCA,GAAO,OACHA,EAAA,IAER,IAAII,EAAO,EACX,QAASC,EAAI,EAAGC,EAAMN,EAAI,OAAQK,EAAIC,EAAKD,IAAK,CACxC,MAAAE,EAAMP,EAAI,WAAWK,CAAC,EACpBD,GAAAA,GAAQ,GAAKA,EAAOG,EACpBH,GAAA,CACV,CACO,OAAAA,CACT"}